"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/fuzzysort/fuzzysort.js
  var require_fuzzysort = __commonJS({
    "node_modules/fuzzysort/fuzzysort.js"(exports, module) {
      ((root, UMD) => {
        if (typeof define === "function" && define.amd) define([], UMD);
        else if (typeof module === "object" && module.exports) module.exports = UMD();
        else root["fuzzysort"] = UMD();
      })(exports, (_2) => {
        "use strict";
        var single = (search, target) => {
          if (!search || !target) return NULL;
          var preparedSearch = getPreparedSearch(search);
          if (!isPrepared(target)) target = getPrepared(target);
          var searchBitflags = preparedSearch.bitflags;
          if ((searchBitflags & target._bitflags) !== searchBitflags) return NULL;
          return algorithm(preparedSearch, target);
        };
        var go = (search, targets, options) => {
          if (!search) return options?.all ? all(targets, options) : noResults;
          var preparedSearch = getPreparedSearch(search);
          var searchBitflags = preparedSearch.bitflags;
          var containsSpace = preparedSearch.containsSpace;
          var threshold = denormalizeScore(options?.threshold || 0);
          var limit = options?.limit || INFINITY;
          var resultsLen = 0;
          var limitedCount = 0;
          var targetsLen = targets.length;
          function push_result(result2) {
            if (resultsLen < limit) {
              q.add(result2);
              ++resultsLen;
            } else {
              ++limitedCount;
              if (result2._score > q.peek()._score) q.replaceTop(result2);
            }
          }
          if (options?.key) {
            var key = options.key;
            for (var i3 = 0; i3 < targetsLen; ++i3) {
              var obj = targets[i3];
              var target = getValue(obj, key);
              if (!target) continue;
              if (!isPrepared(target)) target = getPrepared(target);
              if ((searchBitflags & target._bitflags) !== searchBitflags) continue;
              var result = algorithm(preparedSearch, target);
              if (result === NULL) continue;
              if (result._score < threshold) continue;
              result.obj = obj;
              push_result(result);
            }
          } else if (options?.keys) {
            var keys = options.keys;
            var keysLen = keys.length;
            outer: for (var i3 = 0; i3 < targetsLen; ++i3) {
              var obj = targets[i3];
              {
                var keysBitflags = 0;
                for (var keyI = 0; keyI < keysLen; ++keyI) {
                  var key = keys[keyI];
                  var target = getValue(obj, key);
                  if (!target) {
                    tmpTargets[keyI] = noTarget;
                    continue;
                  }
                  if (!isPrepared(target)) target = getPrepared(target);
                  tmpTargets[keyI] = target;
                  keysBitflags |= target._bitflags;
                }
                if ((searchBitflags & keysBitflags) !== searchBitflags) continue;
              }
              if (containsSpace) for (let i4 = 0; i4 < preparedSearch.spaceSearches.length; i4++) keysSpacesBestScores[i4] = NEGATIVE_INFINITY;
              for (var keyI = 0; keyI < keysLen; ++keyI) {
                target = tmpTargets[keyI];
                if (target === noTarget) {
                  tmpResults[keyI] = noTarget;
                  continue;
                }
                tmpResults[keyI] = algorithm(
                  preparedSearch,
                  target,
                  /*allowSpaces=*/
                  false,
                  /*allowPartialMatch=*/
                  containsSpace
                );
                if (tmpResults[keyI] === NULL) {
                  tmpResults[keyI] = noTarget;
                  continue;
                }
                if (containsSpace) for (let i4 = 0; i4 < preparedSearch.spaceSearches.length; i4++) {
                  if (allowPartialMatchScores[i4] > -1e3) {
                    if (keysSpacesBestScores[i4] > NEGATIVE_INFINITY) {
                      var tmp = (keysSpacesBestScores[i4] + allowPartialMatchScores[i4]) / 4;
                      if (tmp > keysSpacesBestScores[i4]) keysSpacesBestScores[i4] = tmp;
                    }
                  }
                  if (allowPartialMatchScores[i4] > keysSpacesBestScores[i4]) keysSpacesBestScores[i4] = allowPartialMatchScores[i4];
                }
              }
              if (containsSpace) {
                for (let i4 = 0; i4 < preparedSearch.spaceSearches.length; i4++) {
                  if (keysSpacesBestScores[i4] === NEGATIVE_INFINITY) continue outer;
                }
              } else {
                var hasAtLeast1Match = false;
                for (let i4 = 0; i4 < keysLen; i4++) {
                  if (tmpResults[i4]._score !== NEGATIVE_INFINITY) {
                    hasAtLeast1Match = true;
                    break;
                  }
                }
                if (!hasAtLeast1Match) continue;
              }
              var objResults = new KeysResult(keysLen);
              for (let i4 = 0; i4 < keysLen; i4++) {
                objResults[i4] = tmpResults[i4];
              }
              if (containsSpace) {
                var score = 0;
                for (let i4 = 0; i4 < preparedSearch.spaceSearches.length; i4++) score += keysSpacesBestScores[i4];
              } else {
                var score = NEGATIVE_INFINITY;
                for (let i4 = 0; i4 < keysLen; i4++) {
                  var result = objResults[i4];
                  if (result._score > -1e3) {
                    if (score > NEGATIVE_INFINITY) {
                      var tmp = (score + result._score) / 4;
                      if (tmp > score) score = tmp;
                    }
                  }
                  if (result._score > score) score = result._score;
                }
              }
              objResults.obj = obj;
              objResults._score = score;
              if (options?.scoreFn) {
                score = options.scoreFn(objResults);
                if (!score) continue;
                score = denormalizeScore(score);
                objResults._score = score;
              }
              if (score < threshold) continue;
              push_result(objResults);
            }
          } else {
            for (var i3 = 0; i3 < targetsLen; ++i3) {
              var target = targets[i3];
              if (!target) continue;
              if (!isPrepared(target)) target = getPrepared(target);
              if ((searchBitflags & target._bitflags) !== searchBitflags) continue;
              var result = algorithm(preparedSearch, target);
              if (result === NULL) continue;
              if (result._score < threshold) continue;
              push_result(result);
            }
          }
          if (resultsLen === 0) return noResults;
          var results = new Array(resultsLen);
          for (var i3 = resultsLen - 1; i3 >= 0; --i3) results[i3] = q.poll();
          results.total = resultsLen + limitedCount;
          return results;
        };
        var highlight2 = (result, open = "<b>", close = "</b>") => {
          var callback = typeof open === "function" ? open : void 0;
          var target = result.target;
          var targetLen = target.length;
          var indexes = result.indexes;
          var highlighted = "";
          var matchI = 0;
          var indexesI = 0;
          var opened = false;
          var parts2 = [];
          for (var i3 = 0; i3 < targetLen; ++i3) {
            var char = target[i3];
            if (indexes[indexesI] === i3) {
              ++indexesI;
              if (!opened) {
                opened = true;
                if (callback) {
                  parts2.push(highlighted);
                  highlighted = "";
                } else {
                  highlighted += open;
                }
              }
              if (indexesI === indexes.length) {
                if (callback) {
                  highlighted += char;
                  parts2.push(callback(highlighted, matchI++));
                  highlighted = "";
                  parts2.push(target.substr(i3 + 1));
                } else {
                  highlighted += char + close + target.substr(i3 + 1);
                }
                break;
              }
            } else {
              if (opened) {
                opened = false;
                if (callback) {
                  parts2.push(callback(highlighted, matchI++));
                  highlighted = "";
                } else {
                  highlighted += close;
                }
              }
            }
            highlighted += char;
          }
          return callback ? parts2 : highlighted;
        };
        var prepare = (target) => {
          if (typeof target === "number") target = "" + target;
          else if (typeof target !== "string") target = "";
          var info = prepareLowerInfo(target);
          return new_result(target, { _targetLower: info._lower, _targetLowerCodes: info.lowerCodes, _bitflags: info.bitflags });
        };
        var cleanup = () => {
          preparedCache.clear();
          preparedSearchCache.clear();
        };
        class Result28 {
          get ["indexes"]() {
            return this._indexes.slice(0, this._indexes.len).sort((a2, b2) => a2 - b2);
          }
          set ["indexes"](indexes) {
            return this._indexes = indexes;
          }
          ["highlight"](open, close) {
            return highlight2(this, open, close);
          }
          get ["score"]() {
            return normalizeScore(this._score);
          }
          set ["score"](score) {
            this._score = denormalizeScore(score);
          }
        }
        class KeysResult extends Array {
          get ["score"]() {
            return normalizeScore(this._score);
          }
          set ["score"](score) {
            this._score = denormalizeScore(score);
          }
        }
        var new_result = (target, options) => {
          const result = new Result28();
          result["target"] = target;
          result["obj"] = options.obj ?? NULL;
          result._score = options._score ?? NEGATIVE_INFINITY;
          result._indexes = options._indexes ?? [];
          result._targetLower = options._targetLower ?? "";
          result._targetLowerCodes = options._targetLowerCodes ?? NULL;
          result._nextBeginningIndexes = options._nextBeginningIndexes ?? NULL;
          result._bitflags = options._bitflags ?? 0;
          return result;
        };
        var normalizeScore = (score) => {
          if (score === NEGATIVE_INFINITY) return 0;
          if (score > 1) return score;
          return Math.E ** (((-score + 1) ** 0.04307 - 1) * -2);
        };
        var denormalizeScore = (normalizedScore) => {
          if (normalizedScore === 0) return NEGATIVE_INFINITY;
          if (normalizedScore > 1) return normalizedScore;
          return 1 - Math.pow(Math.log(normalizedScore) / -2 + 1, 1 / 0.04307);
        };
        var prepareSearch = (search) => {
          if (typeof search === "number") search = "" + search;
          else if (typeof search !== "string") search = "";
          search = search.trim();
          var info = prepareLowerInfo(search);
          var spaceSearches = [];
          if (info.containsSpace) {
            var searches = search.split(/\s+/);
            searches = [...new Set(searches)];
            for (var i3 = 0; i3 < searches.length; i3++) {
              if (searches[i3] === "") continue;
              var _info = prepareLowerInfo(searches[i3]);
              spaceSearches.push({ lowerCodes: _info.lowerCodes, _lower: searches[i3].toLowerCase(), containsSpace: false });
            }
          }
          return { lowerCodes: info.lowerCodes, _lower: info._lower, containsSpace: info.containsSpace, bitflags: info.bitflags, spaceSearches };
        };
        var getPrepared = (target) => {
          if (target.length > 999) return prepare(target);
          var targetPrepared = preparedCache.get(target);
          if (targetPrepared !== void 0) return targetPrepared;
          targetPrepared = prepare(target);
          preparedCache.set(target, targetPrepared);
          return targetPrepared;
        };
        var getPreparedSearch = (search) => {
          if (search.length > 999) return prepareSearch(search);
          var searchPrepared = preparedSearchCache.get(search);
          if (searchPrepared !== void 0) return searchPrepared;
          searchPrepared = prepareSearch(search);
          preparedSearchCache.set(search, searchPrepared);
          return searchPrepared;
        };
        var all = (targets, options) => {
          var results = [];
          results.total = targets.length;
          var limit = options?.limit || INFINITY;
          if (options?.key) {
            for (var i3 = 0; i3 < targets.length; i3++) {
              var obj = targets[i3];
              var target = getValue(obj, options.key);
              if (target == NULL) continue;
              if (!isPrepared(target)) target = getPrepared(target);
              var result = new_result(target.target, { _score: target._score, obj });
              results.push(result);
              if (results.length >= limit) return results;
            }
          } else if (options?.keys) {
            for (var i3 = 0; i3 < targets.length; i3++) {
              var obj = targets[i3];
              var objResults = new KeysResult(options.keys.length);
              for (var keyI = options.keys.length - 1; keyI >= 0; --keyI) {
                var target = getValue(obj, options.keys[keyI]);
                if (!target) {
                  objResults[keyI] = noTarget;
                  continue;
                }
                if (!isPrepared(target)) target = getPrepared(target);
                target._score = NEGATIVE_INFINITY;
                target._indexes.len = 0;
                objResults[keyI] = target;
              }
              objResults.obj = obj;
              objResults._score = NEGATIVE_INFINITY;
              results.push(objResults);
              if (results.length >= limit) return results;
            }
          } else {
            for (var i3 = 0; i3 < targets.length; i3++) {
              var target = targets[i3];
              if (target == NULL) continue;
              if (!isPrepared(target)) target = getPrepared(target);
              target._score = NEGATIVE_INFINITY;
              target._indexes.len = 0;
              results.push(target);
              if (results.length >= limit) return results;
            }
          }
          return results;
        };
        var algorithm = (preparedSearch, prepared, allowSpaces = false, allowPartialMatch = false) => {
          if (allowSpaces === false && preparedSearch.containsSpace) return algorithmSpaces(preparedSearch, prepared, allowPartialMatch);
          var searchLower = preparedSearch._lower;
          var searchLowerCodes = preparedSearch.lowerCodes;
          var searchLowerCode = searchLowerCodes[0];
          var targetLowerCodes = prepared._targetLowerCodes;
          var searchLen = searchLowerCodes.length;
          var targetLen = targetLowerCodes.length;
          var searchI = 0;
          var targetI = 0;
          var matchesSimpleLen = 0;
          for (; ; ) {
            var isMatch = searchLowerCode === targetLowerCodes[targetI];
            if (isMatch) {
              matchesSimple[matchesSimpleLen++] = targetI;
              ++searchI;
              if (searchI === searchLen) break;
              searchLowerCode = searchLowerCodes[searchI];
            }
            ++targetI;
            if (targetI >= targetLen) return NULL;
          }
          var searchI = 0;
          var successStrict = false;
          var matchesStrictLen = 0;
          var nextBeginningIndexes = prepared._nextBeginningIndexes;
          if (nextBeginningIndexes === NULL) nextBeginningIndexes = prepared._nextBeginningIndexes = prepareNextBeginningIndexes(prepared.target);
          targetI = matchesSimple[0] === 0 ? 0 : nextBeginningIndexes[matchesSimple[0] - 1];
          var backtrackCount = 0;
          if (targetI !== targetLen) for (; ; ) {
            if (targetI >= targetLen) {
              if (searchI <= 0) break;
              ++backtrackCount;
              if (backtrackCount > 200) break;
              --searchI;
              var lastMatch = matchesStrict[--matchesStrictLen];
              targetI = nextBeginningIndexes[lastMatch];
            } else {
              var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI];
              if (isMatch) {
                matchesStrict[matchesStrictLen++] = targetI;
                ++searchI;
                if (searchI === searchLen) {
                  successStrict = true;
                  break;
                }
                ++targetI;
              } else {
                targetI = nextBeginningIndexes[targetI];
              }
            }
          }
          var substringIndex = searchLen <= 1 ? -1 : prepared._targetLower.indexOf(searchLower, matchesSimple[0]);
          var isSubstring = !!~substringIndex;
          var isSubstringBeginning = !isSubstring ? false : substringIndex === 0 || prepared._nextBeginningIndexes[substringIndex - 1] === substringIndex;
          if (isSubstring && !isSubstringBeginning) {
            for (var i3 = 0; i3 < nextBeginningIndexes.length; i3 = nextBeginningIndexes[i3]) {
              if (i3 <= substringIndex) continue;
              for (var s2 = 0; s2 < searchLen; s2++) if (searchLowerCodes[s2] !== prepared._targetLowerCodes[i3 + s2]) break;
              if (s2 === searchLen) {
                substringIndex = i3;
                isSubstringBeginning = true;
                break;
              }
            }
          }
          var calculateScore = (matches) => {
            var score2 = 0;
            var extraMatchGroupCount = 0;
            for (var i4 = 1; i4 < searchLen; ++i4) {
              if (matches[i4] - matches[i4 - 1] !== 1) {
                score2 -= matches[i4];
                ++extraMatchGroupCount;
              }
            }
            var unmatchedDistance = matches[searchLen - 1] - matches[0] - (searchLen - 1);
            score2 -= (12 + unmatchedDistance) * extraMatchGroupCount;
            if (matches[0] !== 0) score2 -= matches[0] * matches[0] * 0.2;
            if (!successStrict) {
              score2 *= 1e3;
            } else {
              var uniqueBeginningIndexes = 1;
              for (var i4 = nextBeginningIndexes[0]; i4 < targetLen; i4 = nextBeginningIndexes[i4]) ++uniqueBeginningIndexes;
              if (uniqueBeginningIndexes > 24) score2 *= (uniqueBeginningIndexes - 24) * 10;
            }
            score2 -= (targetLen - searchLen) / 2;
            if (isSubstring) score2 /= 1 + searchLen * searchLen * 1;
            if (isSubstringBeginning) score2 /= 1 + searchLen * searchLen * 1;
            score2 -= (targetLen - searchLen) / 2;
            return score2;
          };
          if (!successStrict) {
            if (isSubstring) for (var i3 = 0; i3 < searchLen; ++i3) matchesSimple[i3] = substringIndex + i3;
            var matchesBest = matchesSimple;
            var score = calculateScore(matchesBest);
          } else {
            if (isSubstringBeginning) {
              for (var i3 = 0; i3 < searchLen; ++i3) matchesSimple[i3] = substringIndex + i3;
              var matchesBest = matchesSimple;
              var score = calculateScore(matchesSimple);
            } else {
              var matchesBest = matchesStrict;
              var score = calculateScore(matchesStrict);
            }
          }
          prepared._score = score;
          for (var i3 = 0; i3 < searchLen; ++i3) prepared._indexes[i3] = matchesBest[i3];
          prepared._indexes.len = searchLen;
          const result = new Result28();
          result.target = prepared.target;
          result._score = prepared._score;
          result._indexes = prepared._indexes;
          return result;
        };
        var algorithmSpaces = (preparedSearch, target, allowPartialMatch) => {
          var seen_indexes = /* @__PURE__ */ new Set();
          var score = 0;
          var result = NULL;
          var first_seen_index_last_search = 0;
          var searches = preparedSearch.spaceSearches;
          var searchesLen = searches.length;
          var changeslen = 0;
          var resetNextBeginningIndexes = () => {
            for (let i4 = changeslen - 1; i4 >= 0; i4--) target._nextBeginningIndexes[nextBeginningIndexesChanges[i4 * 2 + 0]] = nextBeginningIndexesChanges[i4 * 2 + 1];
          };
          var hasAtLeast1Match = false;
          for (var i3 = 0; i3 < searchesLen; ++i3) {
            allowPartialMatchScores[i3] = NEGATIVE_INFINITY;
            var search = searches[i3];
            result = algorithm(search, target);
            if (allowPartialMatch) {
              if (result === NULL) continue;
              hasAtLeast1Match = true;
            } else {
              if (result === NULL) {
                resetNextBeginningIndexes();
                return NULL;
              }
            }
            var isTheLastSearch = i3 === searchesLen - 1;
            if (!isTheLastSearch) {
              var indexes = result._indexes;
              var indexesIsConsecutiveSubstring = true;
              for (let i4 = 0; i4 < indexes.len - 1; i4++) {
                if (indexes[i4 + 1] - indexes[i4] !== 1) {
                  indexesIsConsecutiveSubstring = false;
                  break;
                }
              }
              if (indexesIsConsecutiveSubstring) {
                var newBeginningIndex = indexes[indexes.len - 1] + 1;
                var toReplace = target._nextBeginningIndexes[newBeginningIndex - 1];
                for (let i4 = newBeginningIndex - 1; i4 >= 0; i4--) {
                  if (toReplace !== target._nextBeginningIndexes[i4]) break;
                  target._nextBeginningIndexes[i4] = newBeginningIndex;
                  nextBeginningIndexesChanges[changeslen * 2 + 0] = i4;
                  nextBeginningIndexesChanges[changeslen * 2 + 1] = toReplace;
                  changeslen++;
                }
              }
            }
            score += result._score / searchesLen;
            allowPartialMatchScores[i3] = result._score / searchesLen;
            if (result._indexes[0] < first_seen_index_last_search) {
              score -= (first_seen_index_last_search - result._indexes[0]) * 2;
            }
            first_seen_index_last_search = result._indexes[0];
            for (var j2 = 0; j2 < result._indexes.len; ++j2) seen_indexes.add(result._indexes[j2]);
          }
          if (allowPartialMatch && !hasAtLeast1Match) return NULL;
          resetNextBeginningIndexes();
          var allowSpacesResult = algorithm(
            preparedSearch,
            target,
            /*allowSpaces=*/
            true
          );
          if (allowSpacesResult !== NULL && allowSpacesResult._score > score) {
            if (allowPartialMatch) {
              for (var i3 = 0; i3 < searchesLen; ++i3) {
                allowPartialMatchScores[i3] = allowSpacesResult._score / searchesLen;
              }
            }
            return allowSpacesResult;
          }
          if (allowPartialMatch) result = target;
          result._score = score;
          var i3 = 0;
          for (let index of seen_indexes) result._indexes[i3++] = index;
          result._indexes.len = i3;
          return result;
        };
        var remove_accents = (str) => str.replace(/\p{Script=Latin}+/gu, (match) => match.normalize("NFD")).replace(/[\u0300-\u036f]/g, "");
        var prepareLowerInfo = (str) => {
          str = remove_accents(str);
          var strLen = str.length;
          var lower = str.toLowerCase();
          var lowerCodes = [];
          var bitflags = 0;
          var containsSpace = false;
          for (var i3 = 0; i3 < strLen; ++i3) {
            var lowerCode = lowerCodes[i3] = lower.charCodeAt(i3);
            if (lowerCode === 32) {
              containsSpace = true;
              continue;
            }
            var bit = lowerCode >= 97 && lowerCode <= 122 ? lowerCode - 97 : lowerCode >= 48 && lowerCode <= 57 ? 26 : lowerCode <= 127 ? 30 : 31;
            bitflags |= 1 << bit;
          }
          return { lowerCodes, bitflags, containsSpace, _lower: lower };
        };
        var prepareBeginningIndexes = (target) => {
          var targetLen = target.length;
          var beginningIndexes = [];
          var beginningIndexesLen = 0;
          var wasUpper = false;
          var wasAlphanum = false;
          for (var i3 = 0; i3 < targetLen; ++i3) {
            var targetCode = target.charCodeAt(i3);
            var isUpper = targetCode >= 65 && targetCode <= 90;
            var isAlphanum = isUpper || targetCode >= 97 && targetCode <= 122 || targetCode >= 48 && targetCode <= 57;
            var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum;
            wasUpper = isUpper;
            wasAlphanum = isAlphanum;
            if (isBeginning) beginningIndexes[beginningIndexesLen++] = i3;
          }
          return beginningIndexes;
        };
        var prepareNextBeginningIndexes = (target) => {
          target = remove_accents(target);
          var targetLen = target.length;
          var beginningIndexes = prepareBeginningIndexes(target);
          var nextBeginningIndexes = [];
          var lastIsBeginning = beginningIndexes[0];
          var lastIsBeginningI = 0;
          for (var i3 = 0; i3 < targetLen; ++i3) {
            if (lastIsBeginning > i3) {
              nextBeginningIndexes[i3] = lastIsBeginning;
            } else {
              lastIsBeginning = beginningIndexes[++lastIsBeginningI];
              nextBeginningIndexes[i3] = lastIsBeginning === void 0 ? targetLen : lastIsBeginning;
            }
          }
          return nextBeginningIndexes;
        };
        var preparedCache = /* @__PURE__ */ new Map();
        var preparedSearchCache = /* @__PURE__ */ new Map();
        var matchesSimple = [];
        var matchesStrict = [];
        var nextBeginningIndexesChanges = [];
        var keysSpacesBestScores = [];
        var allowPartialMatchScores = [];
        var tmpTargets = [];
        var tmpResults = [];
        var getValue = (obj, prop) => {
          var tmp = obj[prop];
          if (tmp !== void 0) return tmp;
          if (typeof prop === "function") return prop(obj);
          var segs = prop;
          if (!Array.isArray(prop)) segs = prop.split(".");
          var len = segs.length;
          var i3 = -1;
          while (obj && ++i3 < len) obj = obj[segs[i3]];
          return obj;
        };
        var isPrepared = (x2) => {
          return typeof x2 === "object" && typeof x2._bitflags === "number";
        };
        var INFINITY = Infinity;
        var NEGATIVE_INFINITY = -INFINITY;
        var noResults = [];
        noResults.total = 0;
        var NULL = null;
        var noTarget = prepare("");
        var fastpriorityqueue = (r2) => {
          var e3 = [], o2 = 0, a2 = {}, v2 = (r3) => {
            for (var a3 = 0, v3 = e3[a3], c2 = 1; c2 < o2; ) {
              var s2 = c2 + 1;
              a3 = c2, s2 < o2 && e3[s2]._score < e3[c2]._score && (a3 = s2), e3[a3 - 1 >> 1] = e3[a3], c2 = 1 + (a3 << 1);
            }
            for (var f3 = a3 - 1 >> 1; a3 > 0 && v3._score < e3[f3]._score; f3 = (a3 = f3) - 1 >> 1) e3[a3] = e3[f3];
            e3[a3] = v3;
          };
          return a2.add = (r3) => {
            var a3 = o2;
            e3[o2++] = r3;
            for (var v3 = a3 - 1 >> 1; a3 > 0 && r3._score < e3[v3]._score; v3 = (a3 = v3) - 1 >> 1) e3[a3] = e3[v3];
            e3[a3] = r3;
          }, a2.poll = (r3) => {
            if (0 !== o2) {
              var a3 = e3[0];
              return e3[0] = e3[--o2], v2(), a3;
            }
          }, a2.peek = (r3) => {
            if (0 !== o2) return e3[0];
          }, a2.replaceTop = (r3) => {
            e3[0] = r3, v2();
          }, a2;
        };
        var q = fastpriorityqueue();
        return { "single": single, "go": go, "prepare": prepare, "cleanup": cleanup };
      });
    }
  });

  // node_modules/lit-html/lit-html.js
  var t = globalThis;
  var i = t.trustedTypes;
  var s = i ? i.createPolicy("lit-html", { createHTML: (t4) => t4 }) : void 0;
  var e = "$lit$";
  var h = `lit$${Math.random().toFixed(9).slice(2)}$`;
  var o = "?" + h;
  var n = `<${o}>`;
  var r = document;
  var l = () => r.createComment("");
  var c = (t4) => null === t4 || "object" != typeof t4 && "function" != typeof t4;
  var a = Array.isArray;
  var u = (t4) => a(t4) || "function" == typeof t4?.[Symbol.iterator];
  var d = "[ 	\n\f\r]";
  var f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
  var v = /-->/g;
  var _ = />/g;
  var m = RegExp(`>|${d}(?:([^\\s"'>=/]+)(${d}*=${d}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
  var p = /'/g;
  var g = /"/g;
  var $ = /^(?:script|style|textarea|title)$/i;
  var y = (t4) => (i3, ...s2) => ({ _$litType$: t4, strings: i3, values: s2 });
  var x = y(1);
  var b = y(2);
  var w = y(3);
  var T = Symbol.for("lit-noChange");
  var E = Symbol.for("lit-nothing");
  var A = /* @__PURE__ */ new WeakMap();
  var C = r.createTreeWalker(r, 129);
  function P(t4, i3) {
    if (!a(t4) || !t4.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return void 0 !== s ? s.createHTML(i3) : i3;
  }
  var V = (t4, i3) => {
    const s2 = t4.length - 1, o2 = [];
    let r2, l3 = 2 === i3 ? "<svg>" : 3 === i3 ? "<math>" : "", c2 = f;
    for (let i4 = 0; i4 < s2; i4++) {
      const s3 = t4[i4];
      let a2, u3, d2 = -1, y2 = 0;
      for (; y2 < s3.length && (c2.lastIndex = y2, u3 = c2.exec(s3), null !== u3); ) y2 = c2.lastIndex, c2 === f ? "!--" === u3[1] ? c2 = v : void 0 !== u3[1] ? c2 = _ : void 0 !== u3[2] ? ($.test(u3[2]) && (r2 = RegExp("</" + u3[2], "g")), c2 = m) : void 0 !== u3[3] && (c2 = m) : c2 === m ? ">" === u3[0] ? (c2 = r2 ?? f, d2 = -1) : void 0 === u3[1] ? d2 = -2 : (d2 = c2.lastIndex - u3[2].length, a2 = u3[1], c2 = void 0 === u3[3] ? m : '"' === u3[3] ? g : p) : c2 === g || c2 === p ? c2 = m : c2 === v || c2 === _ ? c2 = f : (c2 = m, r2 = void 0);
      const x2 = c2 === m && t4[i4 + 1].startsWith("/>") ? " " : "";
      l3 += c2 === f ? s3 + n : d2 >= 0 ? (o2.push(a2), s3.slice(0, d2) + e + s3.slice(d2) + h + x2) : s3 + h + (-2 === d2 ? i4 : x2);
    }
    return [P(t4, l3 + (t4[s2] || "<?>") + (2 === i3 ? "</svg>" : 3 === i3 ? "</math>" : "")), o2];
  };
  var N = class _N {
    constructor({ strings: t4, _$litType$: s2 }, n2) {
      let r2;
      this.parts = [];
      let c2 = 0, a2 = 0;
      const u3 = t4.length - 1, d2 = this.parts, [f3, v2] = V(t4, s2);
      if (this.el = _N.createElement(f3, n2), C.currentNode = this.el.content, 2 === s2 || 3 === s2) {
        const t5 = this.el.content.firstChild;
        t5.replaceWith(...t5.childNodes);
      }
      for (; null !== (r2 = C.nextNode()) && d2.length < u3; ) {
        if (1 === r2.nodeType) {
          if (r2.hasAttributes()) for (const t5 of r2.getAttributeNames()) if (t5.endsWith(e)) {
            const i3 = v2[a2++], s3 = r2.getAttribute(t5).split(h), e3 = /([.?@])?(.*)/.exec(i3);
            d2.push({ type: 1, index: c2, name: e3[2], strings: s3, ctor: "." === e3[1] ? H : "?" === e3[1] ? I : "@" === e3[1] ? L : k }), r2.removeAttribute(t5);
          } else t5.startsWith(h) && (d2.push({ type: 6, index: c2 }), r2.removeAttribute(t5));
          if ($.test(r2.tagName)) {
            const t5 = r2.textContent.split(h), s3 = t5.length - 1;
            if (s3 > 0) {
              r2.textContent = i ? i.emptyScript : "";
              for (let i3 = 0; i3 < s3; i3++) r2.append(t5[i3], l()), C.nextNode(), d2.push({ type: 2, index: ++c2 });
              r2.append(t5[s3], l());
            }
          }
        } else if (8 === r2.nodeType) if (r2.data === o) d2.push({ type: 2, index: c2 });
        else {
          let t5 = -1;
          for (; -1 !== (t5 = r2.data.indexOf(h, t5 + 1)); ) d2.push({ type: 7, index: c2 }), t5 += h.length - 1;
        }
        c2++;
      }
    }
    static createElement(t4, i3) {
      const s2 = r.createElement("template");
      return s2.innerHTML = t4, s2;
    }
  };
  function S(t4, i3, s2 = t4, e3) {
    if (i3 === T) return i3;
    let h2 = void 0 !== e3 ? s2._$Co?.[e3] : s2._$Cl;
    const o2 = c(i3) ? void 0 : i3._$litDirective$;
    return h2?.constructor !== o2 && (h2?._$AO?.(false), void 0 === o2 ? h2 = void 0 : (h2 = new o2(t4), h2._$AT(t4, s2, e3)), void 0 !== e3 ? (s2._$Co ??= [])[e3] = h2 : s2._$Cl = h2), void 0 !== h2 && (i3 = S(t4, h2._$AS(t4, i3.values), h2, e3)), i3;
  }
  var M = class {
    constructor(t4, i3) {
      this._$AV = [], this._$AN = void 0, this._$AD = t4, this._$AM = i3;
    }
    get parentNode() {
      return this._$AM.parentNode;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    u(t4) {
      const { el: { content: i3 }, parts: s2 } = this._$AD, e3 = (t4?.creationScope ?? r).importNode(i3, true);
      C.currentNode = e3;
      let h2 = C.nextNode(), o2 = 0, n2 = 0, l3 = s2[0];
      for (; void 0 !== l3; ) {
        if (o2 === l3.index) {
          let i4;
          2 === l3.type ? i4 = new R(h2, h2.nextSibling, this, t4) : 1 === l3.type ? i4 = new l3.ctor(h2, l3.name, l3.strings, this, t4) : 6 === l3.type && (i4 = new z(h2, this, t4)), this._$AV.push(i4), l3 = s2[++n2];
        }
        o2 !== l3?.index && (h2 = C.nextNode(), o2++);
      }
      return C.currentNode = r, e3;
    }
    p(t4) {
      let i3 = 0;
      for (const s2 of this._$AV) void 0 !== s2 && (void 0 !== s2.strings ? (s2._$AI(t4, s2, i3), i3 += s2.strings.length - 2) : s2._$AI(t4[i3])), i3++;
    }
  };
  var R = class _R {
    get _$AU() {
      return this._$AM?._$AU ?? this._$Cv;
    }
    constructor(t4, i3, s2, e3) {
      this.type = 2, this._$AH = E, this._$AN = void 0, this._$AA = t4, this._$AB = i3, this._$AM = s2, this.options = e3, this._$Cv = e3?.isConnected ?? true;
    }
    get parentNode() {
      let t4 = this._$AA.parentNode;
      const i3 = this._$AM;
      return void 0 !== i3 && 11 === t4?.nodeType && (t4 = i3.parentNode), t4;
    }
    get startNode() {
      return this._$AA;
    }
    get endNode() {
      return this._$AB;
    }
    _$AI(t4, i3 = this) {
      t4 = S(this, t4, i3), c(t4) ? t4 === E || null == t4 || "" === t4 ? (this._$AH !== E && this._$AR(), this._$AH = E) : t4 !== this._$AH && t4 !== T && this._(t4) : void 0 !== t4._$litType$ ? this.$(t4) : void 0 !== t4.nodeType ? this.T(t4) : u(t4) ? this.k(t4) : this._(t4);
    }
    O(t4) {
      return this._$AA.parentNode.insertBefore(t4, this._$AB);
    }
    T(t4) {
      this._$AH !== t4 && (this._$AR(), this._$AH = this.O(t4));
    }
    _(t4) {
      this._$AH !== E && c(this._$AH) ? this._$AA.nextSibling.data = t4 : this.T(r.createTextNode(t4)), this._$AH = t4;
    }
    $(t4) {
      const { values: i3, _$litType$: s2 } = t4, e3 = "number" == typeof s2 ? this._$AC(t4) : (void 0 === s2.el && (s2.el = N.createElement(P(s2.h, s2.h[0]), this.options)), s2);
      if (this._$AH?._$AD === e3) this._$AH.p(i3);
      else {
        const t5 = new M(e3, this), s3 = t5.u(this.options);
        t5.p(i3), this.T(s3), this._$AH = t5;
      }
    }
    _$AC(t4) {
      let i3 = A.get(t4.strings);
      return void 0 === i3 && A.set(t4.strings, i3 = new N(t4)), i3;
    }
    k(t4) {
      a(this._$AH) || (this._$AH = [], this._$AR());
      const i3 = this._$AH;
      let s2, e3 = 0;
      for (const h2 of t4) e3 === i3.length ? i3.push(s2 = new _R(this.O(l()), this.O(l()), this, this.options)) : s2 = i3[e3], s2._$AI(h2), e3++;
      e3 < i3.length && (this._$AR(s2 && s2._$AB.nextSibling, e3), i3.length = e3);
    }
    _$AR(t4 = this._$AA.nextSibling, i3) {
      for (this._$AP?.(false, true, i3); t4 && t4 !== this._$AB; ) {
        const i4 = t4.nextSibling;
        t4.remove(), t4 = i4;
      }
    }
    setConnected(t4) {
      void 0 === this._$AM && (this._$Cv = t4, this._$AP?.(t4));
    }
  };
  var k = class {
    get tagName() {
      return this.element.tagName;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    constructor(t4, i3, s2, e3, h2) {
      this.type = 1, this._$AH = E, this._$AN = void 0, this.element = t4, this.name = i3, this._$AM = e3, this.options = h2, s2.length > 2 || "" !== s2[0] || "" !== s2[1] ? (this._$AH = Array(s2.length - 1).fill(new String()), this.strings = s2) : this._$AH = E;
    }
    _$AI(t4, i3 = this, s2, e3) {
      const h2 = this.strings;
      let o2 = false;
      if (void 0 === h2) t4 = S(this, t4, i3, 0), o2 = !c(t4) || t4 !== this._$AH && t4 !== T, o2 && (this._$AH = t4);
      else {
        const e4 = t4;
        let n2, r2;
        for (t4 = h2[0], n2 = 0; n2 < h2.length - 1; n2++) r2 = S(this, e4[s2 + n2], i3, n2), r2 === T && (r2 = this._$AH[n2]), o2 ||= !c(r2) || r2 !== this._$AH[n2], r2 === E ? t4 = E : t4 !== E && (t4 += (r2 ?? "") + h2[n2 + 1]), this._$AH[n2] = r2;
      }
      o2 && !e3 && this.j(t4);
    }
    j(t4) {
      t4 === E ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t4 ?? "");
    }
  };
  var H = class extends k {
    constructor() {
      super(...arguments), this.type = 3;
    }
    j(t4) {
      this.element[this.name] = t4 === E ? void 0 : t4;
    }
  };
  var I = class extends k {
    constructor() {
      super(...arguments), this.type = 4;
    }
    j(t4) {
      this.element.toggleAttribute(this.name, !!t4 && t4 !== E);
    }
  };
  var L = class extends k {
    constructor(t4, i3, s2, e3, h2) {
      super(t4, i3, s2, e3, h2), this.type = 5;
    }
    _$AI(t4, i3 = this) {
      if ((t4 = S(this, t4, i3, 0) ?? E) === T) return;
      const s2 = this._$AH, e3 = t4 === E && s2 !== E || t4.capture !== s2.capture || t4.once !== s2.once || t4.passive !== s2.passive, h2 = t4 !== E && (s2 === E || e3);
      e3 && this.element.removeEventListener(this.name, this, s2), h2 && this.element.addEventListener(this.name, this, t4), this._$AH = t4;
    }
    handleEvent(t4) {
      "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t4) : this._$AH.handleEvent(t4);
    }
  };
  var z = class {
    constructor(t4, i3, s2) {
      this.element = t4, this.type = 6, this._$AN = void 0, this._$AM = i3, this.options = s2;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AI(t4) {
      S(this, t4);
    }
  };
  var Z = { M: e, P: h, A: o, C: 1, L: V, R: M, D: u, V: S, I: R, H: k, N: I, U: L, B: H, F: z };
  var j = t.litHtmlPolyfillSupport;
  j?.(N, R), (t.litHtmlVersions ??= []).push("3.2.1");
  var B = (t4, i3, s2) => {
    const e3 = s2?.renderBefore ?? i3;
    let h2 = e3._$litPart$;
    if (void 0 === h2) {
      const t5 = s2?.renderBefore ?? null;
      e3._$litPart$ = h2 = new R(i3.insertBefore(l(), t5), t5, void 0, s2 ?? {});
    }
    return h2._$AI(t4), h2;
  };

  // src/icons/icons.ts
  var icon = (name) => {
    return x`
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
  >
    <use href=#${name}>
  </svg>`;
  };

  // src/error-popup/error-popup.ts
  var ErrorPopup = class extends HTMLElement {
    message = "";
    static displayMessage(message, timeout = 0) {
      document.querySelector("error-popup").displayMessageImpl(message, timeout);
    }
    displayMessageImpl(message, timeout = 0) {
      this.message = message;
      if (timeout !== 0) {
        window.setTimeout(() => this.hide(), timeout);
      }
      this.render();
      this.unhide();
    }
    unhide() {
      this.classList.remove("hidden");
    }
    hide() {
      this.classList.add("hidden");
    }
    render() {
      B(this.template(), this);
    }
    template() {
      return x`
      <span>${this.message}</span>
      <button class="icon-button" title="Close" @click=${() => this.hide()}>
        ${icon("check")}
      </button>
    `;
    }
  };
  customElements.define("error-popup", ErrorPopup);

  // src/report-error/report-error.ts
  var typeOfReporting = "ErrorPopup";
  var setErrorMessageReporting = (t4) => {
    typeOfReporting = t4;
  };
  var reportErrorMsg = (error2) => {
    if (typeOfReporting === "ErrorPopup") {
      ErrorPopup.displayMessage(error2.message);
    } else {
      document.dispatchEvent(new CustomEvent("error-report", { detail: error2 }));
    }
  };
  var reportIfError = (ret) => {
    if (!ret.ok) {
      reportErrorMsg(ret.error);
    }
  };

  // src/vscode-bridge/vscode-bridge.ts
  var vscode = acquireVsCodeApi();
  document.addEventListener("finished-init", () => {
    const explanMain2 = document.querySelector("explan-main");
    explanMain2.embedded();
    window.addEventListener("message", async (e3) => {
      const { type, body, requestId } = e3.data;
      switch (type) {
        case "init": {
          if (body.untitled) {
            return;
          } else {
            const ret = await explanMain2.fromUint8Array(body.value);
            reportIfError(ret);
            return;
          }
        }
        case "getFileData": {
          const contentType = body.contentType;
          const ret = await explanMain2.toUnit8Array(contentType);
          if (!ret.ok) {
            reportError(e3);
            return;
          }
          vscode.postMessage({
            type: "response",
            requestId,
            body: ret.value
          });
          return;
        }
        case "undo": {
          await explanMain2.undo();
          vscode.postMessage({
            type: "response",
            requestId
          });
          return;
        }
        case "redo": {
          await explanMain2.redo();
          vscode.postMessage({
            type: "response",
            requestId
          });
          return;
        }
      }
    });
    vscode.postMessage({ type: "ready" });
  });
  document.addEventListener("edit-action", () => {
    vscode.postMessage({ type: "edit" });
  });
  document.addEventListener("error-report", (e3) => {
    console.log("from bridge", e3.detail);
    vscode.postMessage({
      type: "error-report",
      value: e3.detail.message
    });
  });

  // src/result.ts
  function ok(value) {
    return { ok: true, value };
  }
  function error(value) {
    if (typeof value === "string") {
      return { ok: false, error: new Error(value) };
    }
    return { ok: false, error: value };
  }

  // src/action/action.ts
  var NOOPAction = class _NOOPAction {
    description = "Does nothing";
    postActionWork = "";
    undo = false;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async do(_2) {
      return ok(new _NOOPAction());
    }
  };
  var ActionFromOp = class _ActionFromOp {
    name = "ActionFromOp";
    description = "Action constructed directly from an Op.";
    postActionWork;
    undo;
    op;
    constructor(op, postActionWork, undo2) {
      this.postActionWork = postActionWork;
      this.undo = undo2;
      this.op = op;
    }
    async do(explanMain2) {
      const ret = this.op.applyTo(explanMain2.plan);
      if (!ret.ok) {
        return ret;
      }
      explanMain2.plan = ret.value.plan;
      return ok(
        new _ActionFromOp(ret.value.inverse, this.postActionWork, this.undo)
      );
    }
  };

  // src/dag/dag.ts
  var DirectedEdge = class _DirectedEdge {
    i = 0;
    j = 0;
    constructor(i3 = 0, j2 = 0) {
      this.i = i3;
      this.j = j2;
    }
    equal(rhs) {
      return rhs.i === this.i && rhs.j === this.j;
    }
    toJSON() {
      return {
        i: this.i,
        j: this.j
      };
    }
    static fromJSON(des) {
      return new _DirectedEdge(des.i, des.j);
    }
  };
  var edgesBySrcToMap = (edges) => {
    const ret = /* @__PURE__ */ new Map();
    edges.forEach((e3) => {
      const arr = ret.get(e3.i) || [];
      arr.push(e3);
      ret.set(e3.i, arr);
    });
    return ret;
  };
  var edgesByDstToMap = (edges) => {
    const ret = /* @__PURE__ */ new Map();
    edges.forEach((e3) => {
      const arr = ret.get(e3.j) || [];
      arr.push(e3);
      ret.set(e3.j, arr);
    });
    return ret;
  };
  var edgesBySrcAndDstToMap = (edges) => {
    const ret = {
      bySrc: /* @__PURE__ */ new Map(),
      byDst: /* @__PURE__ */ new Map()
    };
    edges.forEach((e3) => {
      let arr = ret.bySrc.get(e3.i) || [];
      arr.push(e3);
      ret.bySrc.set(e3.i, arr);
      arr = ret.byDst.get(e3.j) || [];
      arr.push(e3);
      ret.byDst.set(e3.j, arr);
    });
    return ret;
  };

  // src/ops/ops.ts
  var Op = class _Op {
    subOps = [];
    constructor(subOps) {
      this.subOps = subOps;
    }
    // Reverts all SubOps up to the given index.
    applyAllInverseSubOpsToPlan(plan, inverseSubOps) {
      for (let i3 = 0; i3 < inverseSubOps.length; i3++) {
        const e3 = inverseSubOps[i3].applyTo(plan);
        if (!e3.ok) {
          return e3;
        }
        plan = e3.value.plan;
      }
      return ok(plan);
    }
    // Applies the Op to a Plan.
    applyTo(plan) {
      const inverseSubOps = [];
      for (let i3 = 0; i3 < this.subOps.length; i3++) {
        const e3 = this.subOps[i3].applyTo(plan);
        if (!e3.ok) {
          const revertErr = this.applyAllInverseSubOpsToPlan(plan, inverseSubOps);
          if (!revertErr.ok) {
            return revertErr;
          }
          return e3;
        }
        plan = e3.value.plan;
        inverseSubOps.unshift(e3.value.inverse);
      }
      return ok({
        plan,
        inverse: new _Op(inverseSubOps)
      });
    }
  };
  var applyAllInverseOpsToPlan = (inverses, plan) => {
    for (let i3 = 0; i3 < inverses.length; i3++) {
      const res = inverses[i3].applyTo(plan);
      if (!res.ok) {
        return res;
      }
      plan = res.value.plan;
    }
    return ok(plan);
  };
  var applyAllOpsToPlan = (ops, plan) => {
    const inverses = [];
    for (let i3 = 0; i3 < ops.length; i3++) {
      const res = ops[i3].applyTo(plan);
      if (!res.ok) {
        const inverseRes = applyAllInverseOpsToPlan(inverses, plan);
        if (!inverseRes.ok) {
          return inverseRes;
        }
        return res;
      }
      inverses.unshift(res.value.inverse);
      plan = res.value.plan;
    }
    return ok({
      ops: inverses,
      plan
    });
  };

  // src/ops/metrics.ts
  var AddMetricSubOp = class {
    name;
    metricDefinition;
    // Maps an index of a Task to a value for the given metric key.
    taskMetricValues;
    constructor(name, metricDefinition, taskMetricValues = /* @__PURE__ */ new Map()) {
      this.name = name;
      this.metricDefinition = metricDefinition;
      this.taskMetricValues = taskMetricValues;
    }
    applyTo(plan) {
      if (plan.getMetricDefinition(this.name) !== void 0) {
        return error(`${this.name} already exists as a Metric`);
      }
      plan.setMetricDefinition(this.name, this.metricDefinition);
      plan.chart.Vertices.forEach((task, index) => {
        task.setMetric(
          this.name,
          this.taskMetricValues.get(index) || this.metricDefinition.default
        );
      });
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new DeleteMetricSubOp(this.name);
    }
  };
  var DeleteMetricSubOp = class {
    name;
    constructor(name) {
      this.name = name;
    }
    applyTo(plan) {
      const metricDefinition = plan.getMetricDefinition(this.name);
      if (metricDefinition === void 0) {
        return error(
          `The metric with name ${this.name} does not exist and can't be deleted.`
        );
      }
      if (metricDefinition.isStatic) {
        return error(`The static Metric ${this.name} can't be deleted.`);
      }
      plan.deleteMetricDefinition(this.name);
      const taskIndexToDeletedMetricValue = /* @__PURE__ */ new Map();
      plan.chart.Vertices.forEach((task, index) => {
        const value = task.getMetric(this.name);
        if (value !== void 0) {
          taskIndexToDeletedMetricValue.set(index, value);
        }
        task.deleteMetric(this.name);
      });
      return ok({
        plan,
        inverse: this.inverse(metricDefinition, taskIndexToDeletedMetricValue)
      });
    }
    inverse(metricDefinition, metricValuesForDeletedResourceName) {
      return new AddMetricSubOp(
        this.name,
        metricDefinition,
        metricValuesForDeletedResourceName
      );
    }
  };
  var RenameMetricSubOp = class _RenameMetricSubOp {
    oldName;
    newName;
    constructor(oldName, newName) {
      this.oldName = oldName;
      this.newName = newName;
    }
    applyTo(plan) {
      if (plan.getMetricDefinition(this.newName) !== void 0) {
        return error(`${this.newName} already exists as a metric.`);
      }
      const metricDefinition = plan.getMetricDefinition(this.oldName);
      if (metricDefinition === void 0) {
        return error(`${this.oldName} does not exist as a Metric`);
      }
      if (metricDefinition.isStatic) {
        return error(`Static metric ${this.oldName} can't be renamed.`);
      }
      plan.setMetricDefinition(this.newName, metricDefinition);
      plan.deleteMetricDefinition(this.oldName);
      plan.chart.Vertices.forEach((task) => {
        const value = task.getMetric(this.oldName) || metricDefinition.default;
        task.setMetric(this.newName, value);
        task.deleteMetric(this.oldName);
      });
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new _RenameMetricSubOp(this.newName, this.oldName);
    }
  };
  var UpdateMetricSubOp = class _UpdateMetricSubOp {
    name;
    metricDefinition;
    // Maps an index of a Task to a value for the given metric key.
    taskMetricValues;
    constructor(name, metricDefinition, taskMetricValues = /* @__PURE__ */ new Map()) {
      this.name = name;
      this.metricDefinition = metricDefinition;
      this.taskMetricValues = taskMetricValues;
    }
    applyTo(plan) {
      const oldMetricDefinition = plan.getMetricDefinition(this.name);
      if (oldMetricDefinition === void 0) {
        return error(`${this.name} does not exist as a Metric`);
      }
      if (oldMetricDefinition.isStatic) {
        return error(`Static metric ${this.name} can't be updated.`);
      }
      this.metricDefinition.default = this.metricDefinition.range.clamp(
        this.metricDefinition.default
      );
      plan.setMetricDefinition(this.name, this.metricDefinition);
      const taskMetricValues = /* @__PURE__ */ new Map();
      plan.chart.Vertices.forEach((task, index) => {
        const oldValue = task.getMetric(this.name);
        let newValue;
        if (this.taskMetricValues.has(index)) {
          newValue = this.taskMetricValues.get(index);
        } else if (oldValue === oldMetricDefinition.default && this.metricDefinition.range.min <= oldValue && this.metricDefinition.range.max > oldValue) {
          newValue = this.metricDefinition.default;
          taskMetricValues.set(index, oldValue);
        } else {
          newValue = this.metricDefinition.range.clamp(oldValue);
          newValue = this.metricDefinition.precision.round(newValue);
          taskMetricValues.set(index, oldValue);
        }
        task.setMetric(this.name, newValue);
      });
      return ok({
        plan,
        inverse: this.inverse(oldMetricDefinition, taskMetricValues)
      });
    }
    inverse(oldMetricDefinition, taskMetricValues) {
      return new _UpdateMetricSubOp(
        this.name,
        oldMetricDefinition,
        taskMetricValues
      );
    }
  };
  var SetMetricValueSubOp = class _SetMetricValueSubOp {
    name;
    value;
    taskIndex;
    constructor(name, value, taskIndex) {
      this.name = name;
      this.value = value;
      this.taskIndex = taskIndex;
    }
    applyTo(plan) {
      const metricsDefinition = plan.getMetricDefinition(this.name);
      if (metricsDefinition === void 0) {
        return error(`${this.name} does not exist as a Metric`);
      }
      const task = plan.chart.Vertices[this.taskIndex];
      const oldValue = task.getMetric(this.name) || metricsDefinition.default;
      task.setMetric(this.name, metricsDefinition.clampAndRound(this.value));
      return ok({ plan, inverse: this.inverse(oldValue) });
    }
    inverse(value) {
      return new _SetMetricValueSubOp(this.name, value, this.taskIndex);
    }
  };
  function AddMetricOp(name, metricDefinition) {
    return new Op([new AddMetricSubOp(name, metricDefinition)]);
  }
  function DeleteMetricOp(name) {
    return new Op([new DeleteMetricSubOp(name)]);
  }
  function RenameMetricOp(oldName, newName) {
    return new Op([new RenameMetricSubOp(oldName, newName)]);
  }
  function UpdateMetricOp(name, metricDefinition) {
    return new Op([new UpdateMetricSubOp(name, metricDefinition)]);
  }
  function SetMetricValueOp(name, value, taskIndex) {
    return new Op([new SetMetricValueSubOp(name, value, taskIndex)]);
  }

  // src/ops/chart.ts
  function DirectedEdgeForPlan(i3, j2, plan) {
    const chart = plan.chart;
    if (j2 === -1) {
      j2 = chart.Vertices.length - 1;
    }
    if (i3 < 0 || i3 >= chart.Vertices.length) {
      return error(
        `i index out of range: ${i3} not in [0, ${chart.Vertices.length - 1}]`
      );
    }
    if (j2 < 0 || j2 >= chart.Vertices.length) {
      return error(
        `j index out of range: ${j2} not in [0, ${chart.Vertices.length - 1}]`
      );
    }
    if (i3 === j2) {
      return error(`A Task can not depend on itself: ${i3} === ${j2}`);
    }
    return ok(new DirectedEdge(i3, j2));
  }
  var AddEdgeSubOp = class {
    i = 0;
    j = 0;
    constructor(i3, j2) {
      this.i = i3;
      this.j = j2;
    }
    applyTo(plan) {
      if (this.i === -1) {
        this.i = plan.chart.Vertices.length - 1;
      }
      if (this.j === -1) {
        this.j = plan.chart.Vertices.length - 1;
      }
      const e3 = DirectedEdgeForPlan(this.i, this.j, plan);
      if (!e3.ok) {
        return e3;
      }
      if (!plan.chart.Edges.find((value) => value.equal(e3.value))) {
        plan.chart.Edges.push(e3.value);
      }
      return ok({
        plan,
        inverse: this.inverse()
      });
    }
    inverse() {
      return new RemoveEdgeSupOp(this.i, this.j);
    }
  };
  var RemoveEdgeSupOp = class {
    i = 0;
    j = 0;
    constructor(i3, j2) {
      this.i = i3;
      this.j = j2;
    }
    applyTo(plan) {
      if (this.i === -1) {
        this.i = plan.chart.Vertices.length - 1;
      }
      if (this.j === -1) {
        this.j = plan.chart.Vertices.length - 1;
      }
      const e3 = DirectedEdgeForPlan(this.i, this.j, plan);
      if (!e3.ok) {
        return e3;
      }
      plan.chart.Edges = plan.chart.Edges.filter(
        (v2) => !v2.equal(e3.value)
      );
      return ok({
        plan,
        inverse: this.inverse()
      });
    }
    inverse() {
      return new AddEdgeSubOp(this.i, this.j);
    }
  };
  function indexInRangeForVertices(index, chart) {
    if (index < 0 || index > chart.Vertices.length - 2) {
      return error(`${index} is not in range [0, ${chart.Vertices.length - 2}]`);
    }
    return ok(null);
  }
  function indexInRangeForVerticesExclusive(index, chart) {
    if (index < 1 || index > chart.Vertices.length - 2) {
      return error(`${index} is not in range [1, ${chart.Vertices.length - 2}]`);
    }
    return ok(null);
  }
  var AddTaskAfterSubOp = class {
    index = 0;
    fullTaskToBeRestored;
    constructor(index, fullTaskToBeRestored = null) {
      this.index = index;
      this.fullTaskToBeRestored = fullTaskToBeRestored;
    }
    applyTo(plan) {
      const chart = plan.chart;
      const ret = indexInRangeForVertices(this.index, chart);
      if (!ret.ok) {
        return ret;
      }
      let task = plan.newTask();
      if (this.fullTaskToBeRestored !== null) {
        task = this.fullTaskToBeRestored.task;
      }
      plan.chart.Vertices.splice(this.index + 1, 0, task);
      for (let i3 = 0; i3 < chart.Edges.length; i3++) {
        const edge = chart.Edges[i3];
        if (edge.i >= this.index + 1) {
          edge.i++;
        }
        if (edge.j >= this.index + 1) {
          edge.j++;
        }
      }
      if (this.fullTaskToBeRestored !== null) {
        chart.Edges.push(...this.fullTaskToBeRestored.edges);
      }
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new DeleteTaskSubOp(this.index + 1);
    }
  };
  var DupTaskSubOp = class {
    index = 0;
    constructor(index) {
      this.index = index;
    }
    applyTo(plan) {
      const chart = plan.chart;
      const ret = indexInRangeForVerticesExclusive(this.index, chart);
      if (!ret.ok) {
        return ret;
      }
      const copy = plan.chart.Vertices[this.index].dup();
      plan.chart.Vertices.splice(this.index, 0, copy);
      for (let i3 = 0; i3 < chart.Edges.length; i3++) {
        const edge = chart.Edges[i3];
        if (edge.i > this.index) {
          edge.i++;
        }
        if (edge.j > this.index) {
          edge.j++;
        }
      }
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new DeleteTaskSubOp(this.index + 1);
    }
  };
  var MoveAllOutgoingEdgesFromToSubOp = class _MoveAllOutgoingEdgesFromToSubOp {
    fromTaskIndex = 0;
    toTaskIndex = 0;
    actualMoves;
    constructor(fromTaskIndex, toTaskIndex, actualMoves = /* @__PURE__ */ new Map()) {
      this.fromTaskIndex = fromTaskIndex;
      this.toTaskIndex = toTaskIndex;
      this.actualMoves = actualMoves;
    }
    applyTo(plan) {
      const chart = plan.chart;
      let ret = indexInRangeForVerticesExclusive(this.fromTaskIndex, chart);
      if (!ret.ok) {
        return ret;
      }
      ret = indexInRangeForVerticesExclusive(this.toTaskIndex, chart);
      if (!ret.ok) {
        return ret;
      }
      if (this.actualMoves.values.length === 0) {
        const actualMoves = /* @__PURE__ */ new Map();
        for (let i3 = 0; i3 < chart.Edges.length; i3++) {
          const edge = chart.Edges[i3];
          if (edge.i === this.fromTaskIndex && edge.j === this.toTaskIndex) {
            continue;
          }
          if (edge.i === this.fromTaskIndex) {
            actualMoves.set(
              new DirectedEdge(this.toTaskIndex, edge.j),
              new DirectedEdge(edge.i, edge.j)
            );
            edge.i = this.toTaskIndex;
          }
        }
        return ok({
          plan,
          inverse: this.inverse(
            this.toTaskIndex,
            this.fromTaskIndex,
            actualMoves
          )
        });
      } else {
        for (let i3 = 0; i3 < chart.Edges.length; i3++) {
          const newEdge = this.actualMoves.get(plan.chart.Edges[i3]);
          if (newEdge !== void 0) {
            plan.chart.Edges[i3] = newEdge;
          }
        }
        return ok({
          plan,
          inverse: new _MoveAllOutgoingEdgesFromToSubOp(
            this.toTaskIndex,
            this.fromTaskIndex
          )
        });
      }
    }
    inverse(toTaskIndex, fromTaskIndex, actualMoves) {
      return new _MoveAllOutgoingEdgesFromToSubOp(
        toTaskIndex,
        fromTaskIndex,
        actualMoves
      );
    }
  };
  var CopyAllEdgesFromToSubOp = class {
    fromIndex = 0;
    toIndex = 0;
    constructor(fromIndex, toIndex) {
      this.fromIndex = fromIndex;
      this.toIndex = toIndex;
    }
    applyTo(plan) {
      const ret = indexInRangeForVertices(this.fromIndex, plan.chart);
      if (!ret.ok) {
        return ret;
      }
      const newEdges = [];
      plan.chart.Edges.forEach((edge) => {
        if (edge.i === this.fromIndex) {
          newEdges.push(new DirectedEdge(this.toIndex, edge.j));
        }
        if (edge.j === this.fromIndex) {
          newEdges.push(new DirectedEdge(edge.i, this.toIndex));
        }
      });
      plan.chart.Edges.push(...newEdges);
      return ok({ plan, inverse: new RemoveAllEdgesSubOp(newEdges) });
    }
  };
  var RemoveAllEdgesSubOp = class {
    edges;
    constructor(edges) {
      this.edges = edges;
    }
    applyTo(plan) {
      plan.chart.Edges = plan.chart.Edges.filter(
        (edge) => -1 === this.edges.findIndex(
          (toBeRemoved) => edge.equal(toBeRemoved)
        )
      );
      return ok({ plan, inverse: new AddAllEdgesSubOp(this.edges) });
    }
  };
  var AddAllEdgesSubOp = class {
    edges;
    constructor(edges) {
      this.edges = edges;
    }
    applyTo(plan) {
      plan.chart.Edges.push(...this.edges);
      return ok({ plan, inverse: new RemoveAllEdgesSubOp(this.edges) });
    }
  };
  var DeleteTaskSubOp = class {
    index = 0;
    constructor(index) {
      this.index = index;
    }
    applyTo(plan) {
      const chart = plan.chart;
      const ret = indexInRangeForVertices(this.index, chart);
      if (!ret.ok) {
        return ret;
      }
      const edgesToBeRestored = chart.Edges.filter((de) => {
        if (de.i === this.index || de.j === this.index) {
          return true;
        }
        return false;
      });
      chart.Edges = chart.Edges.filter((de) => {
        if (de.i === this.index || de.j === this.index) {
          return false;
        }
        return true;
      });
      for (let i3 = 0; i3 < chart.Edges.length; i3++) {
        const edge = chart.Edges[i3];
        if (edge.i > this.index) {
          edge.i--;
        }
        if (edge.j > this.index) {
          edge.j--;
        }
      }
      const taskToBeRestored = chart.Vertices.splice(this.index, 1);
      const fullTaskToBeRestored = {
        edges: edgesToBeRestored,
        task: taskToBeRestored[0]
      };
      return ok({ plan, inverse: this.inverse(fullTaskToBeRestored) });
    }
    inverse(fullTaskToBeRestored) {
      return new AddTaskAfterSubOp(this.index - 1, fullTaskToBeRestored);
    }
  };
  var RationalizeEdgesSubOp = class _RationalizeEdgesSubOp {
    constructor() {
    }
    applyTo(plan) {
      const srcAndDst = edgesBySrcAndDstToMap(plan.chart.Edges);
      const Start = 0;
      const Finish = plan.chart.Vertices.length - 1;
      for (let i3 = Start; i3 < Finish; i3++) {
        const destinations = srcAndDst.bySrc.get(i3);
        if (destinations === void 0) {
          const toBeAdded = new DirectedEdge(i3, Finish);
          plan.chart.Edges.push(toBeAdded);
        } else {
          if (destinations.length > 1 && destinations.find((value) => value.j === Finish)) {
            const toBeRemoved = new DirectedEdge(i3, Finish);
            plan.chart.Edges = plan.chart.Edges.filter(
              (value) => !toBeRemoved.equal(value)
            );
          }
        }
      }
      for (let i3 = Start + 1; i3 < Finish; i3++) {
        const destinations = srcAndDst.byDst.get(i3);
        if (destinations === void 0) {
          const toBeAdded = new DirectedEdge(Start, i3);
          plan.chart.Edges.push(toBeAdded);
        } else {
          if (destinations.length > 1 && destinations.find((value) => value.i === Start)) {
            const toBeRemoved = new DirectedEdge(Start, i3);
            plan.chart.Edges = plan.chart.Edges.filter(
              (value) => !toBeRemoved.equal(value)
            );
          }
        }
      }
      if (plan.chart.Edges.length === 0) {
        plan.chart.Edges.push(new DirectedEdge(Start, Finish));
      }
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new _RationalizeEdgesSubOp();
    }
  };
  var SetTaskNameSubOp = class _SetTaskNameSubOp {
    taskIndex;
    name;
    constructor(taskIndex, name) {
      this.taskIndex = taskIndex;
      this.name = name;
    }
    applyTo(plan) {
      const ret = indexInRangeForVertices(this.taskIndex, plan.chart);
      if (!ret.ok) {
        return ret;
      }
      const oldName = plan.chart.Vertices[this.taskIndex].name;
      plan.chart.Vertices[this.taskIndex].name = this.name;
      return ok({
        plan,
        inverse: this.inverse(oldName)
      });
    }
    inverse(oldName) {
      return new _SetTaskNameSubOp(this.taskIndex, oldName);
    }
  };
  function InsertNewEmptyMilestoneAfterOp(taskIndex) {
    return new Op([
      new RationalizeEdgesSubOp(),
      new AddTaskAfterSubOp(taskIndex),
      new AddEdgeSubOp(0, taskIndex + 1),
      new AddEdgeSubOp(taskIndex + 1, -1),
      new RationalizeEdgesSubOp()
    ]);
  }
  function SetTaskNameOp(taskIndex, name) {
    return new Op([new SetTaskNameSubOp(taskIndex, name)]);
  }
  function SplitTaskOp(taskIndex) {
    const subOps = [
      new DupTaskSubOp(taskIndex),
      new AddEdgeSubOp(taskIndex, taskIndex + 1),
      new MoveAllOutgoingEdgesFromToSubOp(taskIndex, taskIndex + 1)
    ];
    return new Op(subOps);
  }
  function DupTaskOp(taskIndex) {
    const subOps = [
      new DupTaskSubOp(taskIndex),
      new CopyAllEdgesFromToSubOp(taskIndex, taskIndex + 1)
    ];
    return new Op(subOps);
  }
  function DeleteTaskOp(taskIndex) {
    return new Op([
      new RationalizeEdgesSubOp(),
      new DeleteTaskSubOp(taskIndex),
      new RationalizeEdgesSubOp()
    ]);
  }
  function AddEdgeOp(fromTaskIndex, toTaskIndex) {
    return new Op([
      new RationalizeEdgesSubOp(),
      new AddEdgeSubOp(fromTaskIndex, toTaskIndex),
      new RationalizeEdgesSubOp()
    ]);
  }
  function RationalizeEdgesOp() {
    return new Op([new RationalizeEdgesSubOp()]);
  }
  function RemoveEdgeOp(i3, j2) {
    return new Op([
      new RationalizeEdgesSubOp(),
      new RemoveEdgeSupOp(i3, j2),
      new RationalizeEdgesSubOp()
    ]);
  }
  function InsertNewEmptyTaskAfterOp(taskIndex) {
    return new Op([
      new RationalizeEdgesSubOp(),
      new AddTaskAfterSubOp(taskIndex),
      new SetMetricValueSubOp("Duration", 10, taskIndex + 1),
      new AddEdgeSubOp(0, taskIndex + 1),
      new AddEdgeSubOp(taskIndex + 1, -1),
      new RationalizeEdgesSubOp()
    ]);
  }

  // src/action/actions/addPredecessor.ts
  var AddPredecessorAction = class {
    description = "Prompts for and adds a predecessor to the current Task.";
    postActionWork = "planDefinitionChanged";
    undo = true;
    async do(explanMain2) {
      if (explanMain2.selectedTask === -1) {
        return error(new Error("A Task must be selected."));
      }
      const predTaskIndex = await explanMain2.querySelector("add-dependency-dialog").selectDependency(explanMain2.plan.chart, explanMain2.selectedTask, "pred");
      if (predTaskIndex === void 0) {
        return error(new Error("No predecessor was selected."));
      }
      const ret = AddEdgeOp(predTaskIndex, explanMain2.selectedTask).applyTo(
        explanMain2.plan
      );
      if (!ret.ok) {
        return ret;
      }
      return ok(
        new ActionFromOp(
          ret.value.inverse,
          this.postActionWork = this.postActionWork,
          true
        )
      );
    }
  };

  // src/action/actions/addSuccessor.ts
  var AddSuccessorAction = class {
    description = "Prompts for and adds a successor to the current Task.";
    postActionWork = "planDefinitionChanged";
    undo = true;
    async do(explanMain2) {
      if (explanMain2.selectedTask === -1) {
        return error(new Error("A Task must be selected."));
      }
      const succTaskIndex = await explanMain2.querySelector("add-dependency-dialog").selectDependency(explanMain2.plan.chart, explanMain2.selectedTask, "succ");
      if (succTaskIndex === void 0) {
        return error(new Error("No successor was selected."));
      }
      const ret = AddEdgeOp(explanMain2.selectedTask, succTaskIndex).applyTo(
        explanMain2.plan
      );
      if (!ret.ok) {
        return ret;
      }
      return ok(
        new ActionFromOp(
          ret.value.inverse,
          this.postActionWork = this.postActionWork,
          true
        )
      );
    }
  };

  // src/action/actions/developer.ts
  var DeveloperPanelAction = class {
    description = "Opens the developer panel.";
    postActionWork = "";
    undo = false;
    async do(explanMain2) {
      explanMain2.querySelector("developer-panel").showDialog(explanMain2);
      return ok(new NOOPAction());
    }
  };

  // src/action/actions/gotoSearch.ts
  var GoToSearchAction = class {
    description = "Moves focus to search control.";
    postActionWork = "";
    undo = false;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async do(_explanMain) {
      document.querySelector("search-task-panel").setKeyboardFocusToInput("name-only");
      return ok(this);
    }
  };
  var GoToFullSearchAction = class {
    description = "Moves focus to search control and does a full search of all resource values.";
    postActionWork = "";
    undo = false;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async do(_explanMain) {
      document.querySelector("search-task-panel").setKeyboardFocusToInput("full-info");
      return ok(this);
    }
  };

  // src/action/actions/help.ts
  var HelpAction = class {
    description = "Displays the help dialog.";
    postActionWork = "";
    undo = false;
    async do(explanMain2) {
      explanMain2.querySelector("keyboard-map-dialog").showModal();
      return ok(this);
    }
  };

  // src/action/actions/resetZoom.ts
  var ResetZoomAction = class {
    description = "Undoes the zoom.";
    postActionWork = "paintChart";
    undo = false;
    async do(explanMain2) {
      explanMain2.displayRange = null;
      return ok(this);
    }
  };

  // src/action/actions/tasks.ts
  var SplitTaskAction = class {
    description = "Splits a task.";
    postActionWork = "planDefinitionChanged";
    undo = true;
    async do(explanMain2) {
      if (explanMain2.selectedTask === -1) {
        return error(new Error("A task must be selected first."));
      }
      const ret = SplitTaskOp(explanMain2.selectedTask).applyTo(explanMain2.plan);
      if (!ret.ok) {
        return ret;
      }
      return ok(
        new ActionFromOp(ret.value.inverse, this.postActionWork, this.undo)
      );
    }
  };
  var DupTaskAction = class {
    description = "Duplicates a task.";
    postActionWork = "planDefinitionChanged";
    undo = true;
    async do(explanMain2) {
      if (explanMain2.selectedTask === -1) {
        return error(new Error("A task must be selected first."));
      }
      const ret = DupTaskOp(explanMain2.selectedTask).applyTo(explanMain2.plan);
      if (!ret.ok) {
        return ret;
      }
      return ok(
        new ActionFromOp(ret.value.inverse, this.postActionWork, this.undo)
      );
    }
  };
  var NewTaskAction = class {
    description = "Creates a new task.";
    postActionWork = "planDefinitionChanged";
    undo = true;
    async do(explanMain2) {
      const ret = InsertNewEmptyTaskAfterOp(0).applyTo(explanMain2.plan);
      if (!ret.ok) {
        return ret;
      }
      return ok(
        new ActionFromOp(ret.value.inverse, this.postActionWork, this.undo)
      );
    }
  };
  var DeleteTaskAction = class {
    description = "Deletes a task.";
    postActionWork = "planDefinitionChanged";
    undo = true;
    async do(explanMain2) {
      if (explanMain2.selectedTask === -1) {
        return error(new Error("A task must be selected first."));
      }
      const ret = DeleteTaskOp(explanMain2.selectedTask).applyTo(explanMain2.plan);
      if (!ret.ok) {
        return ret;
      }
      explanMain2.selectedTask = -1;
      return ok(
        new ActionFromOp(ret.value.inverse, this.postActionWork, this.undo)
      );
    }
  };

  // src/style/toggler/toggler.ts
  var darkModeLocalStorageKey = "explan-darkmode";
  var toggleTheme = () => {
    window.localStorage.setItem(
      darkModeLocalStorageKey,
      document.body.classList.toggle("darkmode") ? "1" : "0"
    );
  };
  var applyStoredTheme = () => {
    document.body.classList.toggle(
      "darkmode",
      window.localStorage.getItem(darkModeLocalStorageKey) === "1"
    );
  };

  // src/action/actions/toggleDarkMode.ts
  var ToggleDarkModeAction = class {
    description = "Toggles dark mode.";
    postActionWork = "paintChart";
    undo = false;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async do(explanMain2) {
      toggleTheme();
      return ok(this);
    }
  };

  // src/action/actions/toggleRadar.ts
  var ToggleRadarAction = class {
    description = "Toggles the radar view.";
    postActionWork = "";
    undo = false;
    async do(explanMain2) {
      explanMain2.toggleRadar();
      return ok(this);
    }
  };

  // src/action/actions/undo.ts
  var UndoAction = class {
    description = "Undoes the last action.";
    postActionWork = "";
    undo = false;
    async do(explanMain2) {
      const ret = await undo(explanMain2);
      if (!ret.ok) {
        return ret;
      }
      return ok(new NOOPAction());
    }
  };
  var RedoAction = class {
    description = "Redoes the most recent undo action.";
    postActionWork = "";
    undo = false;
    async do(explanMain2) {
      const ret = await redo(explanMain2);
      if (!ret.ok) {
        return ret;
      }
      return ok(new NOOPAction());
    }
  };

  // src/action/registry.ts
  var ActionRegistry = {
    ToggleDarkModeAction: new ToggleDarkModeAction(),
    ToggleRadarAction: new ToggleRadarAction(),
    ResetZoomAction: new ResetZoomAction(),
    UndoAction: new UndoAction(),
    RedoAction: new RedoAction(),
    HelpAction: new HelpAction(),
    SplitTaskAction: new SplitTaskAction(),
    DupTaskAction: new DupTaskAction(),
    NewTaskAction: new NewTaskAction(),
    DeleteTaskAction: new DeleteTaskAction(),
    GoToSearchAction: new GoToSearchAction(),
    GoToFullSearchAction: new GoToFullSearchAction(),
    AddPredecessorAction: new AddPredecessorAction(),
    AddSuccessorAction: new AddSuccessorAction(),
    DeveloperPanelAction: new DeveloperPanelAction()
  };

  // src/action/execute.ts
  var undoStack = [];
  var redoStack = [];
  var undo = async (explanMain2) => {
    const action = undoStack.pop();
    if (!action) {
      return ok(null);
    }
    return await executeAction(action, explanMain2, "undo");
  };
  var redo = async (explanMain2) => {
    const action = redoStack.pop();
    if (!action) {
      return ok(null);
    }
    return await executeAction(action, explanMain2, "redo");
  };
  var executeByName = async (name, explanMain2) => {
    return executeAction(ActionRegistry[name], explanMain2);
  };
  var executeAction = async (action, explanMain2, typeOfAction = "normal") => {
    const ret = await action.do(explanMain2);
    if (!ret.ok) {
      return ret;
    }
    switch (action.postActionWork) {
      case "":
        break;
      case "paintChart":
        explanMain2.paintChart();
        break;
      case "planDefinitionChanged":
        explanMain2.planDefinitionHasBeenChanged();
        explanMain2.paintChart();
        document.dispatchEvent(new CustomEvent("plan-definition-changed"));
      default:
        break;
    }
    if (action.undo) {
      switch (typeOfAction) {
        case "normal":
          undoStack.push(ret.value);
          redoStack.length = 0;
          document.dispatchEvent(new CustomEvent("edit-action"));
          break;
        case "undo":
          redoStack.push(ret.value);
          break;
        case "redo":
          undoStack.push(ret.value);
          break;
        default:
          break;
      }
    }
    return ok(null);
  };
  var executeOp = async (op, postActionWork, undo2, explanMain2) => {
    return executeAction(new ActionFromOp(op, postActionWork, undo2), explanMain2);
  };

  // src/keymap/keymap.ts
  var KeyMap = /* @__PURE__ */ new Map([
    ["shift-ctrl-R", "ToggleRadarAction"],
    ["shift-ctrl-M", "ToggleDarkModeAction"],
    ["shift-ctrl-Z", "ResetZoomAction"],
    ["ctrl-z", "UndoAction"],
    ["ctrl-y", "RedoAction"],
    ["shift-ctrl-H", "HelpAction"],
    ["shift-ctrl-|", "SplitTaskAction"],
    ["shift-ctrl-_", "DupTaskAction"],
    ["alt-Insert", "NewTaskAction"],
    ["alt-Delete", "DeleteTaskAction"],
    ["ctrl-f", "GoToSearchAction"],
    ["shift-ctrl-F", "GoToFullSearchAction"],
    ["shift-ctrl-<", "AddPredecessorAction"],
    ["shift-ctrl->", "AddSuccessorAction"],
    ["shift-ctrl-V", "DeveloperPanelAction"]
  ]);
  var explanMain;
  var StartKeyboardHandling = (em) => {
    explanMain = em;
    document.addEventListener("keydown", onKeyDown);
  };
  var onKeyDown = async (e3) => {
    const keyname = `${e3.shiftKey ? "shift-" : ""}${e3.ctrlKey ? "ctrl-" : ""}${e3.metaKey ? "meta-" : ""}${e3.altKey ? "alt-" : ""}${e3.key}`;
    const actionName = KeyMap.get(keyname);
    if (actionName === void 0) {
      return;
    }
    e3.stopPropagation();
    e3.preventDefault();
    const ret = await executeByName(actionName, explanMain);
    reportIfError(ret);
  };
  var unmapUndoAndRedo = () => {
    KeyMap.delete("ctrl-z");
    KeyMap.delete("ctrl-y");
  };

  // src/help/help.ts
  var KeyboardMapDialog = class extends HTMLElement {
    connectedCallback() {
      const keymapEntries = [...KeyMap.entries()];
      keymapEntries.sort();
      B(
        x`
        <dialog>
          <table>
            ${keymapEntries.map(
          ([key, actionName]) => x`<tr>
                  <td>${key}</td>
                  <td>${ActionRegistry[actionName].description}</td>
                </tr>`
        )}
          </table>
        </dialog>
      `,
        this
      );
    }
    showModal() {
      this.querySelector("dialog").showModal();
    }
  };
  customElements.define("keyboard-map-dialog", KeyboardMapDialog);

  // src/image-export-panel/image-export-panel.ts
  var ImageExportPanel = class extends HTMLElement {
    explanMain = null;
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        if (this.explanMain !== null) {
          this.render();
        }
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    render() {
      B(this.template(), this);
    }
    setConfig(explanMain2) {
      this.explanMain = explanMain2;
      this.render();
    }
    template() {
      if (!this.explanMain) {
        return x``;
      }
      const imageExportWidth = this.explanMain.imageExportWidthPx;
      return x` <h3>Image Export</h3>
    
    <div>
        <label>
        Width (px) 
        <input 
            type=number 
            .value=${imageExportWidth}
            @change=${(e3) => this.widthChange(e3)}
            min=100
            max=1000000
            step=1
            required
        >
        </lable>
    </div>
    <div>
        <label>
        <input 
            type=checkbox 
            .checked=${this.explanMain.imageExportBackgroundTransparent}
            @input=${(e3) => {
        this.transparentChange(e3);
      }}
        >
        Transparent Background
        </label>
    </div>
    `;
    }
    widthChange(e3) {
      const newWidth = +e3.target.value;
      if (newWidth > 0 && newWidth < 1e6) {
        this.explanMain.imageExportWidthPx = newWidth;
      }
    }
    transparentChange(e3) {
      const b2 = e3.target.checked;
      this.explanMain.imageExportBackgroundTransparent = b2;
    }
  };
  customElements.define("image-export-panel", ImageExportPanel);

  // src/prompt-dialog/prompt-dialog.ts
  var PromptDialog = class extends HTMLElement {
    dialog = null;
    heading = null;
    inputElement = null;
    resolve = () => {
    };
    connectedCallback() {
      this.dialog = this.querySelector("dialog");
      this.heading = this.querySelector("h3");
      this.inputElement = this.querySelector("input");
      this.querySelector("#prompt-cancel").addEventListener("click", () => {
        this.dialog.close();
        this.resolve(null);
      });
      this.querySelector("#prompt-ok").addEventListener("click", () => {
        this.dialog.close();
        this.resolve(this.inputElement.value);
      });
    }
    prompt(heading) {
      const p2 = new Promise((resolve) => {
        this.resolve = resolve;
      });
      this.heading.textContent = heading;
      this.inputElement.value = "";
      this.dialog.showModal();
      return p2;
    }
  };
  customElements.define("prompt-dialog", PromptDialog);

  // src/groupby-control/groupby-control.ts
  var GroupByControl = class extends HTMLElement {
    explanMain = null;
    /** All of the types of resources in the plan. */
    groupByOptions = [];
    selectedGroupBy = "";
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        if (this.explanMain !== null) {
          this.populateGroupBy();
          this.render();
        }
      };
    }
    populateGroupBy() {
      const plan = this.explanMain?.plan;
      if (plan === void 0) {
        return;
      }
      this.groupByOptions = ["", ...Object.keys(plan.resourceDefinitions)];
      if (!this.groupByOptions.includes(this.selectedGroupBy)) {
        this.selectedGroupBy = "";
      }
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    render() {
      B(this.template(), this);
    }
    setConfig(explanMain2) {
      this.explanMain = explanMain2;
      this.render();
    }
    // Returns the empty string if no grouping is to be done.
    getSelectedGroup() {
      return this.selectedGroupBy;
    }
    groupByChanged(e3) {
      this.selectedGroupBy = e3.target.value;
      this.dispatchEvent(
        new CustomEvent("group-by-resource-changed", {
          bubbles: true,
          detail: this.selectedGroupBy
        })
      );
    }
    template() {
      return x`
      <select @input=${(e3) => this.groupByChanged(e3)}>
        ${this.groupByOptions.map((groupBy) => {
        const label = groupBy ? groupBy : "(none)";
        return x`<option ?selected=${groupBy === this.selectedGroupBy}>
            ${label}
          </option>`;
      })}
      </select>
    `;
    }
  };
  customElements.define("groupby-control", GroupByControl);

  // src/tab-buttons/tab-buttons.ts
  var TabButtons = class extends HTMLElement {
    allButtons = [];
    connectedCallback() {
      this.querySelectorAll("button").forEach((button) => {
        const target = button.dataset.target;
        if (!target) {
          return;
        }
        this.allButtons.push(button);
        button.addEventListener("click", () => this.hideAllBut(target));
      });
    }
    hideAllBut(target) {
      this.allButtons.forEach((button) => {
        const tabPanel = document.getElementById(button.dataset.target);
        if (button.dataset.target === target) {
          tabPanel?.classList.remove("hidden");
          button.classList.add("selected");
        } else {
          tabPanel?.classList.add("hidden");
          button.classList.remove("selected");
        }
      });
    }
  };
  customElements.define("tab-buttons", TabButtons);

  // src/date-control-utils/date-control-utils.ts
  var dateDisplay = (d2) => d2.toISOString().slice(0, 10);
  var dateControlDateRe = /\d{4}-\d{2}-\d{2}/;
  var parseDateString = (s2) => {
    if (!dateControlDateRe.test(s2)) {
      return error(new Error(`${s2} is not a valid date`));
    }
    return ok(/* @__PURE__ */ new Date(s2 + "T12:00:00.000Z"));
  };
  var todayAsUTC = () => {
    const d2 = /* @__PURE__ */ new Date();
    return new Date(
      Date.UTC(d2.getFullYear(), d2.getMonth(), d2.getDate(), 12, 0, 0)
    );
  };

  // src/plan_status/plan_status.ts
  var statusToDate = (status) => {
    if (status.stage === "unstarted") {
      return todayAsUTC();
    }
    return new Date(status.start);
  };
  var toJSON = (p2) => {
    const ret = {
      stage: "unstarted",
      start: ""
    };
    if (p2.stage === "started") {
      ret.stage = "started";
      ret.start = dateDisplay(new Date(p2.start));
    }
    return ret;
  };
  var fromJSON = (p2) => {
    const unstarted = { stage: "unstarted", start: 0 };
    if (p2.stage === void 0) {
      return unstarted;
    }
    if (p2.stage === "started") {
      if (p2.start === void 0) {
        return unstarted;
      }
      const ret = parseDateString(p2.start);
      if (!ret.ok) {
        return unstarted;
      }
      return {
        stage: "started",
        start: ret.value.getTime()
      };
    }
    return unstarted;
  };

  // src/dag/algorithms/toposort.ts
  var topologicalSort = (g2) => {
    const ret = {
      hasCycles: false,
      cycle: [],
      order: []
    };
    const edgeMap = edgesBySrcToMap(g2.Edges);
    const nodesWithoutPermanentMark = /* @__PURE__ */ new Set();
    g2.Vertices.forEach(
      (_2, index) => nodesWithoutPermanentMark.add(index)
    );
    const hasPermanentMark = (index) => {
      return !nodesWithoutPermanentMark.has(index);
    };
    const temporaryMark = /* @__PURE__ */ new Set();
    const visit = (index) => {
      if (hasPermanentMark(index)) {
        return true;
      }
      if (temporaryMark.has(index)) {
        return false;
      }
      temporaryMark.add(index);
      const nextEdges = edgeMap.get(index);
      if (nextEdges !== void 0) {
        for (let i3 = 0; i3 < nextEdges.length; i3++) {
          const e3 = nextEdges[i3];
          if (!visit(e3.j)) {
            return false;
          }
        }
      }
      temporaryMark.delete(index);
      nodesWithoutPermanentMark.delete(index);
      ret.order.unshift(index);
      return true;
    };
    const ok2 = visit(0);
    if (!ok2) {
      ret.hasCycles = true;
      ret.cycle = [...temporaryMark.keys()];
    }
    return ret;
  };

  // src/chart/chart.ts
  var DEFAULT_TASK_NAME = "Task Name";
  var Task = class _Task {
    // Resource keys and values. The parent plan contains all the resource
    // definitions.
    resources;
    metrics;
    name;
    id;
    constructor(name = "") {
      this.name = name || DEFAULT_TASK_NAME;
      this.metrics = {};
      this.resources = {};
      this.id = crypto.randomUUID();
    }
    toJSON() {
      return {
        resources: this.resources,
        metrics: this.metrics,
        name: this.name,
        id: this.id
      };
    }
    static fromJSON(taskSerialized) {
      const ret = new _Task(taskSerialized.name);
      ret.id = taskSerialized.id;
      ret.resources = taskSerialized.resources;
      ret.metrics = taskSerialized.metrics;
      return ret;
    }
    get duration() {
      return this.getMetric("Duration");
    }
    set duration(value) {
      this.setMetric("Duration", value);
    }
    getMetric(key) {
      return this.metrics[key];
    }
    setMetric(key, value) {
      this.metrics[key] = value;
    }
    deleteMetric(key) {
      delete this.metrics[key];
    }
    getResource(key) {
      return this.resources[key];
    }
    setResource(key, value) {
      this.resources[key] = value;
    }
    deleteResource(key) {
      delete this.resources[key];
    }
    dup() {
      const ret = new _Task();
      ret.resources = Object.assign({}, this.resources);
      ret.metrics = Object.assign({}, this.metrics);
      ret.name = this.name;
      return ret;
    }
  };
  var Chart = class _Chart {
    Vertices;
    Edges;
    constructor() {
      const start = new Task("Start");
      start.setMetric("Duration", 0);
      const finish = new Task("Finish");
      finish.setMetric("Duration", 0);
      this.Vertices = [start, finish];
      this.Edges = [new DirectedEdge(0, 1)];
    }
    toJSON() {
      return {
        vertices: this.Vertices.map((t4) => t4.toJSON()),
        edges: this.Edges.map((e3) => e3.toJSON())
      };
    }
    static fromJSON(chartSerialized) {
      const ret = new _Chart();
      ret.Vertices = chartSerialized.vertices.map(
        (ts) => Task.fromJSON(ts)
      );
      ret.Edges = chartSerialized.edges.map(
        (directedEdgeSerialized) => DirectedEdge.fromJSON(directedEdgeSerialized)
      );
      return ret;
    }
  };
  function validateDirectedGraph(g2) {
    if (g2.Vertices.length < 2) {
      return error(
        "Chart must contain at least two node, the start and finish tasks."
      );
    }
    const edgesByDst = edgesByDstToMap(g2.Edges);
    const edgesBySrc = edgesBySrcToMap(g2.Edges);
    if (edgesByDst.get(0) !== void 0) {
      return error("The start node (0) has an incoming edge.");
    }
    for (let i3 = 1; i3 < g2.Vertices.length; i3++) {
      if (edgesByDst.get(i3) === void 0) {
        return error(
          `Found node that isn't (0) that has no incoming edges: ${i3}`
        );
      }
    }
    if (edgesBySrc.get(g2.Vertices.length - 1) !== void 0) {
      return error(
        "The last node, which should be the Finish Milestone, has an outgoing edge."
      );
    }
    for (let i3 = 0; i3 < g2.Vertices.length - 1; i3++) {
      if (edgesBySrc.get(i3) === void 0) {
        return error(
          `Found node that isn't T_finish that has no outgoing edges: ${i3}`
        );
      }
    }
    const numVertices = g2.Vertices.length;
    for (let i3 = 0; i3 < g2.Edges.length; i3++) {
      const element = g2.Edges[i3];
      if (element.i < 0 || element.i >= numVertices || element.j < 0 || element.j >= numVertices) {
        return error(`Edge ${element} points to a non-existent Vertex.`);
      }
    }
    const tsRet = topologicalSort(g2);
    if (tsRet.hasCycles) {
      return error(`Chart has cycle: ${[...tsRet.cycle].join(", ")}`);
    }
    return ok(tsRet.order);
  }
  function ChartValidate(c2, taskDuration = null) {
    if (taskDuration === null) {
      taskDuration = (taskIndex) => c2.Vertices[taskIndex].duration;
    }
    const ret = validateDirectedGraph(c2);
    if (!ret.ok) {
      return ret;
    }
    if (taskDuration(0) !== 0) {
      return error(
        `Start Milestone must have duration of 0, instead got ${taskDuration(0)}`
      );
    }
    if (taskDuration(c2.Vertices.length - 1) !== 0) {
      return error(
        `Finish Milestone must have duration of 0, instead got ${taskDuration(
          c2.Vertices.length - 1
        )}`
      );
    }
    const allIDs = /* @__PURE__ */ new Set();
    for (let taskIndex = 0; taskIndex < c2.Vertices.length; taskIndex++) {
      const task = c2.Vertices[taskIndex];
      if (allIDs.has(task.id)) {
        return error(new Error(`Two tasks contain the same ID: ${task.id}`));
      }
      allIDs.add(task.id);
    }
    return ret;
  }

  // src/slack/slack.ts
  var Span = class {
    start;
    finish;
    constructor(start = 0, finish = 0) {
      this.start = start;
      this.finish = finish;
    }
  };
  var Slack = class {
    early = new Span();
    late = new Span();
    slack = 0;
  };
  function ComputeSlack(c2, taskDuration = null, round, earlyStartOverride = null, earlyFinishOverride = null) {
    if (taskDuration === null) {
      taskDuration = (taskIndex) => c2.Vertices[taskIndex].duration;
    }
    const slacks = new Array(c2.Vertices.length);
    for (let i3 = 0; i3 < c2.Vertices.length; i3++) {
      slacks[i3] = new Slack();
    }
    const r2 = ChartValidate(c2, taskDuration);
    if (!r2.ok) {
      return error(r2.error);
    }
    const edges = edgesBySrcAndDstToMap(c2.Edges);
    const topologicalOrder = r2.value;
    topologicalOrder.slice(1).forEach((vertexIndex) => {
      const slack = slacks[vertexIndex];
      slack.early.start = Math.max(
        ...edges.byDst.get(vertexIndex).map((e3) => {
          const predecessorSlack = slacks[e3.i];
          return predecessorSlack.early.finish;
        })
      );
      const earlyStartOverrideValue = earlyStartOverride?.(vertexIndex);
      if (earlyStartOverrideValue !== void 0) {
        slack.early.start = earlyStartOverrideValue;
      }
      const earlyFinishOverrideValue = earlyFinishOverride?.(vertexIndex);
      if (earlyFinishOverrideValue !== void 0) {
        slack.early.finish = earlyFinishOverrideValue;
      } else {
        slack.early.finish = round(slack.early.start + taskDuration(vertexIndex));
      }
    });
    topologicalOrder.reverse().forEach((vertexIndex) => {
      const slack = slacks[vertexIndex];
      const successors = edges.bySrc.get(vertexIndex);
      if (!successors || earlyStartOverride?.(vertexIndex)) {
        slack.late.finish = slack.early.finish;
        slack.late.start = slack.early.start;
        slack.slack = 0;
      } else {
        const lateStarts = edges.bySrc.get(vertexIndex).map((e3) => {
          const successorSlack = slacks[e3.j];
          return successorSlack.late.start;
        });
        if (lateStarts.length === 0) {
          slack.late.finish = slack.early.finish;
        } else {
          slack.late.finish = Math.min(...lateStarts);
        }
        slack.late.start = round(slack.late.finish - taskDuration(vertexIndex));
        slack.slack = round(slack.late.finish - slack.early.finish);
      }
    });
    return ok(slacks);
  }
  var CriticalPath = (slacks, round) => {
    const ret = [];
    slacks.forEach((slack, index) => {
      if (round(slack.late.finish - slack.early.finish) < Number.EPSILON && round(slack.early.finish - slack.early.start) > Number.EPSILON) {
        ret.push(index);
      }
    });
    return ret;
  };

  // src/task_completion/task_completion.ts
  var toJSON2 = (taskCompletion) => {
    const ret = {
      stage: taskCompletion.stage,
      start: 0,
      finish: 0,
      percentComplete: 0
    };
    switch (taskCompletion.stage) {
      case "unstarted":
        break;
      case "started":
        ret.start = taskCompletion.start;
        ret.percentComplete = taskCompletion.percentComplete;
        break;
      case "finished":
        ret.start = taskCompletion.span.start;
        ret.finish = taskCompletion.span.finish;
        break;
      default:
        taskCompletion;
        break;
    }
    return ret;
  };
  var fromJSON2 = (taskCompletionSerialized) => {
    const unstarted = { stage: "unstarted" };
    switch (taskCompletionSerialized.stage) {
      case "unstarted":
        return {
          stage: "unstarted"
        };
      case "started":
        if (taskCompletionSerialized.start === void 0) {
          return unstarted;
        }
        return {
          stage: "started",
          start: taskCompletionSerialized.start,
          percentComplete: taskCompletionSerialized.percentComplete
        };
      case "finished":
        if (taskCompletionSerialized.start === void 0 || taskCompletionSerialized.finish === void 0) {
          return unstarted;
        }
        return {
          stage: "finished",
          span: new Span(
            taskCompletionSerialized.start,
            taskCompletionSerialized.finish
          )
        };
      default:
        return unstarted;
    }
  };
  var taskCompletionsToJSON = (t4) => {
    return Object.fromEntries(
      Object.entries(t4).map(([key, taskCompletion]) => [
        key,
        toJSON2(taskCompletion)
      ])
    );
  };
  var taskCompletionsFromJSON = (t4) => {
    return Object.fromEntries(
      Object.entries(t4).map(([key, taskCompletionSerialized]) => [
        key,
        fromJSON2(taskCompletionSerialized)
      ])
    );
  };

  // src/ops/plan.ts
  var SetPlanStartStateSubOp = class _SetPlanStartStateSubOp {
    value;
    taskCompletions = null;
    constructor(value, taskCompletions = null) {
      this.value = value;
      this.taskCompletions = taskCompletions;
    }
    applyTo(plan) {
      const oldStatus = fromJSON(toJSON(plan.status));
      plan.status = this.value;
      const taskCompletionsSnapshot = taskCompletionsFromJSON(
        taskCompletionsToJSON(plan.taskCompletion)
      );
      if (this.taskCompletions !== null) {
        plan.taskCompletion = this.taskCompletions;
      }
      if (plan.status.stage === "unstarted") {
        plan.chart.Vertices.forEach((task) => {
          plan.taskCompletion[task.id] = { stage: "unstarted" };
        });
      }
      return ok({
        plan,
        inverse: new _SetPlanStartStateSubOp(oldStatus, taskCompletionsSnapshot)
      });
    }
  };
  var SetPlanUnitsSubOp = class _SetPlanUnitsSubOp {
    unit;
    constructor(unit) {
      this.unit = unit;
    }
    applyTo(plan) {
      const oldUnits = plan.durationUnits.kind();
      plan.setDurationUnits(this.unit);
      return ok({
        plan,
        inverse: new _SetPlanUnitsSubOp(oldUnits)
      });
    }
  };
  var SetTaskCompletionSubOp = class _SetTaskCompletionSubOp {
    taskIndex;
    value;
    constructor(taskIndex, value) {
      this.taskIndex = taskIndex;
      this.value = value;
    }
    applyTo(plan) {
      if (this.value.stage !== "unstarted" && plan.status.stage === "unstarted") {
        return error(
          new Error("Can't start a task if the plan hasn't been started.")
        );
      }
      if (this.value.stage === "started") {
        if (this.value.start < 0) {
          return error(
            new Error(
              "The start of a task can't come befoe the start of the plan."
            )
          );
        }
        if (this.value.percentComplete < 1 || this.value.percentComplete > 99) {
          return error(new Error("Percent Complete must be in [1, 99]."));
        }
      }
      if (this.value.stage === "finished") {
        if (this.value.span.finish < this.value.span.start) {
          return error(new Error("Finish can't come before Start."));
        }
        if (this.value.span.start < 0) {
          return error(
            new Error(
              "The start of a task can't come befoe the start of the plan."
            )
          );
        }
      }
      const ret = plan.getTaskCompletion(this.taskIndex);
      if (!ret.ok) {
        return ret;
      }
      const oldTaskStatus = fromJSON2(toJSON2(ret.value));
      const setRet = plan.setTaskCompletion(this.taskIndex, this.value);
      if (!setRet.ok) {
        return setRet;
      }
      return ok({
        plan,
        inverse: new _SetTaskCompletionSubOp(this.taskIndex, oldTaskStatus)
      });
    }
  };
  function SetTaskCompletionOp(taskIndex, value) {
    return new Op([new SetTaskCompletionSubOp(taskIndex, value)]);
  }
  function SetPlanUnitsOp(unit) {
    return new Op([new SetPlanUnitsSubOp(unit)]);
  }
  function SetPlanStartStateOp(value) {
    return new Op([new SetPlanStartStateSubOp(value)]);
  }

  // src/units/weekdays.ts
  var Weekdays = class {
    start;
    /**
     * Maps from a number of weekdays (from this.start) to a number of days (which
     * ignores includes weekends.
     */
    cache;
    lastCacheEntry;
    constructor(start) {
      this.start = start;
      this.cache = /* @__PURE__ */ new Map();
      this.cache.set(0, 0);
      this.lastCacheEntry = 0;
    }
    dateToWeekday(s2) {
      const ret = parseDateString(s2);
      if (!ret.ok) {
        return ret;
      }
      const date = ret.value;
      if (date <= this.start) {
        return error(new Error(`${date} comes before ${this.start}`));
      }
      const start = new Date(this.start.getTime());
      let formattedDate = dateDisplay(start);
      let weekDay = 0;
      while (formattedDate < s2) {
        const oldDate = start.getDate();
        start.setDate(oldDate + 1);
        const dayOfWeek = start.getDay();
        if (dayOfWeek === 0 || dayOfWeek === 6) {
          continue;
        }
        weekDay += 1;
        formattedDate = dateDisplay(start);
      }
      return ok(weekDay);
    }
    weekdaysToDays(numWeekdays) {
      if (numWeekdays < 0) {
        return 0;
      }
      numWeekdays = Math.trunc(numWeekdays);
      const cacheValue = this.cache.get(numWeekdays);
      if (cacheValue !== void 0) {
        return cacheValue;
      }
      const start = new Date(this.start.getTime());
      let weekday = this.lastCacheEntry;
      let day = this.cache.get(weekday);
      start.setDate(start.getDate() + day);
      while (weekday !== numWeekdays) {
        const oldDate = start.getDate();
        start.setDate(oldDate + 1);
        day += 1;
        const dayOfWeek = start.getDay();
        if (dayOfWeek === 0 || dayOfWeek === 6) {
          continue;
        }
        weekday += 1;
        this.cache.set(weekday, day);
      }
      this.lastCacheEntry = weekday;
      return day;
    }
  };

  // src/units/unit.ts
  var UnitBase = class {
    start;
    metricDefn;
    unitType;
    constructor(start, metricDefn, unitType) {
      this.start = start;
      this.metricDefn = metricDefn;
      this.unitType = unitType;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    displayTime(_t) {
      throw new Error("Method implemented in subclasses.");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    asDate(_t) {
      throw new Error("Method implemented in subclasses.");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parse(_s) {
      throw new Error("Method implemented in subclasses.");
    }
    kind() {
      return this.unitType;
    }
    toJSON() {
      return { unitType: this.unitType };
    }
    static fromJSON(s2, start, metricDefn) {
      return UnitBuilders[toUnit(s2.unitType)](start, metricDefn);
    }
  };
  var UNIT_TYPES = ["Unitless", "Days", "Weekdays"];
  var UnitBuilders = {
    Unitless: (start, metricDefn) => new Unitless(start, metricDefn),
    Days: (start, metricDefn) => new Days(start, metricDefn),
    Weekdays: (start, metricDefn) => new WeekDays(start, metricDefn)
  };
  var toUnit = (s2) => {
    if (UNIT_TYPES.some((t4) => t4 === s2)) {
      return s2;
    }
    return "Unitless";
  };
  var Unitless = class extends UnitBase {
    constructor(start, metricDefn) {
      super(start, metricDefn, "Unitless");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    displayTime(t4, _locale) {
      return this.metricDefn.clampAndRound(t4).toString();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    asDate(_t) {
      return this.start;
    }
    parse(s2) {
      const parsed = +s2;
      if (Number.isNaN(parsed)) {
        return error(new Error(`Invalid number value: ${s2}`));
      }
      return ok(this.metricDefn.clampAndRound(parsed));
    }
  };
  var Days = class extends UnitBase {
    constructor(start, metricDefn) {
      super(start, metricDefn, "Days");
    }
    displayTime(t4) {
      return dateDisplay(this.asDate(t4));
    }
    asDate(t4) {
      const d2 = new Date(this.start.getTime());
      d2.setDate(d2.getDate() + t4);
      return d2;
    }
    parse(s2) {
      const ret = parseDateString(s2);
      if (!ret.ok) {
        return ret;
      }
      const deltaInMilliseconds = ret.value.getTime() - this.start.getTime() + 1;
      if (deltaInMilliseconds < 0) {
        return error(new Error("Dates before the plan start are not allowed."));
      }
      return ok(
        this.metricDefn.clampAndRound(deltaInMilliseconds / (1e3 * 60 * 60 * 24))
      );
    }
  };
  var WeekDays = class extends UnitBase {
    weekdays;
    constructor(start, metricDefn) {
      super(start, metricDefn, "Weekdays");
      this.weekdays = new Weekdays(start);
    }
    // Locale only used for testing.
    displayTime(t4) {
      return dateDisplay(this.asDate(t4));
    }
    asDate(t4) {
      const d2 = new Date(this.start.getTime());
      d2.setDate(d2.getDate() + this.weekdays.weekdaysToDays(t4));
      return d2;
    }
    parse(s2) {
      return this.weekdays.dateToWeekday(s2);
    }
  };

  // src/plan-config-panel/plan-config-panel.ts
  var PlanConfigPanel = class extends HTMLElement {
    explanMain = null;
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        if (this.explanMain !== null) {
          this.render();
        }
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    render() {
      B(this.template(), this);
    }
    setConfig(explanMain2) {
      this.explanMain = explanMain2;
      this.render();
    }
    template() {
      return x`
      <h3>Plan Status</h3>
      <div>
        <div>${this.unstartedContent()} ${this.startedContent()}</div>
        <label>
          Units
          <select
            size=${UNIT_TYPES.length}
            @input=${(e3) => this.unitChanged(e3)}
          >
            ${UNIT_TYPES.map((unitType) => {
        return x`<option value=${unitType}>${unitType}</option>`;
      })}
          </select>
        </label>
      </div>
    `;
    }
    async unitChanged(e3) {
      const unitAsString = e3.target.value;
      const ret = await executeOp(
        SetPlanUnitsOp(toUnit(unitAsString)),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
    unstartedContent() {
      if (this.explanMain.plan.status.stage === "unstarted") {
        return x`
        <label>
          <input type="checkbox" @input=${() => this.start()} /> Started
        </label>
      `;
      } else {
        return x``;
      }
    }
    startedContent() {
      if (this.explanMain.plan.status.stage === "started") {
        return x`
        <label>
          <input type="checkbox" checked @input=${() => this.unstart()} />
          Started
        </label>
        <input
          type="date"
          .value=${dateDisplay(new Date(this.explanMain.plan.status.start))}
          @input=${(e3) => this.dateChanged(e3)}
        />
      `;
      } else {
        return x``;
      }
    }
    async dateChanged(e3) {
      const start = e3.target.valueAsDate.getTime();
      const ret = await executeOp(
        SetPlanStartStateOp({ stage: "started", start }),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
    async start() {
      const start = Date.now();
      const ret = await executeOp(
        SetPlanStartStateOp({ stage: "started", start }),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
    async unstart() {
      const ret = await executeOp(
        SetPlanStartStateOp({ stage: "unstarted", start: 0 }),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
  };
  customElements.define("plan-config-panel", PlanConfigPanel);

  // node_modules/lit-html/directive.js
  var t2 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
  var e2 = (t4) => (...e3) => ({ _$litDirective$: t4, values: e3 });
  var i2 = class {
    constructor(t4) {
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AT(t4, e3, i3) {
      this._$Ct = t4, this._$AM = e3, this._$Ci = i3;
    }
    _$AS(t4, e3) {
      return this.update(t4, e3);
    }
    update(t4, e3) {
      return this.render(...e3);
    }
  };

  // node_modules/lit-html/directive-helpers.js
  var { I: t3 } = Z;
  var f2 = (o2) => void 0 === o2.strings;
  var u2 = {};
  var m2 = (o2, t4 = u2) => o2._$AH = t4;

  // node_modules/lit-html/directives/live.js
  var l2 = e2(class extends i2 {
    constructor(r2) {
      if (super(r2), r2.type !== t2.PROPERTY && r2.type !== t2.ATTRIBUTE && r2.type !== t2.BOOLEAN_ATTRIBUTE) throw Error("The `live` directive is not allowed on child or event bindings");
      if (!f2(r2)) throw Error("`live` bindings can only contain a single expression");
    }
    render(r2) {
      return r2;
    }
    update(i3, [t4]) {
      if (t4 === T || t4 === E) return t4;
      const o2 = i3.element, l3 = i3.name;
      if (i3.type === t2.PROPERTY) {
        if (t4 === o2[l3]) return T;
      } else if (i3.type === t2.BOOLEAN_ATTRIBUTE) {
        if (!!t4 === o2.hasAttribute(l3)) return T;
      } else if (i3.type === t2.ATTRIBUTE && o2.getAttribute(l3) === t4 + "") return T;
      return m2(i3), t4;
    }
  });

  // src/date-picker/date-picker.ts
  var DatePicker = class extends HTMLElement {
    _value = null;
    set value(v2) {
      this._value = v2;
      this.render();
    }
    render() {
      B(this.template(), this);
    }
    template() {
      if (this._value === null) {
        return x``;
      }
      const kind = this._value.unit.kind();
      if (kind === "Unitless") {
        return x` <input
        type="text"
        .value=${l2(this._value.dateOffset)}
        @change=${(e3) => this.inputChanged(e3)}
      />`;
      } else {
        return x`
        <input
          type="date"
          .value=${l2(
          dateDisplay(this._value.unit.asDate(this._value.dateOffset))
        )}
          @input=${(e3) => this.inputChanged(e3)}
        />
      `;
      }
    }
    inputChanged(e3) {
      const ret = this._value.unit.parse(e3.target.value);
      if (!ret.ok) {
        this.render();
        reportErrorMsg(ret.error);
      } else {
        this.dispatchEvent(
          new CustomEvent("date-picker-input", {
            bubbles: true,
            detail: ret.value
          })
        );
      }
    }
  };
  customElements.define("date-picker", DatePicker);

  // src/task-completion-panel/task-completion-panel.ts
  var TaskCompletionPanel = class extends HTMLElement {
    explanMain = null;
    span = null;
    taskIndex = 0;
    taskCompletion = null;
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        this.updateOnInput();
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    update(explanMain2, taskIndex, span) {
      this.explanMain = explanMain2;
      this.taskIndex = taskIndex;
      this.span = span;
      this.updateOnInput();
    }
    updateOnInput() {
      const ret = this.explanMain.plan.getTaskCompletion(this.taskIndex);
      if (ret.ok) {
        this.taskCompletion = ret.value;
      }
      B(this.template(), this);
    }
    template() {
      if (this.taskCompletion === null) {
        return x``;
      }
      if (this.explanMain.plan.status.stage === "unstarted") {
        return x``;
      }
      switch (this.taskCompletion.stage) {
        case "unstarted":
          return x`<div>
          <label>
            <input type="checkbox" @change=${() => this.start()} />
            Started
          </label>
        </div>`;
          break;
        case "started":
          return x`<div>
          <label>
            <input type="checkbox" checked @change=${() => this.unstart()} />
            Started
          </label>

          <date-picker
            .value=${{
            unit: this.explanMain.plan.durationUnits,
            dateOffset: this.taskCompletion.start
          }}
            @date-picker-input=${(e3) => this.startDateChanged(e3)}
          ></date-picker>

          <label>
            <input type="checkbox" @change=${() => this.finish()} />
            Finished
          </label>

          <label>
            <input
              type="number"
              min="1"
              max="99"
              step="1"
              .value=${l2(this.taskCompletion.percentComplete)}
              @change=${(e3) => this.percentChange(e3)}
            />
            % Complete
          </label>
        </div>`;
          break;
        case "finished":
          return x`<div>
          <label>
            <input type="checkbox" checked @change=${() => this.unstart()} />
            Started
          </label>

          <date-picker
            .value=${{
            unit: this.explanMain.plan.durationUnits,
            dateOffset: this.taskCompletion.span.start
          }}
            @date-picker-input=${(e3) => this.startDateChanged(e3)}
          ></date-picker>

          <label>
            <input type="checkbox" checked @change=${() => this.unfinish()} />
            Finished
          </label>

          <date-picker
            .value=${{
            unit: this.explanMain.plan.durationUnits,
            dateOffset: this.taskCompletion.span.finish
          }}
            @date-picker-input=${(e3) => this.finishDateChanged(e3)}
          ></date-picker>
        </div>`;
          break;
        default:
          this.taskCompletion;
          return x``;
          break;
      }
    }
    async taskCompletionChanged(t4) {
      const ret = await executeOp(
        SetTaskCompletionOp(this.taskIndex, t4),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      if (!ret.ok) {
        this.updateOnInput();
        reportErrorMsg(ret.error);
      }
    }
    async start() {
      this.taskCompletionChanged({
        stage: "started",
        start: this.span.start,
        percentComplete: 10
      });
    }
    unstart() {
      this.taskCompletionChanged({
        stage: "unstarted"
      });
    }
    finish() {
      if (this.taskCompletion.stage === "started") {
        this.taskCompletionChanged({
          stage: "finished",
          // TODO Make sure finish > start.
          // TODO Make finish default to "today"?
          span: new Span(this.taskCompletion.start, this.span.finish)
        });
      }
    }
    unfinish() {
      if (this.taskCompletion.stage === "finished") {
        this.taskCompletionChanged({
          stage: "started",
          // TODO Make sure finish > start.
          // TODO Make finish default to "today"?
          percentComplete: 90,
          start: this.taskCompletion.span.start
        });
      }
    }
    percentChange(e3) {
      const dup2 = fromJSON2(toJSON2(this.taskCompletion));
      if (dup2.stage === "started") {
        dup2.percentComplete = e3.target.valueAsNumber;
        this.taskCompletionChanged(dup2);
      }
    }
    startDateChanged(e3) {
      const dup2 = fromJSON2(toJSON2(this.taskCompletion));
      if (dup2.stage === "finished") {
        dup2.span.start = e3.detail;
      } else if (dup2.stage === "started") {
        dup2.start = e3.detail;
      }
      this.taskCompletionChanged(dup2);
    }
    finishDateChanged(e3) {
      const dup2 = fromJSON2(toJSON2(this.taskCompletion));
      if (dup2.stage === "finished") {
        dup2.span.finish = e3.detail;
      }
      this.taskCompletionChanged(dup2);
    }
  };
  customElements.define("task-completion-panel", TaskCompletionPanel);

  // src/resources/resources.ts
  var DEFAULT_RESOURCE_VALUE = "";
  var ResourceDefinition = class _ResourceDefinition {
    values;
    // True if the Resource is built in and can't be edited or deleted.
    isStatic;
    constructor(values = [DEFAULT_RESOURCE_VALUE], isStatic = false) {
      this.values = values;
      this.isStatic = isStatic;
    }
    toJSON() {
      return {
        values: this.values,
        static: this.isStatic
      };
    }
    static fromJSON(s2) {
      return new _ResourceDefinition(s2.values, s2.static);
    }
  };

  // src/ops/resources.ts
  var AddResourceSubOp = class {
    key;
    deleteResourceUndoState;
    constructor(name, deleteResourceUndoState = null) {
      this.key = name;
      this.deleteResourceUndoState = deleteResourceUndoState;
    }
    applyTo(plan) {
      const foundMatch = plan.getResourceDefinition(this.key);
      if (foundMatch !== void 0) {
        return error(`${this.key} already exists as a Resource`);
      }
      plan.setResourceDefinition(
        this.key,
        this.deleteResourceUndoState && this.deleteResourceUndoState.resourceDefinition || new ResourceDefinition()
      );
      plan.chart.Vertices.forEach((task, index) => {
        task.setResource(
          this.key,
          this.deleteResourceUndoState && this.deleteResourceUndoState.taskIndexToDeletedResourceValue.get(
            index
          ) || DEFAULT_RESOURCE_VALUE
        );
      });
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new DeleteResourceSupOp(this.key);
    }
  };
  var DeleteResourceSupOp = class {
    key;
    constructor(name) {
      this.key = name;
    }
    applyTo(plan) {
      const resourceDefinition = plan.getResourceDefinition(this.key);
      if (resourceDefinition === void 0) {
        return error(
          `The resource with name ${this.key} does not exist and can't be deleted.`
        );
      }
      plan.deleteResourceDefinition(this.key);
      const taskIndexToDeletedResourceValue = /* @__PURE__ */ new Map();
      plan.chart.Vertices.forEach((task, index) => {
        const value = task.getResource(this.key) || DEFAULT_RESOURCE_VALUE;
        taskIndexToDeletedResourceValue.set(index, value);
        task.deleteResource(this.key);
      });
      const deleteResourceUndoState = {
        resourceDefinition,
        taskIndexToDeletedResourceValue
      };
      return ok({
        plan,
        inverse: this.inverse(deleteResourceUndoState)
      });
    }
    inverse(deleteResourceUndoState) {
      return new AddResourceSubOp(this.key, deleteResourceUndoState);
    }
  };
  var AddResourceOptionSubOp = class {
    key;
    value;
    indicesOfTasksToChange = [];
    constructor(key, value, indicesOfTasksToChange = []) {
      this.key = key;
      this.value = value;
      this.indicesOfTasksToChange = indicesOfTasksToChange;
    }
    applyTo(plan) {
      const definition = plan.getResourceDefinition(this.key);
      if (definition === void 0) {
        return error(`${this.key} doesn't exist as a Resource`);
      }
      const existingIndex = definition.values.findIndex(
        (value) => value === this.value
      );
      if (existingIndex !== -1) {
        return error(
          `${this.value} already exists as a value in the Resource ${this.key}.`
        );
      }
      definition.values.push(this.value);
      this.indicesOfTasksToChange.forEach((taskIndex) => {
        plan.chart.Vertices[taskIndex].setResource(this.key, this.value);
      });
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new DeleteResourceOptionSubOp(
        this.key,
        this.value,
        this.indicesOfTasksToChange
      );
    }
  };
  var DeleteResourceOptionSubOp = class {
    key;
    value;
    indicesOfTasksToChange;
    constructor(key, value, indicesOfTasksToChange = []) {
      this.key = key;
      this.value = value;
      this.indicesOfTasksToChange = indicesOfTasksToChange;
    }
    applyTo(plan) {
      const definition = plan.getResourceDefinition(this.key);
      if (definition === void 0) {
        return error(`${this.key} doesn't exist as a Resource`);
      }
      const valueIndex = definition.values.findIndex(
        (value) => value === this.value
      );
      if (valueIndex === -1) {
        return error(
          `${this.value} does not exist as a value in the Resource ${this.key}.`
        );
      }
      if (definition.values.length === 1) {
        return error(
          `Resources must have at least one value. ${this.value} only has one value, so it can't be deleted. `
        );
      }
      definition.values.splice(valueIndex, 1);
      const indicesOfTasksWithMatchingResourceValues = [];
      plan.chart.Vertices.forEach((task, index) => {
        const resourceValue = task.getResource(this.key);
        if (resourceValue === void 0) {
          return;
        }
        if (resourceValue !== this.value) {
          return;
        }
        task.setResource(this.key, definition.values[0]);
        indicesOfTasksWithMatchingResourceValues.push(index);
      });
      return ok({
        plan,
        inverse: this.inverse(indicesOfTasksWithMatchingResourceValues)
      });
    }
    inverse(indicesOfTasksToChange) {
      return new AddResourceOptionSubOp(
        this.key,
        this.value,
        indicesOfTasksToChange
      );
    }
  };
  var RenameResourceSubOp = class _RenameResourceSubOp {
    oldKey;
    newKey;
    constructor(oldKey, newKey) {
      this.oldKey = oldKey;
      this.newKey = newKey;
    }
    applyTo(plan) {
      const oldDefinition = plan.getResourceDefinition(this.oldKey);
      if (oldDefinition === void 0) {
        return error(`${this.oldKey} does not exist as a Resource`);
      }
      const newKeyDefinition = plan.getResourceDefinition(this.newKey);
      if (newKeyDefinition !== void 0) {
        return error(`${this.newKey} already exists as a resource name.`);
      }
      plan.deleteResourceDefinition(this.oldKey);
      plan.setResourceDefinition(this.newKey, oldDefinition);
      plan.chart.Vertices.forEach((task) => {
        const currentValue = task.getResource(this.oldKey) || DEFAULT_RESOURCE_VALUE;
        task.setResource(this.newKey, currentValue);
        task.deleteResource(this.oldKey);
      });
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new _RenameResourceSubOp(this.newKey, this.oldKey);
    }
  };
  var RenameResourceOptionSubOp = class _RenameResourceOptionSubOp {
    key;
    oldValue;
    newValue;
    constructor(key, oldValue, newValue) {
      this.key = key;
      this.oldValue = oldValue;
      this.newValue = newValue;
    }
    applyTo(plan) {
      const foundMatch = plan.getResourceDefinition(this.key);
      if (foundMatch === void 0) {
        return error(`${this.key} does not exist as a Resource`);
      }
      const oldValueIndex = foundMatch.values.indexOf(this.oldValue);
      if (oldValueIndex === -1) {
        return error(`${this.key} does not a value ${this.oldValue}`);
      }
      const newValueIndex = foundMatch.values.indexOf(this.newValue);
      if (newValueIndex !== -1) {
        return error(`${this.key} already has a value ${this.newValue}`);
      }
      foundMatch.values.splice(oldValueIndex, 1, this.newValue);
      plan.chart.Vertices.forEach((task) => {
        const currentValue = task.getResource(this.key);
        if (currentValue === this.oldValue) {
          task.setResource(this.key, this.newValue);
        }
      });
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new _RenameResourceOptionSubOp(
        this.key,
        this.newValue,
        this.oldValue
      );
    }
  };
  var MoveResourceOptionSubOp = class _MoveResourceOptionSubOp {
    key;
    oldIndex;
    newIndex;
    constructor(key, oldValue, newValue) {
      this.key = key;
      this.oldIndex = oldValue;
      this.newIndex = newValue;
    }
    applyTo(plan) {
      const definition = plan.getResourceDefinition(this.key);
      if (definition === void 0) {
        return error(`${this.key} does not exist as a Resource`);
      }
      if (this.newIndex < 0) {
        return error(`${this.newIndex} is not a valid target value.`);
      }
      if (this.oldIndex > definition.values.length - 1) {
        return error(
          `${this.key} does not have a value at index ${this.oldIndex}`
        );
      }
      if (this.newIndex > definition.values.length - 1) {
        return error(
          `${this.key} does not have a value at index ${this.newIndex}`
        );
      }
      const tmp = definition.values[this.oldIndex];
      definition.values[this.oldIndex] = definition.values[this.newIndex];
      definition.values[this.newIndex] = tmp;
      return ok({ plan, inverse: this.inverse() });
    }
    inverse() {
      return new _MoveResourceOptionSubOp(this.key, this.newIndex, this.oldIndex);
    }
  };
  var SetResourceValueSubOp = class _SetResourceValueSubOp {
    key;
    value;
    taskIndex;
    constructor(key, value, taskIndex) {
      this.key = key;
      this.value = value;
      this.taskIndex = taskIndex;
    }
    applyTo(plan) {
      const foundMatch = plan.getResourceDefinition(this.key);
      if (foundMatch === void 0) {
        return error(`${this.key} does not exist as a Resource`);
      }
      const foundValueMatch = foundMatch.values.findIndex((v2) => {
        return v2 === this.value;
      });
      if (foundValueMatch === -1) {
        return error(`${this.key} does not have a value of ${this.value}`);
      }
      if (this.taskIndex < 0 || this.taskIndex >= plan.chart.Vertices.length) {
        return error(`There is no Task at index ${this.taskIndex}`);
      }
      const task = plan.chart.Vertices[this.taskIndex];
      const oldValue = task.getResource(this.key);
      task.setResource(this.key, this.value);
      return ok({ plan, inverse: this.inverse(oldValue) });
    }
    inverse(oldValue) {
      return new _SetResourceValueSubOp(this.key, oldValue, this.taskIndex);
    }
  };
  function AddResourceOp(name) {
    return new Op([new AddResourceSubOp(name)]);
  }
  function DeleteResourceOp(name) {
    return new Op([new DeleteResourceSupOp(name)]);
  }
  function AddResourceOptionOp(key, value) {
    return new Op([new AddResourceOptionSubOp(key, value)]);
  }
  function DeleteResourceOptionOp(key, value) {
    return new Op([new DeleteResourceOptionSubOp(key, value)]);
  }
  function RenameResourceOptionOp(key, oldValue, newValue) {
    return new Op([new RenameResourceOptionSubOp(key, oldValue, newValue)]);
  }
  function RenameResourceOp(oldValue, newValue) {
    return new Op([new RenameResourceSubOp(oldValue, newValue)]);
  }
  function MoveResourceOptionOp(key, oldIndex, newIndex) {
    return new Op([new MoveResourceOptionSubOp(key, oldIndex, newIndex)]);
  }
  function SetResourceValueOp(key, value, taskIndex) {
    return new Op([new SetResourceValueSubOp(key, value, taskIndex)]);
  }

  // src/edit-resource-definition/edit-resource-definition.ts
  var EditResourceDefinition = class extends HTMLElement {
    explanMain = null;
    resourceDefinition = new ResourceDefinition();
    name = "";
    planDefinitionChangedCallback;
    newValueCounter = 0;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        this.render();
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    showModal(explanMain2, name, resourceDefinition) {
      this.explanMain = explanMain2;
      this.resourceDefinition = resourceDefinition;
      this.name = name;
      this.render();
      this.querySelector("dialog").showModal();
    }
    render() {
      B(this.template(), this);
    }
    cancel() {
      this.querySelector("dialog").close();
    }
    async executeOp(op) {
      const ret = await executeOp(
        op,
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      if (!ret.ok) {
        window.alert(ret.error);
      }
      return ret;
    }
    async changeResourceName(e3, newName, oldName) {
      const ret = await this.executeOp(RenameResourceOp(oldName, newName));
      if (!ret.ok) {
        window.alert(ret.error);
        this.name = oldName;
        this.render();
      }
      this.name = newName;
    }
    async changeResourceValueName(e3, newValue, oldValue) {
      const ret = await this.executeOp(
        RenameResourceOptionOp(this.name, oldValue, newValue)
      );
      if (!ret.ok) {
        window.alert(ret.error);
        e3.target.value = oldValue;
        this.render();
      }
    }
    getProposedResourceName() {
      this.newValueCounter++;
      return `New Value ${this.newValueCounter}`;
    }
    async newResourceValue() {
      this.newValueCounter = 0;
      let newResourceName = this.getProposedResourceName();
      while (this.explanMain.plan.resourceDefinitions[this.name].values.findIndex(
        (value) => value === newResourceName
      ) != -1) {
        newResourceName = this.getProposedResourceName();
      }
      await this.executeOp(AddResourceOptionOp(this.name, newResourceName));
    }
    async moveUp(value, valueIndex) {
      await this.executeOp(
        MoveResourceOptionOp(this.name, valueIndex, valueIndex - 1)
      );
    }
    async moveDown(value, valueIndex) {
      await this.executeOp(
        MoveResourceOptionOp(this.name, valueIndex, valueIndex + 1)
      );
    }
    async moveToTop(value, valueIndex) {
      await this.executeOp(MoveResourceOptionOp(this.name, valueIndex, 0));
    }
    async moveToBottom(value, valueIndex) {
      await this.executeOp(
        MoveResourceOptionOp(
          this.name,
          valueIndex,
          this.explanMain.plan.resourceDefinitions[this.name].values.length - 1
        )
      );
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async deleteResourceValue(value, _valueIndex) {
      await this.executeOp(DeleteResourceOptionOp(this.name, value));
    }
    template() {
      return x`
      <dialog>
        <label>
          Name:
          <input
            type="text"
            .value=${l2(this.name)}
            data-old-name=${this.name}
            @change=${(e3) => {
        const ele = e3.target;
        this.changeResourceName(e3, ele.value, ele.dataset.oldName || "");
      }}
          />
        </label>
        <table>
          ${this.resourceDefinition.values.map(
        (value, valueIndex) => {
          return x`<tr>
                <td>
                  <input
                    data-old-value=${value}
                    @change=${(e3) => {
            const ele = e3.target;
            this.changeResourceValueName(
              e3,
              ele.value,
              ele.dataset.oldValue || ""
            );
          }}
                    .value=${l2(value)}
                    type="text"
                  />
                </td>
                <td>
                  <button
                    @click=${() => this.moveUp(value, valueIndex)}
                    class="icon-button"
                    .disabled=${valueIndex === 0}
                  >
                    ${icon("keyboard-up-icon")}
                  </button>
                </td>
                <td>
                  <button
                    .disabled=${valueIndex === this.resourceDefinition.values.length - 1}
                    class="icon-button"
                    @click=${() => this.moveDown(value, valueIndex)}
                  >
                    ${icon("keyboard-down-icon")}
                  </button>
                </td>
                <td>
                  <button
                    .disabled=${valueIndex === this.resourceDefinition.values.length - 1}
                    class="icon-button"
                    @click=${() => this.moveToBottom(value, valueIndex)}
                  >
                    ${icon("keyboard-double-down-icon")}
                  </button>
                </td>
                <td>
                  <button
                    .disabled=${valueIndex === 0}
                    class="icon-button"
                    @click=${() => this.moveToTop(value, valueIndex)}
                  >
                    ${icon("keyboard-double-up-icon")}
                  </button>
                </td>
                <td>
                  <button
                    .disabled=${this.resourceDefinition.values.length === 1}
                    class="icon-button"
                    @click=${() => this.deleteResourceValue(value, valueIndex)}
                  >
                    ${icon("delete-icon")}
                  </button>
                </td>
              </tr>`;
        }
      )}
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td>
              <button
                @click=${() => {
        this.newResourceValue();
      }}
              >
                New
              </button>
            </td>
          </tr>
        </table>
        <div class="dialog-footer">
          <button @click=${() => this.cancel()}>Close</button>
        </div>
      </dialog>
    `;
    }
  };
  customElements.define("edit-resource-definition", EditResourceDefinition);

  // src/metrics/range.ts
  var displayValue = (x2) => {
    if (x2 === Number.MAX_VALUE) {
      return "(max float)";
    } else if (x2 === -Number.MAX_VALUE) {
      return "(min float)";
    } else {
      return x2.toString();
    }
  };
  var clamp = (x2, min, max) => {
    if (x2 > max) {
      return max;
    }
    if (x2 < min) {
      return min;
    }
    return x2;
  };
  var MetricRange = class _MetricRange {
    _min = -Number.MAX_VALUE;
    _max = Number.MAX_VALUE;
    constructor(min = -Number.MAX_VALUE, max = Number.MAX_VALUE) {
      if (max < min) {
        [min, max] = [max, min];
      }
      this._min = min;
      this._max = max;
    }
    clamp(value) {
      return clamp(value, this._min, this._max);
    }
    get min() {
      return this._min;
    }
    get max() {
      return this._max;
    }
    toJSON() {
      return {
        min: this._min,
        max: this._max
      };
    }
    static fromJSON(s2) {
      if (s2 === void 0) {
        return new _MetricRange();
      }
      return new _MetricRange(s2.min, s2.max);
    }
  };

  // src/precision/precision.ts
  var Precision = class _Precision {
    _precision;
    constructor(precision2 = 0) {
      if (!Number.isFinite(precision2)) {
        precision2 = 0;
      }
      this._precision = Math.abs(Math.trunc(precision2));
    }
    round(x2) {
      return +x2.toFixed(this._precision);
    }
    rounder() {
      return (x2) => this.round(x2);
    }
    get precision() {
      return this._precision;
    }
    toJSON() {
      return {
        precision: this._precision
      };
    }
    static fromJSON(s2) {
      if (s2 === void 0) {
        return new _Precision();
      }
      return new _Precision(s2.precision);
    }
  };

  // src/metrics/metrics.ts
  var MetricDefinition = class _MetricDefinition {
    range;
    default;
    isStatic;
    precision;
    constructor(defaultValue, range = new MetricRange(), isStatic = false, precision2 = new Precision(1)) {
      this.precision = precision2;
      this.range = range;
      this.default = defaultValue;
      this.isStatic = isStatic;
      this.rationalize();
    }
    rationalize() {
      this.range = new MetricRange(
        this.precision.round(this.range.min),
        this.precision.round(this.range.max)
      );
      this.default = this.clampAndRound(this.default);
    }
    clampAndRound(x2) {
      return this.precision.round(this.range.clamp(x2));
    }
    toJSON() {
      return {
        range: this.range.toJSON(),
        default: this.default,
        precision: this.precision.toJSON()
      };
    }
    static fromJSON(s2) {
      if (s2 === void 0) {
        return new _MetricDefinition(0);
      }
      return new _MetricDefinition(
        s2.default || 0,
        MetricRange.fromJSON(s2.range),
        false,
        Precision.fromJSON(s2.precision)
      );
    }
  };

  // src/edit-metrics-panel/edit-metrics-panel.ts
  var EditMetricsPanel = class extends HTMLElement {
    explanMain = null;
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        if (this.explanMain !== null) {
          this.render();
        }
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    render() {
      B(this.template(), this);
    }
    setConfig(explanMain2) {
      this.explanMain = explanMain2;
      this.render();
    }
    template() {
      const md = this.explanMain.plan.metricDefinitions;
      const allKeysSorted = Object.keys(md).sort(
        (keyA, keyB) => {
          const a2 = md[keyA];
          const b2 = md[keyB];
          if (a2.isStatic === b2.isStatic) {
            return keyA.localeCompare(keyB);
          }
          if (a2.isStatic) {
            return -1;
          }
          return 1;
        }
      );
      return x` <h3>Metrics</h3>
      <table>
        <tr>
          <th>Name</th>
          <th>Min</th>
          <th>Max</th>
          <th>Default</th>
          <th></th>
          <th></th>
        </tr>

        ${allKeysSorted.map((metricName) => {
        const metricDefn = this.explanMain.plan.metricDefinitions[metricName];
        return x`
            <tr>
              <td>${metricName}</td>
              <td>${displayValue(metricDefn.range.min)}</td>
              <td>${displayValue(metricDefn.range.max)}</td>
              <td>${metricDefn.default}</td>
              <td>
                ${this.delButtonIfNotStatic(metricName, metricDefn.isStatic)}
              </td>
              <td>
                ${this.editButtonIfNotStatic(metricName, metricDefn.isStatic)}
              </td>
            </tr>
          `;
      })}
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td>
            <button
              class="icon-button"
              title="Add a new Resource."
              @click=${() => {
        this.newMetric();
      }}
            >
              ${icon("add-icon")}
            </button>
          </td>
        </tr>
      </table>`;
    }
    delButtonIfNotStatic(name, isStatic) {
      if (isStatic) {
        return x``;
      }
      return x`<button
      class="icon-button"
      title="Delete this metric."
      @click=${() => this.deleteMetric(name)}
    >
      ${icon("delete-icon")}
    </button>`;
    }
    async deleteMetric(name) {
      const ret = await executeOp(
        DeleteMetricOp(name),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
    editButtonIfNotStatic(name, isStatic) {
      if (isStatic) {
        return x``;
      }
      return x`<button
      class="icon-button"
      title="Edit the resource definition."
      @click=${() => this.editMetric(name)}
    >
      ${icon("edit-icon")}
    </button>`;
    }
    editMetric(name) {
      this.explanMain.querySelector(
        "edit-metric-definition"
      ).showModal(this.explanMain, name);
    }
    async newMetric() {
      let name = await document.querySelector("prompt-dialog").prompt("Metric Name");
      if (name === null) {
        return;
      }
      name = name.trim();
      if (name === "") {
        reportErrorMsg(
          new Error(
            "Metric names cannot be empty and must contain more than whitespace characters."
          )
        );
        return;
      }
      const ret = await executeOp(
        AddMetricOp(name, new MetricDefinition(0)),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
  };
  customElements.define("edit-metrics-panel", EditMetricsPanel);

  // src/edit-metric-definition/edit-metric-definition.ts
  var EditMetricDefinition = class extends HTMLElement {
    explanMain = null;
    metricName = "";
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        this.render();
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    render() {
      B(this.template(), this);
    }
    template() {
      const defn = this.explanMain?.plan.metricDefinitions[this.metricName];
      if (!defn) {
        return x``;
      }
      return x`<dialog>
      <table>
        <tr>
          <th>Name</th>
          <td>
            <input
              .value=${l2(this.metricName)}
              @change=${(e3) => this.nameChange(e3)}
            />
          </td>
          <td></td>
        </tr>
        <tr>
          <th>Min</th>
          <td>
            <input
              .value=${l2(displayValue(defn.range.min))}
              ?disabled=${defn.range.min === -Number.MAX_VALUE}
              @change=${(e3) => this.minChange(e3)}
            />
          </td>
          <td>
            <label>
              <input
                type="checkbox"
                ?checked=${defn.range.min !== -Number.MAX_VALUE}
                @change=${(e3) => {
        this.minLimitChange(e3);
      }}
              />
              Limit</label
            >
          </td>
        </tr>
        <tr>
          <th>Max</th>
          <td>
            <input
              .value=${l2(displayValue(defn.range.max))}
              ?disabled=${defn.range.max === Number.MAX_VALUE}
              @change=${(e3) => this.maxChange(e3)}
            />
          </td>
          <td>
            <label>
              <input
                type="checkbox"
                ?checked=${defn.range.max !== Number.MAX_VALUE}
                @change=${(e3) => {
        this.maxLimitChange(e3);
      }}
              />
              Limit</label
            >
          </td>
        </tr>
        <tr>
          <th>Precision</th>
          <td>
            <input
              .value=${l2(defn.precision.precision)}
              @change=${(e3) => {
        this.precisionChange(e3);
      }}
            />
          </td>
          <td></td>
        </tr>
        <tr>
          <th>Default</th>
          <td>
            <input
              .value=${l2(defn.default)}
              @change=${(e3) => {
        this.defaultChange(e3);
      }}
            />
          </td>
          <td></td>
        </tr>
      </table>
      <div class="dialog-footer">
        <button @click=${() => this.cancel()}>Close</button>
      </div>
    </dialog>`;
    }
    async executeOp(op) {
      const ret = await executeOp(
        op,
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      if (!ret.ok) {
        window.alert(ret.error);
      }
      return ret;
    }
    async minLimitChange(e3) {
      const ele = e3.target;
      const defn = this.getDefinitionCopy();
      if (ele.checked) {
        const newMin = 0 < defn.range.max ? 0 : defn.range.max - 1;
        defn.range = new MetricRange(newMin, defn.range.max);
      } else {
        defn.range = new MetricRange(-Number.MAX_VALUE, defn.range.max);
      }
      this.updateMetricDefinition(defn);
    }
    async maxLimitChange(e3) {
      const ele = e3.target;
      const defn = this.getDefinitionCopy();
      if (ele.checked) {
        const newMax = 100 > defn.range.min ? 100 : defn.range.min + 1;
        defn.range = new MetricRange(defn.range.min, newMax);
      } else {
        defn.range = new MetricRange(defn.range.min, Number.MAX_VALUE);
      }
      this.updateMetricDefinition(defn);
    }
    async nameChange(e3) {
      const ele = e3.target;
      const oldName = this.metricName;
      const newName = ele.value;
      this.metricName = newName;
      const ret = await this.executeOp(RenameMetricOp(oldName, newName));
      if (!ret.ok) {
        this.metricName = oldName;
      }
      this.render();
    }
    async defaultChange(e3) {
      const ele = e3.target;
      const defn = this.getDefinitionCopy();
      defn.default = +ele.value;
      this.updateMetricDefinition(defn);
    }
    async precisionChange(e3) {
      const ele = e3.target;
      const defn = this.getDefinitionCopy();
      defn.precision = new Precision(+ele.value);
      this.updateMetricDefinition(defn);
    }
    async minChange(e3) {
      const ele = e3.target;
      const newValue = +ele.value;
      const definitionCopy = this.getDefinitionCopy();
      definitionCopy.range = new MetricRange(newValue, definitionCopy.range.max);
      this.updateMetricDefinition(definitionCopy);
    }
    async maxChange(e3) {
      const ele = e3.target;
      const newValue = +ele.value;
      const definitionCopy = this.getDefinitionCopy();
      definitionCopy.range = new MetricRange(definitionCopy.range.min, newValue);
      this.updateMetricDefinition(definitionCopy);
    }
    async updateMetricDefinition(newDef) {
      newDef.rationalize();
      const ret = await this.executeOp(UpdateMetricOp(this.metricName, newDef));
      if (!ret.ok) {
        reportErrorMsg(ret.error);
      }
      this.render();
    }
    getDefinitionCopy() {
      const defn = this.explanMain?.plan.metricDefinitions[this.metricName];
      return MetricDefinition.fromJSON(defn?.toJSON());
    }
    cancel() {
      this.querySelector("dialog").close();
    }
    showModal(explanMain2, metricName) {
      this.explanMain = explanMain2;
      this.metricName = metricName;
      this.render();
      this.querySelector("dialog").showModal();
    }
  };
  customElements.define("edit-metric-definition", EditMetricDefinition);

  // src/dependencies/dependencies-panel.ts
  var depDisplayName = {
    pred: "Predecessors",
    succ: "Successors"
  };
  var kindTemplate = (dependenciesControl, depType, indexes) => x`
  <tr>
    <th>${depDisplayName[depType]}</th>
    <th></th>
  </tr>
  ${indexes.map((taskIndex) => {
    const task = dependenciesControl.tasks[taskIndex];
    return x`<tr>
      <td>${task.name}</td>
      <td>
        <button
          class="icon-button"
          title="Delete the dependency on ${task.name}"
          @click=${() => dependenciesControl.deleteDep(taskIndex, depType)}
        >
          ${icon("delete-icon")}
        </button>
      </td>
    </tr>`;
  })}
  <tr>
    <td></td>
    <td>
      <button
        class="icon-button"
        @click=${() => dependenciesControl.addDep(depType)}
        title="Add dependency."
      >
        ${icon("add-icon")}
      </button>
    </td>
  </tr>
`;
  var template = (dependenciesControl) => x`
  <table>
    ${kindTemplate(
    dependenciesControl,
    "pred",
    dependenciesControl.predIndexes
  )}
    ${kindTemplate(
    dependenciesControl,
    "succ",
    dependenciesControl.succIndexes
  )}
  </table>
`;
  var DependenciesPanel = class extends HTMLElement {
    tasks = [];
    predIndexes = [];
    succIndexes = [];
    connectedCallback() {
      B(template(this), this);
    }
    setTasksAndIndices(tasks, predIndexes, succIndexes) {
      this.tasks = tasks;
      this.predIndexes = predIndexes;
      this.succIndexes = succIndexes;
      B(template(this), this);
    }
    deleteDep(taskIndex, depType) {
      this.dispatchEvent(
        new CustomEvent("delete-dependency", {
          bubbles: true,
          detail: {
            taskIndex,
            depType
          }
        })
      );
    }
    addDep(depType) {
      this.dispatchEvent(
        new CustomEvent("add-dependency", {
          bubbles: true,
          detail: {
            taskIndex: -1,
            depType
          }
        })
      );
    }
  };
  customElements.define("dependencies-panel", DependenciesPanel);

  // src/dag/algorithms/dfs.ts
  var depthFirstSearchFromIndex = (g2, start_index, f3) => {
    const edgesBySrc = edgesBySrcToMap(g2.Edges);
    const visit = (vertexIndex) => {
      if (f3(g2.Vertices[vertexIndex], vertexIndex) === false) {
        return;
      }
      const next = edgesBySrc.get(vertexIndex);
      if (next === void 0) {
        return;
      }
      next.forEach((e3) => {
        visit(e3.j);
      });
    };
    visit(start_index);
  };

  // src/dag/algorithms/circular.ts
  var allSuccessors = (taskIndex, directedGraph) => {
    if (taskIndex >= directedGraph.Vertices.length - 1 || taskIndex <= 0) {
      return [];
    }
    const allChildren = /* @__PURE__ */ new Set();
    depthFirstSearchFromIndex(
      directedGraph,
      taskIndex,
      (_2, index) => {
        allChildren.add(index);
        return true;
      }
    );
    allChildren.delete(directedGraph.Vertices.length - 1);
    return [...allChildren.values()];
  };
  var allPredecessors = (taskIndex, directedGraph) => {
    if (taskIndex >= directedGraph.Vertices.length - 1 || taskIndex <= 0) {
      return [];
    }
    const predecessorsToCheck = [taskIndex];
    const ret = /* @__PURE__ */ new Set();
    const byDest = edgesByDstToMap(directedGraph.Edges);
    while (predecessorsToCheck.length !== 0) {
      const node = predecessorsToCheck.pop();
      ret.add(node);
      const predecessors = byDest.get(node);
      if (predecessors) {
        predecessorsToCheck.push(...predecessors.map((e3) => e3.i));
      }
    }
    ret.delete(0);
    return [...ret.values()];
  };
  var allTasks = (directedGraph) => {
    const ret = [];
    for (let index = 1; index < directedGraph.Vertices.length - 1; index++) {
      ret.push(index);
    }
    return ret;
  };
  var difference = (a2, b2) => {
    const bSet = new Set(b2);
    return a2.filter((i3) => bSet.has(i3) === false);
  };
  var allPotentialSuccessors = (taskIndex, directedGraph) => {
    const bySrc = edgesBySrcToMap(directedGraph.Edges);
    const directSucc = bySrc.get(taskIndex) || [];
    const directSuccArray = directSucc.map((e3) => e3.j);
    return difference(allTasks(directedGraph), [
      ...allPredecessors(taskIndex, directedGraph),
      ...directSuccArray
    ]);
  };
  var allPotentialPredecessors = (taskIndex, directedGraph) => {
    const byDest = edgesByDstToMap(directedGraph.Edges);
    const directPred = byDest.get(taskIndex) || [];
    const directPredArray = directPred.map((e3) => e3.i);
    const allSucc = allSuccessors(taskIndex, directedGraph);
    const all = allTasks(directedGraph);
    const toBeSubtracted = [...allSucc, ...directPredArray];
    return difference(all, toBeSubtracted);
  };

  // src/add-dependency-dialog/add-dependency-dialog.ts
  var AddDependencyDialog = class extends HTMLElement {
    titleElement = null;
    taskSearchControl = null;
    dialog = null;
    resolve = () => {
    };
    connectedCallback() {
      this.titleElement = this.querySelector("h2");
      this.taskSearchControl = this.querySelector("task-search-control");
      this.dialog = this.querySelector("dialog");
      this.dialog.addEventListener("cancel", () => this.resolve(void 0));
      this.taskSearchControl.addEventListener("task-change", (e3) => {
        this.dialog.close();
        this.resolve(e3.detail.taskIndex);
      });
    }
    /** Populates the dialog and shows it as a Modal dialog and returns a Promise
     *  that resolves on success to a taskIndex, or undefined if the user
     *  cancelled out of the flow.
     */
    selectDependency(chart, taskIndex, depType) {
      this.titleElement.textContent = depDisplayName[depType];
      let includedIndexes = [];
      if (depType === "pred") {
        includedIndexes = allPotentialPredecessors(taskIndex, chart);
      } else {
        includedIndexes = allPotentialSuccessors(taskIndex, chart);
      }
      this.taskSearchControl.tasks = chart.Vertices;
      this.taskSearchControl.includedIndexes = includedIndexes;
      this.taskSearchControl.setKeyboardFocusToInput("name-only");
      const ret = new Promise((resolve, _reject) => {
        this.resolve = resolve;
        this.dialog.showModal();
      });
      return ret;
    }
  };
  customElements.define("add-dependency-dialog", AddDependencyDialog);

  // src/edit-resources-panel/edit-resources-panel.ts
  var MAX_SHORT_STRING = 80;
  var EditResourcesPanel = class extends HTMLElement {
    explanMain = null;
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        if (this.explanMain !== null) {
          this.render();
        }
      };
    }
    connectedCallback() {
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    setConfig(explanMain2) {
      this.explanMain = explanMain2;
      this.render();
    }
    render() {
      B(this.template(), this);
    }
    valuesToShortString(values) {
      let ret = values.join(", ");
      if (ret.length > MAX_SHORT_STRING) {
        ret = ret.slice(0, MAX_SHORT_STRING) + " ...";
      }
      return ret;
    }
    delButtonIfNotStatic(name, isStatic) {
      if (isStatic) {
        return x``;
      }
      return x`<button
      class="icon-button"
      title="Delete this resource."
      @click=${() => this.deleteResource(name)}
    >
      ${icon("delete-icon")}
    </button>`;
    }
    editButtonIfNotStatic(name, isStatic) {
      if (isStatic) {
        return x``;
      }
      return x`<button
      class="icon-button"
      title="Edit the resource definition."
      @click=${() => this.editResource(name)}
    >
      ${icon("edit-icon")}
    </button>`;
    }
    async deleteResource(name) {
      const ret = await executeOp(
        DeleteResourceOp(name),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
    editResource(name) {
      this.explanMain.querySelector(
        "edit-resource-definition"
      ).showModal(
        this.explanMain,
        name,
        this.explanMain.plan.resourceDefinitions[name]
      );
    }
    async newResource() {
      let name = await document.querySelector("prompt-dialog").prompt("Metric Name");
      if (name === null) {
        return;
      }
      name = name.trim();
      if (name === "") {
        reportErrorMsg(
          new Error(
            "Resource names cannot be empty and must contain more than whitespace characters."
          )
        );
        return;
      }
      const ret = await executeOp(
        AddResourceOp(name),
        "planDefinitionChanged",
        true,
        this.explanMain
      );
      reportIfError(ret);
      this.render();
    }
    template() {
      const rd = this.explanMain.plan.resourceDefinitions;
      const allKeysSorted = Object.keys(rd).sort(
        (keyA, keyB) => {
          const a2 = rd[keyA];
          const b2 = rd[keyB];
          if (a2.isStatic === b2.isStatic) {
            return keyA.localeCompare(keyB);
          }
          if (a2.isStatic) {
            return -1;
          }
          return 1;
        }
      );
      return x`
      <h3>Resources</h3>
      <table>
        <tr>
          <th>Name</th>
          <th>Values</th>
          <th>Delete</th>
          <th>Edit</th>
        </tr>
        ${allKeysSorted.map((name) => {
        const defn = rd[name];
        return x`<tr>
            <td>${name}</td>
            <td>${this.valuesToShortString(defn.values)}</td>
            <td>${this.delButtonIfNotStatic(name, defn.isStatic)}</td>
            <td>${this.editButtonIfNotStatic(name, defn.isStatic)}</td>
          </tr>`;
      })}
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td>
            <button
              class="icon-button"
              title="Add a new Resource."
              @click=${() => {
        this.newResource();
      }}
            >
              ${icon("add-icon")}
            </button>
          </td>
        </tr>
      </table>
    `;
    }
  };
  customElements.define("edit-resources-panel", EditResourcesPanel);

  // src/stats/cdf/triangular/triangular.ts
  var Triangular = class {
    a;
    b;
    c;
    F_c;
    /**  The triangular distribution is a continuous probability distribution with
    lower limit `a`, upper limit `b`, and mode `c`, where a < b and a ≤ c ≤ b. */
    constructor(a2, b2, c2) {
      this.a = a2;
      this.b = b2;
      this.c = c2;
      this.F_c = (c2 - a2) / (b2 - a2);
    }
    /**  Produce a sample from the triangular distribution. The value of 'p'
     should be in [0, 1.0]. */
    sample(p2) {
      if (p2 < 0) {
        return 0;
      } else if (p2 > 1) {
        return 1;
      } else if (p2 < this.F_c) {
        return this.a + Math.sqrt(p2 * (this.b - this.a) * (this.c - this.a));
      } else {
        return this.b - Math.sqrt((1 - p2) * (this.b - this.a) * (this.b - this.c));
      }
    }
  };

  // src/stats/cdf/triangular/jacobian.ts
  var UncertaintyToNum = {
    low: 1.1,
    moderate: 1.5,
    high: 2,
    extreme: 5
  };
  var Jacobian = class {
    triangular;
    constructor(expected, uncertainty) {
      const mul = UncertaintyToNum[uncertainty];
      this.triangular = new Triangular(expected / mul, expected * mul, expected);
    }
    sample(p2) {
      return this.triangular.sample(p2);
    }
  };

  // src/plan/plan.ts
  var StaticMetricDefinitions = {
    // How long a task will take, in days.
    Duration: new MetricDefinition(0, new MetricRange(0), true, new Precision(0))
  };
  var StaticResourceDefinitions = {
    Uncertainty: new ResourceDefinition(Object.keys(UncertaintyToNum), true)
  };
  var Plan = class _Plan {
    chart;
    // Controls how time is displayed.
    _durationUnits;
    _status = { stage: "unstarted", start: 0 };
    taskCompletion = {};
    resourceDefinitions;
    metricDefinitions;
    get status() {
      return this._status;
    }
    get durationUnits() {
      return this._durationUnits;
    }
    set status(value) {
      this._status = value;
      this._durationUnits = new Days(
        new Date(statusToDate(this.status)),
        this.getStaticMetricDefinition("Duration")
      );
    }
    setTaskCompletion(index, value) {
      const task = this.chart.Vertices[index];
      if (task === void 0) {
        return error(new Error(`${index} is not a valid Task index.`));
      }
      this.taskCompletion[task.id] = value;
      return ok(null);
    }
    getTaskCompletion(index) {
      const task = this.chart.Vertices[index];
      if (task === void 0) {
        return error(new Error(`${index} is not a valid Task index.`));
      }
      return ok(this.taskCompletion[task.id] || { stage: "unstarted" });
    }
    constructor() {
      this.chart = new Chart();
      this.resourceDefinitions = Object.assign({}, StaticResourceDefinitions);
      this.metricDefinitions = Object.assign({}, StaticMetricDefinitions);
      this._durationUnits = new Days(
        new Date(statusToDate(this.status)),
        this.getStaticMetricDefinition("Duration")
      );
      this.applyMetricsAndResourcesToVertices();
    }
    setDurationUnits(unitType) {
      this._durationUnits = UnitBuilders[unitType](
        new Date(statusToDate(this.status)),
        this.getStaticMetricDefinition("Duration")
      );
    }
    getStaticMetricDefinition(name) {
      return this.metricDefinitions[name];
    }
    getStaticResourceDefinition(name) {
      return this.resourceDefinitions[name];
    }
    applyMetricsAndResourcesToVertices() {
      Object.keys(this.metricDefinitions).forEach((metricName) => {
        const md = this.metricDefinitions[metricName];
        this.chart.Vertices.forEach((task) => {
          task.setMetric(metricName, md.default);
        });
      });
      Object.entries(this.resourceDefinitions).forEach(
        ([key, resourceDefinition]) => {
          this.chart.Vertices.forEach((task) => {
            task.setResource(key, resourceDefinition.values[0]);
          });
        }
      );
    }
    getMetricDefinition(key) {
      return this.metricDefinitions[key];
    }
    setMetricDefinition(key, metricDefinition) {
      this.metricDefinitions[key] = metricDefinition;
    }
    deleteMetricDefinition(key) {
      delete this.metricDefinitions[key];
    }
    getResourceDefinition(key) {
      return this.resourceDefinitions[key];
    }
    setResourceDefinition(key, value) {
      this.resourceDefinitions[key] = value;
    }
    deleteResourceDefinition(key) {
      delete this.resourceDefinitions[key];
    }
    // Returns a new Task with defaults for all metrics and resources.
    newTask() {
      const ret = new Task();
      Object.keys(this.metricDefinitions).forEach((metricName) => {
        const md = this.getMetricDefinition(metricName);
        ret.setMetric(metricName, md.default);
      });
      Object.entries(this.resourceDefinitions).forEach(
        ([key, resourceDefinition]) => {
          ret.setResource(key, resourceDefinition.values[0]);
        }
      );
      return ret;
    }
    toJSON() {
      return {
        status: toJSON(this.status),
        taskCompletion: taskCompletionsToJSON(this.taskCompletion),
        _durationUnits: this._durationUnits.toJSON(),
        chart: this.chart.toJSON(),
        resourceDefinitions: Object.fromEntries(
          Object.entries(this.resourceDefinitions).filter(([_2, resourceDefinition]) => !resourceDefinition.isStatic).map(([key, resourceDefinition]) => [
            key,
            resourceDefinition.toJSON()
          ])
        ),
        metricDefinitions: Object.fromEntries(
          Object.entries(this.metricDefinitions).filter(([_2, metricDefinition]) => !metricDefinition.isStatic).map(([key, metricDefinition]) => [key, metricDefinition.toJSON()])
        )
      };
    }
    static fromJSON(planSerialized) {
      const ret = new _Plan();
      ret.chart = Chart.fromJSON(planSerialized.chart);
      ret.status = fromJSON(planSerialized.status);
      ret.taskCompletion = taskCompletionsFromJSON(planSerialized.taskCompletion);
      const deserializedMetricDefinitions = Object.fromEntries(
        Object.entries(planSerialized.metricDefinitions).map(
          ([key, serializedMetricDefinition]) => [
            key,
            MetricDefinition.fromJSON(serializedMetricDefinition)
          ]
        )
      );
      ret.metricDefinitions = Object.assign(
        {},
        StaticMetricDefinitions,
        deserializedMetricDefinitions
      );
      const deserializedResourceDefinitions = Object.fromEntries(
        Object.entries(planSerialized.resourceDefinitions).map(
          ([key, serializedResourceDefinition]) => [
            key,
            ResourceDefinition.fromJSON(serializedResourceDefinition)
          ]
        )
      );
      ret.resourceDefinitions = Object.assign(
        {},
        StaticResourceDefinitions,
        deserializedResourceDefinitions
      );
      ret._durationUnits = UnitBase.fromJSON(
        planSerialized._durationUnits,
        new Date(statusToDate(ret.status)),
        ret.getStaticMetricDefinition("Duration")
      );
      return ret;
    }
    static FromJSONText = (text) => {
      try {
        const planSerialized = JSON.parse(text);
        const plan = _Plan.fromJSON(planSerialized);
        const ret = RationalizeEdgesOp().applyTo(plan);
        if (!ret.ok) {
          return ret;
        }
        const retVal = ChartValidate(plan.chart);
        if (!retVal.ok) {
          return retVal;
        }
        return ok(plan);
      } catch (e3) {
        return error(e3);
      }
    };
  };

  // src/selected-task-panel/selected-task-panel.ts
  var SelectedTaskPanel = class extends HTMLElement {
    explanMain = null;
    plan = new Plan();
    taskIndex = -1;
    planDefinitionChangedCallback;
    constructor() {
      super();
      this.planDefinitionChangedCallback = () => {
        this.render();
      };
    }
    connectedCallback() {
      this.render();
      document.addEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    disconnectedCallback() {
      document.removeEventListener(
        "plan-definition-changed",
        this.planDefinitionChangedCallback
      );
    }
    updateSelectedTaskPanel(explainMain, taskIndex) {
      this.explanMain = explainMain;
      this.plan = explainMain.plan;
      this.taskIndex = taskIndex;
      this.render();
    }
    render() {
      B(this.template(), this);
    }
    template() {
      const taskIndex = this.taskIndex;
      if (taskIndex === -1) {
        return x`
        <button
          class="icon-button"
          @click=${async () => await executeByName("NewTaskAction", this.explanMain)}
          title="Add Task"
        >
          ${icon("add-icon")}
        </button>
        <div>No task selected.</div>
      `;
      }
      if (this.explanMain === null) {
        return x``;
      }
      const task = this.plan.chart.Vertices[taskIndex];
      return x`
      <button
        class="icon-button"
        @click=${async () => await executeByName("NewTaskAction", this.explanMain)}
        title="Add Task"
      >
        ${icon("add-icon")}
      </button>
      <button
        class="icon-button"
        @click=${async () => await executeByName("DupTaskAction", this.explanMain)}
        title="Duplicate Task"
      >
        ${icon("dup")}
      </button>
      <button
        class="icon-button"
        @click=${async () => await executeByName("SplitTaskAction", this.explanMain)}
        title="Split Task"
      >
        ${icon("split")}
      </button>
      <button
        class="icon-button"
        @click=${async () => executeByName("DeleteTaskAction", this.explanMain)}
        title="Delete Task"
      >
        ${icon("delete-icon")}
      </button>
      <table>
        <tr>
          <td class="underline-first-char">Name</td>
          <td>
            <input
              type="text"
              id="task-name"
              accesskey="n"
              .value="${l2(task.name)}"
              @change=${(e3) => this.dispatchEvent(
        new CustomEvent("task-name-change", {
          bubbles: true,
          detail: {
            taskIndex,
            name: e3.target.value
          }
        })
      )}
            />
          </td>
        </tr>
        ${Object.entries(this.plan.resourceDefinitions).map(
        ([resourceKey, defn]) => x` <tr>
              <td>
                <label for="${resourceKey}">${resourceKey}</label>
              </td>
              <td>
                <select
                  id="${resourceKey}"
                  @change=${async (e3) => this.dispatchEvent(
          new CustomEvent("task-resource-value-change", {
            bubbles: true,
            detail: {
              taskIndex,
              value: e3.target.value,
              name: resourceKey
            }
          })
        )}
                >
                  ${defn.values.map(
          (resourceValue) => x`<option
                        name=${resourceValue}
                        .selected=${task.resources[resourceKey] === resourceValue}
                      >
                        ${resourceValue}
                      </option>`
        )}
                </select>
              </td>
            </tr>`
      )}
        ${Object.keys(this.plan.metricDefinitions).map(
        (key) => x` <tr>
              <td><label for="${key}">${key}</label></td>
              <td>
                <input
                  id="${key}"
                  .value=${l2(task.metrics[key])}
                  type="number"
                  @change=${async (e3) => this.dispatchEvent(
          new CustomEvent("task-metric-value-change", {
            bubbles: true,
            detail: {
              taskIndex,
              value: +e3.target.value,
              name: key
            }
          })
        )}
                />
              </td>
            </tr>`
      )}
      </table>
    `;
    }
  };
  customElements.define("selected-task-panel", SelectedTaskPanel);

  // src/simulation/simulation.ts
  var MAX_RANDOM = 1e3;
  var precision = new Precision(2);
  var rndInt = (n2) => {
    return Math.floor(Math.random() * n2);
  };
  var simulation = (chart, numSimulationLoops, originalCriticalPath, finishedTasks) => {
    const allCriticalPaths = /* @__PURE__ */ new Map();
    allCriticalPaths.set(`${originalCriticalPath}`, {
      count: 0,
      criticalPath: originalCriticalPath.slice(),
      durations: chart.Vertices.map((task) => task.duration)
    });
    for (let i3 = 0; i3 < numSimulationLoops; i3++) {
      const durations = chart.Vertices.map((t4, index) => {
        if (finishedTasks.has(index)) {
          return t4.duration;
        }
        const rawDuration = new Jacobian(
          t4.duration,
          // Acceptable direct access to duration.
          t4.getResource("Uncertainty")
        ).sample(rndInt(MAX_RANDOM) / MAX_RANDOM);
        return precision.round(rawDuration);
      });
      const slacksRet = ComputeSlack(
        chart,
        (taskIndex) => durations[taskIndex],
        precision.rounder()
      );
      if (!slacksRet.ok) {
        throw slacksRet.error;
      }
      const criticalPath = CriticalPath(slacksRet.value, precision.rounder());
      const criticalPathAsString = `${criticalPath}`;
      let pathEntry = allCriticalPaths.get(criticalPathAsString);
      if (pathEntry === void 0) {
        pathEntry = {
          count: 0,
          criticalPath,
          durations
        };
        allCriticalPaths.set(criticalPathAsString, pathEntry);
      }
      pathEntry.count++;
    }
    return {
      paths: allCriticalPaths,
      tasks: criticalTaskFrequencies(allCriticalPaths, chart)
    };
  };
  var criticalTaskFrequencies = (allCriticalPaths, chart) => {
    const critialTasks = /* @__PURE__ */ new Map();
    allCriticalPaths.forEach((value) => {
      value.criticalPath.forEach((taskIndex) => {
        let taskEntry = critialTasks.get(taskIndex);
        if (taskEntry === void 0) {
          taskEntry = {
            taskIndex,
            duration: chart.Vertices[taskIndex].duration,
            numTimesAppeared: 0
          };
          critialTasks.set(taskIndex, taskEntry);
        }
        taskEntry.numTimesAppeared += value.count;
      });
    });
    return [...critialTasks.values()].sort(
      (a2, b2) => {
        return b2.duration - a2.duration;
      }
    );
  };

  // src/simulation-panel/simulation-panel.ts
  var SimulationPanel = class extends HTMLElement {
    results = {
      paths: /* @__PURE__ */ new Map(),
      tasks: []
    };
    chart = null;
    numSimulationLoops = 0;
    originalCriticalPath = [];
    connectedCallback() {
      this.render();
    }
    simulate(chart, numSimulationLoops, originalCriticalPath, finishedTasks) {
      this.results = simulation(
        chart,
        numSimulationLoops,
        originalCriticalPath,
        finishedTasks
      );
      this.chart = chart;
      this.numSimulationLoops = numSimulationLoops;
      this.originalCriticalPath = originalCriticalPath;
      this.render();
      return this.results.tasks.map(
        (taskEntry) => taskEntry.taskIndex
      );
    }
    clear() {
      this.results = {
        paths: /* @__PURE__ */ new Map(),
        tasks: []
      };
      this.dispatchEvent(
        new CustomEvent("simulation-select", {
          bubbles: true,
          detail: {
            durations: null,
            criticalPath: []
          }
        })
      );
      this.render();
    }
    pathClicked(key) {
      this.dispatchEvent(
        new CustomEvent("simulation-select", {
          bubbles: true,
          detail: {
            durations: this.results.paths.get(key).durations,
            criticalPath: this.results.paths.get(key).criticalPath
          }
        })
      );
    }
    render() {
      B(this.template(), this);
    }
    displayCriticalPathDifferences(criticalPath) {
      const removed = difference(this.originalCriticalPath, criticalPath);
      const added = difference(criticalPath, this.originalCriticalPath);
      if (removed.length === 0 && added.length === 0) {
        return x`Original Critical Path`;
      }
      return x`
      ${added.map(
        (taskIndex) => x`
          <span class="added">+${this.chart.Vertices[taskIndex].name}</span>
        `
      )}
      ${removed.map(
        (taskIndex) => x`
          <span class="removed">-${this.chart.Vertices[taskIndex].name}</span>
        `
      )}
    `;
    }
    template() {
      if (this.results.paths.size === 0) {
        return x``;
      }
      const pathKeys = [...this.results.paths.keys()];
      const sortedPathKeys = pathKeys.sort((a2, b2) => {
        return this.results.paths.get(b2).count - this.results.paths.get(a2).count;
      });
      return x`
      <button
        @click=${() => {
        this.clear();
      }}
      >
        Clear
      </button>

      <table class="paths">
        <tr>
          <th>Count</th>
          <th>Critical Path</th>
        </tr>
        ${sortedPathKeys.map(
        (key) => x`<tr @click=${() => this.pathClicked(key)}>
              <td>${this.results.paths.get(key).count}</td>
              <td>
                ${this.displayCriticalPathDifferences(
          this.results.paths.get(key).criticalPath
        )}
              </td>
            </tr>`
      )}
      </table>
      <table>
        <tr>
          <th>Name</th>
          <th>Duration</th>
          <th>Frequency (%)</th>
        </tr>
        ${this.results.tasks.map(
        (taskEntry) => x`<tr>
              <td>${this.chart.Vertices[taskEntry.taskIndex].name}</td>
              <td>${taskEntry.duration}</td>
              <td>
                ${Math.floor(
          100 * taskEntry.numTimesAppeared / this.numSimulationLoops
        )}
              </td>
            </tr>`
      )}
      </table>
    `;
    }
  };
  customElements.define("simulation-panel", SimulationPanel);

  // src/search/search-task-panel.ts
  var SearchTaskPanel = class extends HTMLElement {
    explanMain = null;
    taskSearchControl = null;
    connectedCallback() {
      this.explanMain = document.querySelector("explan-main");
      if (!this.explanMain) {
        return;
      }
      this.taskSearchControl = this.querySelector("task-search-control");
      this.addEventListener("task-change", (e3) => {
        this.explanMain.setSelection(e3.detail.taskIndex, e3.detail.focus, true);
        this.classList.add("hidden");
      });
      this.addEventListener(
        "task-focus",
        () => this.setKeyboardFocusToInput("full-info")
      );
    }
    setKeyboardFocusToInput(searchType) {
      this.classList.remove("hidden");
      this.taskSearchControl.tasks = this.explanMain.plan.chart.Vertices;
      this.taskSearchControl.includedIndexes = this.explanMain.plan.chart.Vertices.map(
        (_2, index) => index
      ).slice(1, -1);
      this.taskSearchControl.setKeyboardFocusToInput(searchType);
    }
  };
  customElements.define("search-task-panel", SearchTaskPanel);

  // src/search/task-search-controls.ts
  var import_fuzzysort = __toESM(require_fuzzysort(), 1);
  var indexesToRanges = (indexes, len) => {
    const ranges = indexes.map((x2) => [x2, x2 + 1]).flat();
    return [0, ...ranges, len];
  };
  var highlight = (ranges, target) => {
    const ret = [];
    let inHighlight = false;
    for (let i3 = 0; i3 < ranges.length - 1; i3++) {
      const sub = target.slice(ranges[i3], ranges[i3 + 1]);
      if (inHighlight) {
        ret.push(x`<b>${sub}</b>`);
      } else {
        ret.push(x`${sub}`);
      }
      inHighlight = !inHighlight;
    }
    return ret;
  };
  var highlightedTarget = (indexes, target) => {
    return highlight(indexesToRanges(indexes, target.length), target);
  };
  var searchResults = (searchTaskPanel) => searchTaskPanel.searchResults.map(
    (task, index) => x` <li
        tabindex="0"
        @click="${() => searchTaskPanel.selectSearchResult(index, false)}"
        ?data-focus=${index === searchTaskPanel.focusIndex}
        data-index=${index}
      >
        ${highlightedTarget(task.indexes, task.target)}
      </li>`
  );
  var template2 = (searchTaskPanel) => x`
  <input
    autocomplete="off"
    name="task_search"
    id="search_input"
    placeholder="Search"
    type="text"
    @input="${(e3) => searchTaskPanel.onInput(e3.target.value)}"
    @keydown="${(e3) => searchTaskPanel.onKeyDown(e3)}"
    @focus="${() => searchTaskPanel.searchInputReceivedFocus()}"
  />
  <ul>
    ${searchResults(searchTaskPanel)}
  </ul>
`;
  var searchStringFromTaskBuilder = (fullTaskList, searchType, includedIndexes, maxNameLength) => {
    if (searchType === "full-info") {
      return (task) => {
        if (includedIndexes.size !== 0) {
          const taskIndex = fullTaskList.indexOf(task);
          if (!includedIndexes.has(taskIndex)) {
            return "";
          }
        }
        const resourceKeys = Object.keys(task.resources);
        resourceKeys.sort();
        return `${task.name} ${"-".repeat(maxNameLength - task.name.length + 2)} ${resourceKeys.map((key) => task.resources[key]).join(" ")}`;
      };
    } else {
      return (task) => {
        if (includedIndexes.size !== 0) {
          const taskIndex = fullTaskList.indexOf(task);
          if (!includedIndexes.has(taskIndex)) {
            return "";
          }
        }
        return task.name;
      };
    }
  };
  var taskListToSearchResults = (tasks, taskToSearchString, includedIndexes) => {
    return tasks.filter((_task, index) => includedIndexes.has(index)).map((t4) => {
      return {
        obj: t4,
        indexes: [],
        target: taskToSearchString(t4)
      };
    });
  };
  var TaskSearchControl = class extends HTMLElement {
    _tasks = [];
    _includedIndexes = /* @__PURE__ */ new Set();
    focusIndex = 0;
    searchResults = [];
    searchType = "name-only";
    taskToSearchString = () => "";
    connectedCallback() {
      B(template2(this), this);
    }
    onInput(inputString) {
      if (inputString === "") {
        this.searchResults = taskListToSearchResults(
          this._tasks,
          this.taskToSearchString,
          this._includedIndexes
        );
      } else {
        this.searchResults = import_fuzzysort.default.go(
          inputString,
          this._tasks.slice(1, -1),
          // Remove Start and Finish from search range.
          {
            key: this.taskToSearchString,
            limit: this._tasks.length,
            threshold: 0.2
          }
        );
      }
      this.focusIndex = 0;
      B(template2(this), this);
    }
    onKeyDown(e3) {
      if (this.searchResults.length === 0) {
        return;
      }
      const keyname = `${e3.shiftKey ? "shift-" : ""}${e3.ctrlKey ? "ctrl-" : ""}${e3.metaKey ? "meta-" : ""}${e3.altKey ? "alt-" : ""}${e3.key}`;
      switch (keyname) {
        case "ArrowDown":
          this.focusIndex = (this.focusIndex + 1) % this.searchResults.length;
          e3.stopPropagation();
          e3.preventDefault();
          break;
        case "ArrowUp":
          this.focusIndex = (this.focusIndex - 1 + this.searchResults.length) % this.searchResults.length;
          e3.stopPropagation();
          e3.preventDefault();
          break;
        case "Enter":
          if (this.searchResults.length === 0) {
            return;
          }
          this.selectSearchResult(this.focusIndex, false);
          e3.stopPropagation();
          e3.preventDefault();
          break;
        case "ctrl-Enter":
          if (this.searchResults.length === 0) {
            return;
          }
          this.selectSearchResult(this.focusIndex, true);
          e3.stopPropagation();
          e3.preventDefault();
          break;
        default:
          break;
      }
      B(template2(this), this);
    }
    selectSearchResult(index, focus) {
      const taskIndex = this._tasks.indexOf(this.searchResults[index].obj);
      this.dispatchEvent(
        new CustomEvent("task-change", {
          bubbles: true,
          detail: {
            taskIndex,
            focus
          }
        })
      );
      this.searchResults = [];
      B(template2(this), this);
    }
    searchInputReceivedFocus() {
      this.dispatchEvent(
        new CustomEvent("task-focus", {
          bubbles: true
        })
      );
    }
    setKeyboardFocusToInput(searchType) {
      this.searchType = searchType;
      const inputControl = this.querySelector("input");
      inputControl.focus();
      inputControl.select();
      this.onInput(inputControl.value);
      B(template2(this), this);
    }
    set tasks(tasks) {
      this._tasks = tasks;
      this.buildTaskToSearchString();
    }
    set includedIndexes(v2) {
      this._includedIndexes = new Set(v2);
      this.buildTaskToSearchString();
    }
    buildTaskToSearchString() {
      const maxNameLength = this._tasks.reduce(
        (prev, task) => task.name.length > prev ? task.name.length : prev,
        0
      );
      this.taskToSearchString = searchStringFromTaskBuilder(
        this._tasks,
        this.searchType,
        this._includedIndexes,
        maxNameLength
      );
      this.onInput("");
    }
  };
  customElements.define("task-search-control", TaskSearchControl);

  // src/point/point.ts
  var pt = (x2, y2) => {
    return { x: x2, y: y2 };
  };
  var add = (p1, p2) => {
    const [x2, y2] = p2;
    return {
      x: Math.floor(p1.x + x2),
      y: Math.floor(p1.y + y2)
    };
  };
  var equal = (p1, p2) => p1.x === p2.x && p1.y === p2.y;
  var dup = (p2) => {
    return { x: p2.x, y: p2.y };
  };
  var difference2 = (p1, p2) => {
    return [p2.x - p1.x, p2.y - p1.y];
  };

  // src/renderer/dividermove/dividermove.ts
  var DIVIDER_MOVE_EVENT = "divider_move";
  var RESIZING_CLASS = "resizing";
  var getPageRect = (ele) => {
    const viewportRect = ele.getBoundingClientRect();
    return {
      top: viewportRect.top + window.scrollY,
      left: viewportRect.left + window.scrollX,
      width: viewportRect.width,
      height: viewportRect.height
    };
  };
  var DividerMove = class {
    /** The point where dragging started, in Page coordinates. */
    begin = null;
    /** The dimensions of the parent element in Page coordinates as of mousedown
     * on the divider.. */
    parentRect = null;
    /** The current mouse position in Page coordinates. */
    currentMoveLocation = pt(0, 0);
    /** The last mouse position in Page coordinates reported via CustomEvent. */
    lastMoveSent = pt(0, 0);
    /** The parent element that contains the divider. */
    parent;
    /** The divider element to be dragged across the parent element. */
    divider;
    /** The handle of the window.setInterval(). */
    internvalHandle = 0;
    /** The type of divider, either vertical ("column"), or horizontal ("row"). */
    dividerType;
    constructor(parent, divider, dividerType = "column") {
      this.parent = parent;
      this.divider = divider;
      this.dividerType = dividerType;
      this.divider.addEventListener("mousedown", this.mousedown.bind(this));
    }
    detach() {
      this.parent.removeEventListener("mousemove", this.mousemove.bind(this));
      this.divider.removeEventListener("mousedown", this.mousedown.bind(this));
      this.parent.removeEventListener("mouseup", this.mouseup.bind(this));
      this.parent.removeEventListener("mouseleave", this.mouseleave.bind(this));
      window.clearInterval(this.internvalHandle);
    }
    onTimeout() {
      if (!equal(this.currentMoveLocation, this.lastMoveSent)) {
        let diffPercent = 0;
        if (this.dividerType === "column") {
          diffPercent = 100 * (this.currentMoveLocation.x - this.parentRect.left) / this.parentRect.width;
        } else {
          diffPercent = 100 * (this.currentMoveLocation.y - this.parentRect.top) / this.parentRect.height;
        }
        diffPercent = clamp(diffPercent, 5, 95);
        this.parent.dispatchEvent(
          new CustomEvent(DIVIDER_MOVE_EVENT, {
            detail: {
              before: diffPercent,
              after: 100 - diffPercent
            }
          })
        );
        this.lastMoveSent = dup(this.currentMoveLocation);
      }
    }
    mousemove(e3) {
      if (this.begin === null) {
        return;
      }
      this.currentMoveLocation.x = e3.pageX;
      this.currentMoveLocation.y = e3.pageY;
    }
    mousedown(e3) {
      this.internvalHandle = window.setInterval(this.onTimeout.bind(this), 16);
      this.parentRect = getPageRect(this.parent);
      this.parent.classList.add(RESIZING_CLASS);
      this.parent.addEventListener("mousemove", this.mousemove.bind(this));
      this.parent.addEventListener("mouseup", this.mouseup.bind(this));
      this.parent.addEventListener("mouseleave", this.mouseleave.bind(this));
      this.begin = pt(e3.pageX, e3.pageY);
    }
    mouseup(e3) {
      if (this.begin === null) {
        return;
      }
      this.finished(pt(e3.pageX, e3.pageY));
    }
    mouseleave(e3) {
      if (this.begin === null) {
        return;
      }
      this.finished(pt(e3.pageX, e3.pageY));
    }
    finished(end) {
      window.clearInterval(this.internvalHandle);
      this.parent.classList.remove(RESIZING_CLASS);
      this.parent.removeEventListener("mousemove", this.mousemove.bind(this));
      this.parent.removeEventListener("mouseup", this.mouseup.bind(this));
      this.parent.removeEventListener("mouseleave", this.mouseleave.bind(this));
      this.currentMoveLocation = end;
      this.onTimeout();
      this.begin = null;
      this.currentMoveLocation = pt(0, 0);
      this.lastMoveSent = pt(0, 0);
    }
  };

  // src/renderer/mousedrag/mousedrag.ts
  var DRAG_RANGE_EVENT = "dragrange";
  var MouseDrag = class {
    begin = null;
    currentMoveLocation = pt(0, 0);
    lastMoveSent = pt(0, 0);
    ele;
    internvalHandle = 0;
    constructor(ele) {
      this.ele = ele;
      ele.addEventListener("mousemove", this.mousemove.bind(this));
      ele.addEventListener("mousedown", this.mousedown.bind(this));
      ele.addEventListener("mouseup", this.mouseup.bind(this));
      ele.addEventListener("mouseleave", this.mouseleave.bind(this));
    }
    detach() {
      this.ele.removeEventListener("mousemove", this.mousemove.bind(this));
      this.ele.removeEventListener("mousedown", this.mousedown.bind(this));
      this.ele.removeEventListener("mouseup", this.mouseup.bind(this));
      this.ele.removeEventListener("mouseleave", this.mouseleave.bind(this));
      window.clearInterval(this.internvalHandle);
    }
    onTimeout() {
      if (!equal(this.currentMoveLocation, this.lastMoveSent)) {
        this.ele.dispatchEvent(
          new CustomEvent(DRAG_RANGE_EVENT, {
            detail: {
              begin: dup(this.begin),
              end: dup(this.currentMoveLocation)
            }
          })
        );
        this.lastMoveSent = dup(this.currentMoveLocation);
      }
    }
    mousemove(e3) {
      if (this.begin === null) {
        return;
      }
      this.currentMoveLocation.x = e3.offsetX;
      this.currentMoveLocation.y = e3.offsetY;
    }
    mousedown(e3) {
      this.internvalHandle = window.setInterval(this.onTimeout.bind(this), 16);
      this.begin = pt(e3.offsetX, e3.offsetY);
    }
    mouseup(e3) {
      this.finished(pt(e3.offsetX, e3.offsetY));
    }
    mouseleave(e3) {
      if (this.begin === null) {
        return;
      }
      this.finished(pt(e3.offsetX, e3.offsetY));
    }
    finished(end) {
      window.clearInterval(this.internvalHandle);
      this.currentMoveLocation = end;
      this.onTimeout();
      this.begin = null;
      this.currentMoveLocation = pt(0, 0);
      this.lastMoveSent = pt(0, 0);
    }
  };

  // src/renderer/mousemove/mousemove.ts
  var MouseMove = class {
    currentMoveLocation = pt(0, 0);
    lastReadLocation = pt(0, 0);
    ele;
    constructor(ele) {
      this.ele = ele;
      ele.addEventListener("mousemove", this.mousemove.bind(this));
    }
    detach() {
      this.ele.removeEventListener("mousemove", this.mousemove.bind(this));
    }
    mousemove(e3) {
      this.currentMoveLocation.x = e3.offsetX;
      this.currentMoveLocation.y = e3.offsetY;
    }
    /** Returns a Point if the mouse had moved since the last read, otherwise
     * returns null.
     */
    readLocation() {
      if (equal(this.currentMoveLocation, this.lastReadLocation)) {
        return null;
      }
      this.lastReadLocation = dup(this.currentMoveLocation);
      return dup(this.lastReadLocation);
    }
  };

  // src/renderer/range/range.ts
  var MIN_DISPLAY_RANGE = 7;
  var DisplayRange = class {
    _begin;
    _end;
    constructor(begin, end) {
      this._begin = begin;
      this._end = end;
      if (this._begin > this._end) {
        [this._end, this._begin] = [this._begin, this._end];
      }
      if (this._end - this._begin < MIN_DISPLAY_RANGE) {
        this._end = this._begin + MIN_DISPLAY_RANGE;
      }
    }
    in(x2) {
      return x2 >= this._begin && x2 <= this._end;
    }
    get begin() {
      return this._begin;
    }
    get end() {
      return this._end;
    }
    get rangeInDays() {
      return this._end - this._begin;
    }
  };

  // src/chart/filter/filter.ts
  var filter = (chart, filterFunc, emphasizedTasks, spans, labels, selectedTaskIndex) => {
    const vret = ChartValidate(chart);
    if (!vret.ok) {
      return vret;
    }
    const topologicalOrder = vret.value;
    if (filterFunc === null) {
      const fromFilteredIndexToOriginalIndex2 = /* @__PURE__ */ new Map();
      for (let index = 0; index < chart.Vertices.length; index++) {
        fromFilteredIndexToOriginalIndex2.set(index, index);
      }
      return ok({
        chartLike: chart,
        displayOrder: vret.value,
        emphasizedTasks,
        spans,
        labels,
        fromFilteredIndexToOriginalIndex: fromFilteredIndexToOriginalIndex2,
        fromOriginalIndexToFilteredIndex: fromFilteredIndexToOriginalIndex2,
        selectedTaskIndex
      });
    }
    const tasks = [];
    const edges = [];
    const displayOrder = [];
    const filteredSpans = [];
    const filteredLabels = [];
    const fromFilteredIndexToOriginalIndex = /* @__PURE__ */ new Map();
    const fromOriginalToFilteredIndex = /* @__PURE__ */ new Map();
    chart.Vertices.forEach((task, originalIndex) => {
      if (filterFunc(task, originalIndex)) {
        tasks.push(task);
        filteredSpans.push(spans[originalIndex]);
        filteredLabels.push(labels[originalIndex]);
        const newIndex = tasks.length - 1;
        fromOriginalToFilteredIndex.set(originalIndex, newIndex);
        fromFilteredIndexToOriginalIndex.set(newIndex, originalIndex);
      }
    });
    chart.Edges.forEach((directedEdge) => {
      if (!fromOriginalToFilteredIndex.has(directedEdge.i) || !fromOriginalToFilteredIndex.has(directedEdge.j)) {
        return;
      }
      edges.push(
        new DirectedEdge(
          fromOriginalToFilteredIndex.get(directedEdge.i),
          fromOriginalToFilteredIndex.get(directedEdge.j)
        )
      );
    });
    topologicalOrder.forEach((originalTaskIndex) => {
      const task = chart.Vertices[originalTaskIndex];
      if (!filterFunc(task, originalTaskIndex)) {
        return;
      }
      displayOrder.push(fromOriginalToFilteredIndex.get(originalTaskIndex));
    });
    const updatedEmphasizedTasks = emphasizedTasks.map(
      (originalTaskIndex) => fromOriginalToFilteredIndex.get(originalTaskIndex)
    );
    return ok({
      chartLike: {
        Edges: edges,
        Vertices: tasks
      },
      displayOrder,
      emphasizedTasks: updatedEmphasizedTasks,
      spans: filteredSpans,
      labels: filteredLabels,
      fromFilteredIndexToOriginalIndex,
      fromOriginalIndexToFilteredIndex: fromOriginalToFilteredIndex,
      selectedTaskIndex: fromOriginalToFilteredIndex.get(selectedTaskIndex) || -1
    });
  };

  // src/renderer/scale/scale.ts
  var Feature = {
    taskLineStart: "taskLineStart",
    textStart: "textStart",
    groupTextStart: "groupTextStart",
    percentStart: "percentStart",
    verticalArrowDestTop: "verticalArrowDestTop",
    verticalArrowDestBottom: "verticalArrowDestBottom",
    horizontalArrowDest: "horizontalArrowDest",
    verticalArrowStart: "verticalArrowStart",
    horizontalArrowStart: "horizontalArrowStart",
    verticalArrowDestToMilestoneTop: "verticalArrowDestToMilestoneTop",
    verticalArrowDestToMilestoneBottom: "verticalArrowDestToMilestoneBottom",
    horizontalArrowDestToMilestone: "horizontalArrowDestToMilestone",
    verticalArrowStartFromMilestoneTop: "verticalArrowStartFromMilestoneTop",
    verticalArrowStartFromMilestoneBottom: "verticalArrowStartFromMilestoneBottom",
    horizontalArrowStartFromMilestone: "horizontalArrowStartFromMilestone",
    groupEnvelopeStart: "groupEnvelopeStart",
    taskEnvelopeTop: "taskEnvelopeTop",
    displayRangeTop: "displayRangeTop",
    taskRowBottom: "taskRowBottom",
    timeMarkStart: "timeMarkStart",
    timeMarkEnd: "timeMarkEnd",
    timeTextStart: "timeTextStart",
    groupTitleTextStart: "groupTitleTextStart",
    tasksClipRectOrigin: "tasksClipRectOrigin",
    groupByOrigin: "groupByOrigin"
  };
  var Metric = {
    taskLineHeight: "taskLineHeight",
    percentHeight: "percentHeight",
    arrowHeadHeight: "arrowHeadHeight",
    arrowHeadWidth: "arrowHeadWidth",
    milestoneDiameter: "milestoneDiameter",
    lineDashLine: "lineDashLine",
    lineDashGap: "lineDashGap",
    textXOffset: "textXOffset",
    minTaskWidthPx: "minTaskWidthPx",
    rowHeight: "rowHeight"
  };
  var makeOdd = (n2) => {
    if (n2 % 2 === 0) {
      return n2 + 1;
    }
    return n2;
  };
  var Scale = class {
    dayWidthPx;
    rowHeightPx;
    blockSizePx;
    taskHeightPx;
    lineWidthPx;
    marginSizePx;
    timelineHeightPx;
    origin;
    totalNumberOfDays;
    groupByColumnWidthPx;
    timelineOrigin;
    tasksOrigin;
    groupByOrigin;
    tasksClipRectOrigin;
    constructor(opts, canvasWidthPx, totalNumberOfDays, maxGroupNameLength = 0) {
      this.totalNumberOfDays = totalNumberOfDays;
      this.groupByColumnWidthPx = maxGroupNameLength * opts.fontSizePx;
      this.blockSizePx = Math.floor(opts.fontSizePx / 3);
      this.taskHeightPx = this.blockSizePx;
      this.lineWidthPx = makeOdd(Math.floor(this.taskHeightPx / 3));
      const milestoneRadius = Math.ceil(this.taskHeightPx / 2) + this.lineWidthPx;
      this.marginSizePx = milestoneRadius;
      this.timelineHeightPx = opts.hasTimeline ? Math.ceil(opts.fontSizePx * 4 / 3) : 0;
      this.timelineOrigin = pt(milestoneRadius, 0);
      this.groupByOrigin = pt(0, milestoneRadius + this.timelineHeightPx);
      let beginOffset = 0;
      if (opts.displayRange === null || opts.displayRangeUsage === "highlight") {
        this.dayWidthPx = (canvasWidthPx - this.groupByColumnWidthPx - 2 * this.marginSizePx) / totalNumberOfDays;
        this.origin = pt(0, 0);
      } else {
        this.dayWidthPx = (canvasWidthPx - this.groupByColumnWidthPx - 2 * this.marginSizePx) / opts.displayRange.rangeInDays;
        beginOffset = Math.floor(
          this.dayWidthPx * opts.displayRange.begin + this.marginSizePx
        );
        this.origin = pt(-beginOffset + this.marginSizePx, 0);
      }
      this.tasksOrigin = pt(
        this.groupByColumnWidthPx - beginOffset + milestoneRadius,
        this.timelineHeightPx + milestoneRadius
      );
      this.tasksClipRectOrigin = pt(
        this.groupByColumnWidthPx,
        this.timelineHeightPx
      );
      if (opts.hasText) {
        this.rowHeightPx = 6 * this.blockSizePx;
      } else {
        this.rowHeightPx = 1.1 * this.blockSizePx;
      }
    }
    /** The height of the chart. Note that it's not constrained by the canvas. */
    height(maxRows) {
      return maxRows * this.rowHeightPx + this.timelineHeightPx + 2 * this.marginSizePx;
    }
    dayRowFromPoint(point) {
      return {
        day: clamp(
          Math.floor(
            (window.devicePixelRatio * point.x - this.origin.x - this.marginSizePx - this.groupByColumnWidthPx) / this.dayWidthPx
          ),
          0,
          this.totalNumberOfDays
        ),
        row: Math.floor(
          (window.devicePixelRatio * point.y - this.origin.y - this.marginSizePx - this.timelineHeightPx) / this.rowHeightPx
        )
      };
    }
    /** The top left corner of the bounding box for a single task. */
    taskRowEnvelopeStart(row, day) {
      return add(this.origin, [
        Math.floor(
          day * this.dayWidthPx + this.marginSizePx + this.groupByColumnWidthPx
        ),
        Math.floor(
          row * this.rowHeightPx + this.marginSizePx + this.timelineHeightPx
        )
      ]);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    groupRowEnvelopeStart(row, day) {
      return add(this.groupByOrigin, [
        0,
        row * this.rowHeightPx + this.marginSizePx + this.timelineHeightPx
      ]);
    }
    groupHeaderStart() {
      return add(this.origin, [this.marginSizePx, this.marginSizePx]);
    }
    timeEnvelopeStart(day) {
      return add(this.origin, [
        day * this.dayWidthPx + this.marginSizePx + this.groupByColumnWidthPx,
        0
      ]);
    }
    /** Returns the coordinate of the item */
    feature(row, day, coord) {
      switch (coord) {
        case Feature.taskLineStart:
        case Feature.verticalArrowDestTop:
        case Feature.verticalArrowStart:
          return add(this.taskRowEnvelopeStart(row, day), [
            0,
            this.rowHeightPx - this.blockSizePx
          ]);
        case Feature.verticalArrowDestBottom:
          return add(this.taskRowEnvelopeStart(row, day), [0, this.rowHeightPx]);
        case Feature.textStart:
          return add(this.taskRowEnvelopeStart(row, day), [
            this.blockSizePx,
            this.blockSizePx
          ]);
        case Feature.groupTextStart:
          return add(this.groupRowEnvelopeStart(row, day), [
            this.blockSizePx,
            this.blockSizePx
          ]);
        case Feature.percentStart:
          return add(this.taskRowEnvelopeStart(row, day), [
            0,
            this.rowHeightPx - this.lineWidthPx
          ]);
        case Feature.horizontalArrowDest:
        case Feature.horizontalArrowStart:
          return add(this.taskRowEnvelopeStart(row, day), [
            0,
            Math.floor(this.rowHeightPx - 0.5 * this.blockSizePx) - 1
          ]);
        case Feature.verticalArrowDestToMilestoneTop:
          return add(this.feature(row, day, Feature.verticalArrowDestTop), [
            0,
            -1 * this.metric(Metric.milestoneDiameter)
          ]);
        case Feature.verticalArrowDestToMilestoneBottom:
          return add(this.feature(row, day, Feature.verticalArrowDestTop), [
            0,
            this.metric(Metric.milestoneDiameter)
          ]);
        case Feature.horizontalArrowDestToMilestone:
          return add(this.feature(row, day, Feature.horizontalArrowDest), [
            -1 * this.metric(Metric.milestoneDiameter),
            -1 * this.metric(Metric.milestoneDiameter)
          ]);
        case Feature.verticalArrowStartFromMilestoneTop:
          return add(this.feature(row, day, Feature.verticalArrowStart), [
            0,
            -1 * this.metric(Metric.milestoneDiameter)
          ]);
        case Feature.verticalArrowStartFromMilestoneBottom:
          return add(this.feature(row, day, Feature.verticalArrowStart), [
            0,
            this.metric(Metric.milestoneDiameter)
          ]);
        case Feature.horizontalArrowStartFromMilestone:
          return add(this.feature(row, day, Feature.horizontalArrowStart), [
            this.metric(Metric.milestoneDiameter),
            0
          ]);
        case Feature.taskEnvelopeTop:
          return this.taskRowEnvelopeStart(row, day);
        case Feature.groupEnvelopeStart:
          return this.groupRowEnvelopeStart(row, day);
        case Feature.timeMarkStart:
          return this.timeEnvelopeStart(day);
        case Feature.timeMarkEnd:
          return add(this.timeEnvelopeStart(day), [
            0,
            this.rowHeightPx * (row + 1)
          ]);
        case Feature.timeTextStart:
          return add(this.timeEnvelopeStart(day), [this.blockSizePx, 0]);
        case Feature.groupTitleTextStart:
          return add(this.groupHeaderStart(), [this.blockSizePx, 0]);
        case Feature.displayRangeTop:
          return this.timeEnvelopeStart(day);
        case Feature.taskRowBottom:
          return this.taskRowEnvelopeStart(row + 1, day);
        case Feature.tasksClipRectOrigin:
          return this.tasksClipRectOrigin;
        case Feature.groupByOrigin:
          return this.groupByOrigin;
        default:
          coord;
          return pt(0, 0);
      }
    }
    metric(feature) {
      switch (feature) {
        case Metric.taskLineHeight:
          return this.taskHeightPx;
        case Metric.percentHeight:
          return this.lineWidthPx;
        case Metric.arrowHeadHeight:
          return this.taskHeightPx * 2;
        case Metric.arrowHeadWidth:
          return Math.ceil(this.taskHeightPx);
        case Metric.milestoneDiameter:
          return Math.ceil(this.taskHeightPx);
        case Metric.lineDashLine:
          return this.blockSizePx;
        case Metric.lineDashGap:
          return this.blockSizePx;
        case Metric.textXOffset:
          return this.blockSizePx;
        case Metric.minTaskWidthPx:
          return this.blockSizePx * 10;
        case Metric.rowHeight:
          return this.rowHeightPx;
        default:
          feature;
          return 0;
      }
    }
  };

  // src/hitrect/hitrect.ts
  var withinY = (y2, rect) => {
    return rect.topLeft.y <= y2 && rect.bottomRight.y >= y2;
  };
  var withinX = (x2, rect) => {
    return rect.topLeft.x <= x2 && rect.bottomRight.x >= x2;
  };
  var HitRect = class {
    rects;
    constructor(rects) {
      this.rects = rects.sort((a2, b2) => a2.topLeft.y - b2.topLeft.y);
    }
    /** Returns the index of the Rect that p is in, otherwise returns -1. */
    hit(p2) {
      let start = 0;
      let end = this.rects.length - 1;
      while (start <= end) {
        const mid = Math.floor((start + end) / 2);
        if (withinY(p2.y, this.rects[mid])) {
          if (withinX(p2.x, this.rects[mid])) {
            return this.rects[mid];
          }
          return null;
        } else if (this.rects[mid].topLeft.y < p2.y) {
          start = mid + 1;
        } else {
          end = mid - 1;
        }
      }
      return null;
    }
  };

  // src/renderer/renderer.ts
  var verticalArrowStartFeatureFromTaskDuration = (task, direction) => {
    if (task.duration === 0) {
      if (direction === "down") {
        return Feature.verticalArrowStartFromMilestoneBottom;
      }
      return Feature.verticalArrowStartFromMilestoneTop;
    } else {
      return Feature.verticalArrowStart;
    }
  };
  var verticalArrowDestFeatureFromTaskDuration = (task, direction) => {
    if (task.duration === 0) {
      if (direction === "down") {
        return Feature.verticalArrowDestToMilestoneTop;
      }
      return Feature.verticalArrowDestToMilestoneBottom;
    } else {
      if (direction === "down") {
        return Feature.verticalArrowDestTop;
      }
      return Feature.verticalArrowDestBottom;
    }
  };
  var horizontalArrowDestFeatureFromTaskDuration = (task) => {
    if (task.duration === 0) {
      return Feature.horizontalArrowDestToMilestone;
    } else {
      return Feature.horizontalArrowDest;
    }
  };
  function suggestedCanvasHeight(canvas, spans, opts, maxRows) {
    if (!opts.hasTasks) {
      maxRows = 0;
    }
    return new Scale(
      opts,
      canvas.width,
      spans[spans.length - 1].finish + 1
    ).height(maxRows);
  }
  function renderTasksToCanvas(parent, canvas, ctx, plan, spans, opts, overlay = null) {
    const vret = ChartValidate(plan.chart);
    if (!vret.ok) {
      return vret;
    }
    const originalLabels = plan.chart.Vertices.map(
      (task, taskIndex) => opts.taskLabel(taskIndex)
    );
    const fret = filter(
      plan.chart,
      opts.filterFunc,
      opts.taskEmphasize,
      spans,
      originalLabels,
      opts.selectedTaskIndex
    );
    if (!fret.ok) {
      return fret;
    }
    const chartLike = fret.value.chartLike;
    const labels = fret.value.labels;
    const resourceDefinition = plan.getResourceDefinition(opts.groupByResource);
    const fromFilteredIndexToOriginalIndex = fret.value.fromFilteredIndexToOriginalIndex;
    const fromOriginalIndexToFilteredIndex = fret.value.fromOriginalIndexToFilteredIndex;
    const fromFilteredIndexToPercentComplete = (filteredIndex) => {
      const taskIndex = fromFilteredIndexToOriginalIndex.get(filteredIndex);
      if (taskIndex === void 0) {
        return 0;
      }
      const ret = plan.getTaskCompletion(taskIndex);
      if (!ret.ok) {
        return 0;
      }
      const tc = ret.value;
      switch (tc.stage) {
        case "unstarted":
          return 0;
        case "started":
          return tc.percentComplete;
        case "finished":
          return 100;
        default:
          tc;
          return 0;
      }
    };
    let lastSelectedTaskIndex = opts.selectedTaskIndex;
    const emphasizedTasks = new Set(fret.value.emphasizedTasks);
    spans = fret.value.spans;
    let maxGroupNameLength = 0;
    if (opts.groupByResource !== "" && opts.hasText) {
      maxGroupNameLength = opts.groupByResource.length;
      if (resourceDefinition !== void 0) {
        resourceDefinition.values.forEach((value) => {
          maxGroupNameLength = Math.max(maxGroupNameLength, value.length);
        });
      }
    }
    const totalNumberOfRows = spans.length;
    const totalNumberOfDays = spans[spans.length - 1].finish;
    const scale = new Scale(
      opts,
      canvas.width,
      totalNumberOfDays + 1,
      maxGroupNameLength
    );
    const taskLineHeight = scale.metric(Metric.taskLineHeight);
    const diamondDiameter = scale.metric(Metric.milestoneDiameter);
    const percentHeight = scale.metric(Metric.percentHeight);
    const arrowHeadHeight = scale.metric(Metric.arrowHeadHeight);
    const arrowHeadWidth = scale.metric(Metric.arrowHeadWidth);
    const minTaskWidthPx = scale.metric(Metric.minTaskWidthPx);
    const daysWithTimeMarkers = /* @__PURE__ */ new Set();
    const tiret = taskIndexToRowFromGroupBy(
      opts,
      resourceDefinition,
      chartLike,
      fret.value.displayOrder
    );
    if (!tiret.ok) {
      return tiret;
    }
    const taskIndexToRow = tiret.value.taskIndexToRow;
    const rowRanges = tiret.value.rowRanges;
    clearCanvas(ctx, opts, canvas);
    setFontSize(ctx, opts);
    const clipRegion = new Path2D();
    const clipOrigin = scale.feature(0, 0, Feature.tasksClipRectOrigin);
    const clipWidth = canvas.width - clipOrigin.x;
    clipRegion.rect(clipOrigin.x, 0, clipWidth, canvas.height);
    if (0) {
      ctx.strokeStyle = "red";
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.stroke(clipRegion);
    }
    ctx.fillStyle = opts.colors.get("on-surface");
    ctx.strokeStyle = opts.colors.get("on-surface");
    if (rowRanges !== null) {
      if (opts.hasTasks) {
        drawSwimLaneHighlights(
          ctx,
          scale,
          rowRanges,
          totalNumberOfDays,
          opts.colors.get("group-color")
        );
      }
      if (resourceDefinition !== void 0 && opts.hasText) {
        drawSwimLaneLabels(ctx, opts, resourceDefinition, scale, rowRanges);
      }
    }
    ctx.fillStyle = opts.colors.get("on-surface");
    ctx.strokeStyle = opts.colors.get("on-surface");
    ctx.save();
    ctx.clip(clipRegion);
    const taskIndexToTaskHighlightCorners = /* @__PURE__ */ new Map();
    if (opts.today !== -1) {
      drawTodayMarker(ctx, opts.today, opts.colors, scale);
    }
    const timeMarkerRanges = [];
    chartLike.Vertices.forEach((task, taskIndex) => {
      const row = taskIndexToRow.get(taskIndex);
      const span = spans[taskIndex];
      const taskStart = scale.feature(row, span.start, Feature.taskLineStart);
      const taskEnd = scale.feature(row, span.finish, Feature.taskLineStart);
      const percentComplete = fromFilteredIndexToPercentComplete(taskIndex);
      ctx.fillStyle = opts.colors.get("on-surface-muted");
      ctx.strokeStyle = opts.colors.get("on-surface-muted");
      if (opts.drawTimeMarkersOnTasks) {
        drawTimeMarkerAtDayToTask(
          ctx,
          row,
          span.start,
          task,
          opts,
          scale,
          daysWithTimeMarkers,
          timeMarkerRanges
        );
      }
      ctx.lineWidth = 1;
      if (emphasizedTasks.has(taskIndex)) {
        if (plan._status.stage === "started" && percentComplete > 0) {
          ctx.fillStyle = getPattern(
            ctx,
            opts.colors.get("secondary"),
            opts.colors.get("surface")
          );
          ctx.strokeStyle = opts.colors.get("secondary");
        } else {
          ctx.fillStyle = getPattern(
            ctx,
            opts.colors.get("primary"),
            opts.colors.get("surface")
          );
          ctx.strokeStyle = opts.colors.get("primary");
        }
      } else {
        ctx.fillStyle = getPattern(
          ctx,
          opts.colors.get("on-surface"),
          opts.colors.get("surface")
        );
        ctx.strokeStyle = opts.colors.get("on-surface");
      }
      const highlightTopLeft = scale.feature(
        row,
        span.start,
        Feature.taskEnvelopeTop
      );
      const highlightBottomRight = scale.feature(
        row + 1,
        span.finish,
        Feature.taskEnvelopeTop
      );
      const [width, _2] = difference2(highlightTopLeft, highlightBottomRight);
      if (width < minTaskWidthPx) {
        highlightBottomRight.x = highlightTopLeft.x + minTaskWidthPx;
      }
      taskIndexToTaskHighlightCorners.set(taskIndex, {
        topLeft: highlightTopLeft,
        bottomRight: highlightBottomRight,
        filteredTaskIndex: taskIndex
      });
      if (opts.hasTasks) {
        if (taskStart.x === taskEnd.x) {
          drawMilestone(ctx, taskStart, diamondDiameter, percentHeight);
        } else {
          drawTaskBar(
            ctx,
            opts,
            taskStart,
            taskEnd,
            taskLineHeight,
            percentComplete,
            plan._status.stage === "started"
          );
        }
        if (taskIndex !== 0 && taskIndex !== totalNumberOfRows - 1) {
          drawTaskText(
            ctx,
            opts,
            scale,
            row,
            span,
            task,
            taskIndex,
            fromFilteredIndexToOriginalIndex.get(taskIndex),
            clipWidth,
            labels
          );
        }
      }
    });
    ctx.lineWidth = 1;
    ctx.strokeStyle = opts.colors.get("on-surface-muted");
    if (opts.hasEdges && opts.hasTasks) {
      const highlightedEdges = [];
      const normalEdges = [];
      chartLike.Edges.forEach((e3) => {
        const origTaskIndex = fromFilteredIndexToOriginalIndex.get(e3.j);
        if (origTaskIndex !== void 0 && opts.taskIsStarted(origTaskIndex)) {
          return;
        }
        if (emphasizedTasks.has(e3.i) && emphasizedTasks.has(e3.j)) {
          highlightedEdges.push(e3);
        } else {
          normalEdges.push(e3);
        }
      });
      ctx.strokeStyle = opts.colors.get("on-surface-muted");
      drawEdges(
        ctx,
        opts,
        normalEdges,
        spans,
        chartLike.Vertices,
        scale,
        taskIndexToRow,
        arrowHeadWidth,
        arrowHeadHeight,
        emphasizedTasks
      );
      ctx.strokeStyle = opts.colors.get("primary");
      drawEdges(
        ctx,
        opts,
        highlightedEdges,
        spans,
        chartLike.Vertices,
        scale,
        taskIndexToRow,
        arrowHeadWidth,
        arrowHeadHeight,
        emphasizedTasks
      );
    }
    ctx.restore();
    if (opts.displayRange !== null && opts.displayRangeUsage === "highlight") {
      if (opts.displayRange.begin > 0) {
        drawRangeOverlay(
          ctx,
          opts,
          scale,
          0,
          opts.displayRange.begin,
          totalNumberOfRows
        );
      }
      if (opts.displayRange.end < totalNumberOfDays) {
        drawRangeOverlay(
          ctx,
          opts,
          scale,
          opts.displayRange.end,
          totalNumberOfDays + 1,
          totalNumberOfRows
        );
      }
    }
    let updateHighlightFromMousePos = null;
    let selectedTaskLocation = null;
    if (overlay !== null) {
      const overlayCtx = overlay.getContext("2d");
      const taskLocationKDTree = new HitRect([
        ...taskIndexToTaskHighlightCorners.values()
      ]);
      let lastHighlightedTaskIndex = -1;
      updateHighlightFromMousePos = (point, updateType) => {
        point.x = point.x * window.devicePixelRatio;
        point.y = point.y * window.devicePixelRatio;
        const taskLocation = taskLocationKDTree.hit(point);
        const originalTaskIndex = taskLocation === null ? -1 : fromFilteredIndexToOriginalIndex.get(
          taskLocation.filteredTaskIndex
        );
        if (originalTaskIndex === 0 || originalTaskIndex === plan.chart.Vertices.length - 1) {
          return null;
        }
        if (updateType === "mousemove") {
          if (originalTaskIndex === lastHighlightedTaskIndex) {
            return originalTaskIndex;
          }
        } else {
          if (originalTaskIndex === lastSelectedTaskIndex) {
            return originalTaskIndex;
          }
        }
        if (updateType === "mousemove") {
          lastHighlightedTaskIndex = originalTaskIndex;
        } else {
          lastSelectedTaskIndex = originalTaskIndex;
        }
        overlayCtx.clearRect(0, 0, overlay.width, overlay.height);
        let corners2 = taskIndexToTaskHighlightCorners.get(
          fromOriginalIndexToFilteredIndex.get(lastHighlightedTaskIndex)
        );
        if (corners2 !== void 0) {
          drawTaskHighlight(
            overlayCtx,
            corners2.topLeft,
            corners2.bottomRight,
            opts.colors.get("primary-variant"),
            taskLineHeight
          );
        }
        corners2 = taskIndexToTaskHighlightCorners.get(
          fromOriginalIndexToFilteredIndex.get(lastSelectedTaskIndex)
        );
        if (corners2 !== void 0) {
          drawSelectionHighlight(
            overlayCtx,
            corners2.topLeft,
            corners2.bottomRight,
            opts.colors.get("primary-variant")
          );
        }
        return originalTaskIndex;
      };
      const corners = taskIndexToTaskHighlightCorners.get(
        fromOriginalIndexToFilteredIndex.get(lastSelectedTaskIndex)
      );
      if (corners !== void 0) {
        drawSelectionHighlight(
          overlayCtx,
          corners.topLeft,
          corners.bottomRight,
          opts.colors.get("primary-variant")
        );
      }
    }
    taskIndexToTaskHighlightCorners.forEach((rc) => {
      if (selectedTaskLocation === null) {
        selectedTaskLocation = rc.topLeft;
        return;
      }
      if (rc.topLeft.y < selectedTaskLocation.y) {
        selectedTaskLocation = rc.topLeft;
      }
    });
    if (opts.selectedTaskIndex !== -1 && fromOriginalIndexToFilteredIndex.has(opts.selectedTaskIndex)) {
      selectedTaskLocation = taskIndexToTaskHighlightCorners.get(
        fromOriginalIndexToFilteredIndex.get(opts.selectedTaskIndex)
        // Convert
      ).topLeft;
    }
    let returnedLocation = null;
    if (selectedTaskLocation !== null) {
      returnedLocation = pt(
        selectedTaskLocation.x / window.devicePixelRatio,
        selectedTaskLocation.y / window.devicePixelRatio
      );
    }
    return ok({
      scale,
      updateHighlightFromMousePos,
      selectedTaskLocation: returnedLocation
    });
  }
  function drawEdges(ctx, opts, edges, spans, tasks, scale, taskIndexToRow, arrowHeadWidth, arrowHeadHeight, taskHighlights) {
    edges.forEach((e3) => {
      const srcSlack = spans[e3.i];
      const dstSlack = spans[e3.j];
      const srcTask = tasks[e3.i];
      const dstTask = tasks[e3.j];
      const srcRow = taskIndexToRow.get(e3.i);
      const dstRow = taskIndexToRow.get(e3.j);
      const srcDay = srcSlack.finish;
      const dstDay = dstSlack.start;
      if (taskHighlights.has(e3.i) && taskHighlights.has(e3.j)) {
        ctx.strokeStyle = opts.colors.get("primary");
        ctx.fillStyle = opts.colors.get("primary");
      } else {
        ctx.strokeStyle = opts.colors.get("on-surface-muted");
        ctx.fillStyle = opts.colors.get("on-surface-muted");
      }
      drawArrowBetweenTasks(
        ctx,
        srcDay,
        dstDay,
        scale,
        srcRow,
        srcTask,
        dstRow,
        dstTask,
        arrowHeadWidth,
        arrowHeadHeight
      );
    });
  }
  function drawRangeOverlay(ctx, opts, scale, beginDay, endDay, totalNumberOfRows) {
    const topLeft = scale.feature(0, beginDay, Feature.displayRangeTop);
    const bottomRight = scale.feature(
      totalNumberOfRows,
      endDay,
      Feature.taskRowBottom
    );
    ctx.fillStyle = opts.colors.get("transparent-overlay");
    ctx.fillRect(
      topLeft.x,
      topLeft.y,
      bottomRight.x - topLeft.x,
      bottomRight.y - topLeft.y
    );
  }
  function drawArrowBetweenTasks(ctx, srcDay, dstDay, scale, srcRow, srcTask, dstRow, dstTask, arrowHeadWidth, arrowHeadHeight) {
    if (srcDay === dstDay) {
      drawVerticalArrowToTask(
        ctx,
        scale,
        srcRow,
        srcDay,
        srcTask,
        dstRow,
        dstDay,
        dstTask,
        arrowHeadWidth,
        arrowHeadHeight
      );
    } else {
      drawLShapedArrowToTask(
        ctx,
        scale,
        srcRow,
        srcDay,
        srcTask,
        dstRow,
        dstTask,
        dstDay,
        arrowHeadHeight,
        arrowHeadWidth
      );
    }
  }
  function clearCanvas(ctx, opts, canvas) {
    ctx.fillStyle = opts.colors.get("background");
    ctx.strokeStyle = opts.colors.get("on-background");
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  }
  function setFontSize(ctx, opts) {
    ctx.font = `${opts.fontSizePx}px serif`;
  }
  function drawLShapedArrowToTask(ctx, scale, srcRow, srcDay, srcTask, dstRow, dstTask, dstDay, arrowHeadHeight, arrowHeadWidth) {
    ctx.beginPath();
    const direction = srcRow < dstRow ? "down" : "up";
    const vertLineStart = scale.feature(
      srcRow,
      srcDay,
      verticalArrowStartFeatureFromTaskDuration(srcTask, direction)
    );
    const vertLineEnd = scale.feature(
      dstRow,
      srcDay,
      horizontalArrowDestFeatureFromTaskDuration(dstTask)
    );
    ctx.moveTo(vertLineStart.x + 0.5, vertLineStart.y);
    ctx.lineTo(vertLineStart.x + 0.5, vertLineEnd.y);
    const horzLineStart = vertLineEnd;
    const horzLineEnd = scale.feature(
      dstRow,
      dstDay,
      horizontalArrowDestFeatureFromTaskDuration(dstTask)
    );
    ctx.moveTo(vertLineStart.x + 0.5, horzLineStart.y);
    ctx.lineTo(horzLineEnd.x + 0.5, horzLineEnd.y);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(horzLineEnd.x + 0.5, horzLineEnd.y);
    ctx.lineTo(
      horzLineEnd.x - arrowHeadHeight + 0.5,
      horzLineEnd.y + arrowHeadWidth
    );
    ctx.lineTo(
      horzLineEnd.x - arrowHeadHeight + 0.5,
      horzLineEnd.y - arrowHeadWidth
    );
    ctx.fill();
  }
  function drawVerticalArrowToTask(ctx, scale, srcRow, srcDay, srcTask, dstRow, dstDay, dstTask, arrowHeadWidth, arrowHeadHeight) {
    const direction = srcRow < dstRow ? "down" : "up";
    const arrowStart = scale.feature(
      srcRow,
      srcDay,
      verticalArrowStartFeatureFromTaskDuration(srcTask, direction)
    );
    const arrowEnd = scale.feature(
      dstRow,
      dstDay,
      verticalArrowDestFeatureFromTaskDuration(dstTask, direction)
    );
    ctx.beginPath();
    ctx.moveTo(arrowStart.x + 0.5, arrowStart.y);
    ctx.lineTo(arrowEnd.x + 0.5, arrowEnd.y);
    ctx.stroke();
    ctx.beginPath();
    const deltaY = direction === "down" ? -arrowHeadHeight : arrowHeadHeight;
    ctx.moveTo(arrowEnd.x + 0.5, arrowEnd.y);
    ctx.lineTo(arrowEnd.x - arrowHeadWidth + 0.5, arrowEnd.y + deltaY);
    ctx.lineTo(arrowEnd.x + arrowHeadWidth + 0.5, arrowEnd.y + deltaY);
    ctx.fill();
  }
  function drawTaskText(ctx, opts, scale, row, span, task, taskIndex, originalTaskIndex, clipWidth, labels) {
    if (!opts.hasText) {
      return;
    }
    const label = labels[taskIndex];
    let xStartInTime = span.start;
    let xPixelDelta = 0;
    if (opts.displayRange !== null && opts.displayRangeUsage === "restrict") {
      if (opts.displayRange.in(span.start)) {
        xStartInTime = span.start;
        xPixelDelta = 0;
      } else if (opts.displayRange.in(span.finish)) {
        xStartInTime = span.finish;
        const meas = ctx.measureText(label);
        xPixelDelta = -meas.width - 2 * scale.metric(Metric.textXOffset);
      } else if (span.start < opts.displayRange.begin && span.finish > opts.displayRange.end) {
        xStartInTime = opts.displayRange.begin;
        xPixelDelta = clipWidth / 2;
      }
    }
    ctx.lineWidth = 1;
    ctx.fillStyle = opts.colors.get("on-surface");
    ctx.textBaseline = "top";
    const textStart = scale.feature(row, xStartInTime, Feature.textStart);
    ctx.fillText(label, textStart.x + xPixelDelta, textStart.y);
  }
  function drawTaskBar(ctx, opts, taskStart, taskEnd, taskLineHeight, percentComplete, planStarted) {
    ctx.fillRect(
      taskStart.x,
      taskStart.y,
      taskEnd.x - taskStart.x,
      taskLineHeight
    );
    console.log(taskEnd.x, taskEnd.y);
    console.log(ctx.lineWidth);
    ctx.strokeRect(
      taskStart.x,
      taskStart.y,
      taskEnd.x - taskStart.x,
      taskLineHeight
    );
    if (planStarted) {
      if (percentComplete !== 0) {
        if (percentComplete === 100) {
          ctx.fillStyle = opts.colors.get("on-surface");
          ctx.strokeStyle = opts.colors.get("on-surface");
        } else {
          ctx.fillStyle = opts.colors.get("secondary");
          ctx.strokeStyle = opts.colors.get("secondary");
        }
        ctx.fillRect(
          taskStart.x,
          taskStart.y,
          (taskEnd.x - taskStart.x) * percentComplete / 100,
          taskLineHeight
        );
      }
    }
  }
  function drawTaskHighlight(ctx, highlightStart, highlightEnd, color, borderWidth) {
    ctx.strokeStyle = color;
    ctx.lineWidth = borderWidth;
    ctx.strokeRect(
      highlightStart.x,
      highlightStart.y,
      highlightEnd.x - highlightStart.x,
      highlightEnd.y - highlightStart.y
    );
  }
  function drawSelectionHighlight(ctx, highlightStart, highlightEnd, color) {
    ctx.fillStyle = color;
    ctx.fillRect(
      highlightStart.x,
      highlightStart.y,
      highlightEnd.x - highlightStart.x,
      highlightEnd.y - highlightStart.y
    );
  }
  function drawMilestone(ctx, taskStart, diamondDiameter, percentHeight) {
    ctx.beginPath();
    ctx.lineWidth = percentHeight / 2;
    ctx.moveTo(taskStart.x, taskStart.y - diamondDiameter);
    ctx.lineTo(taskStart.x + diamondDiameter, taskStart.y);
    ctx.lineTo(taskStart.x, taskStart.y + diamondDiameter);
    ctx.lineTo(taskStart.x - diamondDiameter, taskStart.y);
    ctx.closePath();
    ctx.stroke();
  }
  var drawTodayMarker = (ctx, today, colors, scale) => {
    const timeMarkStart = scale.feature(0, today, Feature.timeMarkStart);
    const rowHeight = scale.metric(Metric.rowHeight);
    ctx.beginPath();
    ctx.lineWidth = scale.metric("percentHeight") * 4;
    ctx.strokeStyle = colors.get("error");
    ctx.moveTo(timeMarkStart.x, timeMarkStart.y);
    ctx.lineTo(timeMarkStart.x, timeMarkStart.y + rowHeight);
    ctx.stroke();
  };
  var drawTimeMarkerAtDayToTask = (ctx, row, day, task, opts, scale, daysWithTimeMarkers, timeMarkerRanges) => {
    if (daysWithTimeMarkers.has(day)) {
      return;
    }
    daysWithTimeMarkers.add(day);
    const timeMarkStart = scale.feature(row, day, Feature.timeMarkStart);
    if (timeMarkerRanges.findIndex(
      ([begin, end]) => timeMarkStart.x >= begin && timeMarkStart.x <= end
    ) !== -1) {
      return;
    }
    const timeMarkEnd = scale.feature(
      row,
      day,
      verticalArrowDestFeatureFromTaskDuration(task, "down")
    );
    ctx.lineWidth = 0.5;
    ctx.strokeStyle = opts.colors.get("transparent-overlay");
    ctx.moveTo(timeMarkStart.x + 0.5, timeMarkStart.y);
    ctx.lineTo(timeMarkStart.x + 0.5, timeMarkEnd.y);
    ctx.stroke();
    ctx.setLineDash([]);
    ctx.fillStyle = opts.colors.get("on-surface");
    ctx.textBaseline = "top";
    const textStart = scale.feature(row, day, Feature.timeTextStart);
    const label = opts.durationDisplay(day);
    const meas = ctx.measureText(label);
    const textBegin = timeMarkStart.x;
    const textEnd = textStart.x + meas.width;
    if (opts.hasText && opts.hasTimeline && // Don't draw the label if it overlaps any existing labelss.
    timeMarkerRanges.findIndex(([begin, end]) => {
      return textBegin <= begin && textEnd >= begin || textBegin <= end && textEnd >= end;
    }) === -1) {
      ctx.fillText(`${label}`, textStart.x, textStart.y);
      timeMarkerRanges.push([textBegin, textEnd]);
    }
  };
  var taskIndexToRowFromGroupBy = (opts, resourceDefinition, chartLike, displayOrder) => {
    const taskIndexToRow = new Map(
      // This looks backwards, but it isn't. Remember that the map callback takes
      // (value, index) as its arguments.
      displayOrder.map((taskIndex, row2) => [taskIndex, row2])
    );
    if (resourceDefinition === void 0) {
      return ok({
        taskIndexToRow,
        rowRanges: null,
        resourceDefinition: null
      });
    }
    const startTaskIndex = 0;
    const finishTaskIndex = chartLike.Vertices.length - 1;
    const ignorable = [startTaskIndex, finishTaskIndex];
    const groups = /* @__PURE__ */ new Map();
    displayOrder.forEach((taskIndex) => {
      const resourceValue = chartLike.Vertices[taskIndex].getResource(opts.groupByResource) || "";
      const groupMembers = groups.get(resourceValue) || [];
      groupMembers.push(taskIndex);
      groups.set(resourceValue, groupMembers);
    });
    const ret = /* @__PURE__ */ new Map();
    ret.set(0, 0);
    let row = 1;
    const rowRanges = /* @__PURE__ */ new Map();
    resourceDefinition.values.forEach(
      (resourceValue, resourceIndex) => {
        const startOfRow = row;
        (groups.get(resourceValue) || []).forEach((taskIndex) => {
          if (ignorable.includes(taskIndex)) {
            return;
          }
          ret.set(taskIndex, row);
          row++;
        });
        rowRanges.set(resourceIndex, { start: startOfRow, finish: row });
      }
    );
    ret.set(finishTaskIndex, row);
    return ok({
      taskIndexToRow: ret,
      rowRanges,
      resourceDefinition
    });
  };
  var drawSwimLaneHighlights = (ctx, scale, rowRanges, totalNumberOfDays, groupColor) => {
    ctx.fillStyle = groupColor;
    let group = 0;
    rowRanges.forEach((rowRange) => {
      const topLeft = scale.feature(
        rowRange.start,
        0,
        Feature.groupEnvelopeStart
      );
      const bottomRight = scale.feature(
        rowRange.finish,
        totalNumberOfDays + 1,
        Feature.taskEnvelopeTop
      );
      group++;
      if (group % 2 == 1) {
        return;
      }
      ctx.fillRect(
        topLeft.x,
        topLeft.y,
        bottomRight.x - topLeft.x,
        bottomRight.y - topLeft.y
      );
    });
  };
  var drawSwimLaneLabels = (ctx, opts, resourceDefinition, scale, rowRanges) => {
    if (rowRanges) ctx.lineWidth = 1;
    ctx.fillStyle = opts.colors.get("on-surface");
    const groupByOrigin = scale.feature(0, 0, Feature.groupByOrigin);
    if (opts.hasTimeline) {
      ctx.textBaseline = "bottom";
      ctx.fillText(opts.groupByResource, groupByOrigin.x, groupByOrigin.y);
    }
    if (opts.hasTasks) {
      ctx.textBaseline = "top";
      rowRanges.forEach((rowRange, resourceIndex) => {
        if (rowRange.start === rowRange.finish) {
          return;
        }
        const textStart = scale.feature(
          rowRange.start,
          0,
          Feature.groupTextStart
        );
        ctx.fillText(
          resourceDefinition.values[resourceIndex],
          textStart.x,
          textStart.y
        );
      });
    }
  };
  var patterns = /* @__PURE__ */ new Map();
  var getPattern = (ctx, color, background) => {
    const key = `${color}:${background}`;
    let ret = patterns.get(key);
    if (ret !== void 0) {
      return ret;
    }
    const canvas = document.createElement("canvas");
    canvas.width = 4;
    canvas.height = 4;
    const pCtx = canvas.getContext("2d");
    pCtx.fillStyle = background;
    pCtx.fillRect(0, 0, canvas.width, canvas.height);
    pCtx.strokeStyle = color;
    pCtx.lineWidth = 1;
    pCtx.moveTo(0, 4);
    pCtx.lineTo(4, 0);
    pCtx.stroke();
    ret = ctx.createPattern(canvas, "repeat");
    patterns.set(key, ret);
    return ret;
  };

  // src/style/theme/theme.ts
  var cssVariableNames = [
    "primary",
    "on-primary",
    "primary-variant",
    "on-primary-variant",
    "secondary",
    "on-secondary",
    "background",
    "on-background",
    "surface",
    "on-surface",
    "on-surface-muted",
    "surface-1dp",
    "surface-2dp",
    "disabled",
    "on-disabled",
    "error",
    "on-error",
    "transparent-overlay",
    "group-color"
  ];
  var Theme2 = class {
    values = /* @__PURE__ */ new Map();
    _fontSize = 14;
    loadFromElement(ele) {
      const style = getComputedStyle(ele);
      cssVariableNames.forEach((key) => {
        this.values.set(key, style.getPropertyValue(`--${key}`));
      });
      this._fontSize = +style.getPropertyValue("font-size").split("px")[0] * window.devicePixelRatio * 1.8;
      if (this._fontSize === 0) {
        this._fontSize = 24;
      }
    }
    fontSize() {
      return this._fontSize;
    }
    get(key) {
      return this.values.get(key) || "";
    }
  };

  // src/generate/generate.ts
  var people = ["Fred", "Barney", "Wilma", "Betty"];
  var uncertainties = ["low", "moderate", "high"];
  var DURATION = 10;
  var rndInt2 = (n2) => {
    return Math.floor(Math.random() * n2);
  };
  var rndDuration = () => {
    return rndInt2(DURATION);
  };
  var rndUncertainty = () => uncertainties[rndInt2(uncertainties.length)];
  var generateStarterPlan = () => {
    const plan = new Plan();
    const res = applyAllOpsToPlan(
      [
        InsertNewEmptyMilestoneAfterOp(0),
        SetMetricValueOp("Duration", 10, 1),
        SetResourceValueOp("Uncertainty", "low", 1)
      ],
      plan
    );
    reportIfError(res);
    return plan;
  };
  var generateRandomPlan = () => {
    const plan = new Plan();
    const ops = [AddResourceOp("Person")];
    people.forEach((person) => {
      ops.push(AddResourceOptionOp("Person", person));
    });
    ops.push(DeleteResourceOptionOp("Person", ""));
    ops.push(
      AddMetricOp("Cost ($/hr)", new MetricDefinition(15, new MetricRange(0))),
      InsertNewEmptyMilestoneAfterOp(0),
      SetMetricValueOp("Duration", rndDuration(), 1),
      SetTaskNameOp(1, randomTaskName()),
      SetResourceValueOp("Person", people[rndInt2(people.length)], 1),
      SetResourceValueOp("Uncertainty", rndUncertainty(), 1)
    );
    let numTasks = 1;
    for (let i3 = 0; i3 < 20; i3++) {
      let index = rndInt2(numTasks) + 1;
      ops.push(
        SplitTaskOp(index),
        SetMetricValueOp("Duration", rndDuration(), index + 1),
        SetTaskNameOp(index + 1, randomTaskName()),
        SetResourceValueOp("Person", people[rndInt2(people.length)], index + 1),
        SetResourceValueOp("Uncertainty", rndUncertainty(), index + 1)
      );
      numTasks++;
      index = rndInt2(numTasks) + 1;
      ops.push(
        DupTaskOp(index),
        SetMetricValueOp("Duration", rndDuration(), index + 1),
        SetTaskNameOp(index + 1, randomTaskName()),
        SetResourceValueOp("Person", people[rndInt2(people.length)], index + 1),
        SetResourceValueOp("Uncertainty", rndUncertainty(), index + 1)
      );
      numTasks++;
    }
    const res = applyAllOpsToPlan(ops, plan);
    reportIfError(res);
    return plan;
  };
  var parts = [
    "lorem",
    "ipsum",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipiscing",
    "elit",
    "sed",
    "do",
    "eiusmod",
    "tempor",
    "incididunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magna",
    "aliqua",
    "ut",
    "enim",
    "ad",
    "minim",
    "veniam",
    "quis",
    "nostrud",
    "exercitation",
    "ullamco",
    "laboris",
    "nisi",
    "ut",
    "aliquip",
    "ex",
    "ea",
    "commodo",
    "consequat",
    "euis",
    "aute",
    "irure",
    "dolor",
    "in",
    "reprehenderit",
    "in",
    "voluptate",
    "velit",
    "esse",
    "cillum",
    "dolore",
    "eu",
    "fugiat",
    "nulla",
    "pariatur",
    "excepteur",
    "sint",
    "occaecat",
    "cupidatat",
    "non",
    "proident",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollit",
    "anim",
    "id",
    "est",
    "laborum"
  ];
  var partsLength = parts.length;
  var randomTaskName = () => `${parts[rndInt2(partsLength)]} ${parts[rndInt2(partsLength)]}`;

  // src/vendor/png-metadata/src/png-metadata.ts
  var PNG_SIG = new Uint8Array([
    137,
    80,
    78,
    71,
    13,
    10,
    26,
    10
  ]);
  var PngMetadata = class _PngMetadata {
    static textDecoder = new TextDecoder();
    static textEncoder = new TextEncoder();
    static isPNG(data) {
      const signature = new Uint8Array(data.slice(0, 8));
      if (signature.byteLength < 8) {
        return false;
      }
      return signature.every((byte, index) => byte === PNG_SIG[index]);
    }
    static splitChunks(data) {
      const view = new DataView(data instanceof ArrayBuffer ? data : data.buffer);
      let offset = PNG_SIG.length;
      const chunks = [];
      while (offset < view.byteLength) {
        if (offset + 8 > view.byteLength) break;
        const size = view.getUint32(offset);
        offset += 4;
        const type = _PngMetadata.textDecoder.decode(
          new Uint8Array(data.slice(offset, offset + 4))
        );
        offset += 4;
        if (offset + size + 4 > view.byteLength) break;
        const chunkData = new Uint8Array(data.slice(offset, offset + size));
        offset += size;
        const crc = view.getUint32(offset);
        offset += 4;
        chunks.push({ size, type, data: chunkData, crc });
      }
      return chunks;
    }
    static joinChunks(chunks) {
      const totalSize = PNG_SIG.length + chunks.reduce((sum, chunk) => sum + 12 + chunk.size, 0);
      const buffer = new ArrayBuffer(totalSize);
      const view = new DataView(buffer);
      const uint8Array = new Uint8Array(buffer);
      uint8Array.set(PNG_SIG, 0);
      let offset = PNG_SIG.length;
      for (const chunk of chunks) {
        view.setUint32(offset, chunk.size);
        offset += 4;
        uint8Array.set(_PngMetadata.textEncoder.encode(chunk.type), offset);
        offset += 4;
        uint8Array.set(chunk.data, offset);
        offset += chunk.size;
        view.setUint32(offset, chunk.crc);
        offset += 4;
      }
      return buffer;
    }
    static createChunk(type, data) {
      const typeArray = _PngMetadata.textEncoder.encode(type);
      const crc = _PngMetadata.crc32(new Uint8Array([...typeArray, ...data]));
      return { size: data.length, type, data, crc };
    }
    static crc32(data) {
      let crc = -1;
      for (let i3 = 0; i3 < data.length; i3++) {
        crc = crc >>> 8 ^ _PngMetadata.crcTable[(crc ^ data[i3]) & 255];
      }
      return (crc ^ -1) >>> 0;
    }
    static crcTable = (() => {
      const table = new Array(256);
      for (let i3 = 0; i3 < 256; i3++) {
        let c2 = i3;
        for (let j2 = 0; j2 < 8; j2++) {
          c2 = c2 & 1 ? 3988292384 ^ c2 >>> 1 : c2 >>> 1;
        }
        table[i3] = c2;
      }
      return table;
    })();
  };

  // src/image/image.ts
  var explanJSONKeywordAndNullTerminator = [
    97,
    112,
    112,
    108,
    105,
    99,
    97,
    116,
    105,
    111,
    110,
    47,
    118,
    110,
    100,
    46,
    101,
    120,
    112,
    108,
    97,
    110,
    46,
    111,
    114,
    103,
    43,
    106,
    115,
    111,
    110,
    0
  ];
  var addExplanJSONChunkToPNG = async (json, blob) => {
    const bin = new Uint8Array(await blob.arrayBuffer());
    const chunks = PngMetadata.splitChunks(bin);
    const contentEncoded = new TextEncoder().encode(str2b64(json));
    const data = new Uint8Array(
      new ArrayBuffer(
        explanJSONKeywordAndNullTerminator.length + contentEncoded.length
      )
    );
    data.set(explanJSONKeywordAndNullTerminator, 0);
    data.set(contentEncoded, explanJSONKeywordAndNullTerminator.length);
    const textChunk = PngMetadata.createChunk("tEXt", data);
    chunks.splice(-1, 0, textChunk);
    return new Blob([PngMetadata.joinChunks(chunks)]);
  };
  var getExplanJSONChunkFromPNG = async (bytes) => {
    const chunks = PngMetadata.splitChunks(bytes);
    const matches = chunks.filter((chunk) => chunk.type === "tEXt").filter(
      (chunk) => chunk.data.slice(0, explanJSONKeywordAndNullTerminator.length).every((x2, index) => {
        return x2 === explanJSONKeywordAndNullTerminator[index];
      })
    );
    if (matches.length === 0) {
      return error(new Error("No tEXt chunks found."));
    }
    const contentEncoded = matches[0].data.slice(
      explanJSONKeywordAndNullTerminator.length
    );
    return ok(b642str(new TextDecoder().decode(contentEncoded)));
  };
  var str2b64 = (str) => btoa(
    encodeURIComponent(str).replace(
      /%([0-9A-F]{2})/g,
      (_match, p1) => String.fromCharCode(parseInt(p1, 16))
    )
  );
  var b642str = (str) => decodeURIComponent(
    Array.prototype.map.call(atob(str), function(c2) {
      return "%" + ("00" + c2.charCodeAt(0).toString(16)).slice(-2);
    }).join("")
  );

  // src/explanMain/explanMain.ts
  var FONT_SIZE_PX = 32;
  var NUM_SIMULATION_LOOPS = 100;
  var EXPORT_IMAGE_DEFAULT_PX = 1e3;
  var ExplanMain = class extends HTMLElement {
    /** The Plan being edited. */
    plan = new Plan();
    /** The start and finish time for each Task in the Plan. */
    spans = [];
    /** The task indices of tasks on the critical path. */
    criticalPath = [];
    /** The selection (in time) of the Plan currently being viewed. */
    displayRange = null;
    /** Scale for the radar view, used for drag selecting a displayRange. */
    radarScale = null;
    /** Which Resource to group by when drawing the chart. */
    groupBySelection = "";
    /** The currently selected task, as an index. */
    selectedTask = -1;
    // UI features that can be toggled on and off.
    topTimeline = false;
    criticalPathsOnly = false;
    focusOnTask = false;
    mouseMove = null;
    dependenciesPanel = null;
    downloadLink = null;
    selectedTaskPanel = null;
    taskCompletionPanel = null;
    alternateTaskDurations = null;
    simulationPanel = null;
    // TODO should be saved in localStorage.
    _imageExportWidthPx = EXPORT_IMAGE_DEFAULT_PX;
    _imageExportBackgroundTransparent = false;
    /** Callback to call when a mouse moves over the chart. */
    updateHighlightFromMousePos = null;
    connectedCallback() {
      this.simulationPanel = this.querySelector("simulation-panel");
      this.simulationPanel.addEventListener("simulation-select", (e3) => {
        this.alternateTaskDurations = e3.detail.durations;
        this.criticalPath = e3.detail.criticalPath;
        this.recalculateSpansAndCriticalPath();
        this.paintChart();
      });
      this.downloadLink = this.querySelector("#download-link");
      this.querySelector("#download-button").addEventListener(
        "click",
        async () => {
          await this.prepareDownload();
        }
      );
      this.querySelector("#download-json").addEventListener(
        "click",
        async () => {
          await this.prepareJSONDownload();
        }
      );
      this.dependenciesPanel = this.querySelector("dependencies-panel");
      this.dependenciesPanel.addEventListener("add-dependency", async (e3) => {
        let actionName = "AddPredecessorAction";
        if (e3.detail.depType === "succ") {
          actionName = "AddSuccessorAction";
        }
        const ret = await executeByName(actionName, this);
        reportIfError(ret);
      });
      this.dependenciesPanel.addEventListener("delete-dependency", async (e3) => {
        let [i3, j2] = [e3.detail.taskIndex, this.selectedTask];
        if (e3.detail.depType === "succ") {
          [i3, j2] = [j2, i3];
        }
        const op = RemoveEdgeOp(i3, j2);
        const ret = await executeOp(op, "planDefinitionChanged", true, this);
        reportIfError(ret);
      });
      this.selectedTaskPanel = this.querySelector("selected-task-panel");
      this.selectedTaskPanel.addEventListener(
        "task-name-change",
        async (e3) => {
          const op = SetTaskNameOp(e3.detail.taskIndex, e3.detail.name);
          reportIfError(await executeOp(op, "planDefinitionChanged", true, this));
        }
      );
      this.selectedTaskPanel.addEventListener(
        "task-resource-value-change",
        async (e3) => {
          const { name, value, taskIndex } = e3.detail;
          const op = SetResourceValueOp(name, value, taskIndex);
          reportIfError(await executeOp(op, "planDefinitionChanged", true, this));
        }
      );
      this.selectedTaskPanel.addEventListener(
        "task-metric-value-change",
        async (e3) => {
          const { name, value, taskIndex } = e3.detail;
          const op = SetMetricValueOp(name, value, taskIndex);
          reportIfError(await executeOp(op, "planDefinitionChanged", true, this));
        }
      );
      this.taskCompletionPanel = this.querySelector("task-completion-panel");
      const radar = this.querySelector("#radar");
      new MouseDrag(radar);
      radar.addEventListener(
        DRAG_RANGE_EVENT,
        this.dragRangeHandler.bind(this)
      );
      const divider = this.querySelector("vertical-divider");
      new DividerMove(document.body, divider, "column");
      document.body.addEventListener(DIVIDER_MOVE_EVENT, (e3) => {
        this.style.setProperty(
          "grid-template-columns",
          `calc(${e3.detail.before}% - 15px) 10px auto`
        );
        this.paintChart();
      });
      this.querySelector("#dark-mode-toggle").addEventListener("click", () => {
        executeByName("ToggleDarkModeAction", this);
      });
      applyStoredTheme();
      this.querySelector("#radar-toggle").addEventListener(
        "input",
        (e3) => {
          this.setRadar(e3.target.checked);
        }
      );
      this.querySelector(
        "#critical-paths-toggle"
      ).addEventListener("input", (e3) => {
        this.criticalPathsOnly = e3.target.checked;
        this.paintChart();
      });
      const overlayCanvas = this.querySelector("#overlay");
      this.mouseMove = new MouseMove(overlayCanvas);
      window.requestAnimationFrame(this.onMouseMove.bind(this));
      overlayCanvas.addEventListener("mousedown", (e3) => {
        const p2 = pt(e3.offsetX, e3.offsetY);
        if (this.updateHighlightFromMousePos !== null) {
          this.setSelection(
            this.updateHighlightFromMousePos(p2, "mousedown") || -1,
            false
          );
        }
      });
      overlayCanvas.addEventListener("dblclick", (e3) => {
        const p2 = pt(e3.offsetX, e3.offsetY);
        if (this.updateHighlightFromMousePos !== null) {
          const taskIndex = this.updateHighlightFromMousePos(p2, "mousedown") || -1;
          if (taskIndex === -1) {
            executeByName("ResetZoomAction", this);
          }
          this.setSelection(taskIndex, true, true);
        }
      });
      const fileUpload = document.querySelector("#file-upload");
      fileUpload.addEventListener("change", async () => {
        const blob = fileUpload.files[0];
        const bytes = await blob.arrayBuffer();
        const ret = await this.fromUint8Array(new Uint8Array(bytes));
        reportIfError(ret);
      });
      this.querySelector("#simulate").addEventListener("click", () => {
        this.recalculateSpansAndCriticalPath();
        const finishedTasks = /* @__PURE__ */ new Set();
        this.plan.chart.Vertices.filter((task, index) => {
          if (this.plan.taskCompletion[task.id]?.stage === "finished") {
            finishedTasks.add(index);
          }
        });
        this.criticalPath = this.simulationPanel.simulate(
          this.plan.chart,
          NUM_SIMULATION_LOOPS,
          this.criticalPath,
          finishedTasks
        );
        this.paintChart();
      });
      this.querySelector("edit-resources-panel").setConfig(
        this
      );
      this.querySelector("plan-config-panel").setConfig(this);
      this.querySelector("edit-metrics-panel").setConfig(this);
      this.querySelector("image-export-panel").setConfig(this);
      const goupByControl = this.querySelector("groupby-control");
      goupByControl.setConfig(this);
      goupByControl.addEventListener(
        "group-by-resource-changed",
        (e3) => {
          this.groupBySelection = e3.detail;
          this.planDefinitionHasBeenChanged();
        }
      );
      this.plan = generateStarterPlan();
      this.updateTaskPanels(this.selectedTask);
      this.planDefinitionHasBeenChanged();
      window.addEventListener("resize", () => this.paintChart());
      StartKeyboardHandling(this);
      console.log("Finished Init");
      document.dispatchEvent(new CustomEvent("finished-init"));
    }
    /** @prop  {string}  */
    get imageExportWidthPx() {
      const widthAsString = window.localStorage.getItem("imageExportWidthPx") || "";
      if (widthAsString === "") {
        return EXPORT_IMAGE_DEFAULT_PX;
      }
      return +widthAsString;
    }
    set imageExportWidthPx(val) {
      window.localStorage.setItem("imageExportWidthPx", val.toString());
    }
    get imageExportBackgroundTransparent() {
      const bAsString = window.localStorage.getItem("imageExportBackgroundTransparent") || "";
      return bAsString === "true";
    }
    set imageExportBackgroundTransparent(v2) {
      window.localStorage.setItem(
        "imageExportBackgroundTransparent",
        v2.toString()
      );
    }
    toggleTopTimeline() {
      this.topTimeline = !this.topTimeline;
      this.paintChart();
    }
    async prepareDownload() {
      const ret = await this.toPNG();
      if (!ret.ok) {
        reportIfError(ret);
        return;
      }
      const downloadBlob = ret.value;
      this.downloadLink.href = URL.createObjectURL(downloadBlob);
      this.downloadLink.download = "plan.png";
      this.downloadLink.click();
    }
    async prepareJSONDownload() {
      const downloadBlob = new Blob([JSON.stringify(this.plan, null, "  ")], {
        type: "application/json"
      });
      this.downloadLink.href = URL.createObjectURL(downloadBlob);
      this.downloadLink.download = "plan.json";
      this.downloadLink.click();
    }
    async undo() {
      const res = await executeByName("UndoAction", this);
      reportIfError(res);
    }
    async redo() {
      const res = await executeByName("RedoAction", this);
      reportIfError(res);
    }
    // Call this if explanMain is embedded in another context.
    embedded() {
      unmapUndoAndRedo();
      document.querySelector("#download-controls").classList.add("hidden");
      document.querySelector("#upload").classList.add("hidden");
      setErrorMessageReporting("DocumentEvent");
    }
    toJSON() {
      return JSON.stringify(this.plan, null, "  ");
    }
    fromJSON(json) {
      const ret = Plan.FromJSONText(json);
      if (!ret.ok) {
        return ret;
      }
      this.plan = ret.value;
      this.planDefinitionHasBeenChanged();
      return ok(null);
    }
    async fromUint8Array(bytes) {
      let json = "";
      if (PngMetadata.isPNG(bytes)) {
        const ret2 = await getExplanJSONChunkFromPNG(new Uint8Array(bytes));
        if (!ret2.ok) {
          return ret2;
        }
        json = ret2.value;
      } else {
        json = new TextDecoder("utf-8").decode(bytes);
      }
      const ret = this.fromJSON(json);
      if (!ret.ok) {
        return ret;
      }
      return ok(null);
    }
    async toUnit8Array(contentType) {
      if (contentType === "image/png") {
        const ret = await this.toPNG();
        if (!ret.ok) {
          return ret;
        }
        return ok(new Uint8Array(await ret.value.arrayBuffer()));
      }
      return ok(new TextEncoder().encode(this.toJSON()));
    }
    async toPNG() {
      const ret = await this.renderChartToPNG();
      if (!ret.ok) {
        return ret;
      }
      return ok(await addExplanJSONChunkToPNG(this.toJSON(), ret.value));
    }
    async renderChartToPNG() {
      const canvas = document.createElement("canvas");
      canvas.width = this.imageExportWidthPx;
      const theme2 = new Theme2();
      theme2.loadFromElement(document.body);
      if (this.imageExportBackgroundTransparent) {
        theme2.values.set("background", "rgba(0,0,0,0)");
      }
      const durationDisplay = (t4) => this.plan.durationUnits.displayTime(t4);
      const taskIsStarted = (taskIndex) => {
        const ret2 = this.plan.getTaskCompletion(taskIndex);
        if (!ret2.ok) {
          return false;
        }
        return ret2.value.stage !== "unstarted";
      };
      const opts = {
        fontSizePx: 16,
        hasText: true,
        displayRange: null,
        displayRangeUsage: "restrict",
        colors: theme2,
        hasTimeline: true,
        hasTasks: true,
        hasEdges: true,
        drawTimeMarkersOnTasks: true,
        taskLabel: this.getTaskLabeller(),
        taskDuration: this.getTaskDurationFunc(),
        taskEmphasize: this.criticalPath,
        filterFunc: null,
        groupByResource: "",
        highlightedTask: null,
        selectedTaskIndex: -1,
        durationDisplay,
        taskIsStarted,
        today: -1
      };
      const newHeight = suggestedCanvasHeight(
        canvas,
        this.spans,
        opts,
        this.plan.chart.Vertices.length + 2
        // TODO - Why do we need the +2 here!?
      );
      canvas.height = newHeight;
      const ctx = canvas.getContext("2d");
      const ret = renderTasksToCanvas(
        null,
        canvas,
        ctx,
        this.plan,
        this.spans,
        opts,
        null
      );
      if (!ret.ok) {
        return error(ret.error);
      }
      let resolveOutside;
      let rejectOutside;
      const p2 = new Promise((resolve, reject) => {
        resolveOutside = resolve;
        rejectOutside = reject;
      });
      canvas.toBlob((blob) => {
        if (blob === null) {
          rejectOutside();
        } else {
          resolveOutside(blob);
        }
      }, "image/png");
      return ok(await p2);
    }
    updateTaskPanels(taskIndex) {
      this.selectedTask = taskIndex;
      this.selectedTaskPanel.updateSelectedTaskPanel(this, this.selectedTask);
      this.taskCompletionPanel.update(
        this,
        this.selectedTask,
        this.spans[this.selectedTask]
      );
      const edges = edgesBySrcAndDstToMap(this.plan.chart.Edges);
      this.dependenciesPanel.setTasksAndIndices(
        this.plan.chart.Vertices,
        (edges.byDst.get(taskIndex) || []).map((e3) => e3.i),
        (edges.bySrc.get(taskIndex) || []).map((e3) => e3.j)
      );
      this.dependenciesPanel.classList.toggle(
        "hidden",
        this.selectedTask === -1
      );
    }
    setSelection(index, focus, scrollToSelected = false) {
      this.selectedTask = index;
      if (focus) {
        this.forceFocusOnTask();
      }
      if (this.selectedTask === -1) {
        this.focusOnTask = false;
      }
      this.paintChart(scrollToSelected);
      this.updateTaskPanels(this.selectedTask);
    }
    // TODO - Turn this on and off based on mouse entering the canvas area.
    onMouseMove() {
      const location = this.mouseMove.readLocation();
      if (location !== null && this.updateHighlightFromMousePos !== null) {
        this.updateHighlightFromMousePos(location, "mousemove");
      }
      window.requestAnimationFrame(this.onMouseMove.bind(this));
    }
    planDefinitionHasBeenChanged() {
      this.radarScale = null;
      this.displayRange = null;
      this.alternateTaskDurations = null;
      this.recalculateSpansAndCriticalPath();
      this.paintChart();
      document.dispatchEvent(new CustomEvent("plan-definition-changed"));
    }
    getTaskDurationFunc() {
      if (this.alternateTaskDurations !== null) {
        return (taskIndex) => this.alternateTaskDurations[taskIndex];
      } else {
        return (taskIndex) => this.plan.chart.Vertices[taskIndex].duration;
      }
    }
    recalculateSpansAndCriticalPath() {
      let slacks = [];
      const rounder = this.plan.getStaticMetricDefinition("Duration").precision.rounder();
      const earlyStartOverride = (taskIndex) => {
        const ret = this.plan.getTaskCompletion(taskIndex);
        if (!ret.ok) {
          return void 0;
        }
        const completion = ret.value;
        switch (completion.stage) {
          case "unstarted":
            return void 0;
            break;
          case "started":
            return completion.start;
            break;
          case "finished":
            return completion.span.start;
            break;
          default:
            completion;
            break;
        }
      };
      const earlyFinishOverride = (taskIndex) => {
        const ret = this.plan.getTaskCompletion(taskIndex);
        if (!ret.ok) {
          return void 0;
        }
        const completion = ret.value;
        switch (completion.stage) {
          case "unstarted":
            return void 0;
            break;
          case "started":
            return void 0;
            break;
          case "finished":
            return completion.span.finish;
            break;
          default:
            completion;
            break;
        }
      };
      const slackResult = ComputeSlack(
        this.plan.chart,
        this.getTaskDurationFunc(),
        rounder,
        earlyStartOverride,
        earlyFinishOverride
      );
      if (!slackResult.ok) {
        console.error(slackResult);
      } else {
        slacks = slackResult.value;
      }
      this.spans = slacks.map((value) => {
        return value.early;
      });
      this.criticalPath = CriticalPath(slacks, rounder);
      this.updateTaskPanels(this.selectedTask);
    }
    getTaskLabeller() {
      return (taskIndex) => `${this.plan.chart.Vertices[taskIndex].name}`;
    }
    dragRangeHandler(e3) {
      if (this.radarScale === null) {
        return;
      }
      const begin = this.radarScale.dayRowFromPoint(e3.detail.begin);
      const end = this.radarScale.dayRowFromPoint(e3.detail.end);
      this.displayRange = new DisplayRange(begin.day, end.day);
      this.paintChart();
    }
    toggleRadar() {
      this.querySelector("radar-parent").classList.toggle("hidden");
    }
    setRadar(on) {
      this.querySelector("radar-parent").classList.toggle("hidden", !on);
    }
    toggleCriticalPathsOnly() {
      this.criticalPathsOnly = !this.criticalPathsOnly;
    }
    forceFocusOnTask() {
      this.focusOnTask = true;
    }
    paintChart(scrollToSelected = false) {
      console.time("paintChart");
      const theme2 = new Theme2();
      theme2.loadFromElement(document.body);
      let filterFunc = null;
      const startAndFinish = [0, this.plan.chart.Vertices.length - 1];
      if (this.criticalPathsOnly) {
        const highlightSet = new Set(this.criticalPath);
        filterFunc = (task, taskIndex) => {
          if (startAndFinish.includes(taskIndex)) {
            return true;
          }
          return highlightSet.has(taskIndex);
        };
      } else if (this.focusOnTask && this.selectedTask != -1) {
        const neighborSet = /* @__PURE__ */ new Set();
        neighborSet.add(this.selectedTask);
        let earliestStart = this.spans[this.selectedTask].start;
        let latestFinish = this.spans[this.selectedTask].finish;
        this.plan.chart.Edges.forEach((edge) => {
          if (edge.i === this.selectedTask) {
            neighborSet.add(edge.j);
            if (latestFinish < this.spans[edge.j].finish) {
              latestFinish = this.spans[edge.j].finish;
            }
          }
          if (edge.j === this.selectedTask) {
            neighborSet.add(edge.i);
            if (earliestStart > this.spans[edge.i].start) {
              earliestStart = this.spans[edge.i].start;
            }
          }
        });
        this.displayRange = new DisplayRange(earliestStart - 1, latestFinish + 1);
        filterFunc = (_task, taskIndex) => {
          if (startAndFinish.includes(taskIndex)) {
            return true;
          }
          return neighborSet.has(taskIndex);
        };
      }
      const durationDisplay = (t4) => this.plan.durationUnits.displayTime(t4);
      const taskIsStarted = (taskIndex) => {
        const ret2 = this.plan.getTaskCompletion(taskIndex);
        if (!ret2.ok) {
          return false;
        }
        return ret2.value.stage !== "unstarted";
      };
      let today = -1;
      if (this.plan.status.stage === "started" && this.plan.durationUnits.kind() !== "Unitless") {
        const ret2 = this.plan.durationUnits.parse(
          (/* @__PURE__ */ new Date()).toISOString().slice(0, 10)
        );
        if (ret2.ok) {
          today = ret2.value;
        }
      }
      const radarOpts = {
        fontSizePx: 6,
        hasText: false,
        displayRange: this.displayRange,
        displayRangeUsage: "highlight",
        colors: theme2,
        hasTimeline: false,
        hasTasks: true,
        hasEdges: false,
        drawTimeMarkersOnTasks: false,
        taskLabel: this.getTaskLabeller(),
        taskDuration: this.getTaskDurationFunc(),
        taskEmphasize: this.criticalPath,
        filterFunc: null,
        groupByResource: this.groupBySelection,
        highlightedTask: null,
        selectedTaskIndex: this.selectedTask,
        durationDisplay,
        taskIsStarted,
        today
      };
      const zoomOpts = {
        fontSizePx: theme2.fontSize(),
        hasText: true,
        displayRange: this.displayRange,
        displayRangeUsage: "restrict",
        colors: theme2,
        hasTimeline: this.topTimeline,
        hasTasks: true,
        hasEdges: true,
        drawTimeMarkersOnTasks: true,
        taskLabel: this.getTaskLabeller(),
        taskDuration: this.getTaskDurationFunc(),
        taskEmphasize: this.criticalPath,
        filterFunc,
        groupByResource: this.groupBySelection,
        highlightedTask: 1,
        selectedTaskIndex: this.selectedTask,
        durationDisplay,
        taskIsStarted,
        today
      };
      const timelineOpts = {
        fontSizePx: theme2.fontSize(),
        hasText: true,
        displayRange: this.displayRange,
        displayRangeUsage: "restrict",
        colors: theme2,
        hasTimeline: true,
        hasTasks: false,
        hasEdges: true,
        drawTimeMarkersOnTasks: true,
        taskLabel: this.getTaskLabeller(),
        taskDuration: this.getTaskDurationFunc(),
        taskEmphasize: this.criticalPath,
        filterFunc,
        groupByResource: this.groupBySelection,
        highlightedTask: null,
        selectedTaskIndex: this.selectedTask,
        durationDisplay,
        taskIsStarted,
        today
      };
      const ret = this.paintOneChart("#radar", radarOpts);
      if (!ret.ok) {
        return;
      }
      this.radarScale = ret.value.scale;
      this.paintOneChart("#timeline", timelineOpts);
      const zoomRet = this.paintOneChart("#zoomed", zoomOpts, "#overlay");
      if (zoomRet.ok) {
        this.updateHighlightFromMousePos = zoomRet.value.updateHighlightFromMousePos;
        if (zoomRet.value.selectedTaskLocation !== null && scrollToSelected) {
          let top = 0;
          if (!this.focusOnTask) {
            top = zoomRet.value.selectedTaskLocation.y;
          }
          document.querySelector("chart-parent").scrollTo({
            top,
            left: 0,
            behavior: "smooth"
          });
        }
      }
      console.timeEnd("paintChart");
    }
    prepareCanvas(canvas, canvasWidth, canvasHeight, width, height) {
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      canvas.style.width = `${width}px`;
      canvas.style.height = `${height}px`;
      const ctx = canvas.getContext("2d");
      ctx.imageSmoothingEnabled = false;
      return ctx;
    }
    paintOneChart(canvasID, opts, overlayID = "") {
      const canvas = this.querySelector(canvasID);
      const parent = canvas.parentElement;
      const ratio = window.devicePixelRatio;
      const width = parent.clientWidth - FONT_SIZE_PX;
      let height = parent.clientHeight;
      const canvasWidth = Math.ceil(width * ratio);
      let canvasHeight = Math.ceil(height * ratio);
      const newHeight = suggestedCanvasHeight(
        canvas,
        this.spans,
        opts,
        this.plan.chart.Vertices.length + 2
        // TODO - Why do we need the +2 here!?
      );
      canvasHeight = newHeight;
      height = newHeight / window.devicePixelRatio;
      let overlay = null;
      if (overlayID) {
        overlay = document.querySelector(overlayID);
        this.prepareCanvas(overlay, canvasWidth, canvasHeight, width, height);
      }
      const ctx = this.prepareCanvas(
        canvas,
        canvasWidth,
        canvasHeight,
        width,
        height
      );
      return renderTasksToCanvas(
        parent,
        canvas,
        ctx,
        this.plan,
        this.spans,
        opts,
        overlay
      );
    }
  };
  customElements.define("explan-main", ExplanMain);

  // src/developer-panel/developer-panel.ts
  var DeveloperPanelDialog = class extends HTMLElement {
    explanMain = null;
    render() {
      B(this.template(), this);
    }
    template() {
      return x`
      <dialog>
        <button @click=${() => this.generateRandomPlan()}>Generate</button>
        <button @click=${() => this.explanMain.toggleTopTimeline()}>
          Toggle Top Timeline
        </button>
        <div class="dialog-footer">
          <button @click=${() => this.cancel()}>Close</button>
        </div>
      </dialog>
    `;
    }
    generateRandomPlan() {
      this.explanMain.plan = generateRandomPlan();
      this.explanMain.planDefinitionHasBeenChanged();
    }
    cancel() {
      this.querySelector("dialog").close();
    }
    showDialog(explanMain2) {
      this.explanMain = explanMain2;
      this.render();
      this.querySelector("dialog").showModal();
    }
  };
  customElements.define("developer-panel", DeveloperPanelDialog);
})();
/*! Bundled license information:

lit-html/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive-helpers.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/live.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL2Z1enp5c29ydC9mdXp6eXNvcnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL3NyYy9saXQtaHRtbC50cyIsICIuLi9zcmMvaWNvbnMvaWNvbnMudHMiLCAiLi4vc3JjL2Vycm9yLXBvcHVwL2Vycm9yLXBvcHVwLnRzIiwgIi4uL3NyYy9yZXBvcnQtZXJyb3IvcmVwb3J0LWVycm9yLnRzIiwgIi4uL3NyYy92c2NvZGUtYnJpZGdlL3ZzY29kZS1icmlkZ2UudHMiLCAiLi4vc3JjL3Jlc3VsdC50cyIsICIuLi9zcmMvYWN0aW9uL2FjdGlvbi50cyIsICIuLi9zcmMvZGFnL2RhZy50cyIsICIuLi9zcmMvb3BzL29wcy50cyIsICIuLi9zcmMvb3BzL21ldHJpY3MudHMiLCAiLi4vc3JjL29wcy9jaGFydC50cyIsICIuLi9zcmMvYWN0aW9uL2FjdGlvbnMvYWRkUHJlZGVjZXNzb3IudHMiLCAiLi4vc3JjL2FjdGlvbi9hY3Rpb25zL2FkZFN1Y2Nlc3Nvci50cyIsICIuLi9zcmMvYWN0aW9uL2FjdGlvbnMvZGV2ZWxvcGVyLnRzIiwgIi4uL3NyYy9hY3Rpb24vYWN0aW9ucy9nb3RvU2VhcmNoLnRzIiwgIi4uL3NyYy9hY3Rpb24vYWN0aW9ucy9oZWxwLnRzIiwgIi4uL3NyYy9hY3Rpb24vYWN0aW9ucy9yZXNldFpvb20udHMiLCAiLi4vc3JjL2FjdGlvbi9hY3Rpb25zL3Rhc2tzLnRzIiwgIi4uL3NyYy9zdHlsZS90b2dnbGVyL3RvZ2dsZXIudHMiLCAiLi4vc3JjL2FjdGlvbi9hY3Rpb25zL3RvZ2dsZURhcmtNb2RlLnRzIiwgIi4uL3NyYy9hY3Rpb24vYWN0aW9ucy90b2dnbGVSYWRhci50cyIsICIuLi9zcmMvYWN0aW9uL2FjdGlvbnMvdW5kby50cyIsICIuLi9zcmMvYWN0aW9uL3JlZ2lzdHJ5LnRzIiwgIi4uL3NyYy9hY3Rpb24vZXhlY3V0ZS50cyIsICIuLi9zcmMva2V5bWFwL2tleW1hcC50cyIsICIuLi9zcmMvaGVscC9oZWxwLnRzIiwgIi4uL3NyYy9pbWFnZS1leHBvcnQtcGFuZWwvaW1hZ2UtZXhwb3J0LXBhbmVsLnRzIiwgIi4uL3NyYy9wcm9tcHQtZGlhbG9nL3Byb21wdC1kaWFsb2cudHMiLCAiLi4vc3JjL2dyb3VwYnktY29udHJvbC9ncm91cGJ5LWNvbnRyb2wudHMiLCAiLi4vc3JjL3RhYi1idXR0b25zL3RhYi1idXR0b25zLnRzIiwgIi4uL3NyYy9kYXRlLWNvbnRyb2wtdXRpbHMvZGF0ZS1jb250cm9sLXV0aWxzLnRzIiwgIi4uL3NyYy9wbGFuX3N0YXR1cy9wbGFuX3N0YXR1cy50cyIsICIuLi9zcmMvZGFnL2FsZ29yaXRobXMvdG9wb3NvcnQudHMiLCAiLi4vc3JjL2NoYXJ0L2NoYXJ0LnRzIiwgIi4uL3NyYy9zbGFjay9zbGFjay50cyIsICIuLi9zcmMvdGFza19jb21wbGV0aW9uL3Rhc2tfY29tcGxldGlvbi50cyIsICIuLi9zcmMvb3BzL3BsYW4udHMiLCAiLi4vc3JjL3VuaXRzL3dlZWtkYXlzLnRzIiwgIi4uL3NyYy91bml0cy91bml0LnRzIiwgIi4uL3NyYy9wbGFuLWNvbmZpZy1wYW5lbC9wbGFuLWNvbmZpZy1wYW5lbC50cyIsICIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvc3JjL2RpcmVjdGl2ZS50cyIsICIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvc3JjL2RpcmVjdGl2ZS1oZWxwZXJzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9zcmMvZGlyZWN0aXZlcy9saXZlLnRzIiwgIi4uL3NyYy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci50cyIsICIuLi9zcmMvdGFzay1jb21wbGV0aW9uLXBhbmVsL3Rhc2stY29tcGxldGlvbi1wYW5lbC50cyIsICIuLi9zcmMvcmVzb3VyY2VzL3Jlc291cmNlcy50cyIsICIuLi9zcmMvb3BzL3Jlc291cmNlcy50cyIsICIuLi9zcmMvZWRpdC1yZXNvdXJjZS1kZWZpbml0aW9uL2VkaXQtcmVzb3VyY2UtZGVmaW5pdGlvbi50cyIsICIuLi9zcmMvbWV0cmljcy9yYW5nZS50cyIsICIuLi9zcmMvcHJlY2lzaW9uL3ByZWNpc2lvbi50cyIsICIuLi9zcmMvbWV0cmljcy9tZXRyaWNzLnRzIiwgIi4uL3NyYy9lZGl0LW1ldHJpY3MtcGFuZWwvZWRpdC1tZXRyaWNzLXBhbmVsLnRzIiwgIi4uL3NyYy9lZGl0LW1ldHJpYy1kZWZpbml0aW9uL2VkaXQtbWV0cmljLWRlZmluaXRpb24udHMiLCAiLi4vc3JjL2RlcGVuZGVuY2llcy9kZXBlbmRlbmNpZXMtcGFuZWwudHMiLCAiLi4vc3JjL2RhZy9hbGdvcml0aG1zL2Rmcy50cyIsICIuLi9zcmMvZGFnL2FsZ29yaXRobXMvY2lyY3VsYXIudHMiLCAiLi4vc3JjL2FkZC1kZXBlbmRlbmN5LWRpYWxvZy9hZGQtZGVwZW5kZW5jeS1kaWFsb2cudHMiLCAiLi4vc3JjL2VkaXQtcmVzb3VyY2VzLXBhbmVsL2VkaXQtcmVzb3VyY2VzLXBhbmVsLnRzIiwgIi4uL3NyYy9zdGF0cy9jZGYvdHJpYW5ndWxhci90cmlhbmd1bGFyLnRzIiwgIi4uL3NyYy9zdGF0cy9jZGYvdHJpYW5ndWxhci9qYWNvYmlhbi50cyIsICIuLi9zcmMvcGxhbi9wbGFuLnRzIiwgIi4uL3NyYy9zZWxlY3RlZC10YXNrLXBhbmVsL3NlbGVjdGVkLXRhc2stcGFuZWwudHMiLCAiLi4vc3JjL3NpbXVsYXRpb24vc2ltdWxhdGlvbi50cyIsICIuLi9zcmMvc2ltdWxhdGlvbi1wYW5lbC9zaW11bGF0aW9uLXBhbmVsLnRzIiwgIi4uL3NyYy9zZWFyY2gvc2VhcmNoLXRhc2stcGFuZWwudHMiLCAiLi4vc3JjL3NlYXJjaC90YXNrLXNlYXJjaC1jb250cm9scy50cyIsICIuLi9zcmMvcG9pbnQvcG9pbnQudHMiLCAiLi4vc3JjL3JlbmRlcmVyL2RpdmlkZXJtb3ZlL2RpdmlkZXJtb3ZlLnRzIiwgIi4uL3NyYy9yZW5kZXJlci9tb3VzZWRyYWcvbW91c2VkcmFnLnRzIiwgIi4uL3NyYy9yZW5kZXJlci9tb3VzZW1vdmUvbW91c2Vtb3ZlLnRzIiwgIi4uL3NyYy9yZW5kZXJlci9yYW5nZS9yYW5nZS50cyIsICIuLi9zcmMvY2hhcnQvZmlsdGVyL2ZpbHRlci50cyIsICIuLi9zcmMvcmVuZGVyZXIvc2NhbGUvc2NhbGUudHMiLCAiLi4vc3JjL2hpdHJlY3QvaGl0cmVjdC50cyIsICIuLi9zcmMvcmVuZGVyZXIvcmVuZGVyZXIudHMiLCAiLi4vc3JjL3N0eWxlL3RoZW1lL3RoZW1lLnRzIiwgIi4uL3NyYy9nZW5lcmF0ZS9nZW5lcmF0ZS50cyIsICIuLi9zcmMvdmVuZG9yL3BuZy1tZXRhZGF0YS9zcmMvcG5nLW1ldGFkYXRhLnRzIiwgIi4uL3NyYy9pbWFnZS9pbWFnZS50cyIsICIuLi9zcmMvZXhwbGFuTWFpbi9leHBsYW5NYWluLnRzIiwgIi4uL3NyYy9kZXZlbG9wZXItcGFuZWwvZGV2ZWxvcGVyLXBhbmVsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBodHRwczovL2dpdGh1Yi5jb20vZmFyemhlci9mdXp6eXNvcnQgdjMuMC4yXHJcblxyXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbikgZm9yIGZ1enp5c29ydFxyXG47KChyb290LCBVTUQpID0+IHtcclxuICBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShbXSwgVU1EKVxyXG4gIGVsc2UgaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gVU1EKClcclxuICBlbHNlIHJvb3RbJ2Z1enp5c29ydCddID0gVU1EKClcclxufSkodGhpcywgXyA9PiB7XHJcbiAgJ3VzZSBzdHJpY3QnXHJcblxyXG4gIHZhciBzaW5nbGUgPSAoc2VhcmNoLCB0YXJnZXQpID0+IHtcclxuICAgIGlmKCFzZWFyY2ggfHwgIXRhcmdldCkgcmV0dXJuIE5VTExcclxuXHJcbiAgICB2YXIgcHJlcGFyZWRTZWFyY2ggPSBnZXRQcmVwYXJlZFNlYXJjaChzZWFyY2gpXHJcbiAgICBpZighaXNQcmVwYXJlZCh0YXJnZXQpKSB0YXJnZXQgPSBnZXRQcmVwYXJlZCh0YXJnZXQpXHJcblxyXG4gICAgdmFyIHNlYXJjaEJpdGZsYWdzID0gcHJlcGFyZWRTZWFyY2guYml0ZmxhZ3NcclxuICAgIGlmKChzZWFyY2hCaXRmbGFncyAmIHRhcmdldC5fYml0ZmxhZ3MpICE9PSBzZWFyY2hCaXRmbGFncykgcmV0dXJuIE5VTExcclxuXHJcbiAgICByZXR1cm4gYWxnb3JpdGhtKHByZXBhcmVkU2VhcmNoLCB0YXJnZXQpXHJcbiAgfVxyXG5cclxuICB2YXIgZ28gPSAoc2VhcmNoLCB0YXJnZXRzLCBvcHRpb25zKSA9PiB7XHJcbiAgICBpZighc2VhcmNoKSByZXR1cm4gb3B0aW9ucz8uYWxsID8gYWxsKHRhcmdldHMsIG9wdGlvbnMpIDogbm9SZXN1bHRzXHJcblxyXG4gICAgdmFyIHByZXBhcmVkU2VhcmNoID0gZ2V0UHJlcGFyZWRTZWFyY2goc2VhcmNoKVxyXG4gICAgdmFyIHNlYXJjaEJpdGZsYWdzID0gcHJlcGFyZWRTZWFyY2guYml0ZmxhZ3NcclxuICAgIHZhciBjb250YWluc1NwYWNlICA9IHByZXBhcmVkU2VhcmNoLmNvbnRhaW5zU3BhY2VcclxuXHJcbiAgICB2YXIgdGhyZXNob2xkID0gZGVub3JtYWxpemVTY29yZSggb3B0aW9ucz8udGhyZXNob2xkIHx8IDAgKVxyXG4gICAgdmFyIGxpbWl0ICAgICA9IG9wdGlvbnM/LmxpbWl0IHx8IElORklOSVRZXHJcblxyXG4gICAgdmFyIHJlc3VsdHNMZW4gPSAwOyB2YXIgbGltaXRlZENvdW50ID0gMFxyXG4gICAgdmFyIHRhcmdldHNMZW4gPSB0YXJnZXRzLmxlbmd0aFxyXG5cclxuICAgIGZ1bmN0aW9uIHB1c2hfcmVzdWx0KHJlc3VsdCkge1xyXG4gICAgICBpZihyZXN1bHRzTGVuIDwgbGltaXQpIHsgcS5hZGQocmVzdWx0KTsgKytyZXN1bHRzTGVuIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgKytsaW1pdGVkQ291bnRcclxuICAgICAgICBpZihyZXN1bHQuX3Njb3JlID4gcS5wZWVrKCkuX3Njb3JlKSBxLnJlcGxhY2VUb3AocmVzdWx0KVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyBjb2RlIGlzIGNvcHkvcGFzdGVkIDMgdGltZXMgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgW29wdGlvbnMua2V5LCBvcHRpb25zLmtleXMsIG5vIGtleXNdXHJcblxyXG4gICAgLy8gb3B0aW9ucy5rZXlcclxuICAgIGlmKG9wdGlvbnM/LmtleSkge1xyXG4gICAgICB2YXIga2V5ID0gb3B0aW9ucy5rZXlcclxuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRhcmdldHNMZW47ICsraSkgeyB2YXIgb2JqID0gdGFyZ2V0c1tpXVxyXG4gICAgICAgIHZhciB0YXJnZXQgPSBnZXRWYWx1ZShvYmosIGtleSlcclxuICAgICAgICBpZighdGFyZ2V0KSBjb250aW51ZVxyXG4gICAgICAgIGlmKCFpc1ByZXBhcmVkKHRhcmdldCkpIHRhcmdldCA9IGdldFByZXBhcmVkKHRhcmdldClcclxuXHJcbiAgICAgICAgaWYoKHNlYXJjaEJpdGZsYWdzICYgdGFyZ2V0Ll9iaXRmbGFncykgIT09IHNlYXJjaEJpdGZsYWdzKSBjb250aW51ZVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBhbGdvcml0aG0ocHJlcGFyZWRTZWFyY2gsIHRhcmdldClcclxuICAgICAgICBpZihyZXN1bHQgPT09IE5VTEwpIGNvbnRpbnVlXHJcbiAgICAgICAgaWYocmVzdWx0Ll9zY29yZSA8IHRocmVzaG9sZCkgY29udGludWVcclxuXHJcbiAgICAgICAgcmVzdWx0Lm9iaiA9IG9ialxyXG4gICAgICAgIHB1c2hfcmVzdWx0KHJlc3VsdClcclxuICAgICAgfVxyXG5cclxuICAgIC8vIG9wdGlvbnMua2V5c1xyXG4gICAgfSBlbHNlIGlmKG9wdGlvbnM/LmtleXMpIHtcclxuICAgICAgdmFyIGtleXMgPSBvcHRpb25zLmtleXNcclxuICAgICAgdmFyIGtleXNMZW4gPSBrZXlzLmxlbmd0aFxyXG5cclxuICAgICAgb3V0ZXI6IGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXRzTGVuOyArK2kpIHsgdmFyIG9iaiA9IHRhcmdldHNbaV1cclxuXHJcbiAgICAgICAgeyAvLyBlYXJseSBvdXQgYmFzZWQgb24gYml0ZmxhZ3NcclxuICAgICAgICAgIHZhciBrZXlzQml0ZmxhZ3MgPSAwXHJcbiAgICAgICAgICBmb3IgKHZhciBrZXlJID0gMDsga2V5SSA8IGtleXNMZW47ICsra2V5SSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1trZXlJXVxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0VmFsdWUob2JqLCBrZXkpXHJcbiAgICAgICAgICAgIGlmKCF0YXJnZXQpIHsgdG1wVGFyZ2V0c1trZXlJXSA9IG5vVGFyZ2V0OyBjb250aW51ZSB9XHJcbiAgICAgICAgICAgIGlmKCFpc1ByZXBhcmVkKHRhcmdldCkpIHRhcmdldCA9IGdldFByZXBhcmVkKHRhcmdldClcclxuICAgICAgICAgICAgdG1wVGFyZ2V0c1trZXlJXSA9IHRhcmdldFxyXG5cclxuICAgICAgICAgICAga2V5c0JpdGZsYWdzIHw9IHRhcmdldC5fYml0ZmxhZ3NcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZigoc2VhcmNoQml0ZmxhZ3MgJiBrZXlzQml0ZmxhZ3MpICE9PSBzZWFyY2hCaXRmbGFncykgY29udGludWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGNvbnRhaW5zU3BhY2UpIGZvcihsZXQgaT0wOyBpPHByZXBhcmVkU2VhcmNoLnNwYWNlU2VhcmNoZXMubGVuZ3RoOyBpKyspIGtleXNTcGFjZXNCZXN0U2NvcmVzW2ldID0gTkVHQVRJVkVfSU5GSU5JVFlcclxuXHJcbiAgICAgICAgZm9yICh2YXIga2V5SSA9IDA7IGtleUkgPCBrZXlzTGVuOyArK2tleUkpIHtcclxuICAgICAgICAgIHRhcmdldCA9IHRtcFRhcmdldHNba2V5SV1cclxuICAgICAgICAgIGlmKHRhcmdldCA9PT0gbm9UYXJnZXQpIHsgdG1wUmVzdWx0c1trZXlJXSA9IG5vVGFyZ2V0OyBjb250aW51ZSB9XHJcblxyXG4gICAgICAgICAgdG1wUmVzdWx0c1trZXlJXSA9IGFsZ29yaXRobShwcmVwYXJlZFNlYXJjaCwgdGFyZ2V0LCAvKmFsbG93U3BhY2VzPSovZmFsc2UsIC8qYWxsb3dQYXJ0aWFsTWF0Y2g9Ki9jb250YWluc1NwYWNlKVxyXG4gICAgICAgICAgaWYodG1wUmVzdWx0c1trZXlJXSA9PT0gTlVMTCkgeyB0bXBSZXN1bHRzW2tleUldID0gbm9UYXJnZXQ7IGNvbnRpbnVlIH1cclxuXHJcbiAgICAgICAgICAvLyB0b2RvOiB0aGlzIHNlZW1zIHdlaXJkIGFuZCB3cm9uZy4gbGlrZSB3aGF0IGlmIG91ciBmaXJzdCBtYXRjaCB3YXNuJ3QgZ29vZC4gdGhpcyBzaG91bGQganVzdCByZXBsYWNlIGl0IGluc3RlYWQgb2YgYXZlcmFnaW5nIHdpdGggaXRcclxuICAgICAgICAgIC8vIGlmIG91ciBzZWNvbmQgbWF0Y2ggaXNuJ3QgZ29vZCB3ZSBpZ25vcmUgaXQgaW5zdGVhZCBvZiBhdmVyYWdpbmcgd2l0aCBpdFxyXG4gICAgICAgICAgaWYoY29udGFpbnNTcGFjZSkgZm9yKGxldCBpPTA7IGk8cHJlcGFyZWRTZWFyY2guc3BhY2VTZWFyY2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZihhbGxvd1BhcnRpYWxNYXRjaFNjb3Jlc1tpXSA+IC0xMDAwKSB7XHJcbiAgICAgICAgICAgICAgaWYoa2V5c1NwYWNlc0Jlc3RTY29yZXNbaV0gPiBORUdBVElWRV9JTkZJTklUWSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRtcCA9IChrZXlzU3BhY2VzQmVzdFNjb3Jlc1tpXSArIGFsbG93UGFydGlhbE1hdGNoU2NvcmVzW2ldKSAvIDQvKmJvbnVzIHNjb3JlIGZvciBoYXZpbmcgbXVsdGlwbGUgbWF0Y2hlcyovXHJcbiAgICAgICAgICAgICAgICBpZih0bXAgPiBrZXlzU3BhY2VzQmVzdFNjb3Jlc1tpXSkga2V5c1NwYWNlc0Jlc3RTY29yZXNbaV0gPSB0bXBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoYWxsb3dQYXJ0aWFsTWF0Y2hTY29yZXNbaV0gPiBrZXlzU3BhY2VzQmVzdFNjb3Jlc1tpXSkga2V5c1NwYWNlc0Jlc3RTY29yZXNbaV0gPSBhbGxvd1BhcnRpYWxNYXRjaFNjb3Jlc1tpXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoY29udGFpbnNTcGFjZSkge1xyXG4gICAgICAgICAgZm9yKGxldCBpPTA7IGk8cHJlcGFyZWRTZWFyY2guc3BhY2VTZWFyY2hlcy5sZW5ndGg7IGkrKykgeyBpZihrZXlzU3BhY2VzQmVzdFNjb3Jlc1tpXSA9PT0gTkVHQVRJVkVfSU5GSU5JVFkpIGNvbnRpbnVlIG91dGVyIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFyIGhhc0F0TGVhc3QxTWF0Y2ggPSBmYWxzZVxyXG4gICAgICAgICAgZm9yKGxldCBpPTA7IGkgPCBrZXlzTGVuOyBpKyspIHsgaWYodG1wUmVzdWx0c1tpXS5fc2NvcmUgIT09IE5FR0FUSVZFX0lORklOSVRZKSB7IGhhc0F0TGVhc3QxTWF0Y2ggPSB0cnVlOyBicmVhayB9IH1cclxuICAgICAgICAgIGlmKCFoYXNBdExlYXN0MU1hdGNoKSBjb250aW51ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9ialJlc3VsdHMgPSBuZXcgS2V5c1Jlc3VsdChrZXlzTGVuKVxyXG4gICAgICAgIGZvcihsZXQgaT0wOyBpIDwga2V5c0xlbjsgaSsrKSB7IG9ialJlc3VsdHNbaV0gPSB0bXBSZXN1bHRzW2ldIH1cclxuXHJcbiAgICAgICAgaWYoY29udGFpbnNTcGFjZSkge1xyXG4gICAgICAgICAgdmFyIHNjb3JlID0gMFxyXG4gICAgICAgICAgZm9yKGxldCBpPTA7IGk8cHJlcGFyZWRTZWFyY2guc3BhY2VTZWFyY2hlcy5sZW5ndGg7IGkrKykgc2NvcmUgKz0ga2V5c1NwYWNlc0Jlc3RTY29yZXNbaV1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gdG9kbyBjb3VsZCByZXdyaXRlIHRoaXMgc2NvcmluZyB0byBiZSBtb3JlIHNpbWlsYXIgdG8gd2hlbiB0aGVyZSdzIHNwYWNlc1xyXG4gICAgICAgICAgLy8gaWYgd2UgbWF0Y2ggbXVsdGlwbGUga2V5cyBnaXZlIHVzIGJvbnVzIHBvaW50c1xyXG4gICAgICAgICAgdmFyIHNjb3JlID0gTkVHQVRJVkVfSU5GSU5JVFlcclxuICAgICAgICAgIGZvcihsZXQgaT0wOyBpPGtleXNMZW47IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqUmVzdWx0c1tpXVxyXG4gICAgICAgICAgICBpZihyZXN1bHQuX3Njb3JlID4gLTEwMDApIHtcclxuICAgICAgICAgICAgICBpZihzY29yZSA+IE5FR0FUSVZFX0lORklOSVRZKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG1wID0gKHNjb3JlICsgcmVzdWx0Ll9zY29yZSkgLyA0Lypib251cyBzY29yZSBmb3IgaGF2aW5nIG11bHRpcGxlIG1hdGNoZXMqL1xyXG4gICAgICAgICAgICAgICAgaWYodG1wID4gc2NvcmUpIHNjb3JlID0gdG1wXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHJlc3VsdC5fc2NvcmUgPiBzY29yZSkgc2NvcmUgPSByZXN1bHQuX3Njb3JlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvYmpSZXN1bHRzLm9iaiA9IG9ialxyXG4gICAgICAgIG9ialJlc3VsdHMuX3Njb3JlID0gc2NvcmVcclxuICAgICAgICBpZihvcHRpb25zPy5zY29yZUZuKSB7XHJcbiAgICAgICAgICBzY29yZSA9IG9wdGlvbnMuc2NvcmVGbihvYmpSZXN1bHRzKVxyXG4gICAgICAgICAgaWYoIXNjb3JlKSBjb250aW51ZVxyXG4gICAgICAgICAgc2NvcmUgPSBkZW5vcm1hbGl6ZVNjb3JlKHNjb3JlKVxyXG4gICAgICAgICAgb2JqUmVzdWx0cy5fc2NvcmUgPSBzY29yZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc2NvcmUgPCB0aHJlc2hvbGQpIGNvbnRpbnVlXHJcbiAgICAgICAgcHVzaF9yZXN1bHQob2JqUmVzdWx0cylcclxuICAgICAgfVxyXG5cclxuICAgIC8vIG5vIGtleXNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXRzTGVuOyArK2kpIHsgdmFyIHRhcmdldCA9IHRhcmdldHNbaV1cclxuICAgICAgICBpZighdGFyZ2V0KSBjb250aW51ZVxyXG4gICAgICAgIGlmKCFpc1ByZXBhcmVkKHRhcmdldCkpIHRhcmdldCA9IGdldFByZXBhcmVkKHRhcmdldClcclxuXHJcbiAgICAgICAgaWYoKHNlYXJjaEJpdGZsYWdzICYgdGFyZ2V0Ll9iaXRmbGFncykgIT09IHNlYXJjaEJpdGZsYWdzKSBjb250aW51ZVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBhbGdvcml0aG0ocHJlcGFyZWRTZWFyY2gsIHRhcmdldClcclxuICAgICAgICBpZihyZXN1bHQgPT09IE5VTEwpIGNvbnRpbnVlXHJcbiAgICAgICAgaWYocmVzdWx0Ll9zY29yZSA8IHRocmVzaG9sZCkgY29udGludWVcclxuXHJcbiAgICAgICAgcHVzaF9yZXN1bHQocmVzdWx0KVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYocmVzdWx0c0xlbiA9PT0gMCkgcmV0dXJuIG5vUmVzdWx0c1xyXG4gICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkocmVzdWx0c0xlbilcclxuICAgIGZvcih2YXIgaSA9IHJlc3VsdHNMZW4gLSAxOyBpID49IDA7IC0taSkgcmVzdWx0c1tpXSA9IHEucG9sbCgpXHJcbiAgICByZXN1bHRzLnRvdGFsID0gcmVzdWx0c0xlbiArIGxpbWl0ZWRDb3VudFxyXG4gICAgcmV0dXJuIHJlc3VsdHNcclxuICB9XHJcblxyXG5cclxuICAvLyB0aGlzIGlzIHdyaXR0ZW4gYXMgMSBmdW5jdGlvbiBpbnN0ZWFkIG9mIDIgZm9yIG1pbmlmaWNhdGlvbi4gcGVyZiBzZWVtcyBmaW5lIC4uLlxyXG4gIC8vIGV4Y2VwdCB3aGVuIG1pbmlmaWVkLiB0aGUgcGVyZiBpcyB2ZXJ5IHNsb3dcclxuICB2YXIgaGlnaGxpZ2h0ID0gKHJlc3VsdCwgb3Blbj0nPGI+JywgY2xvc2U9JzwvYj4nKSA9PiB7XHJcbiAgICB2YXIgY2FsbGJhY2sgPSB0eXBlb2Ygb3BlbiA9PT0gJ2Z1bmN0aW9uJyA/IG9wZW4gOiB1bmRlZmluZWRcclxuXHJcbiAgICB2YXIgdGFyZ2V0ICAgICAgPSByZXN1bHQudGFyZ2V0XHJcbiAgICB2YXIgdGFyZ2V0TGVuICAgPSB0YXJnZXQubGVuZ3RoXHJcbiAgICB2YXIgaW5kZXhlcyAgICAgPSByZXN1bHQuaW5kZXhlc1xyXG4gICAgdmFyIGhpZ2hsaWdodGVkID0gJydcclxuICAgIHZhciBtYXRjaEkgICAgICA9IDBcclxuICAgIHZhciBpbmRleGVzSSAgICA9IDBcclxuICAgIHZhciBvcGVuZWQgICAgICA9IGZhbHNlXHJcbiAgICB2YXIgcGFydHMgICAgICAgPSBbXVxyXG5cclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXRMZW47ICsraSkgeyB2YXIgY2hhciA9IHRhcmdldFtpXVxyXG4gICAgICBpZihpbmRleGVzW2luZGV4ZXNJXSA9PT0gaSkge1xyXG4gICAgICAgICsraW5kZXhlc0lcclxuICAgICAgICBpZighb3BlbmVkKSB7IG9wZW5lZCA9IHRydWVcclxuICAgICAgICAgIGlmKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goaGlnaGxpZ2h0ZWQpOyBoaWdobGlnaHRlZCA9ICcnXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBoaWdobGlnaHRlZCArPSBvcGVuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihpbmRleGVzSSA9PT0gaW5kZXhlcy5sZW5ndGgpIHtcclxuICAgICAgICAgIGlmKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkICs9IGNoYXJcclxuICAgICAgICAgICAgcGFydHMucHVzaChjYWxsYmFjayhoaWdobGlnaHRlZCwgbWF0Y2hJKyspKTsgaGlnaGxpZ2h0ZWQgPSAnJ1xyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHRhcmdldC5zdWJzdHIoaSsxKSlcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkICs9IGNoYXIgKyBjbG9zZSArIHRhcmdldC5zdWJzdHIoaSsxKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYob3BlbmVkKSB7IG9wZW5lZCA9IGZhbHNlXHJcbiAgICAgICAgICBpZihjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGNhbGxiYWNrKGhpZ2hsaWdodGVkLCBtYXRjaEkrKykpOyBoaWdobGlnaHRlZCA9ICcnXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBoaWdobGlnaHRlZCArPSBjbG9zZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBoaWdobGlnaHRlZCArPSBjaGFyXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gcGFydHMgOiBoaWdobGlnaHRlZFxyXG4gIH1cclxuXHJcblxyXG4gIHZhciBwcmVwYXJlID0gKHRhcmdldCkgPT4ge1xyXG4gICAgaWYodHlwZW9mIHRhcmdldCA9PT0gJ251bWJlcicpIHRhcmdldCA9ICcnK3RhcmdldFxyXG4gICAgZWxzZSBpZih0eXBlb2YgdGFyZ2V0ICE9PSAnc3RyaW5nJykgdGFyZ2V0ID0gJydcclxuICAgIHZhciBpbmZvID0gcHJlcGFyZUxvd2VySW5mbyh0YXJnZXQpXHJcbiAgICByZXR1cm4gbmV3X3Jlc3VsdCh0YXJnZXQsIHtfdGFyZ2V0TG93ZXI6aW5mby5fbG93ZXIsIF90YXJnZXRMb3dlckNvZGVzOmluZm8ubG93ZXJDb2RlcywgX2JpdGZsYWdzOmluZm8uYml0ZmxhZ3N9KVxyXG4gIH1cclxuXHJcbiAgdmFyIGNsZWFudXAgPSAoKSA9PiB7IHByZXBhcmVkQ2FjaGUuY2xlYXIoKTsgcHJlcGFyZWRTZWFyY2hDYWNoZS5jbGVhcigpIH1cclxuXHJcblxyXG4gIC8vIEJlbG93IHRoaXMgcG9pbnQgaXMgb25seSBpbnRlcm5hbCBjb2RlXHJcbiAgLy8gQmVsb3cgdGhpcyBwb2ludCBpcyBvbmx5IGludGVybmFsIGNvZGVcclxuICAvLyBCZWxvdyB0aGlzIHBvaW50IGlzIG9ubHkgaW50ZXJuYWwgY29kZVxyXG4gIC8vIEJlbG93IHRoaXMgcG9pbnQgaXMgb25seSBpbnRlcm5hbCBjb2RlXHJcblxyXG5cclxuICBjbGFzcyBSZXN1bHQge1xyXG4gICAgZ2V0IFsnaW5kZXhlcyddKCkgeyByZXR1cm4gdGhpcy5faW5kZXhlcy5zbGljZSgwLCB0aGlzLl9pbmRleGVzLmxlbikuc29ydCgoYSxiKT0+YS1iKSB9XHJcbiAgICBzZXQgWydpbmRleGVzJ10oaW5kZXhlcykgeyByZXR1cm4gdGhpcy5faW5kZXhlcyA9IGluZGV4ZXMgfVxyXG4gICAgWydoaWdobGlnaHQnXShvcGVuLCBjbG9zZSkgeyByZXR1cm4gaGlnaGxpZ2h0KHRoaXMsIG9wZW4sIGNsb3NlKSB9XHJcbiAgICBnZXQgWydzY29yZSddKCkgeyByZXR1cm4gbm9ybWFsaXplU2NvcmUodGhpcy5fc2NvcmUpIH1cclxuICAgIHNldCBbJ3Njb3JlJ10oc2NvcmUpIHsgdGhpcy5fc2NvcmUgPSBkZW5vcm1hbGl6ZVNjb3JlKHNjb3JlKSB9XHJcbiAgfVxyXG5cclxuICBjbGFzcyBLZXlzUmVzdWx0IGV4dGVuZHMgQXJyYXkge1xyXG4gICAgZ2V0IFsnc2NvcmUnXSgpIHsgcmV0dXJuIG5vcm1hbGl6ZVNjb3JlKHRoaXMuX3Njb3JlKSB9XHJcbiAgICBzZXQgWydzY29yZSddKHNjb3JlKSB7IHRoaXMuX3Njb3JlID0gZGVub3JtYWxpemVTY29yZShzY29yZSkgfVxyXG4gIH1cclxuXHJcbiAgdmFyIG5ld19yZXN1bHQgPSAodGFyZ2V0LCBvcHRpb25zKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0KClcclxuICAgIHJlc3VsdFsndGFyZ2V0J10gICAgICAgICAgICAgPSB0YXJnZXRcclxuICAgIHJlc3VsdFsnb2JqJ10gICAgICAgICAgICAgICAgPSBvcHRpb25zLm9iaiAgICAgICAgICAgICAgICAgICA/PyBOVUxMXHJcbiAgICByZXN1bHQuX3Njb3JlICAgICAgICAgICAgICAgID0gb3B0aW9ucy5fc2NvcmUgICAgICAgICAgICAgICAgPz8gTkVHQVRJVkVfSU5GSU5JVFlcclxuICAgIHJlc3VsdC5faW5kZXhlcyAgICAgICAgICAgICAgPSBvcHRpb25zLl9pbmRleGVzICAgICAgICAgICAgICA/PyBbXVxyXG4gICAgcmVzdWx0Ll90YXJnZXRMb3dlciAgICAgICAgICA9IG9wdGlvbnMuX3RhcmdldExvd2VyICAgICAgICAgID8/ICcnXHJcbiAgICByZXN1bHQuX3RhcmdldExvd2VyQ29kZXMgICAgID0gb3B0aW9ucy5fdGFyZ2V0TG93ZXJDb2RlcyAgICAgPz8gTlVMTFxyXG4gICAgcmVzdWx0Ll9uZXh0QmVnaW5uaW5nSW5kZXhlcyA9IG9wdGlvbnMuX25leHRCZWdpbm5pbmdJbmRleGVzID8/IE5VTExcclxuICAgIHJlc3VsdC5fYml0ZmxhZ3MgICAgICAgICAgICAgPSBvcHRpb25zLl9iaXRmbGFncyAgICAgICAgICAgICA/PyAwXHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG5cclxuXHJcbiAgdmFyIG5vcm1hbGl6ZVNjb3JlID0gc2NvcmUgPT4ge1xyXG4gICAgaWYoc2NvcmUgPT09IE5FR0FUSVZFX0lORklOSVRZKSByZXR1cm4gMFxyXG4gICAgaWYoc2NvcmUgPiAxKSByZXR1cm4gc2NvcmVcclxuICAgIHJldHVybiBNYXRoLkUgKiogKCAoKC1zY29yZSArIDEpKiouMDQzMDcgLSAxKSAqIC0yKVxyXG4gIH1cclxuICB2YXIgZGVub3JtYWxpemVTY29yZSA9IG5vcm1hbGl6ZWRTY29yZSA9PiB7XHJcbiAgICBpZihub3JtYWxpemVkU2NvcmUgPT09IDApIHJldHVybiBORUdBVElWRV9JTkZJTklUWVxyXG4gICAgaWYobm9ybWFsaXplZFNjb3JlID4gMSkgcmV0dXJuIG5vcm1hbGl6ZWRTY29yZVxyXG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygoTWF0aC5sb2cobm9ybWFsaXplZFNjb3JlKSAvIC0yICsgMSksIDEgLyAwLjA0MzA3KVxyXG4gIH1cclxuXHJcblxyXG4gIHZhciBwcmVwYXJlU2VhcmNoID0gKHNlYXJjaCkgPT4ge1xyXG4gICAgaWYodHlwZW9mIHNlYXJjaCA9PT0gJ251bWJlcicpIHNlYXJjaCA9ICcnK3NlYXJjaFxyXG4gICAgZWxzZSBpZih0eXBlb2Ygc2VhcmNoICE9PSAnc3RyaW5nJykgc2VhcmNoID0gJydcclxuICAgIHNlYXJjaCA9IHNlYXJjaC50cmltKClcclxuICAgIHZhciBpbmZvID0gcHJlcGFyZUxvd2VySW5mbyhzZWFyY2gpXHJcblxyXG4gICAgdmFyIHNwYWNlU2VhcmNoZXMgPSBbXVxyXG4gICAgaWYoaW5mby5jb250YWluc1NwYWNlKSB7XHJcbiAgICAgIHZhciBzZWFyY2hlcyA9IHNlYXJjaC5zcGxpdCgvXFxzKy8pXHJcbiAgICAgIHNlYXJjaGVzID0gWy4uLm5ldyBTZXQoc2VhcmNoZXMpXSAvLyBkaXN0aW5jdFxyXG4gICAgICBmb3IodmFyIGk9MDsgaTxzZWFyY2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmKHNlYXJjaGVzW2ldID09PSAnJykgY29udGludWVcclxuICAgICAgICB2YXIgX2luZm8gPSBwcmVwYXJlTG93ZXJJbmZvKHNlYXJjaGVzW2ldKVxyXG4gICAgICAgIHNwYWNlU2VhcmNoZXMucHVzaCh7bG93ZXJDb2RlczpfaW5mby5sb3dlckNvZGVzLCBfbG93ZXI6c2VhcmNoZXNbaV0udG9Mb3dlckNhc2UoKSwgY29udGFpbnNTcGFjZTpmYWxzZX0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge2xvd2VyQ29kZXM6IGluZm8ubG93ZXJDb2RlcywgX2xvd2VyOiBpbmZvLl9sb3dlciwgY29udGFpbnNTcGFjZTogaW5mby5jb250YWluc1NwYWNlLCBiaXRmbGFnczogaW5mby5iaXRmbGFncywgc3BhY2VTZWFyY2hlczogc3BhY2VTZWFyY2hlc31cclxuICB9XHJcblxyXG5cclxuXHJcbiAgdmFyIGdldFByZXBhcmVkID0gKHRhcmdldCkgPT4ge1xyXG4gICAgaWYodGFyZ2V0Lmxlbmd0aCA+IDk5OSkgcmV0dXJuIHByZXBhcmUodGFyZ2V0KSAvLyBkb24ndCBjYWNoZSBodWdlIHRhcmdldHNcclxuICAgIHZhciB0YXJnZXRQcmVwYXJlZCA9IHByZXBhcmVkQ2FjaGUuZ2V0KHRhcmdldClcclxuICAgIGlmKHRhcmdldFByZXBhcmVkICE9PSB1bmRlZmluZWQpIHJldHVybiB0YXJnZXRQcmVwYXJlZFxyXG4gICAgdGFyZ2V0UHJlcGFyZWQgPSBwcmVwYXJlKHRhcmdldClcclxuICAgIHByZXBhcmVkQ2FjaGUuc2V0KHRhcmdldCwgdGFyZ2V0UHJlcGFyZWQpXHJcbiAgICByZXR1cm4gdGFyZ2V0UHJlcGFyZWRcclxuICB9XHJcbiAgdmFyIGdldFByZXBhcmVkU2VhcmNoID0gKHNlYXJjaCkgPT4ge1xyXG4gICAgaWYoc2VhcmNoLmxlbmd0aCA+IDk5OSkgcmV0dXJuIHByZXBhcmVTZWFyY2goc2VhcmNoKSAvLyBkb24ndCBjYWNoZSBodWdlIHNlYXJjaGVzXHJcbiAgICB2YXIgc2VhcmNoUHJlcGFyZWQgPSBwcmVwYXJlZFNlYXJjaENhY2hlLmdldChzZWFyY2gpXHJcbiAgICBpZihzZWFyY2hQcmVwYXJlZCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gc2VhcmNoUHJlcGFyZWRcclxuICAgIHNlYXJjaFByZXBhcmVkID0gcHJlcGFyZVNlYXJjaChzZWFyY2gpXHJcbiAgICBwcmVwYXJlZFNlYXJjaENhY2hlLnNldChzZWFyY2gsIHNlYXJjaFByZXBhcmVkKVxyXG4gICAgcmV0dXJuIHNlYXJjaFByZXBhcmVkXHJcbiAgfVxyXG5cclxuXHJcbiAgdmFyIGFsbCA9ICh0YXJnZXRzLCBvcHRpb25zKSA9PiB7XHJcbiAgICB2YXIgcmVzdWx0cyA9IFtdOyByZXN1bHRzLnRvdGFsID0gdGFyZ2V0cy5sZW5ndGggLy8gdGhpcyB0b3RhbCBjYW4gYmUgd3JvbmcgaWYgc29tZSB0YXJnZXRzIGFyZSBza2lwcGVkXHJcblxyXG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucz8ubGltaXQgfHwgSU5GSU5JVFlcclxuXHJcbiAgICBpZihvcHRpb25zPy5rZXkpIHtcclxuICAgICAgZm9yKHZhciBpPTA7aTx0YXJnZXRzLmxlbmd0aDtpKyspIHsgdmFyIG9iaiA9IHRhcmdldHNbaV1cclxuICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0VmFsdWUob2JqLCBvcHRpb25zLmtleSlcclxuICAgICAgICBpZih0YXJnZXQgPT0gTlVMTCkgY29udGludWVcclxuICAgICAgICBpZighaXNQcmVwYXJlZCh0YXJnZXQpKSB0YXJnZXQgPSBnZXRQcmVwYXJlZCh0YXJnZXQpXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ld19yZXN1bHQodGFyZ2V0LnRhcmdldCwge19zY29yZTogdGFyZ2V0Ll9zY29yZSwgb2JqOiBvYmp9KVxyXG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpOyBpZihyZXN1bHRzLmxlbmd0aCA+PSBsaW1pdCkgcmV0dXJuIHJlc3VsdHNcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmKG9wdGlvbnM/LmtleXMpIHtcclxuICAgICAgZm9yKHZhciBpPTA7aTx0YXJnZXRzLmxlbmd0aDtpKyspIHsgdmFyIG9iaiA9IHRhcmdldHNbaV1cclxuICAgICAgICB2YXIgb2JqUmVzdWx0cyA9IG5ldyBLZXlzUmVzdWx0KG9wdGlvbnMua2V5cy5sZW5ndGgpXHJcbiAgICAgICAgZm9yICh2YXIga2V5SSA9IG9wdGlvbnMua2V5cy5sZW5ndGggLSAxOyBrZXlJID49IDA7IC0ta2V5SSkge1xyXG4gICAgICAgICAgdmFyIHRhcmdldCA9IGdldFZhbHVlKG9iaiwgb3B0aW9ucy5rZXlzW2tleUldKVxyXG4gICAgICAgICAgaWYoIXRhcmdldCkgeyBvYmpSZXN1bHRzW2tleUldID0gbm9UYXJnZXQ7IGNvbnRpbnVlIH1cclxuICAgICAgICAgIGlmKCFpc1ByZXBhcmVkKHRhcmdldCkpIHRhcmdldCA9IGdldFByZXBhcmVkKHRhcmdldClcclxuICAgICAgICAgIHRhcmdldC5fc2NvcmUgPSBORUdBVElWRV9JTkZJTklUWVxyXG4gICAgICAgICAgdGFyZ2V0Ll9pbmRleGVzLmxlbiA9IDBcclxuICAgICAgICAgIG9ialJlc3VsdHNba2V5SV0gPSB0YXJnZXRcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqUmVzdWx0cy5vYmogPSBvYmpcclxuICAgICAgICBvYmpSZXN1bHRzLl9zY29yZSA9IE5FR0FUSVZFX0lORklOSVRZXHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKG9ialJlc3VsdHMpOyBpZihyZXN1bHRzLmxlbmd0aCA+PSBsaW1pdCkgcmV0dXJuIHJlc3VsdHNcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yKHZhciBpPTA7aTx0YXJnZXRzLmxlbmd0aDtpKyspIHsgdmFyIHRhcmdldCA9IHRhcmdldHNbaV1cclxuICAgICAgICBpZih0YXJnZXQgPT0gTlVMTCkgY29udGludWVcclxuICAgICAgICBpZighaXNQcmVwYXJlZCh0YXJnZXQpKSB0YXJnZXQgPSBnZXRQcmVwYXJlZCh0YXJnZXQpXHJcbiAgICAgICAgdGFyZ2V0Ll9zY29yZSA9IE5FR0FUSVZFX0lORklOSVRZXHJcbiAgICAgICAgdGFyZ2V0Ll9pbmRleGVzLmxlbiA9IDBcclxuICAgICAgICByZXN1bHRzLnB1c2godGFyZ2V0KTsgaWYocmVzdWx0cy5sZW5ndGggPj0gbGltaXQpIHJldHVybiByZXN1bHRzXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0c1xyXG4gIH1cclxuXHJcblxyXG4gIHZhciBhbGdvcml0aG0gPSAocHJlcGFyZWRTZWFyY2gsIHByZXBhcmVkLCBhbGxvd1NwYWNlcz1mYWxzZSwgYWxsb3dQYXJ0aWFsTWF0Y2g9ZmFsc2UpID0+IHtcclxuICAgIGlmKGFsbG93U3BhY2VzPT09ZmFsc2UgJiYgcHJlcGFyZWRTZWFyY2guY29udGFpbnNTcGFjZSkgcmV0dXJuIGFsZ29yaXRobVNwYWNlcyhwcmVwYXJlZFNlYXJjaCwgcHJlcGFyZWQsIGFsbG93UGFydGlhbE1hdGNoKVxyXG5cclxuICAgIHZhciBzZWFyY2hMb3dlciAgICAgID0gcHJlcGFyZWRTZWFyY2guX2xvd2VyXHJcbiAgICB2YXIgc2VhcmNoTG93ZXJDb2RlcyA9IHByZXBhcmVkU2VhcmNoLmxvd2VyQ29kZXNcclxuICAgIHZhciBzZWFyY2hMb3dlckNvZGUgID0gc2VhcmNoTG93ZXJDb2Rlc1swXVxyXG4gICAgdmFyIHRhcmdldExvd2VyQ29kZXMgPSBwcmVwYXJlZC5fdGFyZ2V0TG93ZXJDb2Rlc1xyXG4gICAgdmFyIHNlYXJjaExlbiAgICAgICAgPSBzZWFyY2hMb3dlckNvZGVzLmxlbmd0aFxyXG4gICAgdmFyIHRhcmdldExlbiAgICAgICAgPSB0YXJnZXRMb3dlckNvZGVzLmxlbmd0aFxyXG4gICAgdmFyIHNlYXJjaEkgICAgICAgICAgPSAwIC8vIHdoZXJlIHdlIGF0XHJcbiAgICB2YXIgdGFyZ2V0SSAgICAgICAgICA9IDAgLy8gd2hlcmUgeW91IGF0XHJcbiAgICB2YXIgbWF0Y2hlc1NpbXBsZUxlbiA9IDBcclxuXHJcbiAgICAvLyB2ZXJ5IGJhc2ljIGZ1enp5IG1hdGNoOyB0byByZW1vdmUgbm9uLW1hdGNoaW5nIHRhcmdldHMgQVNBUCFcclxuICAgIC8vIHdhbGsgdGhyb3VnaCB0YXJnZXQuIGZpbmQgc2VxdWVudGlhbCBtYXRjaGVzLlxyXG4gICAgLy8gaWYgYWxsIGNoYXJzIGFyZW4ndCBmb3VuZCB0aGVuIGV4aXRcclxuICAgIGZvcig7Oykge1xyXG4gICAgICB2YXIgaXNNYXRjaCA9IHNlYXJjaExvd2VyQ29kZSA9PT0gdGFyZ2V0TG93ZXJDb2Rlc1t0YXJnZXRJXVxyXG4gICAgICBpZihpc01hdGNoKSB7XHJcbiAgICAgICAgbWF0Y2hlc1NpbXBsZVttYXRjaGVzU2ltcGxlTGVuKytdID0gdGFyZ2V0SVxyXG4gICAgICAgICsrc2VhcmNoSTsgaWYoc2VhcmNoSSA9PT0gc2VhcmNoTGVuKSBicmVha1xyXG4gICAgICAgIHNlYXJjaExvd2VyQ29kZSA9IHNlYXJjaExvd2VyQ29kZXNbc2VhcmNoSV1cclxuICAgICAgfVxyXG4gICAgICArK3RhcmdldEk7IGlmKHRhcmdldEkgPj0gdGFyZ2V0TGVuKSByZXR1cm4gTlVMTCAvLyBGYWlsZWQgdG8gZmluZCBzZWFyY2hJXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNlYXJjaEkgPSAwXHJcbiAgICB2YXIgc3VjY2Vzc1N0cmljdCA9IGZhbHNlXHJcbiAgICB2YXIgbWF0Y2hlc1N0cmljdExlbiA9IDBcclxuXHJcbiAgICB2YXIgbmV4dEJlZ2lubmluZ0luZGV4ZXMgPSBwcmVwYXJlZC5fbmV4dEJlZ2lubmluZ0luZGV4ZXNcclxuICAgIGlmKG5leHRCZWdpbm5pbmdJbmRleGVzID09PSBOVUxMKSBuZXh0QmVnaW5uaW5nSW5kZXhlcyA9IHByZXBhcmVkLl9uZXh0QmVnaW5uaW5nSW5kZXhlcyA9IHByZXBhcmVOZXh0QmVnaW5uaW5nSW5kZXhlcyhwcmVwYXJlZC50YXJnZXQpXHJcbiAgICB0YXJnZXRJID0gbWF0Y2hlc1NpbXBsZVswXT09PTAgPyAwIDogbmV4dEJlZ2lubmluZ0luZGV4ZXNbbWF0Y2hlc1NpbXBsZVswXS0xXVxyXG5cclxuICAgIC8vIE91ciB0YXJnZXQgc3RyaW5nIHN1Y2Nlc3NmdWxseSBtYXRjaGVkIGFsbCBjaGFyYWN0ZXJzIGluIHNlcXVlbmNlIVxyXG4gICAgLy8gTGV0J3MgdHJ5IGEgbW9yZSBhZHZhbmNlZCBhbmQgc3RyaWN0IHRlc3QgdG8gaW1wcm92ZSB0aGUgc2NvcmVcclxuICAgIC8vIG9ubHkgY291bnQgaXQgYXMgYSBtYXRjaCBpZiBpdCdzIGNvbnNlY3V0aXZlIG9yIGEgYmVnaW5uaW5nIGNoYXJhY3RlciFcclxuICAgIHZhciBiYWNrdHJhY2tDb3VudCA9IDBcclxuICAgIGlmKHRhcmdldEkgIT09IHRhcmdldExlbikgZm9yKDs7KSB7XHJcbiAgICAgIGlmKHRhcmdldEkgPj0gdGFyZ2V0TGVuKSB7XHJcbiAgICAgICAgLy8gV2UgZmFpbGVkIHRvIGZpbmQgYSBnb29kIHNwb3QgZm9yIHRoaXMgc2VhcmNoIGNoYXIsIGdvIGJhY2sgdG8gdGhlIHByZXZpb3VzIHNlYXJjaCBjaGFyIGFuZCBmb3JjZSBpdCBmb3J3YXJkXHJcbiAgICAgICAgaWYoc2VhcmNoSSA8PSAwKSBicmVhayAvLyBXZSBmYWlsZWQgdG8gcHVzaCBjaGFycyBmb3J3YXJkIGZvciBhIGJldHRlciBtYXRjaFxyXG5cclxuICAgICAgICArK2JhY2t0cmFja0NvdW50OyBpZihiYWNrdHJhY2tDb3VudCA+IDIwMCkgYnJlYWsgLy8gZXhwb25lbnRpYWwgYmFja3RyYWNraW5nIGlzIHRha2luZyB0b28gbG9uZywganVzdCBnaXZlIHVwIGFuZCByZXR1cm4gYSBiYWQgbWF0Y2hcclxuXHJcbiAgICAgICAgLS1zZWFyY2hJXHJcbiAgICAgICAgdmFyIGxhc3RNYXRjaCA9IG1hdGNoZXNTdHJpY3RbLS1tYXRjaGVzU3RyaWN0TGVuXVxyXG4gICAgICAgIHRhcmdldEkgPSBuZXh0QmVnaW5uaW5nSW5kZXhlc1tsYXN0TWF0Y2hdXHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBpc01hdGNoID0gc2VhcmNoTG93ZXJDb2Rlc1tzZWFyY2hJXSA9PT0gdGFyZ2V0TG93ZXJDb2Rlc1t0YXJnZXRJXVxyXG4gICAgICAgIGlmKGlzTWF0Y2gpIHtcclxuICAgICAgICAgIG1hdGNoZXNTdHJpY3RbbWF0Y2hlc1N0cmljdExlbisrXSA9IHRhcmdldElcclxuICAgICAgICAgICsrc2VhcmNoSTsgaWYoc2VhcmNoSSA9PT0gc2VhcmNoTGVuKSB7IHN1Y2Nlc3NTdHJpY3QgPSB0cnVlOyBicmVhayB9XHJcbiAgICAgICAgICArK3RhcmdldElcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGFyZ2V0SSA9IG5leHRCZWdpbm5pbmdJbmRleGVzW3RhcmdldEldXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2hlY2sgaWYgaXQncyBhIHN1YnN0cmluZyBtYXRjaFxyXG4gICAgdmFyIHN1YnN0cmluZ0luZGV4ID0gc2VhcmNoTGVuIDw9IDEgPyAtMSA6IHByZXBhcmVkLl90YXJnZXRMb3dlci5pbmRleE9mKHNlYXJjaExvd2VyLCBtYXRjaGVzU2ltcGxlWzBdKSAvLyBwZXJmOiB0aGlzIGlzIHNsb3dcclxuICAgIHZhciBpc1N1YnN0cmluZyA9ICEhfnN1YnN0cmluZ0luZGV4XHJcbiAgICB2YXIgaXNTdWJzdHJpbmdCZWdpbm5pbmcgPSAhaXNTdWJzdHJpbmcgPyBmYWxzZSA6IHN1YnN0cmluZ0luZGV4PT09MCB8fCBwcmVwYXJlZC5fbmV4dEJlZ2lubmluZ0luZGV4ZXNbc3Vic3RyaW5nSW5kZXgtMV0gPT09IHN1YnN0cmluZ0luZGV4XHJcblxyXG4gICAgLy8gaWYgaXQncyBhIHN1YnN0cmluZyBtYXRjaCBidXQgbm90IGF0IGEgYmVnaW5uaW5nIGluZGV4LCBsZXQncyB0cnkgdG8gZmluZCBhIHN1YnN0cmluZyBzdGFydGluZyBhdCBhIGJlZ2lubmluZyBpbmRleCBmb3IgYSBiZXR0ZXIgc2NvcmVcclxuICAgIGlmKGlzU3Vic3RyaW5nICYmICFpc1N1YnN0cmluZ0JlZ2lubmluZykge1xyXG4gICAgICBmb3IodmFyIGk9MDsgaTxuZXh0QmVnaW5uaW5nSW5kZXhlcy5sZW5ndGg7IGk9bmV4dEJlZ2lubmluZ0luZGV4ZXNbaV0pIHtcclxuICAgICAgICBpZihpIDw9IHN1YnN0cmluZ0luZGV4KSBjb250aW51ZVxyXG5cclxuICAgICAgICBmb3IodmFyIHM9MDsgczxzZWFyY2hMZW47IHMrKykgaWYoc2VhcmNoTG93ZXJDb2Rlc1tzXSAhPT0gcHJlcGFyZWQuX3RhcmdldExvd2VyQ29kZXNbaStzXSkgYnJlYWtcclxuICAgICAgICBpZihzID09PSBzZWFyY2hMZW4pIHsgc3Vic3RyaW5nSW5kZXggPSBpOyBpc1N1YnN0cmluZ0JlZ2lubmluZyA9IHRydWU7IGJyZWFrIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHRhbGx5IHVwIHRoZSBzY29yZSAmIGtlZXAgdHJhY2sgb2YgbWF0Y2hlcyBmb3IgaGlnaGxpZ2h0aW5nIGxhdGVyXHJcbiAgICAvLyBpZiBpdCdzIGEgc2ltcGxlIG1hdGNoLCB3ZSdsbCBzd2l0Y2ggdG8gYSBzdWJzdHJpbmcgbWF0Y2ggaWYgYSBzdWJzdHJpbmcgZXhpc3RzXHJcbiAgICAvLyBpZiBpdCdzIGEgc3RyaWN0IG1hdGNoLCB3ZSdsbCBzd2l0Y2ggdG8gYSBzdWJzdHJpbmcgbWF0Y2ggb25seSBpZiB0aGF0J3MgYSBiZXR0ZXIgc2NvcmVcclxuXHJcbiAgICB2YXIgY2FsY3VsYXRlU2NvcmUgPSBtYXRjaGVzID0+IHtcclxuICAgICAgdmFyIHNjb3JlID0gMFxyXG5cclxuICAgICAgdmFyIGV4dHJhTWF0Y2hHcm91cENvdW50ID0gMFxyXG4gICAgICBmb3IodmFyIGkgPSAxOyBpIDwgc2VhcmNoTGVuOyArK2kpIHtcclxuICAgICAgICBpZihtYXRjaGVzW2ldIC0gbWF0Y2hlc1tpLTFdICE9PSAxKSB7c2NvcmUgLT0gbWF0Y2hlc1tpXTsgKytleHRyYU1hdGNoR3JvdXBDb3VudH1cclxuICAgICAgfVxyXG4gICAgICB2YXIgdW5tYXRjaGVkRGlzdGFuY2UgPSBtYXRjaGVzW3NlYXJjaExlbi0xXSAtIG1hdGNoZXNbMF0gLSAoc2VhcmNoTGVuLTEpXHJcblxyXG4gICAgICBzY29yZSAtPSAoMTIrdW5tYXRjaGVkRGlzdGFuY2UpICogZXh0cmFNYXRjaEdyb3VwQ291bnQgLy8gcGVuYWxpdHkgZm9yIG1vcmUgZ3JvdXBzXHJcblxyXG4gICAgICBpZihtYXRjaGVzWzBdICE9PSAwKSBzY29yZSAtPSBtYXRjaGVzWzBdKm1hdGNoZXNbMF0qLjIgLy8gcGVuYWxpdHkgZm9yIG5vdCBzdGFydGluZyBuZWFyIHRoZSBiZWdpbm5pbmdcclxuXHJcbiAgICAgIGlmKCFzdWNjZXNzU3RyaWN0KSB7XHJcbiAgICAgICAgc2NvcmUgKj0gMTAwMFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHN1Y2Nlc3NTdHJpY3Qgb24gYSB0YXJnZXQgd2l0aCB0b28gbWFueSBiZWdpbm5pbmcgaW5kZXhlcyBsb3NlcyBwb2ludHMgZm9yIGJlaW5nIGEgYmFkIHRhcmdldFxyXG4gICAgICAgIHZhciB1bmlxdWVCZWdpbm5pbmdJbmRleGVzID0gMVxyXG4gICAgICAgIGZvcih2YXIgaSA9IG5leHRCZWdpbm5pbmdJbmRleGVzWzBdOyBpIDwgdGFyZ2V0TGVuOyBpPW5leHRCZWdpbm5pbmdJbmRleGVzW2ldKSArK3VuaXF1ZUJlZ2lubmluZ0luZGV4ZXNcclxuXHJcbiAgICAgICAgaWYodW5pcXVlQmVnaW5uaW5nSW5kZXhlcyA+IDI0KSBzY29yZSAqPSAodW5pcXVlQmVnaW5uaW5nSW5kZXhlcy0yNCkqMTAgLy8gcXVpdGUgYXJiaXRyYXJ5IG51bWJlcnMgaGVyZSAuLi5cclxuICAgICAgfVxyXG5cclxuICAgICAgc2NvcmUgLT0gKHRhcmdldExlbiAtIHNlYXJjaExlbikvMiAvLyBwZW5hbGl0eSBmb3IgbG9uZ2VyIHRhcmdldHNcclxuXHJcbiAgICAgIGlmKGlzU3Vic3RyaW5nKSAgICAgICAgICBzY29yZSAvPSAxK3NlYXJjaExlbipzZWFyY2hMZW4qMSAvLyBib251cyBmb3IgYmVpbmcgYSBmdWxsIHN1YnN0cmluZ1xyXG4gICAgICBpZihpc1N1YnN0cmluZ0JlZ2lubmluZykgc2NvcmUgLz0gMStzZWFyY2hMZW4qc2VhcmNoTGVuKjEgLy8gYm9udXMgZm9yIHN1YnN0cmluZyBzdGFydGluZyBvbiBhIGJlZ2lubmluZ0luZGV4XHJcblxyXG4gICAgICBzY29yZSAtPSAodGFyZ2V0TGVuIC0gc2VhcmNoTGVuKS8yIC8vIHBlbmFsaXR5IGZvciBsb25nZXIgdGFyZ2V0c1xyXG5cclxuICAgICAgcmV0dXJuIHNjb3JlXHJcbiAgICB9XHJcblxyXG4gICAgaWYoIXN1Y2Nlc3NTdHJpY3QpIHtcclxuICAgICAgaWYoaXNTdWJzdHJpbmcpIGZvcih2YXIgaT0wOyBpPHNlYXJjaExlbjsgKytpKSBtYXRjaGVzU2ltcGxlW2ldID0gc3Vic3RyaW5nSW5kZXgraSAvLyBhdCB0aGlzIHBvaW50IGl0J3Mgc2FmZSB0byBvdmVyd3JpdGUgbWF0Y2hlaHNTaW1wbGUgd2l0aCBzdWJzdHIgbWF0Y2hlc1xyXG4gICAgICB2YXIgbWF0Y2hlc0Jlc3QgPSBtYXRjaGVzU2ltcGxlXHJcbiAgICAgIHZhciBzY29yZSA9IGNhbGN1bGF0ZVNjb3JlKG1hdGNoZXNCZXN0KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYoaXNTdWJzdHJpbmdCZWdpbm5pbmcpIHtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaTxzZWFyY2hMZW47ICsraSkgbWF0Y2hlc1NpbXBsZVtpXSA9IHN1YnN0cmluZ0luZGV4K2kgLy8gYXQgdGhpcyBwb2ludCBpdCdzIHNhZmUgdG8gb3ZlcndyaXRlIG1hdGNoZWhzU2ltcGxlIHdpdGggc3Vic3RyIG1hdGNoZXNcclxuICAgICAgICB2YXIgbWF0Y2hlc0Jlc3QgPSBtYXRjaGVzU2ltcGxlXHJcbiAgICAgICAgdmFyIHNjb3JlID0gY2FsY3VsYXRlU2NvcmUobWF0Y2hlc1NpbXBsZSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbWF0Y2hlc0Jlc3QgPSBtYXRjaGVzU3RyaWN0XHJcbiAgICAgICAgdmFyIHNjb3JlID0gY2FsY3VsYXRlU2NvcmUobWF0Y2hlc1N0cmljdClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByZXBhcmVkLl9zY29yZSA9IHNjb3JlXHJcblxyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHNlYXJjaExlbjsgKytpKSBwcmVwYXJlZC5faW5kZXhlc1tpXSA9IG1hdGNoZXNCZXN0W2ldXHJcbiAgICBwcmVwYXJlZC5faW5kZXhlcy5sZW4gPSBzZWFyY2hMZW5cclxuXHJcbiAgICBjb25zdCByZXN1bHQgICAgPSBuZXcgUmVzdWx0KClcclxuICAgIHJlc3VsdC50YXJnZXQgICA9IHByZXBhcmVkLnRhcmdldFxyXG4gICAgcmVzdWx0Ll9zY29yZSAgID0gcHJlcGFyZWQuX3Njb3JlXHJcbiAgICByZXN1bHQuX2luZGV4ZXMgPSBwcmVwYXJlZC5faW5kZXhlc1xyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuICB2YXIgYWxnb3JpdGhtU3BhY2VzID0gKHByZXBhcmVkU2VhcmNoLCB0YXJnZXQsIGFsbG93UGFydGlhbE1hdGNoKSA9PiB7XHJcbiAgICB2YXIgc2Vlbl9pbmRleGVzID0gbmV3IFNldCgpXHJcbiAgICB2YXIgc2NvcmUgPSAwXHJcbiAgICB2YXIgcmVzdWx0ID0gTlVMTFxyXG5cclxuICAgIHZhciBmaXJzdF9zZWVuX2luZGV4X2xhc3Rfc2VhcmNoID0gMFxyXG4gICAgdmFyIHNlYXJjaGVzID0gcHJlcGFyZWRTZWFyY2guc3BhY2VTZWFyY2hlc1xyXG4gICAgdmFyIHNlYXJjaGVzTGVuID0gc2VhcmNoZXMubGVuZ3RoXHJcbiAgICB2YXIgY2hhbmdlc2xlbiA9IDBcclxuXHJcbiAgICAvLyBSZXR1cm4gX25leHRCZWdpbm5pbmdJbmRleGVzIGJhY2sgdG8gaXRzIG5vcm1hbCBzdGF0ZVxyXG4gICAgdmFyIHJlc2V0TmV4dEJlZ2lubmluZ0luZGV4ZXMgPSAoKSA9PiB7XHJcbiAgICAgIGZvcihsZXQgaT1jaGFuZ2VzbGVuLTE7IGk+PTA7IGktLSkgdGFyZ2V0Ll9uZXh0QmVnaW5uaW5nSW5kZXhlc1tuZXh0QmVnaW5uaW5nSW5kZXhlc0NoYW5nZXNbaSoyICsgMF1dID0gbmV4dEJlZ2lubmluZ0luZGV4ZXNDaGFuZ2VzW2kqMiArIDFdXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGhhc0F0TGVhc3QxTWF0Y2ggPSBmYWxzZVxyXG4gICAgZm9yKHZhciBpPTA7IGk8c2VhcmNoZXNMZW47ICsraSkge1xyXG4gICAgICBhbGxvd1BhcnRpYWxNYXRjaFNjb3Jlc1tpXSA9IE5FR0FUSVZFX0lORklOSVRZXHJcbiAgICAgIHZhciBzZWFyY2ggPSBzZWFyY2hlc1tpXVxyXG5cclxuICAgICAgcmVzdWx0ID0gYWxnb3JpdGhtKHNlYXJjaCwgdGFyZ2V0KVxyXG4gICAgICBpZihhbGxvd1BhcnRpYWxNYXRjaCkge1xyXG4gICAgICAgIGlmKHJlc3VsdCA9PT0gTlVMTCkgY29udGludWVcclxuICAgICAgICBoYXNBdExlYXN0MU1hdGNoID0gdHJ1ZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmKHJlc3VsdCA9PT0gTlVMTCkge3Jlc2V0TmV4dEJlZ2lubmluZ0luZGV4ZXMoKTsgcmV0dXJuIE5VTEx9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmIG5vdCB0aGUgbGFzdCBzZWFyY2gsIHdlIG5lZWQgdG8gbXV0YXRlIF9uZXh0QmVnaW5uaW5nSW5kZXhlcyBmb3IgdGhlIG5leHQgc2VhcmNoXHJcbiAgICAgIHZhciBpc1RoZUxhc3RTZWFyY2ggPSBpID09PSBzZWFyY2hlc0xlbiAtIDFcclxuICAgICAgaWYoIWlzVGhlTGFzdFNlYXJjaCkge1xyXG4gICAgICAgIHZhciBpbmRleGVzID0gcmVzdWx0Ll9pbmRleGVzXHJcblxyXG4gICAgICAgIHZhciBpbmRleGVzSXNDb25zZWN1dGl2ZVN1YnN0cmluZyA9IHRydWVcclxuICAgICAgICBmb3IobGV0IGk9MDsgaTxpbmRleGVzLmxlbi0xOyBpKyspIHtcclxuICAgICAgICAgIGlmKGluZGV4ZXNbaSsxXSAtIGluZGV4ZXNbaV0gIT09IDEpIHtcclxuICAgICAgICAgICAgaW5kZXhlc0lzQ29uc2VjdXRpdmVTdWJzdHJpbmcgPSBmYWxzZTsgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihpbmRleGVzSXNDb25zZWN1dGl2ZVN1YnN0cmluZykge1xyXG4gICAgICAgICAgdmFyIG5ld0JlZ2lubmluZ0luZGV4ID0gaW5kZXhlc1tpbmRleGVzLmxlbi0xXSArIDFcclxuICAgICAgICAgIHZhciB0b1JlcGxhY2UgPSB0YXJnZXQuX25leHRCZWdpbm5pbmdJbmRleGVzW25ld0JlZ2lubmluZ0luZGV4LTFdXHJcbiAgICAgICAgICBmb3IobGV0IGk9bmV3QmVnaW5uaW5nSW5kZXgtMTsgaT49MDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGlmKHRvUmVwbGFjZSAhPT0gdGFyZ2V0Ll9uZXh0QmVnaW5uaW5nSW5kZXhlc1tpXSkgYnJlYWtcclxuICAgICAgICAgICAgdGFyZ2V0Ll9uZXh0QmVnaW5uaW5nSW5kZXhlc1tpXSA9IG5ld0JlZ2lubmluZ0luZGV4XHJcbiAgICAgICAgICAgIG5leHRCZWdpbm5pbmdJbmRleGVzQ2hhbmdlc1tjaGFuZ2VzbGVuKjIgKyAwXSA9IGlcclxuICAgICAgICAgICAgbmV4dEJlZ2lubmluZ0luZGV4ZXNDaGFuZ2VzW2NoYW5nZXNsZW4qMiArIDFdID0gdG9SZXBsYWNlXHJcbiAgICAgICAgICAgIGNoYW5nZXNsZW4rK1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2NvcmUgKz0gcmVzdWx0Ll9zY29yZSAvIHNlYXJjaGVzTGVuXHJcbiAgICAgIGFsbG93UGFydGlhbE1hdGNoU2NvcmVzW2ldID0gcmVzdWx0Ll9zY29yZSAvIHNlYXJjaGVzTGVuXHJcblxyXG4gICAgICAvLyBkb2NrIHBvaW50cyBiYXNlZCBvbiBvcmRlciBvdGhlcndpc2UgXCJjIG1hblwiIHJldHVybnMgTWFuaWZlc3QuY3BwIGluc3RlYWQgb2YgQ2hlYXRNYW5hZ2VyLmhcclxuICAgICAgaWYocmVzdWx0Ll9pbmRleGVzWzBdIDwgZmlyc3Rfc2Vlbl9pbmRleF9sYXN0X3NlYXJjaCkge1xyXG4gICAgICAgIHNjb3JlIC09IChmaXJzdF9zZWVuX2luZGV4X2xhc3Rfc2VhcmNoIC0gcmVzdWx0Ll9pbmRleGVzWzBdKSAqIDJcclxuICAgICAgfVxyXG4gICAgICBmaXJzdF9zZWVuX2luZGV4X2xhc3Rfc2VhcmNoID0gcmVzdWx0Ll9pbmRleGVzWzBdXHJcblxyXG4gICAgICBmb3IodmFyIGo9MDsgajxyZXN1bHQuX2luZGV4ZXMubGVuOyArK2opIHNlZW5faW5kZXhlcy5hZGQocmVzdWx0Ll9pbmRleGVzW2pdKVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGFsbG93UGFydGlhbE1hdGNoICYmICFoYXNBdExlYXN0MU1hdGNoKSByZXR1cm4gTlVMTFxyXG5cclxuICAgIHJlc2V0TmV4dEJlZ2lubmluZ0luZGV4ZXMoKVxyXG5cclxuICAgIC8vIGFsbG93cyBhIHNlYXJjaCB3aXRoIHNwYWNlcyB0aGF0J3MgYW4gZXhhY3Qgc3Vic3RyaW5nIHRvIHNjb3JlIHdlbGxcclxuICAgIHZhciBhbGxvd1NwYWNlc1Jlc3VsdCA9IGFsZ29yaXRobShwcmVwYXJlZFNlYXJjaCwgdGFyZ2V0LCAvKmFsbG93U3BhY2VzPSovdHJ1ZSlcclxuICAgIGlmKGFsbG93U3BhY2VzUmVzdWx0ICE9PSBOVUxMICYmIGFsbG93U3BhY2VzUmVzdWx0Ll9zY29yZSA+IHNjb3JlKSB7XHJcbiAgICAgIGlmKGFsbG93UGFydGlhbE1hdGNoKSB7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8c2VhcmNoZXNMZW47ICsraSkge1xyXG4gICAgICAgICAgYWxsb3dQYXJ0aWFsTWF0Y2hTY29yZXNbaV0gPSBhbGxvd1NwYWNlc1Jlc3VsdC5fc2NvcmUgLyBzZWFyY2hlc0xlblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWxsb3dTcGFjZXNSZXN1bHRcclxuICAgIH1cclxuXHJcbiAgICBpZihhbGxvd1BhcnRpYWxNYXRjaCkgcmVzdWx0ID0gdGFyZ2V0XHJcbiAgICByZXN1bHQuX3Njb3JlID0gc2NvcmVcclxuXHJcbiAgICB2YXIgaSA9IDBcclxuICAgIGZvciAobGV0IGluZGV4IG9mIHNlZW5faW5kZXhlcykgcmVzdWx0Ll9pbmRleGVzW2krK10gPSBpbmRleFxyXG4gICAgcmVzdWx0Ll9pbmRleGVzLmxlbiA9IGlcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG5cclxuICAvLyB3ZSB1c2UgdGhpcyBpbnN0ZWFkIG9mIGp1c3QgLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpIGJlY2F1c2UgdGhhdCBzY3Jld3Mgd2l0aCBqYXBhbmVzZSBjaGFyYWN0ZXJzXHJcbiAgdmFyIHJlbW92ZV9hY2NlbnRzID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoL1xccHtTY3JpcHQ9TGF0aW59Ky9ndSwgbWF0Y2ggPT4gbWF0Y2gubm9ybWFsaXplKCdORkQnKSkucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpXHJcblxyXG4gIHZhciBwcmVwYXJlTG93ZXJJbmZvID0gKHN0cikgPT4ge1xyXG4gICAgc3RyID0gcmVtb3ZlX2FjY2VudHMoc3RyKVxyXG4gICAgdmFyIHN0ckxlbiA9IHN0ci5sZW5ndGhcclxuICAgIHZhciBsb3dlciA9IHN0ci50b0xvd2VyQ2FzZSgpXHJcbiAgICB2YXIgbG93ZXJDb2RlcyA9IFtdIC8vIG5ldyBBcnJheShzdHJMZW4pICAgIHNwYXJzZSBhcnJheSBpcyB0b28gc2xvd1xyXG4gICAgdmFyIGJpdGZsYWdzID0gMFxyXG4gICAgdmFyIGNvbnRhaW5zU3BhY2UgPSBmYWxzZSAvLyBzcGFjZSBpc24ndCBzdG9yZWQgaW4gYml0ZmxhZ3MgYmVjYXVzZSBvZiBob3cgc2VhcmNoaW5nIHdpdGggYSBzcGFjZSB3b3Jrc1xyXG5cclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdHJMZW47ICsraSkge1xyXG4gICAgICB2YXIgbG93ZXJDb2RlID0gbG93ZXJDb2Rlc1tpXSA9IGxvd2VyLmNoYXJDb2RlQXQoaSlcclxuXHJcbiAgICAgIGlmKGxvd2VyQ29kZSA9PT0gMzIpIHtcclxuICAgICAgICBjb250YWluc1NwYWNlID0gdHJ1ZVxyXG4gICAgICAgIGNvbnRpbnVlIC8vIGl0J3MgaW1wb3J0YW50IHRoYXQgd2UgZG9uJ3Qgc2V0IGFueSBiaXRmbGFncyBmb3Igc3BhY2VcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGJpdCA9IGxvd2VyQ29kZT49OTcmJmxvd2VyQ29kZTw9MTIyID8gbG93ZXJDb2RlLTk3IC8vIGFscGhhYmV0XHJcbiAgICAgICAgICAgICAgOiBsb3dlckNvZGU+PTQ4JiZsb3dlckNvZGU8PTU3ICA/IDI2ICAgICAgICAgICAvLyBudW1iZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAzIGJpdHMgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgICAgOiBsb3dlckNvZGU8PTEyNyAgICAgICAgICAgICAgICA/IDMwICAgICAgICAgICAvLyBvdGhlciBhc2NpaVxyXG4gICAgICAgICAgICAgIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMSAgICAgICAgICAgLy8gb3RoZXIgdXRmOFxyXG4gICAgICBiaXRmbGFncyB8PSAxPDxiaXRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge2xvd2VyQ29kZXM6bG93ZXJDb2RlcywgYml0ZmxhZ3M6Yml0ZmxhZ3MsIGNvbnRhaW5zU3BhY2U6Y29udGFpbnNTcGFjZSwgX2xvd2VyOmxvd2VyfVxyXG4gIH1cclxuICB2YXIgcHJlcGFyZUJlZ2lubmluZ0luZGV4ZXMgPSAodGFyZ2V0KSA9PiB7XHJcbiAgICB2YXIgdGFyZ2V0TGVuID0gdGFyZ2V0Lmxlbmd0aFxyXG4gICAgdmFyIGJlZ2lubmluZ0luZGV4ZXMgPSBbXTsgdmFyIGJlZ2lubmluZ0luZGV4ZXNMZW4gPSAwXHJcbiAgICB2YXIgd2FzVXBwZXIgPSBmYWxzZVxyXG4gICAgdmFyIHdhc0FscGhhbnVtID0gZmFsc2VcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXRMZW47ICsraSkge1xyXG4gICAgICB2YXIgdGFyZ2V0Q29kZSA9IHRhcmdldC5jaGFyQ29kZUF0KGkpXHJcbiAgICAgIHZhciBpc1VwcGVyID0gdGFyZ2V0Q29kZT49NjUmJnRhcmdldENvZGU8PTkwXHJcbiAgICAgIHZhciBpc0FscGhhbnVtID0gaXNVcHBlciB8fCB0YXJnZXRDb2RlPj05NyYmdGFyZ2V0Q29kZTw9MTIyIHx8IHRhcmdldENvZGU+PTQ4JiZ0YXJnZXRDb2RlPD01N1xyXG4gICAgICB2YXIgaXNCZWdpbm5pbmcgPSBpc1VwcGVyICYmICF3YXNVcHBlciB8fCAhd2FzQWxwaGFudW0gfHwgIWlzQWxwaGFudW1cclxuICAgICAgd2FzVXBwZXIgPSBpc1VwcGVyXHJcbiAgICAgIHdhc0FscGhhbnVtID0gaXNBbHBoYW51bVxyXG4gICAgICBpZihpc0JlZ2lubmluZykgYmVnaW5uaW5nSW5kZXhlc1tiZWdpbm5pbmdJbmRleGVzTGVuKytdID0gaVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJlZ2lubmluZ0luZGV4ZXNcclxuICB9XHJcbiAgdmFyIHByZXBhcmVOZXh0QmVnaW5uaW5nSW5kZXhlcyA9ICh0YXJnZXQpID0+IHtcclxuICAgIHRhcmdldCA9IHJlbW92ZV9hY2NlbnRzKHRhcmdldClcclxuICAgIHZhciB0YXJnZXRMZW4gPSB0YXJnZXQubGVuZ3RoXHJcbiAgICB2YXIgYmVnaW5uaW5nSW5kZXhlcyA9IHByZXBhcmVCZWdpbm5pbmdJbmRleGVzKHRhcmdldClcclxuICAgIHZhciBuZXh0QmVnaW5uaW5nSW5kZXhlcyA9IFtdIC8vIG5ldyBBcnJheSh0YXJnZXRMZW4pICAgICBzcGFyc2UgYXJyYXkgaXMgdG9vIHNsb3dcclxuICAgIHZhciBsYXN0SXNCZWdpbm5pbmcgPSBiZWdpbm5pbmdJbmRleGVzWzBdXHJcbiAgICB2YXIgbGFzdElzQmVnaW5uaW5nSSA9IDBcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXRMZW47ICsraSkge1xyXG4gICAgICBpZihsYXN0SXNCZWdpbm5pbmcgPiBpKSB7XHJcbiAgICAgICAgbmV4dEJlZ2lubmluZ0luZGV4ZXNbaV0gPSBsYXN0SXNCZWdpbm5pbmdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsYXN0SXNCZWdpbm5pbmcgPSBiZWdpbm5pbmdJbmRleGVzWysrbGFzdElzQmVnaW5uaW5nSV1cclxuICAgICAgICBuZXh0QmVnaW5uaW5nSW5kZXhlc1tpXSA9IGxhc3RJc0JlZ2lubmluZz09PXVuZGVmaW5lZCA/IHRhcmdldExlbiA6IGxhc3RJc0JlZ2lubmluZ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dEJlZ2lubmluZ0luZGV4ZXNcclxuICB9XHJcblxyXG4gIHZhciBwcmVwYXJlZENhY2hlICAgICAgID0gbmV3IE1hcCgpXHJcbiAgdmFyIHByZXBhcmVkU2VhcmNoQ2FjaGUgPSBuZXcgTWFwKClcclxuXHJcbiAgLy8gdGhlIHRoZW9yeSBiZWhpbmQgdGhlc2UgYmVpbmcgZ2xvYmFscyBpcyB0byByZWR1Y2UgZ2FyYmFnZSBjb2xsZWN0aW9uIGJ5IG5vdCBtYWtpbmcgbmV3IGFycmF5c1xyXG4gIHZhciBtYXRjaGVzU2ltcGxlID0gW107IHZhciBtYXRjaGVzU3RyaWN0ID0gW11cclxuICB2YXIgbmV4dEJlZ2lubmluZ0luZGV4ZXNDaGFuZ2VzID0gW10gLy8gYWxsb3dzIHN0cmF3IGJlcnJ5IHRvIG1hdGNoIHN0cmF3YmVycnkgd2VsbCwgYnkgbW9kaWZ5aW5nIHRoZSBlbmQgb2YgYSBzdWJzdHJpbmcgdG8gYmUgY29uc2lkZXJlZCBhIGJlZ2lubmluZyBpbmRleCBmb3IgdGhlIHJlc3Qgb2YgdGhlIHNlYXJjaFxyXG4gIHZhciBrZXlzU3BhY2VzQmVzdFNjb3JlcyA9IFtdOyB2YXIgYWxsb3dQYXJ0aWFsTWF0Y2hTY29yZXMgPSBbXVxyXG4gIHZhciB0bXBUYXJnZXRzID0gW107IHZhciB0bXBSZXN1bHRzID0gW11cclxuXHJcbiAgLy8gcHJvcCA9ICdrZXknICAgICAgICAgICAgICAgICAgMi41bXMgb3B0aW1pemVkIGZvciB0aGlzIGNhc2UsIHNlZW1zIHRvIGJlIGFib3V0IGFzIGZhc3QgYXMgZGlyZWN0IG9ialtwcm9wXVxyXG4gIC8vIHByb3AgPSAna2V5MS5rZXkyJyAgICAgICAgICAgIDEwbXNcclxuICAvLyBwcm9wID0gWydrZXkxJywgJ2tleTInXSAgICAgICAyN21zXHJcbiAgLy8gcHJvcCA9IG9iaiA9PiBvYmoudGFncy5qb2luKCkgPz9tc1xyXG4gIHZhciBnZXRWYWx1ZSA9IChvYmosIHByb3ApID0+IHtcclxuICAgIHZhciB0bXAgPSBvYmpbcHJvcF07IGlmKHRtcCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdG1wXHJcbiAgICBpZih0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHByb3Aob2JqKSAvLyB0aGlzIHNob3VsZCBydW4gZmlyc3QuIGJ1dCB0aGF0IG1ha2VzIHN0cmluZyBwcm9wcyBzbG93ZXJcclxuICAgIHZhciBzZWdzID0gcHJvcFxyXG4gICAgaWYoIUFycmF5LmlzQXJyYXkocHJvcCkpIHNlZ3MgPSBwcm9wLnNwbGl0KCcuJylcclxuICAgIHZhciBsZW4gPSBzZWdzLmxlbmd0aFxyXG4gICAgdmFyIGkgPSAtMVxyXG4gICAgd2hpbGUgKG9iaiAmJiAoKytpIDwgbGVuKSkgb2JqID0gb2JqW3NlZ3NbaV1dXHJcbiAgICByZXR1cm4gb2JqXHJcbiAgfVxyXG5cclxuICB2YXIgaXNQcmVwYXJlZCA9ICh4KSA9PiB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHguX2JpdGZsYWdzID09PSAnbnVtYmVyJyB9XHJcbiAgdmFyIElORklOSVRZID0gSW5maW5pdHk7IHZhciBORUdBVElWRV9JTkZJTklUWSA9IC1JTkZJTklUWVxyXG4gIHZhciBub1Jlc3VsdHMgPSBbXTsgbm9SZXN1bHRzLnRvdGFsID0gMFxyXG4gIHZhciBOVUxMID0gbnVsbFxyXG5cclxuICB2YXIgbm9UYXJnZXQgPSBwcmVwYXJlKCcnKVxyXG5cclxuICAvLyBIYWNrZWQgdmVyc2lvbiBvZiBodHRwczovL2dpdGh1Yi5jb20vbGVtaXJlL0Zhc3RQcmlvcml0eVF1ZXVlLmpzXHJcbiAgdmFyIGZhc3Rwcmlvcml0eXF1ZXVlPXI9Pnt2YXIgZT1bXSxvPTAsYT17fSx2PXI9Pntmb3IodmFyIGE9MCx2PWVbYV0sYz0xO2M8bzspe3ZhciBzPWMrMTthPWMsczxvJiZlW3NdLl9zY29yZTxlW2NdLl9zY29yZSYmKGE9cyksZVthLTE+PjFdPWVbYV0sYz0xKyhhPDwxKX1mb3IodmFyIGY9YS0xPj4xO2E+MCYmdi5fc2NvcmU8ZVtmXS5fc2NvcmU7Zj0oYT1mKS0xPj4xKWVbYV09ZVtmXTtlW2FdPXZ9O3JldHVybiBhLmFkZD0ocj0+e3ZhciBhPW87ZVtvKytdPXI7Zm9yKHZhciB2PWEtMT4+MTthPjAmJnIuX3Njb3JlPGVbdl0uX3Njb3JlO3Y9KGE9diktMT4+MSllW2FdPWVbdl07ZVthXT1yfSksYS5wb2xsPShyPT57aWYoMCE9PW8pe3ZhciBhPWVbMF07cmV0dXJuIGVbMF09ZVstLW9dLHYoKSxhfX0pLGEucGVlaz0ocj0+e2lmKDAhPT1vKXJldHVybiBlWzBdfSksYS5yZXBsYWNlVG9wPShyPT57ZVswXT1yLHYoKX0pLGF9XHJcbiAgdmFyIHEgPSBmYXN0cHJpb3JpdHlxdWV1ZSgpIC8vIHJldXNlIHRoaXNcclxuXHJcbiAgLy8gZnV6enlzb3J0IGlzIHdyaXR0ZW4gdGhpcyB3YXkgZm9yIG1pbmlmaWNhdGlvbi4gYWxsIG5hbWVzIGFyZSBtYW5nZWxlZCB1bmxlc3MgcXVvdGVkXHJcbiAgcmV0dXJuIHsnc2luZ2xlJzpzaW5nbGUsICdnbyc6Z28sICdwcmVwYXJlJzpwcmVwYXJlLCAnY2xlYW51cCc6Y2xlYW51cH1cclxufSkgLy8gVU1EXHJcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cblxuLy8gSU1QT1JUQU5UOiB0aGVzZSBpbXBvcnRzIG11c3QgYmUgdHlwZS1vbmx5XG5pbXBvcnQgdHlwZSB7RGlyZWN0aXZlLCBEaXJlY3RpdmVSZXN1bHQsIFBhcnRJbmZvfSBmcm9tICcuL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgdHlwZSB7VHJ1c3RlZEhUTUwsIFRydXN0ZWRUeXBlc1dpbmRvd30gZnJvbSAndHJ1c3RlZC10eXBlcy9saWInO1xuXG5jb25zdCBERVZfTU9ERSA9IHRydWU7XG5jb25zdCBFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MgPSB0cnVlO1xuY29uc3QgRU5BQkxFX1NIQURZRE9NX05PUEFUQ0ggPSB0cnVlO1xuY29uc3QgTk9ERV9NT0RFID0gZmFsc2U7XG5cbi8vIEFsbG93cyBtaW5pZmllcnMgdG8gcmVuYW1lIHJlZmVyZW5jZXMgdG8gZ2xvYmFsVGhpc1xuY29uc3QgZ2xvYmFsID0gZ2xvYmFsVGhpcztcblxuLyoqXG4gKiBDb250YWlucyB0eXBlcyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSB1bnN0YWJsZSBkZWJ1ZyBBUEkuXG4gKlxuICogRXZlcnl0aGluZyBpbiB0aGlzIEFQSSBpcyBub3Qgc3RhYmxlIGFuZCBtYXkgY2hhbmdlIG9yIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZSxcbiAqIGV2ZW4gb24gcGF0Y2ggcmVsZWFzZXMuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdFVuc3RhYmxlIHtcbiAgLyoqXG4gICAqIFdoZW4gTGl0IGlzIHJ1bm5pbmcgaW4gZGV2IG1vZGUgYW5kIGB3aW5kb3cuZW1pdExpdERlYnVnTG9nRXZlbnRzYCBpcyB0cnVlLFxuICAgKiB3ZSB3aWxsIGVtaXQgJ2xpdC1kZWJ1ZycgZXZlbnRzIHRvIHdpbmRvdywgd2l0aCBsaXZlIGRldGFpbHMgYWJvdXQgdGhlIHVwZGF0ZSBhbmQgcmVuZGVyXG4gICAqIGxpZmVjeWNsZS4gVGhlc2UgY2FuIGJlIHVzZWZ1bCBmb3Igd3JpdGluZyBkZWJ1ZyB0b29saW5nIGFuZCB2aXN1YWxpemF0aW9ucy5cbiAgICpcbiAgICogUGxlYXNlIGJlIGF3YXJlIHRoYXQgcnVubmluZyB3aXRoIHdpbmRvdy5lbWl0TGl0RGVidWdMb2dFdmVudHMgaGFzIHBlcmZvcm1hbmNlIG92ZXJoZWFkLFxuICAgKiBtYWtpbmcgY2VydGFpbiBvcGVyYXRpb25zIHRoYXQgYXJlIG5vcm1hbGx5IHZlcnkgY2hlYXAgKGxpa2UgYSBuby1vcCByZW5kZXIpIG11Y2ggc2xvd2VyLFxuICAgKiBiZWNhdXNlIHdlIG11c3QgY29weSBkYXRhIGFuZCBkaXNwYXRjaCBldmVudHMuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuICBleHBvcnQgbmFtZXNwYWNlIERlYnVnTG9nIHtcbiAgICBleHBvcnQgdHlwZSBFbnRyeSA9XG4gICAgICB8IFRlbXBsYXRlUHJlcFxuICAgICAgfCBUZW1wbGF0ZUluc3RhbnRpYXRlZFxuICAgICAgfCBUZW1wbGF0ZUluc3RhbnRpYXRlZEFuZFVwZGF0ZWRcbiAgICAgIHwgVGVtcGxhdGVVcGRhdGluZ1xuICAgICAgfCBCZWdpblJlbmRlclxuICAgICAgfCBFbmRSZW5kZXJcbiAgICAgIHwgQ29tbWl0UGFydEVudHJ5XG4gICAgICB8IFNldFBhcnRWYWx1ZTtcbiAgICBleHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlUHJlcCB7XG4gICAgICBraW5kOiAndGVtcGxhdGUgcHJlcCc7XG4gICAgICB0ZW1wbGF0ZTogVGVtcGxhdGU7XG4gICAgICBzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheTtcbiAgICAgIGNsb25hYmxlVGVtcGxhdGU6IEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XG4gICAgICBwYXJ0czogVGVtcGxhdGVQYXJ0W107XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQmVnaW5SZW5kZXIge1xuICAgICAga2luZDogJ2JlZ2luIHJlbmRlcic7XG4gICAgICBpZDogbnVtYmVyO1xuICAgICAgdmFsdWU6IHVua25vd247XG4gICAgICBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudDtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgICBwYXJ0OiBDaGlsZFBhcnQgfCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRW5kUmVuZGVyIHtcbiAgICAgIGtpbmQ6ICdlbmQgcmVuZGVyJztcbiAgICAgIGlkOiBudW1iZXI7XG4gICAgICB2YWx1ZTogdW5rbm93bjtcbiAgICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50O1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICAgIHBhcnQ6IENoaWxkUGFydDtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZUluc3RhbnRpYXRlZCB7XG4gICAgICBraW5kOiAndGVtcGxhdGUgaW5zdGFudGlhdGVkJztcbiAgICAgIHRlbXBsYXRlOiBUZW1wbGF0ZSB8IENvbXBpbGVkVGVtcGxhdGU7XG4gICAgICBpbnN0YW5jZTogVGVtcGxhdGVJbnN0YW5jZTtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgICBmcmFnbWVudDogTm9kZTtcbiAgICAgIHBhcnRzOiBBcnJheTxQYXJ0IHwgdW5kZWZpbmVkPjtcbiAgICAgIHZhbHVlczogdW5rbm93bltdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlSW5zdGFudGlhdGVkQW5kVXBkYXRlZCB7XG4gICAgICBraW5kOiAndGVtcGxhdGUgaW5zdGFudGlhdGVkIGFuZCB1cGRhdGVkJztcbiAgICAgIHRlbXBsYXRlOiBUZW1wbGF0ZSB8IENvbXBpbGVkVGVtcGxhdGU7XG4gICAgICBpbnN0YW5jZTogVGVtcGxhdGVJbnN0YW5jZTtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgICBmcmFnbWVudDogTm9kZTtcbiAgICAgIHBhcnRzOiBBcnJheTxQYXJ0IHwgdW5kZWZpbmVkPjtcbiAgICAgIHZhbHVlczogdW5rbm93bltdO1xuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlVXBkYXRpbmcge1xuICAgICAga2luZDogJ3RlbXBsYXRlIHVwZGF0aW5nJztcbiAgICAgIHRlbXBsYXRlOiBUZW1wbGF0ZSB8IENvbXBpbGVkVGVtcGxhdGU7XG4gICAgICBpbnN0YW5jZTogVGVtcGxhdGVJbnN0YW5jZTtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgICBwYXJ0czogQXJyYXk8UGFydCB8IHVuZGVmaW5lZD47XG4gICAgICB2YWx1ZXM6IHVua25vd25bXTtcbiAgICB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXRQYXJ0VmFsdWUge1xuICAgICAga2luZDogJ3NldCBwYXJ0JztcbiAgICAgIHBhcnQ6IFBhcnQ7XG4gICAgICB2YWx1ZTogdW5rbm93bjtcbiAgICAgIHZhbHVlSW5kZXg6IG51bWJlcjtcbiAgICAgIHZhbHVlczogdW5rbm93bltdO1xuICAgICAgdGVtcGxhdGVJbnN0YW5jZTogVGVtcGxhdGVJbnN0YW5jZTtcbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBDb21taXRQYXJ0RW50cnkgPVxuICAgICAgfCBDb21taXROb3RoaW5nVG9DaGlsZEVudHJ5XG4gICAgICB8IENvbW1pdFRleHRcbiAgICAgIHwgQ29tbWl0Tm9kZVxuICAgICAgfCBDb21taXRBdHRyaWJ1dGVcbiAgICAgIHwgQ29tbWl0UHJvcGVydHlcbiAgICAgIHwgQ29tbWl0Qm9vbGVhbkF0dHJpYnV0ZVxuICAgICAgfCBDb21taXRFdmVudExpc3RlbmVyXG4gICAgICB8IENvbW1pdFRvRWxlbWVudEJpbmRpbmc7XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdE5vdGhpbmdUb0NoaWxkRW50cnkge1xuICAgICAga2luZDogJ2NvbW1pdCBub3RoaW5nIHRvIGNoaWxkJztcbiAgICAgIHN0YXJ0OiBDaGlsZE5vZGU7XG4gICAgICBlbmQ6IENoaWxkTm9kZSB8IG51bGw7XG4gICAgICBwYXJlbnQ6IERpc2Nvbm5lY3RhYmxlIHwgdW5kZWZpbmVkO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdFRleHQge1xuICAgICAga2luZDogJ2NvbW1pdCB0ZXh0JztcbiAgICAgIG5vZGU6IFRleHQ7XG4gICAgICB2YWx1ZTogdW5rbm93bjtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21taXROb2RlIHtcbiAgICAgIGtpbmQ6ICdjb21taXQgbm9kZSc7XG4gICAgICBzdGFydDogTm9kZTtcbiAgICAgIHBhcmVudDogRGlzY29ubmVjdGFibGUgfCB1bmRlZmluZWQ7XG4gICAgICB2YWx1ZTogTm9kZTtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21taXRBdHRyaWJ1dGUge1xuICAgICAga2luZDogJ2NvbW1pdCBhdHRyaWJ1dGUnO1xuICAgICAgZWxlbWVudDogRWxlbWVudDtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdFByb3BlcnR5IHtcbiAgICAgIGtpbmQ6ICdjb21taXQgcHJvcGVydHknO1xuICAgICAgZWxlbWVudDogRWxlbWVudDtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHZhbHVlOiB1bmtub3duO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbW1pdEJvb2xlYW5BdHRyaWJ1dGUge1xuICAgICAga2luZDogJ2NvbW1pdCBib29sZWFuIGF0dHJpYnV0ZSc7XG4gICAgICBlbGVtZW50OiBFbGVtZW50O1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgdmFsdWU6IGJvb2xlYW47XG4gICAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tbWl0RXZlbnRMaXN0ZW5lciB7XG4gICAgICBraW5kOiAnY29tbWl0IGV2ZW50IGxpc3RlbmVyJztcbiAgICAgIGVsZW1lbnQ6IEVsZW1lbnQ7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICB2YWx1ZTogdW5rbm93bjtcbiAgICAgIG9sZExpc3RlbmVyOiB1bmtub3duO1xuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRydWUgaWYgd2UncmUgcmVtb3ZpbmcgdGhlIG9sZCBldmVudCBsaXN0ZW5lciAoZS5nLiBiZWNhdXNlIHNldHRpbmdzIGNoYW5nZWQsIG9yIHZhbHVlIGlzIG5vdGhpbmcpXG4gICAgICByZW1vdmVMaXN0ZW5lcjogYm9vbGVhbjtcbiAgICAgIC8vIFRydWUgaWYgd2UncmUgYWRkaW5nIGEgbmV3IGV2ZW50IGxpc3RlbmVyIChlLmcuIGJlY2F1c2UgZmlyc3QgcmVuZGVyLCBvciBzZXR0aW5ncyBjaGFuZ2VkKVxuICAgICAgYWRkTGlzdGVuZXI6IGJvb2xlYW47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21taXRUb0VsZW1lbnRCaW5kaW5nIHtcbiAgICAgIGtpbmQ6ICdjb21taXQgdG8gZWxlbWVudCBiaW5kaW5nJztcbiAgICAgIGVsZW1lbnQ6IEVsZW1lbnQ7XG4gICAgICB2YWx1ZTogdW5rbm93bjtcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBEZWJ1Z0xvZ2dpbmdXaW5kb3cge1xuICAvLyBFdmVuIGluIGRldiBtb2RlLCB3ZSBnZW5lcmFsbHkgZG9uJ3Qgd2FudCB0byBlbWl0IHRoZXNlIGV2ZW50cywgYXMgdGhhdCdzXG4gIC8vIGFub3RoZXIgbGV2ZWwgb2YgY29zdCwgc28gb25seSBlbWl0IHRoZW0gd2hlbiBERVZfTU9ERSBpcyB0cnVlIF9hbmRfIHdoZW5cbiAgLy8gd2luZG93LmVtaXRMaXREZWJ1Z0V2ZW50cyBpcyB0cnVlLlxuICBlbWl0TGl0RGVidWdMb2dFdmVudHM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFVzZWZ1bCBmb3IgdmlzdWFsaXppbmcgYW5kIGxvZ2dpbmcgaW5zaWdodHMgaW50byB3aGF0IHRoZSBMaXQgdGVtcGxhdGUgc3lzdGVtIGlzIGRvaW5nLlxuICpcbiAqIENvbXBpbGVkIG91dCBvZiBwcm9kIG1vZGUgYnVpbGRzLlxuICovXG5jb25zdCBkZWJ1Z0xvZ0V2ZW50ID0gREVWX01PREVcbiAgPyAoZXZlbnQ6IExpdFVuc3RhYmxlLkRlYnVnTG9nLkVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBzaG91bGRFbWl0ID0gKGdsb2JhbCBhcyB1bmtub3duIGFzIERlYnVnTG9nZ2luZ1dpbmRvdylcbiAgICAgICAgLmVtaXRMaXREZWJ1Z0xvZ0V2ZW50cztcbiAgICAgIGlmICghc2hvdWxkRW1pdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50PExpdFVuc3RhYmxlLkRlYnVnTG9nLkVudHJ5PignbGl0LWRlYnVnJywge1xuICAgICAgICAgIGRldGFpbDogZXZlbnQsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgOiB1bmRlZmluZWQ7XG4vLyBVc2VkIGZvciBjb25uZWN0aW5nIGJlZ2luUmVuZGVyIGFuZCBlbmRSZW5kZXIgZXZlbnRzIHdoZW4gdGhlcmUgYXJlIG5lc3RlZFxuLy8gcmVuZGVycyB3aGVuIGVycm9ycyBhcmUgdGhyb3duIHByZXZlbnRpbmcgYW4gZW5kUmVuZGVyIGV2ZW50IGZyb20gYmVpbmdcbi8vIGNhbGxlZC5cbmxldCBkZWJ1Z0xvZ1JlbmRlcklkID0gMDtcblxubGV0IGlzc3VlV2FybmluZzogKGNvZGU6IHN0cmluZywgd2FybmluZzogc3RyaW5nKSA9PiB2b2lkO1xuXG5pZiAoREVWX01PREUpIHtcbiAgZ2xvYmFsLmxpdElzc3VlZFdhcm5pbmdzID8/PSBuZXcgU2V0KCk7XG5cbiAgLy8gSXNzdWUgYSB3YXJuaW5nLCBpZiB3ZSBoYXZlbid0IGFscmVhZHkuXG4gIGlzc3VlV2FybmluZyA9IChjb2RlOiBzdHJpbmcsIHdhcm5pbmc6IHN0cmluZykgPT4ge1xuICAgIHdhcm5pbmcgKz0gY29kZVxuICAgICAgPyBgIFNlZSBodHRwczovL2xpdC5kZXYvbXNnLyR7Y29kZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uYFxuICAgICAgOiAnJztcbiAgICBpZiAoIWdsb2JhbC5saXRJc3N1ZWRXYXJuaW5ncyEuaGFzKHdhcm5pbmcpKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICBnbG9iYWwubGl0SXNzdWVkV2FybmluZ3MhLmFkZCh3YXJuaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgaXNzdWVXYXJuaW5nKFxuICAgICdkZXYtbW9kZScsXG4gICAgYExpdCBpcyBpbiBkZXYgbW9kZS4gTm90IHJlY29tbWVuZGVkIGZvciBwcm9kdWN0aW9uIWBcbiAgKTtcbn1cblxuY29uc3Qgd3JhcCA9XG4gIEVOQUJMRV9TSEFEWURPTV9OT1BBVENIICYmXG4gIGdsb2JhbC5TaGFkeURPTT8uaW5Vc2UgJiZcbiAgZ2xvYmFsLlNoYWR5RE9NPy5ub1BhdGNoID09PSB0cnVlXG4gICAgPyAoZ2xvYmFsLlNoYWR5RE9NIS53cmFwIGFzIDxUIGV4dGVuZHMgTm9kZT4obm9kZTogVCkgPT4gVClcbiAgICA6IDxUIGV4dGVuZHMgTm9kZT4obm9kZTogVCkgPT4gbm9kZTtcblxuY29uc3QgdHJ1c3RlZFR5cGVzID0gKGdsb2JhbCBhcyB1bmtub3duIGFzIFRydXN0ZWRUeXBlc1dpbmRvdykudHJ1c3RlZFR5cGVzO1xuXG4vKipcbiAqIE91ciBUcnVzdGVkVHlwZVBvbGljeSBmb3IgSFRNTCB3aGljaCBpcyBkZWNsYXJlZCB1c2luZyB0aGUgaHRtbCB0ZW1wbGF0ZVxuICogdGFnIGZ1bmN0aW9uLlxuICpcbiAqIFRoYXQgSFRNTCBpcyBhIGRldmVsb3Blci1hdXRob3JlZCBjb25zdGFudCwgYW5kIGlzIHBhcnNlZCB3aXRoIGlubmVySFRNTFxuICogYmVmb3JlIGFueSB1bnRydXN0ZWQgZXhwcmVzc2lvbnMgaGF2ZSBiZWVuIG1peGVkIGluLiBUaGVyZWZvciBpdCBpc1xuICogY29uc2lkZXJlZCBzYWZlIGJ5IGNvbnN0cnVjdGlvbi5cbiAqL1xuY29uc3QgcG9saWN5ID0gdHJ1c3RlZFR5cGVzXG4gID8gdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgnbGl0LWh0bWwnLCB7XG4gICAgICBjcmVhdGVIVE1MOiAocykgPT4gcyxcbiAgICB9KVxuICA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBVc2VkIHRvIHNhbml0aXplIGFueSB2YWx1ZSBiZWZvcmUgaXQgaXMgd3JpdHRlbiBpbnRvIHRoZSBET00uIFRoaXMgY2FuIGJlXG4gKiB1c2VkIHRvIGltcGxlbWVudCBhIHNlY3VyaXR5IHBvbGljeSBvZiBhbGxvd2VkIGFuZCBkaXNhbGxvd2VkIHZhbHVlcyBpblxuICogb3JkZXIgdG8gcHJldmVudCBYU1MgYXR0YWNrcy5cbiAqXG4gKiBPbmUgd2F5IG9mIHVzaW5nIHRoaXMgY2FsbGJhY2sgd291bGQgYmUgdG8gY2hlY2sgYXR0cmlidXRlcyBhbmQgcHJvcGVydGllc1xuICogYWdhaW5zdCBhIGxpc3Qgb2YgaGlnaCByaXNrIGZpZWxkcywgYW5kIHJlcXVpcmUgdGhhdCB2YWx1ZXMgd3JpdHRlbiB0byBzdWNoXG4gKiBmaWVsZHMgYmUgaW5zdGFuY2VzIG9mIGEgY2xhc3Mgd2hpY2ggaXMgc2FmZSBieSBjb25zdHJ1Y3Rpb24uIENsb3N1cmUncyBTYWZlXG4gKiBIVE1MIFR5cGVzIGlzIG9uZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIHRlY2huaXF1ZSAoXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3NhZmUtaHRtbC10eXBlcy9ibG9iL21hc3Rlci9kb2Mvc2FmZWh0bWwtdHlwZXMubWQpLlxuICogVGhlIFRydXN0ZWRUeXBlcyBwb2x5ZmlsbCBpbiBBUEktb25seSBtb2RlIGNvdWxkIGFsc28gYmUgdXNlZCBhcyBhIGJhc2lzXG4gKiBmb3IgdGhpcyB0ZWNobmlxdWUgKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL3RydXN0ZWQtdHlwZXMpLlxuICpcbiAqIEBwYXJhbSBub2RlIFRoZSBIVE1MIG5vZGUgKHVzdWFsbHkgZWl0aGVyIGEgI3RleHQgbm9kZSBvciBhbiBFbGVtZW50KSB0aGF0XG4gKiAgICAgaXMgYmVpbmcgd3JpdHRlbiB0by4gTm90ZSB0aGF0IHRoaXMgaXMganVzdCBhbiBleGVtcGxhciBub2RlLCB0aGUgd3JpdGVcbiAqICAgICBtYXkgdGFrZSBwbGFjZSBhZ2FpbnN0IGFub3RoZXIgaW5zdGFuY2Ugb2YgdGhlIHNhbWUgY2xhc3Mgb2Ygbm9kZS5cbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIGFuIGF0dHJpYnV0ZSBvciBwcm9wZXJ0eSAoZm9yIGV4YW1wbGUsICdocmVmJykuXG4gKiBAcGFyYW0gdHlwZSBJbmRpY2F0ZXMgd2hldGhlciB0aGUgd3JpdGUgdGhhdCdzIGFib3V0IHRvIGJlIHBlcmZvcm1lZCB3aWxsXG4gKiAgICAgYmUgdG8gYSBwcm9wZXJ0eSBvciBhIG5vZGUuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCB3aWxsIHNhbml0aXplIHRoaXMgY2xhc3Mgb2Ygd3JpdGVzLlxuICovXG5leHBvcnQgdHlwZSBTYW5pdGl6ZXJGYWN0b3J5ID0gKFxuICBub2RlOiBOb2RlLFxuICBuYW1lOiBzdHJpbmcsXG4gIHR5cGU6ICdwcm9wZXJ0eScgfCAnYXR0cmlidXRlJ1xuKSA9PiBWYWx1ZVNhbml0aXplcjtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHdoaWNoIGNhbiBzYW5pdGl6ZSB2YWx1ZXMgdGhhdCB3aWxsIGJlIHdyaXR0ZW4gdG8gYSBzcGVjaWZpYyBraW5kXG4gKiBvZiBET00gc2luay5cbiAqXG4gKiBTZWUgU2FuaXRpemVyRmFjdG9yeS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNhbml0aXplLiBXaWxsIGJlIHRoZSBhY3R1YWwgdmFsdWUgcGFzc2VkIGludG9cbiAqICAgICB0aGUgbGl0LWh0bWwgdGVtcGxhdGUgbGl0ZXJhbCwgc28gdGhpcyBjb3VsZCBiZSBvZiBhbnkgdHlwZS5cbiAqIEByZXR1cm4gVGhlIHZhbHVlIHRvIHdyaXRlIHRvIHRoZSBET00uIFVzdWFsbHkgdGhlIHNhbWUgYXMgdGhlIGlucHV0IHZhbHVlLFxuICogICAgIHVubGVzcyBzYW5pdGl6YXRpb24gaXMgbmVlZGVkLlxuICovXG5leHBvcnQgdHlwZSBWYWx1ZVNhbml0aXplciA9ICh2YWx1ZTogdW5rbm93bikgPT4gdW5rbm93bjtcblxuY29uc3QgaWRlbnRpdHlGdW5jdGlvbjogVmFsdWVTYW5pdGl6ZXIgPSAodmFsdWU6IHVua25vd24pID0+IHZhbHVlO1xuY29uc3Qgbm9vcFNhbml0aXplcjogU2FuaXRpemVyRmFjdG9yeSA9IChcbiAgX25vZGU6IE5vZGUsXG4gIF9uYW1lOiBzdHJpbmcsXG4gIF90eXBlOiAncHJvcGVydHknIHwgJ2F0dHJpYnV0ZSdcbikgPT4gaWRlbnRpdHlGdW5jdGlvbjtcblxuLyoqIFNldHMgdGhlIGdsb2JhbCBzYW5pdGl6ZXIgZmFjdG9yeS4gKi9cbmNvbnN0IHNldFNhbml0aXplciA9IChuZXdTYW5pdGl6ZXI6IFNhbml0aXplckZhY3RvcnkpID0+IHtcbiAgaWYgKCFFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHNhbml0aXplckZhY3RvcnlJbnRlcm5hbCAhPT0gbm9vcFNhbml0aXplcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBBdHRlbXB0ZWQgdG8gb3ZlcndyaXRlIGV4aXN0aW5nIGxpdC1odG1sIHNlY3VyaXR5IHBvbGljeS5gICtcbiAgICAgICAgYCBzZXRTYW5pdGl6ZURPTVZhbHVlRmFjdG9yeSBzaG91bGQgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZS5gXG4gICAgKTtcbiAgfVxuICBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwgPSBuZXdTYW5pdGl6ZXI7XG59O1xuXG4vKipcbiAqIE9ubHkgdXNlZCBpbiBpbnRlcm5hbCB0ZXN0cywgbm90IGEgcGFydCBvZiB0aGUgcHVibGljIEFQSS5cbiAqL1xuY29uc3QgX3Rlc3RPbmx5Q2xlYXJTYW5pdGl6ZXJGYWN0b3J5RG9Ob3RDYWxsT3JFbHNlID0gKCkgPT4ge1xuICBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwgPSBub29wU2FuaXRpemVyO1xufTtcblxuY29uc3QgY3JlYXRlU2FuaXRpemVyOiBTYW5pdGl6ZXJGYWN0b3J5ID0gKG5vZGUsIG5hbWUsIHR5cGUpID0+IHtcbiAgcmV0dXJuIHNhbml0aXplckZhY3RvcnlJbnRlcm5hbChub2RlLCBuYW1lLCB0eXBlKTtcbn07XG5cbi8vIEFkZGVkIHRvIGFuIGF0dHJpYnV0ZSBuYW1lIHRvIG1hcmsgdGhlIGF0dHJpYnV0ZSBhcyBib3VuZCBzbyB3ZSBjYW4gZmluZFxuLy8gaXQgZWFzaWx5LlxuY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuXG4vLyBUaGlzIG1hcmtlciBpcyB1c2VkIGluIG1hbnkgc3ludGFjdGljIHBvc2l0aW9ucyBpbiBIVE1MLCBzbyBpdCBtdXN0IGJlXG4vLyBhIHZhbGlkIGVsZW1lbnQgbmFtZSBhbmQgYXR0cmlidXRlIG5hbWUuIFdlIGRvbid0IHN1cHBvcnQgZHluYW1pYyBuYW1lcyAoeWV0KVxuLy8gYnV0IHRoaXMgYXQgbGVhc3QgZW5zdXJlcyB0aGF0IHRoZSBwYXJzZSB0cmVlIGlzIGNsb3NlciB0byB0aGUgdGVtcGxhdGVcbi8vIGludGVudGlvbi5cbmNvbnN0IG1hcmtlciA9IGBsaXQkJHtNYXRoLnJhbmRvbSgpLnRvRml4ZWQoOSkuc2xpY2UoMil9JGA7XG5cbi8vIFN0cmluZyB1c2VkIHRvIHRlbGwgaWYgYSBjb21tZW50IGlzIGEgbWFya2VyIGNvbW1lbnRcbmNvbnN0IG1hcmtlck1hdGNoID0gJz8nICsgbWFya2VyO1xuXG4vLyBUZXh0IHVzZWQgdG8gaW5zZXJ0IGEgY29tbWVudCBtYXJrZXIgbm9kZS4gV2UgdXNlIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25cbi8vIHN5bnRheCBiZWNhdXNlIGl0J3Mgc2xpZ2h0bHkgc21hbGxlciwgYnV0IHBhcnNlcyBhcyBhIGNvbW1lbnQgbm9kZS5cbmNvbnN0IG5vZGVNYXJrZXIgPSBgPCR7bWFya2VyTWF0Y2h9PmA7XG5cbmNvbnN0IGQgPVxuICBOT0RFX01PREUgJiYgZ2xvYmFsLmRvY3VtZW50ID09PSB1bmRlZmluZWRcbiAgICA/ICh7XG4gICAgICAgIGNyZWF0ZVRyZWVXYWxrZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgfSBhcyB1bmtub3duIGFzIERvY3VtZW50KVxuICAgIDogZG9jdW1lbnQ7XG5cbi8vIENyZWF0ZXMgYSBkeW5hbWljIG1hcmtlci4gV2UgbmV2ZXIgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZXNlIGluIHRoZSBET00uXG5jb25zdCBjcmVhdGVNYXJrZXIgPSAoKSA9PiBkLmNyZWF0ZUNvbW1lbnQoJycpO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlb2Ytb3BlcmF0b3JcbnR5cGUgUHJpbWl0aXZlID0gbnVsbCB8IHVuZGVmaW5lZCB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmcgfCBzeW1ib2wgfCBiaWdpbnQ7XG5jb25zdCBpc1ByaW1pdGl2ZSA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFByaW1pdGl2ZSA9PlxuICB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZSAhPSAnZnVuY3Rpb24nKTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIEl0ZXJhYmxlPHVua25vd24+ID0+XG4gIGlzQXJyYXkodmFsdWUpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHR5cGVvZiAodmFsdWUgYXMgYW55KT8uW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG5cbmNvbnN0IFNQQUNFX0NIQVIgPSBgWyBcXHRcXG5cXGZcXHJdYDtcbmNvbnN0IEFUVFJfVkFMVUVfQ0hBUiA9IGBbXiBcXHRcXG5cXGZcXHJcIidcXGA8Pj1dYDtcbmNvbnN0IE5BTUVfQ0hBUiA9IGBbXlxcXFxzXCInPj0vXWA7XG5cbi8vIFRoZXNlIHJlZ2V4ZXMgcmVwcmVzZW50IHRoZSBmaXZlIHBhcnNpbmcgc3RhdGVzIHRoYXQgd2UgY2FyZSBhYm91dCBpbiB0aGVcbi8vIFRlbXBsYXRlJ3MgSFRNTCBzY2FubmVyLiBUaGV5IG1hdGNoIHRoZSAqZW5kKiBvZiB0aGUgc3RhdGUgdGhleSdyZSBuYW1lZFxuLy8gYWZ0ZXIuXG4vLyBEZXBlbmRpbmcgb24gdGhlIG1hdGNoLCB3ZSB0cmFuc2l0aW9uIHRvIGEgbmV3IHN0YXRlLiBJZiB0aGVyZSdzIG5vIG1hdGNoLFxuLy8gd2Ugc3RheSBpbiB0aGUgc2FtZSBzdGF0ZS5cbi8vIE5vdGUgdGhhdCB0aGUgcmVnZXhlcyBhcmUgc3RhdGVmdWwuIFdlIHV0aWxpemUgbGFzdEluZGV4IGFuZCBzeW5jIGl0XG4vLyBhY3Jvc3MgdGhlIG11bHRpcGxlIHJlZ2V4ZXMgdXNlZC4gSW4gYWRkaXRpb24gdG8gdGhlIGZpdmUgcmVnZXhlcyBiZWxvd1xuLy8gd2UgYWxzbyBkeW5hbWljYWxseSBjcmVhdGUgYSByZWdleCB0byBmaW5kIHRoZSBtYXRjaGluZyBlbmQgdGFncyBmb3IgcmF3XG4vLyB0ZXh0IGVsZW1lbnRzLlxuXG4vKipcbiAqIEVuZCBvZiB0ZXh0IGlzOiBgPGAgZm9sbG93ZWQgYnk6XG4gKiAgIChjb21tZW50IHN0YXJ0KSBvciAodGFnKSBvciAoZHluYW1pYyB0YWcgYmluZGluZylcbiAqL1xuY29uc3QgdGV4dEVuZFJlZ2V4ID0gLzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nO1xuY29uc3QgQ09NTUVOVF9TVEFSVCA9IDE7XG5jb25zdCBUQUdfTkFNRSA9IDI7XG5jb25zdCBEWU5BTUlDX1RBR19OQU1FID0gMztcblxuY29uc3QgY29tbWVudEVuZFJlZ2V4ID0gLy0tPi9nO1xuLyoqXG4gKiBDb21tZW50cyBub3Qgc3RhcnRlZCB3aXRoIDwhLS0sIGxpa2UgPC97LCBjYW4gYmUgZW5kZWQgYnkgYSBzaW5nbGUgYD5gXG4gKi9cbmNvbnN0IGNvbW1lbnQyRW5kUmVnZXggPSAvPi9nO1xuXG4vKipcbiAqIFRoZSB0YWdFbmQgcmVnZXggbWF0Y2hlcyB0aGUgZW5kIG9mIHRoZSBcImluc2lkZSBhbiBvcGVuaW5nXCIgdGFnIHN5bnRheFxuICogcG9zaXRpb24uIEl0IGVpdGhlciBtYXRjaGVzIGEgYD5gLCBhbiBhdHRyaWJ1dGUtbGlrZSBzZXF1ZW5jZSwgb3IgdGhlIGVuZFxuICogb2YgdGhlIHN0cmluZyBhZnRlciBhIHNwYWNlIChhdHRyaWJ1dGUtbmFtZSBwb3NpdGlvbiBlbmRpbmcpLlxuICpcbiAqIFNlZSBhdHRyaWJ1dGVzIGluIHRoZSBIVE1MIHNwZWM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjZWxlbWVudHMtYXR0cmlidXRlc1xuICpcbiAqIFwiIFxcdFxcblxcZlxcclwiIGFyZSBIVE1MIHNwYWNlIGNoYXJhY3RlcnM6XG4gKiBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jYXNjaWktd2hpdGVzcGFjZVxuICpcbiAqIFNvIGFuIGF0dHJpYnV0ZSBpczpcbiAqICAqIFRoZSBuYW1lOiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBhIHdoaXRlc3BhY2UgY2hhcmFjdGVyLCAoXCIpLCAoJyksIFwiPlwiLFxuICogICAgXCI9XCIsIG9yIFwiL1wiLiBOb3RlOiB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBIVE1MIHNwZWMgd2hpY2ggYWxzbyBleGNsdWRlcyBjb250cm9sIGNoYXJhY3RlcnMuXG4gKiAgKiBGb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgc3BhY2UgY2hhcmFjdGVyc1xuICogICogRm9sbG93ZWQgYnkgXCI9XCJcbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieTpcbiAqICAgICogQW55IGNoYXJhY3RlciBleGNlcHQgc3BhY2UsICgnKSwgKFwiKSwgXCI8XCIsIFwiPlwiLCBcIj1cIiwgKGApLCBvclxuICogICAgKiAoXCIpIHRoZW4gYW55IG5vbi0oXCIpLCBvclxuICogICAgKiAoJykgdGhlbiBhbnkgbm9uLSgnKVxuICovXG5jb25zdCB0YWdFbmRSZWdleCA9IG5ldyBSZWdFeHAoXG4gIGA+fCR7U1BBQ0VfQ0hBUn0oPzooJHtOQU1FX0NIQVJ9KykoJHtTUEFDRV9DSEFSfSo9JHtTUEFDRV9DSEFSfSooPzoke0FUVFJfVkFMVUVfQ0hBUn18KFwifCcpfCkpfCQpYCxcbiAgJ2cnXG4pO1xuY29uc3QgRU5USVJFX01BVENIID0gMDtcbmNvbnN0IEFUVFJJQlVURV9OQU1FID0gMTtcbmNvbnN0IFNQQUNFU19BTkRfRVFVQUxTID0gMjtcbmNvbnN0IFFVT1RFX0NIQVIgPSAzO1xuXG5jb25zdCBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleCA9IC8nL2c7XG5jb25zdCBkb3VibGVRdW90ZUF0dHJFbmRSZWdleCA9IC9cIi9nO1xuLyoqXG4gKiBNYXRjaGVzIHRoZSByYXcgdGV4dCBlbGVtZW50cy5cbiAqXG4gKiBDb21tZW50cyBhcmUgbm90IHBhcnNlZCB3aXRoaW4gcmF3IHRleHQgZWxlbWVudHMsIHNvIHdlIG5lZWQgdG8gc2VhcmNoIHRoZWlyXG4gKiB0ZXh0IGNvbnRlbnQgZm9yIG1hcmtlciBzdHJpbmdzLlxuICovXG5jb25zdCByYXdUZXh0RWxlbWVudCA9IC9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaTtcblxuLyoqIFRlbXBsYXRlUmVzdWx0IHR5cGVzICovXG5jb25zdCBIVE1MX1JFU1VMVCA9IDE7XG5jb25zdCBTVkdfUkVTVUxUID0gMjtcbmNvbnN0IE1BVEhNTF9SRVNVTFQgPSAzO1xuXG50eXBlIFJlc3VsdFR5cGUgPSB0eXBlb2YgSFRNTF9SRVNVTFQgfCB0eXBlb2YgU1ZHX1JFU1VMVCB8IHR5cGVvZiBNQVRITUxfUkVTVUxUO1xuXG4vLyBUZW1wbGF0ZVBhcnQgdHlwZXNcbi8vIElNUE9SVEFOVDogdGhlc2UgbXVzdCBtYXRjaCB0aGUgdmFsdWVzIGluIFBhcnRUeXBlXG5jb25zdCBBVFRSSUJVVEVfUEFSVCA9IDE7XG5jb25zdCBDSElMRF9QQVJUID0gMjtcbmNvbnN0IFBST1BFUlRZX1BBUlQgPSAzO1xuY29uc3QgQk9PTEVBTl9BVFRSSUJVVEVfUEFSVCA9IDQ7XG5jb25zdCBFVkVOVF9QQVJUID0gNTtcbmNvbnN0IEVMRU1FTlRfUEFSVCA9IDY7XG5jb25zdCBDT01NRU5UX1BBUlQgPSA3O1xuXG4vKipcbiAqIFRoZSByZXR1cm4gdHlwZSBvZiB0aGUgdGVtcGxhdGUgdGFnIGZ1bmN0aW9ucywge0BsaW5rY29kZSBodG1sfSBhbmRcbiAqIHtAbGlua2NvZGUgc3ZnfSB3aGVuIGl0IGhhc24ndCBiZWVuIGNvbXBpbGVkIGJ5IEBsaXQtbGFicy9jb21waWxlci5cbiAqXG4gKiBBIGBUZW1wbGF0ZVJlc3VsdGAgb2JqZWN0IGhvbGRzIGFsbCB0aGUgaW5mb3JtYXRpb24gYWJvdXQgYSB0ZW1wbGF0ZVxuICogZXhwcmVzc2lvbiByZXF1aXJlZCB0byByZW5kZXIgaXQ6IHRoZSB0ZW1wbGF0ZSBzdHJpbmdzLCBleHByZXNzaW9uIHZhbHVlcyxcbiAqIGFuZCB0eXBlIG9mIHRlbXBsYXRlIChodG1sIG9yIHN2ZykuXG4gKlxuICogYFRlbXBsYXRlUmVzdWx0YCBvYmplY3RzIGRvIG5vdCBjcmVhdGUgYW55IERPTSBvbiB0aGVpciBvd24uIFRvIGNyZWF0ZSBvclxuICogdXBkYXRlIERPTSB5b3UgbmVlZCB0byByZW5kZXIgdGhlIGBUZW1wbGF0ZVJlc3VsdGAuIFNlZVxuICogW1JlbmRlcmluZ10oaHR0cHM6Ly9saXQuZGV2L2RvY3MvY29tcG9uZW50cy9yZW5kZXJpbmcpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgVW5jb21waWxlZFRlbXBsYXRlUmVzdWx0PFQgZXh0ZW5kcyBSZXN1bHRUeXBlID0gUmVzdWx0VHlwZT4gPSB7XG4gIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gIFsnXyRsaXRUeXBlJCddOiBUO1xuICBzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheTtcbiAgdmFsdWVzOiB1bmtub3duW107XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgYSB0ZW1wbGF0ZSByZXN1bHQgdGhhdCBtYXkgYmUgZWl0aGVyIHVuY29tcGlsZWQgb3IgY29tcGlsZWQuXG4gKlxuICogSW4gdGhlIGZ1dHVyZSwgVGVtcGxhdGVSZXN1bHQgd2lsbCBiZSB0aGlzIHR5cGUuIElmIHlvdSB3YW50IHRvIGV4cGxpY2l0bHlcbiAqIG5vdGUgdGhhdCBhIHRlbXBsYXRlIHJlc3VsdCBpcyBwb3RlbnRpYWxseSBjb21waWxlZCwgeW91IGNhbiByZWZlcmVuY2UgdGhpc1xuICogdHlwZSBhbmQgaXQgd2lsbCBjb250aW51ZSB0byBiZWhhdmUgdGhlIHNhbWUgdGhyb3VnaCB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG4gKiBvZiBMaXQuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgY29kZSB0aGF0IHdhbnRzIHRvIHByZXBhcmUgZm9yIHRoZSBuZXh0XG4gKiBtYWpvciB2ZXJzaW9uIG9mIExpdC5cbiAqL1xuZXhwb3J0IHR5cGUgTWF5YmVDb21waWxlZFRlbXBsYXRlUmVzdWx0PFQgZXh0ZW5kcyBSZXN1bHRUeXBlID0gUmVzdWx0VHlwZT4gPVxuICB8IFVuY29tcGlsZWRUZW1wbGF0ZVJlc3VsdDxUPlxuICB8IENvbXBpbGVkVGVtcGxhdGVSZXN1bHQ7XG5cbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIHRoZSB0ZW1wbGF0ZSB0YWcgZnVuY3Rpb25zLCB7QGxpbmtjb2RlIGh0bWx9IGFuZFxuICoge0BsaW5rY29kZSBzdmd9LlxuICpcbiAqIEEgYFRlbXBsYXRlUmVzdWx0YCBvYmplY3QgaG9sZHMgYWxsIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBhIHRlbXBsYXRlXG4gKiBleHByZXNzaW9uIHJlcXVpcmVkIHRvIHJlbmRlciBpdDogdGhlIHRlbXBsYXRlIHN0cmluZ3MsIGV4cHJlc3Npb24gdmFsdWVzLFxuICogYW5kIHR5cGUgb2YgdGVtcGxhdGUgKGh0bWwgb3Igc3ZnKS5cbiAqXG4gKiBgVGVtcGxhdGVSZXN1bHRgIG9iamVjdHMgZG8gbm90IGNyZWF0ZSBhbnkgRE9NIG9uIHRoZWlyIG93bi4gVG8gY3JlYXRlIG9yXG4gKiB1cGRhdGUgRE9NIHlvdSBuZWVkIHRvIHJlbmRlciB0aGUgYFRlbXBsYXRlUmVzdWx0YC4gU2VlXG4gKiBbUmVuZGVyaW5nXShodHRwczovL2xpdC5kZXYvZG9jcy9jb21wb25lbnRzL3JlbmRlcmluZykgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogSW4gTGl0IDQsIHRoaXMgdHlwZSB3aWxsIGJlIGFuIGFsaWFzIG9mXG4gKiBNYXliZUNvbXBpbGVkVGVtcGxhdGVSZXN1bHQsIHNvIHRoYXQgY29kZSB3aWxsIGdldCB0eXBlIGVycm9ycyBpZiBpdCBhc3N1bWVzXG4gKiB0aGF0IExpdCB0ZW1wbGF0ZXMgYXJlIG5vdCBjb21waWxlZC4gV2hlbiBkZWxpYmVyYXRlbHkgd29ya2luZyB3aXRoIG9ubHlcbiAqIG9uZSwgdXNlIGVpdGhlciB7QGxpbmtjb2RlIENvbXBpbGVkVGVtcGxhdGVSZXN1bHR9IG9yXG4gKiB7QGxpbmtjb2RlIFVuY29tcGlsZWRUZW1wbGF0ZVJlc3VsdH0gZXhwbGljaXRseS5cbiAqL1xuZXhwb3J0IHR5cGUgVGVtcGxhdGVSZXN1bHQ8VCBleHRlbmRzIFJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlPiA9XG4gIFVuY29tcGlsZWRUZW1wbGF0ZVJlc3VsdDxUPjtcblxuZXhwb3J0IHR5cGUgSFRNTFRlbXBsYXRlUmVzdWx0ID0gVGVtcGxhdGVSZXN1bHQ8dHlwZW9mIEhUTUxfUkVTVUxUPjtcblxuZXhwb3J0IHR5cGUgU1ZHVGVtcGxhdGVSZXN1bHQgPSBUZW1wbGF0ZVJlc3VsdDx0eXBlb2YgU1ZHX1JFU1VMVD47XG5cbmV4cG9ydCB0eXBlIE1hdGhNTFRlbXBsYXRlUmVzdWx0ID0gVGVtcGxhdGVSZXN1bHQ8dHlwZW9mIE1BVEhNTF9SRVNVTFQ+O1xuXG4vKipcbiAqIEEgVGVtcGxhdGVSZXN1bHQgdGhhdCBoYXMgYmVlbiBjb21waWxlZCBieSBAbGl0LWxhYnMvY29tcGlsZXIsIHNraXBwaW5nIHRoZVxuICogcHJlcGFyZSBzdGVwLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkVGVtcGxhdGVSZXN1bHQge1xuICAvLyBUaGlzIGlzIGEgZmFjdG9yeSBpbiBvcmRlciB0byBtYWtlIHRlbXBsYXRlIGluaXRpYWxpemF0aW9uIGxhenlcbiAgLy8gYW5kIGFsbG93IFNoYWR5UmVuZGVyT3B0aW9ucyBzY29wZSB0byBiZSBwYXNzZWQgaW4uXG4gIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gIFsnXyRsaXRUeXBlJCddOiBDb21waWxlZFRlbXBsYXRlO1xuICB2YWx1ZXM6IHVua25vd25bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZFRlbXBsYXRlIGV4dGVuZHMgT21pdDxUZW1wbGF0ZSwgJ2VsJz4ge1xuICAvLyBlbCBpcyBvdmVycmlkZGVuIHRvIGJlIG9wdGlvbmFsLiBXZSBpbml0aWFsaXplIGl0IG9uIGZpcnN0IHJlbmRlclxuICBlbD86IEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XG5cbiAgLy8gVGhlIHByZXBhcmVkIEhUTUwgc3RyaW5nIHRvIGNyZWF0ZSBhIHRlbXBsYXRlIGVsZW1lbnQgZnJvbS5cbiAgLy8gVGhlIHR5cGUgaXMgYSBUZW1wbGF0ZVN0cmluZ3NBcnJheSB0byBndWFyYW50ZWUgdGhhdCB0aGUgdmFsdWUgY2FtZSBmcm9tXG4gIC8vIHNvdXJjZSBjb2RlLCBwcmV2ZW50aW5nIGEgSlNPTiBpbmplY3Rpb24gYXR0YWNrLlxuICBoOiBUZW1wbGF0ZVN0cmluZ3NBcnJheTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZyBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBUZW1wbGF0ZVJlc3VsdCB3aXRoXG4gKiB0aGUgZ2l2ZW4gcmVzdWx0IHR5cGUuXG4gKi9cbmNvbnN0IHRhZyA9XG4gIDxUIGV4dGVuZHMgUmVzdWx0VHlwZT4odHlwZTogVCkgPT5cbiAgKHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi52YWx1ZXM6IHVua25vd25bXSk6IFRlbXBsYXRlUmVzdWx0PFQ+ID0+IHtcbiAgICAvLyBXYXJuIGFnYWluc3QgdGVtcGxhdGVzIG9jdGFsIGVzY2FwZSBzZXF1ZW5jZXNcbiAgICAvLyBXZSBkbyB0aGlzIGhlcmUgcmF0aGVyIHRoYW4gaW4gcmVuZGVyIHNvIHRoYXQgdGhlIHdhcm5pbmcgaXMgY2xvc2VyIHRvIHRoZVxuICAgIC8vIHRlbXBsYXRlIGRlZmluaXRpb24uXG4gICAgaWYgKERFVl9NT0RFICYmIHN0cmluZ3Muc29tZSgocykgPT4gcyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU29tZSB0ZW1wbGF0ZSBzdHJpbmdzIGFyZSB1bmRlZmluZWQuXFxuJyArXG4gICAgICAgICAgJ1RoaXMgaXMgcHJvYmFibHkgY2F1c2VkIGJ5IGlsbGVnYWwgb2N0YWwgZXNjYXBlIHNlcXVlbmNlcy4nXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoREVWX01PREUpIHtcbiAgICAgIC8vIEltcG9ydCBzdGF0aWMtaHRtbC5qcyByZXN1bHRzIGluIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSB3aGljaCBnMyBkb2Vzbid0XG4gICAgICAvLyBoYW5kbGUuIEluc3RlYWQgd2Uga25vdyB0aGF0IHN0YXRpYyB2YWx1ZXMgbXVzdCBoYXZlIHRoZSBmaWVsZFxuICAgICAgLy8gYF8kbGl0U3RhdGljJGAuXG4gICAgICBpZiAoXG4gICAgICAgIHZhbHVlcy5zb21lKCh2YWwpID0+ICh2YWwgYXMge18kbGl0U3RhdGljJDogdW5rbm93bn0pPy5bJ18kbGl0U3RhdGljJCddKVxuICAgICAgKSB7XG4gICAgICAgIGlzc3VlV2FybmluZyhcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBgU3RhdGljIHZhbHVlcyAnbGl0ZXJhbCcgb3IgJ3Vuc2FmZVN0YXRpYycgY2Fubm90IGJlIHVzZWQgYXMgdmFsdWVzIHRvIG5vbi1zdGF0aWMgdGVtcGxhdGVzLlxcbmAgK1xuICAgICAgICAgICAgYFBsZWFzZSB1c2UgdGhlIHN0YXRpYyAnaHRtbCcgdGFnIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9saXQuZGV2L2RvY3MvdGVtcGxhdGVzL2V4cHJlc3Npb25zLyNzdGF0aWMtZXhwcmVzc2lvbnNgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgICAgWydfJGxpdFR5cGUkJ106IHR5cGUsXG4gICAgICBzdHJpbmdzLFxuICAgICAgdmFsdWVzLFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGhlYWRlciA9ICh0aXRsZTogc3RyaW5nKSA9PiBodG1sYDxoMT4ke3RpdGxlfTwvaDE+YDtcbiAqIGBgYFxuICpcbiAqIFRoZSBgaHRtbGAgdGFnIHJldHVybnMgYSBkZXNjcmlwdGlvbiBvZiB0aGUgRE9NIHRvIHJlbmRlciBhcyBhIHZhbHVlLiBJdCBpc1xuICogbGF6eSwgbWVhbmluZyBubyB3b3JrIGlzIGRvbmUgdW50aWwgdGhlIHRlbXBsYXRlIGlzIHJlbmRlcmVkLiBXaGVuIHJlbmRlcmluZyxcbiAqIGlmIGEgdGVtcGxhdGUgY29tZXMgZnJvbSB0aGUgc2FtZSBleHByZXNzaW9uIGFzIGEgcHJldmlvdXNseSByZW5kZXJlZCByZXN1bHQsXG4gKiBpdCdzIGVmZmljaWVudGx5IHVwZGF0ZWQgaW5zdGVhZCBvZiByZXBsYWNlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWwgPSB0YWcoSFRNTF9SRVNVTFQpO1xuXG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIFNWRyBmcmFnbWVudCB0aGF0IGNhbiBlZmZpY2llbnRseSByZW5kZXJcbiAqIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHJlY3QgPSBzdmdgPHJlY3Qgd2lkdGg9XCIxMFwiIGhlaWdodD1cIjEwXCI+PC9yZWN0PmA7XG4gKlxuICogY29uc3QgbXlJbWFnZSA9IGh0bWxgXG4gKiAgIDxzdmcgdmlld0JveD1cIjAgMCAxMCAxMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAqICAgICAke3JlY3R9XG4gKiAgIDwvc3ZnPmA7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYHN2Z2AgKnRhZyBmdW5jdGlvbiogc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgU1ZHIGZyYWdtZW50cywgb3IgZWxlbWVudHNcbiAqIHRoYXQgd291bGQgYmUgY29udGFpbmVkICoqaW5zaWRlKiogYW4gYDxzdmc+YCBIVE1MIGVsZW1lbnQuIEEgY29tbW9uIGVycm9yIGlzXG4gKiBwbGFjaW5nIGFuIGA8c3ZnPmAgKmVsZW1lbnQqIGluIGEgdGVtcGxhdGUgdGFnZ2VkIHdpdGggdGhlIGBzdmdgIHRhZ1xuICogZnVuY3Rpb24uIFRoZSBgPHN2Zz5gIGVsZW1lbnQgaXMgYW4gSFRNTCBlbGVtZW50IGFuZCBzaG91bGQgYmUgdXNlZCB3aXRoaW4gYVxuICogdGVtcGxhdGUgdGFnZ2VkIHdpdGggdGhlIHtAbGlua2NvZGUgaHRtbH0gdGFnIGZ1bmN0aW9uLlxuICpcbiAqIEluIExpdEVsZW1lbnQgdXNhZ2UsIGl0J3MgaW52YWxpZCB0byByZXR1cm4gYW4gU1ZHIGZyYWdtZW50IGZyb20gdGhlXG4gKiBgcmVuZGVyKClgIG1ldGhvZCwgYXMgdGhlIFNWRyBmcmFnbWVudCB3aWxsIGJlIGNvbnRhaW5lZCB3aXRoaW4gdGhlIGVsZW1lbnQnc1xuICogc2hhZG93IHJvb3QgYW5kIHRodXMgbm90IGJlIHByb3Blcmx5IGNvbnRhaW5lZCB3aXRoaW4gYW4gYDxzdmc+YCBIVE1MXG4gKiBlbGVtZW50LlxuICovXG5leHBvcnQgY29uc3Qgc3ZnID0gdGFnKFNWR19SRVNVTFQpO1xuXG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIE1hdGhNTCBmcmFnbWVudCB0aGF0IGNhbiBlZmZpY2llbnRseSByZW5kZXJcbiAqIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IG51bSA9IG1hdGhtbGA8bW4+MTwvbW4+YDtcbiAqXG4gKiBjb25zdCBlcSA9IGh0bWxgXG4gKiAgIDxtYXRoPlxuICogICAgICR7bnVtfVxuICogICA8L21hdGg+YDtcbiAqIGBgYFxuICpcbiAqIFRoZSBgbWF0aG1sYCAqdGFnIGZ1bmN0aW9uKiBzaG91bGQgb25seSBiZSB1c2VkIGZvciBNYXRoTUwgZnJhZ21lbnRzLCBvclxuICogZWxlbWVudHMgdGhhdCB3b3VsZCBiZSBjb250YWluZWQgKippbnNpZGUqKiBhIGA8bWF0aD5gIEhUTUwgZWxlbWVudC4gQSBjb21tb25cbiAqIGVycm9yIGlzIHBsYWNpbmcgYSBgPG1hdGg+YCAqZWxlbWVudCogaW4gYSB0ZW1wbGF0ZSB0YWdnZWQgd2l0aCB0aGUgYG1hdGhtbGBcbiAqIHRhZyBmdW5jdGlvbi4gVGhlIGA8bWF0aD5gIGVsZW1lbnQgaXMgYW4gSFRNTCBlbGVtZW50IGFuZCBzaG91bGQgYmUgdXNlZFxuICogd2l0aGluIGEgdGVtcGxhdGUgdGFnZ2VkIHdpdGggdGhlIHtAbGlua2NvZGUgaHRtbH0gdGFnIGZ1bmN0aW9uLlxuICpcbiAqIEluIExpdEVsZW1lbnQgdXNhZ2UsIGl0J3MgaW52YWxpZCB0byByZXR1cm4gYW4gTWF0aE1MIGZyYWdtZW50IGZyb20gdGhlXG4gKiBgcmVuZGVyKClgIG1ldGhvZCwgYXMgdGhlIE1hdGhNTCBmcmFnbWVudCB3aWxsIGJlIGNvbnRhaW5lZCB3aXRoaW4gdGhlXG4gKiBlbGVtZW50J3Mgc2hhZG93IHJvb3QgYW5kIHRodXMgbm90IGJlIHByb3Blcmx5IGNvbnRhaW5lZCB3aXRoaW4gYSBgPG1hdGg+YFxuICogSFRNTCBlbGVtZW50LlxuICovXG5leHBvcnQgY29uc3QgbWF0aG1sID0gdGFnKE1BVEhNTF9SRVNVTFQpO1xuXG4vKipcbiAqIEEgc2VudGluZWwgdmFsdWUgdGhhdCBzaWduYWxzIHRoYXQgYSB2YWx1ZSB3YXMgaGFuZGxlZCBieSBhIGRpcmVjdGl2ZSBhbmRcbiAqIHNob3VsZCBub3QgYmUgd3JpdHRlbiB0byB0aGUgRE9NLlxuICovXG5leHBvcnQgY29uc3Qgbm9DaGFuZ2UgPSBTeW1ib2wuZm9yKCdsaXQtbm9DaGFuZ2UnKTtcblxuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyBhIENoaWxkUGFydCB0byBmdWxseSBjbGVhciBpdHMgY29udGVudC5cbiAqXG4gKiBgYGB0c1xuICogY29uc3QgYnV0dG9uID0gaHRtbGAke1xuICogIHVzZXIuaXNBZG1pblxuICogICAgPyBodG1sYDxidXR0b24+REVMRVRFPC9idXR0b24+YFxuICogICAgOiBub3RoaW5nXG4gKiB9YDtcbiAqIGBgYFxuICpcbiAqIFByZWZlciB1c2luZyBgbm90aGluZ2Agb3ZlciBvdGhlciBmYWxzeSB2YWx1ZXMgYXMgaXQgcHJvdmlkZXMgYSBjb25zaXN0ZW50XG4gKiBiZWhhdmlvciBiZXR3ZWVuIHZhcmlvdXMgZXhwcmVzc2lvbiBiaW5kaW5nIGNvbnRleHRzLlxuICpcbiAqIEluIGNoaWxkIGV4cHJlc3Npb25zLCBgdW5kZWZpbmVkYCwgYG51bGxgLCBgJydgLCBhbmQgYG5vdGhpbmdgIGFsbCBiZWhhdmUgdGhlXG4gKiBzYW1lIGFuZCByZW5kZXIgbm8gbm9kZXMuIEluIGF0dHJpYnV0ZSBleHByZXNzaW9ucywgYG5vdGhpbmdgIF9yZW1vdmVzXyB0aGVcbiAqIGF0dHJpYnV0ZSwgd2hpbGUgYHVuZGVmaW5lZGAgYW5kIGBudWxsYCB3aWxsIHJlbmRlciBhbiBlbXB0eSBzdHJpbmcuIEluXG4gKiBwcm9wZXJ0eSBleHByZXNzaW9ucyBgbm90aGluZ2AgYmVjb21lcyBgdW5kZWZpbmVkYC5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdGhpbmcgPSBTeW1ib2wuZm9yKCdsaXQtbm90aGluZycpO1xuXG4vKipcbiAqIFRoZSBjYWNoZSBvZiBwcmVwYXJlZCB0ZW1wbGF0ZXMsIGtleWVkIGJ5IHRoZSB0YWdnZWQgVGVtcGxhdGVTdHJpbmdzQXJyYXlcbiAqIGFuZCBfbm90XyBhY2NvdW50aW5nIGZvciB0aGUgc3BlY2lmaWMgdGVtcGxhdGUgdGFnIHVzZWQuIFRoaXMgbWVhbnMgdGhhdFxuICogdGVtcGxhdGUgdGFncyBjYW5ub3QgYmUgZHluYW1pYyAtIHRoZXkgbXVzdCBzdGF0aWNhbGx5IGJlIG9uZSBvZiBodG1sLCBzdmcsXG4gKiBvciBhdHRyLiBUaGlzIHJlc3RyaWN0aW9uIHNpbXBsaWZpZXMgdGhlIGNhY2hlIGxvb2t1cCwgd2hpY2ggaXMgb24gdGhlIGhvdFxuICogcGF0aCBmb3IgcmVuZGVyaW5nLlxuICovXG5jb25zdCB0ZW1wbGF0ZUNhY2hlID0gbmV3IFdlYWtNYXA8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlPigpO1xuXG4vKipcbiAqIE9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMgZm9yIGNvbnRyb2xsaW5nIGxpdC1odG1sIHJlbmRlcmluZy4gTm90ZSB0aGF0XG4gKiB3aGlsZSBgcmVuZGVyYCBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIGBjb250YWluZXJgIChhbmRcbiAqIGByZW5kZXJCZWZvcmVgIHJlZmVyZW5jZSBub2RlKSB0byBlZmZpY2llbnRseSB1cGRhdGUgdGhlIHJlbmRlcmVkIGNvbnRlbnQsXG4gKiBvbmx5IHRoZSBvcHRpb25zIHBhc3NlZCBpbiBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlciBhcmUgcmVzcGVjdGVkIGR1cmluZ1xuICogdGhlIGxpZmV0aW1lIG9mIHJlbmRlcnMgdG8gdGhhdCB1bmlxdWUgYGNvbnRhaW5lcmAgKyBgcmVuZGVyQmVmb3JlYFxuICogY29tYmluYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdG8gdXNlIGFzIHRoZSBgdGhpc2AgdmFsdWUgZm9yIGV2ZW50IGxpc3RlbmVycy4gSXQncyBvZnRlblxuICAgKiB1c2VmdWwgdG8gc2V0IHRoaXMgdG8gdGhlIGhvc3QgY29tcG9uZW50IHJlbmRlcmluZyBhIHRlbXBsYXRlLlxuICAgKi9cbiAgaG9zdD86IG9iamVjdDtcbiAgLyoqXG4gICAqIEEgRE9NIG5vZGUgYmVmb3JlIHdoaWNoIHRvIHJlbmRlciBjb250ZW50IGluIHRoZSBjb250YWluZXIuXG4gICAqL1xuICByZW5kZXJCZWZvcmU/OiBDaGlsZE5vZGUgfCBudWxsO1xuICAvKipcbiAgICogTm9kZSB1c2VkIGZvciBjbG9uaW5nIHRoZSB0ZW1wbGF0ZSAoYGltcG9ydE5vZGVgIHdpbGwgYmUgY2FsbGVkIG9uIHRoaXNcbiAgICogbm9kZSkuIFRoaXMgY29udHJvbHMgdGhlIGBvd25lckRvY3VtZW50YCBvZiB0aGUgcmVuZGVyZWQgRE9NLCBhbG9uZyB3aXRoXG4gICAqIGFueSBpbmhlcml0ZWQgY29udGV4dC4gRGVmYXVsdHMgdG8gdGhlIGdsb2JhbCBgZG9jdW1lbnRgLlxuICAgKi9cbiAgY3JlYXRpb25TY29wZT86IHtpbXBvcnROb2RlKG5vZGU6IE5vZGUsIGRlZXA/OiBib29sZWFuKTogTm9kZX07XG4gIC8qKlxuICAgKiBUaGUgaW5pdGlhbCBjb25uZWN0ZWQgc3RhdGUgZm9yIHRoZSB0b3AtbGV2ZWwgcGFydCBiZWluZyByZW5kZXJlZC4gSWYgbm9cbiAgICogYGlzQ29ubmVjdGVkYCBvcHRpb24gaXMgc2V0LCBgQXN5bmNEaXJlY3RpdmVgcyB3aWxsIGJlIGNvbm5lY3RlZCBieVxuICAgKiBkZWZhdWx0LiBTZXQgdG8gYGZhbHNlYCBpZiB0aGUgaW5pdGlhbCByZW5kZXIgb2NjdXJzIGluIGEgZGlzY29ubmVjdGVkIHRyZWVcbiAgICogYW5kIGBBc3luY0RpcmVjdGl2ZWBzIHNob3VsZCBzZWUgYGlzQ29ubmVjdGVkID09PSBmYWxzZWAgZm9yIHRoZWlyIGluaXRpYWxcbiAgICogcmVuZGVyLiBUaGUgYHBhcnQuc2V0Q29ubmVjdGVkKClgIG1ldGhvZCBtdXN0IGJlIHVzZWQgc3Vic2VxdWVudCB0byBpbml0aWFsXG4gICAqIHJlbmRlciB0byBjaGFuZ2UgdGhlIGNvbm5lY3RlZCBzdGF0ZSBvZiB0aGUgcGFydC5cbiAgICovXG4gIGlzQ29ubmVjdGVkPzogYm9vbGVhbjtcbn1cblxuY29uc3Qgd2Fsa2VyID0gZC5jcmVhdGVUcmVlV2Fsa2VyKFxuICBkLFxuICAxMjkgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR9ICovXG4pO1xuXG5sZXQgc2FuaXRpemVyRmFjdG9yeUludGVybmFsOiBTYW5pdGl6ZXJGYWN0b3J5ID0gbm9vcFNhbml0aXplcjtcblxuLy9cbi8vIENsYXNzZXMgb25seSBiZWxvdyBoZXJlLCBjb25zdCB2YXJpYWJsZSBkZWNsYXJhdGlvbnMgb25seSBhYm92ZSBoZXJlLi4uXG4vL1xuLy8gS2VlcGluZyB2YXJpYWJsZSBkZWNsYXJhdGlvbnMgYW5kIGNsYXNzZXMgdG9nZXRoZXIgaW1wcm92ZXMgbWluaWZpY2F0aW9uLlxuLy8gSW50ZXJmYWNlcyBhbmQgdHlwZSBhbGlhc2VzIGNhbiBiZSBpbnRlcmxlYXZlZCBmcmVlbHkuXG4vL1xuXG4vLyBUeXBlIGZvciBjbGFzc2VzIHRoYXQgaGF2ZSBhIGBfZGlyZWN0aXZlYCBvciBgX2RpcmVjdGl2ZXNbXWAgZmllbGQsIHVzZWQgYnlcbi8vIGByZXNvbHZlRGlyZWN0aXZlYFxuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RpdmVQYXJlbnQge1xuICBfJHBhcmVudD86IERpcmVjdGl2ZVBhcmVudDtcbiAgXyRpc0Nvbm5lY3RlZDogYm9vbGVhbjtcbiAgX19kaXJlY3RpdmU/OiBEaXJlY3RpdmU7XG4gIF9fZGlyZWN0aXZlcz86IEFycmF5PERpcmVjdGl2ZSB8IHVuZGVmaW5lZD47XG59XG5cbmZ1bmN0aW9uIHRydXN0RnJvbVRlbXBsYXRlU3RyaW5nKFxuICB0c2E6IFRlbXBsYXRlU3RyaW5nc0FycmF5LFxuICBzdHJpbmdGcm9tVFNBOiBzdHJpbmdcbik6IFRydXN0ZWRIVE1MIHtcbiAgLy8gQSBzZWN1cml0eSBjaGVjayB0byBwcmV2ZW50IHNwb29maW5nIG9mIExpdCB0ZW1wbGF0ZSByZXN1bHRzLlxuICAvLyBJbiB0aGUgZnV0dXJlLCB3ZSBtYXkgYmUgYWJsZSB0byByZXBsYWNlIHRoaXMgd2l0aCBBcnJheS5pc1RlbXBsYXRlT2JqZWN0LFxuICAvLyB0aG91Z2ggd2UgbWlnaHQgbmVlZCB0byBtYWtlIHRoYXQgY2hlY2sgaW5zaWRlIG9mIHRoZSBodG1sIGFuZCBzdmdcbiAgLy8gZnVuY3Rpb25zLCBiZWNhdXNlIHByZWNvbXBpbGVkIHRlbXBsYXRlcyBkb24ndCBjb21lIGluIGFzXG4gIC8vIFRlbXBsYXRlU3RyaW5nQXJyYXkgb2JqZWN0cy5cbiAgaWYgKCFpc0FycmF5KHRzYSkgfHwgIXRzYS5oYXNPd25Qcm9wZXJ0eSgncmF3JykpIHtcbiAgICBsZXQgbWVzc2FnZSA9ICdpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXknO1xuICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgbWVzc2FnZSA9IGBcbiAgICAgICAgICBJbnRlcm5hbCBFcnJvcjogZXhwZWN0ZWQgdGVtcGxhdGUgc3RyaW5ncyB0byBiZSBhbiBhcnJheVxuICAgICAgICAgIHdpdGggYSAncmF3JyBmaWVsZC4gRmFraW5nIGEgdGVtcGxhdGUgc3RyaW5ncyBhcnJheSBieVxuICAgICAgICAgIGNhbGxpbmcgaHRtbCBvciBzdmcgbGlrZSBhbiBvcmRpbmFyeSBmdW5jdGlvbiBpcyBlZmZlY3RpdmVseVxuICAgICAgICAgIHRoZSBzYW1lIGFzIGNhbGxpbmcgdW5zYWZlSHRtbCBhbmQgY2FuIGxlYWQgdG8gbWFqb3Igc2VjdXJpdHlcbiAgICAgICAgICBpc3N1ZXMsIGUuZy4gb3BlbmluZyB5b3VyIGNvZGUgdXAgdG8gWFNTIGF0dGFja3MuXG4gICAgICAgICAgSWYgeW91J3JlIHVzaW5nIHRoZSBodG1sIG9yIHN2ZyB0YWdnZWQgdGVtcGxhdGUgZnVuY3Rpb25zIG5vcm1hbGx5XG4gICAgICAgICAgYW5kIHN0aWxsIHNlZWluZyB0aGlzIGVycm9yLCBwbGVhc2UgZmlsZSBhIGJ1ZyBhdFxuICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9saXQvbGl0L2lzc3Vlcy9uZXc/dGVtcGxhdGU9YnVnX3JlcG9ydC5tZFxuICAgICAgICAgIGFuZCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgYnVpbGQgdG9vbGluZywgaWYgYW55LlxuICAgICAgICBgXG4gICAgICAgIC50cmltKClcbiAgICAgICAgLnJlcGxhY2UoL1xcbiAqL2csICdcXG4nKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBwb2xpY3kgIT09IHVuZGVmaW5lZFxuICAgID8gcG9saWN5LmNyZWF0ZUhUTUwoc3RyaW5nRnJvbVRTQSlcbiAgICA6IChzdHJpbmdGcm9tVFNBIGFzIHVua25vd24gYXMgVHJ1c3RlZEhUTUwpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gSFRNTCBzdHJpbmcgZm9yIHRoZSBnaXZlbiBUZW1wbGF0ZVN0cmluZ3NBcnJheSBhbmQgcmVzdWx0IHR5cGVcbiAqIChIVE1MIG9yIFNWRyksIGFsb25nIHdpdGggdGhlIGNhc2Utc2Vuc2l0aXZlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcyBpblxuICogdGVtcGxhdGUgb3JkZXIuIFRoZSBIVE1MIGNvbnRhaW5zIGNvbW1lbnQgbWFya2VycyBkZW5vdGluZyB0aGUgYENoaWxkUGFydGBzXG4gKiBhbmQgc3VmZml4ZXMgb24gYm91bmQgYXR0cmlidXRlcyBkZW5vdGluZyB0aGUgYEF0dHJpYnV0ZVBhcnRzYC5cbiAqXG4gKiBAcGFyYW0gc3RyaW5ncyB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XG4gKiBAcGFyYW0gdHlwZSBIVE1MIG9yIFNWR1xuICogQHJldHVybiBBcnJheSBjb250YWluaW5nIGBbaHRtbCwgYXR0ck5hbWVzXWAgKGFycmF5IHJldHVybmVkIGZvciB0ZXJzZW5lc3MsXG4gKiAgICAgdG8gYXZvaWQgb2JqZWN0IGZpZWxkcyBzaW5jZSB0aGlzIGNvZGUgaXMgc2hhcmVkIHdpdGggbm9uLW1pbmlmaWVkIFNTUlxuICogICAgIGNvZGUpXG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlSHRtbCA9IChcbiAgc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksXG4gIHR5cGU6IFJlc3VsdFR5cGVcbik6IFtUcnVzdGVkSFRNTCwgQXJyYXk8c3RyaW5nPl0gPT4ge1xuICAvLyBJbnNlcnQgbWFrZXJzIGludG8gdGhlIHRlbXBsYXRlIEhUTUwgdG8gcmVwcmVzZW50IHRoZSBwb3NpdGlvbiBvZlxuICAvLyBiaW5kaW5ncy4gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzdHJpbmdzIHRvIGRldGVybWluZSB0aGVcbiAgLy8gc3ludGFjdGljIHBvc2l0aW9uIG9mIHRoZSBiaW5kaW5ncy4gVGhleSBjYW4gYmUgaW4gdGV4dCBwb3NpdGlvbiwgd2hlcmVcbiAgLy8gd2UgaW5zZXJ0IGFuIEhUTUwgY29tbWVudCwgYXR0cmlidXRlIHZhbHVlIHBvc2l0aW9uLCB3aGVyZSB3ZSBpbnNlcnQgYVxuICAvLyBzZW50aW5lbCBzdHJpbmcgYW5kIHJlLXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZSwgb3IgaW5zaWRlIGEgdGFnIHdoZXJlXG4gIC8vIHdlIGluc2VydCB0aGUgc2VudGluZWwgc3RyaW5nLlxuICBjb25zdCBsID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAvLyBTdG9yZXMgdGhlIGNhc2Utc2Vuc2l0aXZlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcyBpbiB0aGUgb3JkZXIgb2YgdGhlaXJcbiAgLy8gcGFydHMuIEVsZW1lbnRQYXJ0cyBhcmUgYWxzbyByZWZsZWN0ZWQgaW4gdGhpcyBhcnJheSBhcyB1bmRlZmluZWRcbiAgLy8gcmF0aGVyIHRoYW4gYSBzdHJpbmcsIHRvIGRpc2FtYmlndWF0ZSBmcm9tIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAgY29uc3QgYXR0ck5hbWVzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gIGxldCBodG1sID1cbiAgICB0eXBlID09PSBTVkdfUkVTVUxUID8gJzxzdmc+JyA6IHR5cGUgPT09IE1BVEhNTF9SRVNVTFQgPyAnPG1hdGg+JyA6ICcnO1xuXG4gIC8vIFdoZW4gd2UncmUgaW5zaWRlIGEgcmF3IHRleHQgdGFnIChub3QgaXQncyB0ZXh0IGNvbnRlbnQpLCB0aGUgcmVnZXhcbiAgLy8gd2lsbCBzdGlsbCBiZSB0YWdSZWdleCBzbyB3ZSBjYW4gZmluZCBhdHRyaWJ1dGVzLCBidXQgd2lsbCBzd2l0Y2ggdG9cbiAgLy8gdGhpcyByZWdleCB3aGVuIHRoZSB0YWcgZW5kcy5cbiAgbGV0IHJhd1RleHRFbmRSZWdleDogUmVnRXhwIHwgdW5kZWZpbmVkO1xuXG4gIC8vIFRoZSBjdXJyZW50IHBhcnNpbmcgc3RhdGUsIHJlcHJlc2VudGVkIGFzIGEgcmVmZXJlbmNlIHRvIG9uZSBvZiB0aGVcbiAgLy8gcmVnZXhlc1xuICBsZXQgcmVnZXggPSB0ZXh0RW5kUmVnZXg7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBzID0gc3RyaW5nc1tpXTtcbiAgICAvLyBUaGUgaW5kZXggb2YgdGhlIGVuZCBvZiB0aGUgbGFzdCBhdHRyaWJ1dGUgbmFtZS4gV2hlbiB0aGlzIGlzXG4gICAgLy8gcG9zaXRpdmUgYXQgZW5kIG9mIGEgc3RyaW5nLCBpdCBtZWFucyB3ZSdyZSBpbiBhbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAvLyBwb3NpdGlvbiBhbmQgbmVlZCB0byByZXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICAvLyBXZSBhbHNvIHVzZSBhIHNwZWNpYWwgdmFsdWUgb2YgLTIgdG8gaW5kaWNhdGUgdGhhdCB3ZSBlbmNvdW50ZXJlZFxuICAgIC8vIHRoZSBlbmQgb2YgYSBzdHJpbmcgaW4gYXR0cmlidXRlIG5hbWUgcG9zaXRpb24uXG4gICAgbGV0IGF0dHJOYW1lRW5kSW5kZXggPSAtMTtcbiAgICBsZXQgYXR0ck5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICBsZXQgbWF0Y2ghOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsO1xuXG4gICAgLy8gVGhlIGNvbmRpdGlvbnMgaW4gdGhpcyBsb29wIGhhbmRsZSB0aGUgY3VycmVudCBwYXJzZSBzdGF0ZSwgYW5kIHRoZVxuICAgIC8vIGFzc2lnbm1lbnRzIHRvIHRoZSBgcmVnZXhgIHZhcmlhYmxlIGFyZSB0aGUgc3RhdGUgdHJhbnNpdGlvbnMuXG4gICAgd2hpbGUgKGxhc3RJbmRleCA8IHMubGVuZ3RoKSB7XG4gICAgICAvLyBNYWtlIHN1cmUgd2Ugc3RhcnQgc2VhcmNoaW5nIGZyb20gd2hlcmUgd2UgcHJldmlvdXNseSBsZWZ0IG9mZlxuICAgICAgcmVnZXgubGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgbWF0Y2ggPSByZWdleC5leGVjKHMpO1xuICAgICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbGFzdEluZGV4ID0gcmVnZXgubGFzdEluZGV4O1xuICAgICAgaWYgKHJlZ2V4ID09PSB0ZXh0RW5kUmVnZXgpIHtcbiAgICAgICAgaWYgKG1hdGNoW0NPTU1FTlRfU1RBUlRdID09PSAnIS0tJykge1xuICAgICAgICAgIHJlZ2V4ID0gY29tbWVudEVuZFJlZ2V4O1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoW0NPTU1FTlRfU1RBUlRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBXZSBzdGFydGVkIGEgd2VpcmQgY29tbWVudCwgbGlrZSA8L3tcbiAgICAgICAgICByZWdleCA9IGNvbW1lbnQyRW5kUmVnZXg7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbVEFHX05BTUVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmF3VGV4dEVsZW1lbnQudGVzdChtYXRjaFtUQUdfTkFNRV0pKSB7XG4gICAgICAgICAgICAvLyBSZWNvcmQgaWYgd2UgZW5jb3VudGVyIGEgcmF3LXRleHQgZWxlbWVudC4gV2UnbGwgc3dpdGNoIHRvXG4gICAgICAgICAgICAvLyB0aGlzIHJlZ2V4IGF0IHRoZSBlbmQgb2YgdGhlIHRhZy5cbiAgICAgICAgICAgIHJhd1RleHRFbmRSZWdleCA9IG5ldyBSZWdFeHAoYDwvJHttYXRjaFtUQUdfTkFNRV19YCwgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVnZXggPSB0YWdFbmRSZWdleDtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaFtEWU5BTUlDX1RBR19OQU1FXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKERFVl9NT0RFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICdCaW5kaW5ncyBpbiB0YWcgbmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2Ugc3RhdGljIHRlbXBsYXRlcyBpbnN0ZWFkLiAnICtcbiAgICAgICAgICAgICAgICAnU2VlIGh0dHBzOi8vbGl0LmRldi9kb2NzL3RlbXBsYXRlcy9leHByZXNzaW9ucy8jc3RhdGljLWV4cHJlc3Npb25zJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVnZXggPSB0YWdFbmRSZWdleDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWdleCA9PT0gdGFnRW5kUmVnZXgpIHtcbiAgICAgICAgaWYgKG1hdGNoW0VOVElSRV9NQVRDSF0gPT09ICc+Jykge1xuICAgICAgICAgIC8vIEVuZCBvZiBhIHRhZy4gSWYgd2UgaGFkIHN0YXJ0ZWQgYSByYXctdGV4dCBlbGVtZW50LCB1c2UgdGhhdFxuICAgICAgICAgIC8vIHJlZ2V4XG4gICAgICAgICAgcmVnZXggPSByYXdUZXh0RW5kUmVnZXggPz8gdGV4dEVuZFJlZ2V4O1xuICAgICAgICAgIC8vIFdlIG1heSBiZSBlbmRpbmcgYW4gdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLCBzbyBtYWtlIHN1cmUgd2VcbiAgICAgICAgICAvLyBjbGVhciBhbnkgcGVuZGluZyBhdHRyTmFtZUVuZEluZGV4XG4gICAgICAgICAgYXR0ck5hbWVFbmRJbmRleCA9IC0xO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoW0FUVFJJQlVURV9OQU1FXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gQXR0cmlidXRlIG5hbWUgcG9zaXRpb25cbiAgICAgICAgICBhdHRyTmFtZUVuZEluZGV4ID0gLTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0ck5hbWVFbmRJbmRleCA9IHJlZ2V4Lmxhc3RJbmRleCAtIG1hdGNoW1NQQUNFU19BTkRfRVFVQUxTXS5sZW5ndGg7XG4gICAgICAgICAgYXR0ck5hbWUgPSBtYXRjaFtBVFRSSUJVVEVfTkFNRV07XG4gICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgbWF0Y2hbUVVPVEVfQ0hBUl0gPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IHRhZ0VuZFJlZ2V4XG4gICAgICAgICAgICAgIDogbWF0Y2hbUVVPVEVfQ0hBUl0gPT09ICdcIidcbiAgICAgICAgICAgICAgICA/IGRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4XG4gICAgICAgICAgICAgICAgOiBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcmVnZXggPT09IGRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4IHx8XG4gICAgICAgIHJlZ2V4ID09PSBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleFxuICAgICAgKSB7XG4gICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2V4ID09PSBjb21tZW50RW5kUmVnZXggfHwgcmVnZXggPT09IGNvbW1lbnQyRW5kUmVnZXgpIHtcbiAgICAgICAgcmVnZXggPSB0ZXh0RW5kUmVnZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3Qgb25lIG9mIHRoZSBmaXZlIHN0YXRlIHJlZ2V4ZXMsIHNvIGl0IG11c3QgYmUgdGhlIGR5bmFtaWNhbGx5XG4gICAgICAgIC8vIGNyZWF0ZWQgcmF3IHRleHQgcmVnZXggYW5kIHdlJ3JlIGF0IHRoZSBjbG9zZSBvZiB0aGF0IGVsZW1lbnQuXG4gICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICAgIHJhd1RleHRFbmRSZWdleCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoREVWX01PREUpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBhdHRyTmFtZUVuZEluZGV4LCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB3ZSBzaG91bGRcbiAgICAgIC8vIHJld3JpdGUgdGhlIGF0dHJpYnV0ZSBuYW1lLCBhc3NlcnQgdGhhdCB3ZSdyZSBpbiBhIHZhbGlkIGF0dHJpYnV0ZVxuICAgICAgLy8gcG9zaXRpb24gLSBlaXRoZXIgaW4gYSB0YWcsIG9yIGEgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgIGNvbnNvbGUuYXNzZXJ0KFxuICAgICAgICBhdHRyTmFtZUVuZEluZGV4ID09PSAtMSB8fFxuICAgICAgICAgIHJlZ2V4ID09PSB0YWdFbmRSZWdleCB8fFxuICAgICAgICAgIHJlZ2V4ID09PSBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleCB8fFxuICAgICAgICAgIHJlZ2V4ID09PSBkb3VibGVRdW90ZUF0dHJFbmRSZWdleCxcbiAgICAgICAgJ3VuZXhwZWN0ZWQgcGFyc2Ugc3RhdGUgQidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBmb3VyIGNhc2VzOlxuICAgIC8vICAxLiBXZSdyZSBpbiB0ZXh0IHBvc2l0aW9uLCBhbmQgbm90IGluIGEgcmF3IHRleHQgZWxlbWVudFxuICAgIC8vICAgICAocmVnZXggPT09IHRleHRFbmRSZWdleCk6IGluc2VydCBhIGNvbW1lbnQgbWFya2VyLlxuICAgIC8vICAyLiBXZSBoYXZlIGEgbm9uLW5lZ2F0aXZlIGF0dHJOYW1lRW5kSW5kZXggd2hpY2ggbWVhbnMgd2UgbmVlZCB0b1xuICAgIC8vICAgICByZXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZSB0byBhZGQgYSBib3VuZCBhdHRyaWJ1dGUgc3VmZml4LlxuICAgIC8vICAzLiBXZSdyZSBhdCB0aGUgbm9uLWZpcnN0IGJpbmRpbmcgaW4gYSBtdWx0aS1iaW5kaW5nIGF0dHJpYnV0ZSwgdXNlIGFcbiAgICAvLyAgICAgcGxhaW4gbWFya2VyLlxuICAgIC8vICA0LiBXZSdyZSBzb21ld2hlcmUgZWxzZSBpbnNpZGUgdGhlIHRhZy4gSWYgd2UncmUgaW4gYXR0cmlidXRlIG5hbWVcbiAgICAvLyAgICAgcG9zaXRpb24gKGF0dHJOYW1lRW5kSW5kZXggPT09IC0yKSwgYWRkIGEgc2VxdWVudGlhbCBzdWZmaXggdG9cbiAgICAvLyAgICAgZ2VuZXJhdGUgYSB1bmlxdWUgYXR0cmlidXRlIG5hbWUuXG5cbiAgICAvLyBEZXRlY3QgYSBiaW5kaW5nIG5leHQgdG8gc2VsZi1jbG9zaW5nIHRhZyBlbmQgYW5kIGluc2VydCBhIHNwYWNlIHRvXG4gICAgLy8gc2VwYXJhdGUgdGhlIG1hcmtlciBmcm9tIHRoZSB0YWcgZW5kOlxuICAgIGNvbnN0IGVuZCA9XG4gICAgICByZWdleCA9PT0gdGFnRW5kUmVnZXggJiYgc3RyaW5nc1tpICsgMV0uc3RhcnRzV2l0aCgnLz4nKSA/ICcgJyA6ICcnO1xuICAgIGh0bWwgKz1cbiAgICAgIHJlZ2V4ID09PSB0ZXh0RW5kUmVnZXhcbiAgICAgICAgPyBzICsgbm9kZU1hcmtlclxuICAgICAgICA6IGF0dHJOYW1lRW5kSW5kZXggPj0gMFxuICAgICAgICAgID8gKGF0dHJOYW1lcy5wdXNoKGF0dHJOYW1lISksXG4gICAgICAgICAgICBzLnNsaWNlKDAsIGF0dHJOYW1lRW5kSW5kZXgpICtcbiAgICAgICAgICAgICAgYm91bmRBdHRyaWJ1dGVTdWZmaXggK1xuICAgICAgICAgICAgICBzLnNsaWNlKGF0dHJOYW1lRW5kSW5kZXgpKSArXG4gICAgICAgICAgICBtYXJrZXIgK1xuICAgICAgICAgICAgZW5kXG4gICAgICAgICAgOiBzICsgbWFya2VyICsgKGF0dHJOYW1lRW5kSW5kZXggPT09IC0yID8gaSA6IGVuZCk7XG4gIH1cblxuICBjb25zdCBodG1sUmVzdWx0OiBzdHJpbmcgfCBUcnVzdGVkSFRNTCA9XG4gICAgaHRtbCArXG4gICAgKHN0cmluZ3NbbF0gfHwgJzw/PicpICtcbiAgICAodHlwZSA9PT0gU1ZHX1JFU1VMVCA/ICc8L3N2Zz4nIDogdHlwZSA9PT0gTUFUSE1MX1JFU1VMVCA/ICc8L21hdGg+JyA6ICcnKTtcblxuICAvLyBSZXR1cm5lZCBhcyBhbiBhcnJheSBmb3IgdGVyc2VuZXNzXG4gIHJldHVybiBbdHJ1c3RGcm9tVGVtcGxhdGVTdHJpbmcoc3RyaW5ncywgaHRtbFJlc3VsdCksIGF0dHJOYW1lc107XG59O1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSB7VGVtcGxhdGV9O1xuY2xhc3MgVGVtcGxhdGUge1xuICAvKiogQGludGVybmFsICovXG4gIGVsITogSFRNTFRlbXBsYXRlRWxlbWVudDtcblxuICBwYXJ0czogQXJyYXk8VGVtcGxhdGVQYXJ0PiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAge3N0cmluZ3MsIFsnXyRsaXRUeXBlJCddOiB0eXBlfTogVW5jb21waWxlZFRlbXBsYXRlUmVzdWx0LFxuICAgIG9wdGlvbnM/OiBSZW5kZXJPcHRpb25zXG4gICkge1xuICAgIGxldCBub2RlOiBOb2RlIHwgbnVsbDtcbiAgICBsZXQgbm9kZUluZGV4ID0gMDtcbiAgICBsZXQgYXR0ck5hbWVJbmRleCA9IDA7XG4gICAgY29uc3QgcGFydENvdW50ID0gc3RyaW5ncy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IHBhcnRzID0gdGhpcy5wYXJ0cztcblxuICAgIC8vIENyZWF0ZSB0ZW1wbGF0ZSBlbGVtZW50XG4gICAgY29uc3QgW2h0bWwsIGF0dHJOYW1lc10gPSBnZXRUZW1wbGF0ZUh0bWwoc3RyaW5ncywgdHlwZSk7XG4gICAgdGhpcy5lbCA9IFRlbXBsYXRlLmNyZWF0ZUVsZW1lbnQoaHRtbCwgb3B0aW9ucyk7XG4gICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gdGhpcy5lbC5jb250ZW50O1xuXG4gICAgLy8gUmUtcGFyZW50IFNWRyBvciBNYXRoTUwgbm9kZXMgaW50byB0ZW1wbGF0ZSByb290XG4gICAgaWYgKHR5cGUgPT09IFNWR19SRVNVTFQgfHwgdHlwZSA9PT0gTUFUSE1MX1JFU1VMVCkge1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuZWwuY29udGVudC5maXJzdENoaWxkITtcbiAgICAgIHdyYXBwZXIucmVwbGFjZVdpdGgoLi4ud3JhcHBlci5jaGlsZE5vZGVzKTtcbiAgICB9XG5cbiAgICAvLyBXYWxrIHRoZSB0ZW1wbGF0ZSB0byBmaW5kIGJpbmRpbmcgbWFya2VycyBhbmQgY3JlYXRlIFRlbXBsYXRlUGFydHNcbiAgICB3aGlsZSAoKG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKSkgIT09IG51bGwgJiYgcGFydHMubGVuZ3RoIDwgcGFydENvdW50KSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAoREVWX01PREUpIHtcbiAgICAgICAgICBjb25zdCB0YWcgPSAobm9kZSBhcyBFbGVtZW50KS5sb2NhbE5hbWU7XG4gICAgICAgICAgLy8gV2FybiBpZiBgdGV4dGFyZWFgIGluY2x1ZGVzIGFuIGV4cHJlc3Npb24gYW5kIHRocm93IGlmIGB0ZW1wbGF0ZWBcbiAgICAgICAgICAvLyBkb2VzIHNpbmNlIHRoZXNlIGFyZSBub3Qgc3VwcG9ydGVkLiBXZSBkbyB0aGlzIGJ5IGNoZWNraW5nXG4gICAgICAgICAgLy8gaW5uZXJIVE1MIGZvciBhbnl0aGluZyB0aGF0IGxvb2tzIGxpa2UgYSBtYXJrZXIuIFRoaXMgY2F0Y2hlc1xuICAgICAgICAgIC8vIGNhc2VzIGxpa2UgYmluZGluZ3MgaW4gdGV4dGFyZWEgdGhlcmUgbWFya2VycyB0dXJuIGludG8gdGV4dCBub2Rlcy5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvXig/OnRleHRhcmVhfHRlbXBsYXRlKSQvaSEudGVzdCh0YWcpICYmXG4gICAgICAgICAgICAobm9kZSBhcyBFbGVtZW50KS5pbm5lckhUTUwuaW5jbHVkZXMobWFya2VyKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgbSA9XG4gICAgICAgICAgICAgIGBFeHByZXNzaW9ucyBhcmUgbm90IHN1cHBvcnRlZCBpbnNpZGUgXFxgJHt0YWd9XFxgIGAgK1xuICAgICAgICAgICAgICBgZWxlbWVudHMuIFNlZSBodHRwczovL2xpdC5kZXYvbXNnL2V4cHJlc3Npb24taW4tJHt0YWd9IGZvciBtb3JlIGAgK1xuICAgICAgICAgICAgICBgaW5mb3JtYXRpb24uYDtcbiAgICAgICAgICAgIGlmICh0YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG0pO1xuICAgICAgICAgICAgfSBlbHNlIGlzc3VlV2FybmluZygnJywgbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8gKGp1c3RpbmZhZ25hbmkpOiBmb3IgYXR0ZW1wdGVkIGR5bmFtaWMgdGFnIG5hbWVzLCB3ZSBkb24ndFxuICAgICAgICAvLyBpbmNyZW1lbnQgdGhlIGJpbmRpbmdJbmRleCwgYW5kIGl0J2xsIGJlIG9mZiBieSAxIGluIHRoZSBlbGVtZW50XG4gICAgICAgIC8vIGFuZCBvZmYgYnkgdHdvIGFmdGVyIGl0LlxuICAgICAgICBpZiAoKG5vZGUgYXMgRWxlbWVudCkuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZU5hbWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChuYW1lLmVuZHNXaXRoKGJvdW5kQXR0cmlidXRlU3VmZml4KSkge1xuICAgICAgICAgICAgICBjb25zdCByZWFsTmFtZSA9IGF0dHJOYW1lc1thdHRyTmFtZUluZGV4KytdO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZShuYW1lKSE7XG4gICAgICAgICAgICAgIGNvbnN0IHN0YXRpY3MgPSB2YWx1ZS5zcGxpdChtYXJrZXIpO1xuICAgICAgICAgICAgICBjb25zdCBtID0gLyhbLj9AXSk/KC4qKS8uZXhlYyhyZWFsTmFtZSkhO1xuICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBBVFRSSUJVVEVfUEFSVCxcbiAgICAgICAgICAgICAgICBpbmRleDogbm9kZUluZGV4LFxuICAgICAgICAgICAgICAgIG5hbWU6IG1bMl0sXG4gICAgICAgICAgICAgICAgc3RyaW5nczogc3RhdGljcyxcbiAgICAgICAgICAgICAgICBjdG9yOlxuICAgICAgICAgICAgICAgICAgbVsxXSA9PT0gJy4nXG4gICAgICAgICAgICAgICAgICAgID8gUHJvcGVydHlQYXJ0XG4gICAgICAgICAgICAgICAgICAgIDogbVsxXSA9PT0gJz8nXG4gICAgICAgICAgICAgICAgICAgICAgPyBCb29sZWFuQXR0cmlidXRlUGFydFxuICAgICAgICAgICAgICAgICAgICAgIDogbVsxXSA9PT0gJ0AnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IEV2ZW50UGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBBdHRyaWJ1dGVQYXJ0LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgKG5vZGUgYXMgRWxlbWVudCkucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgobWFya2VyKSkge1xuICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFTEVNRU5UX1BBUlQsXG4gICAgICAgICAgICAgICAgaW5kZXg6IG5vZGVJbmRleCxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGJlbmNobWFyayB0aGUgcmVnZXggYWdhaW5zdCB0ZXN0aW5nIGZvciBlYWNoXG4gICAgICAgIC8vIG9mIHRoZSAzIHJhdyB0ZXh0IGVsZW1lbnQgbmFtZXMuXG4gICAgICAgIGlmIChyYXdUZXh0RWxlbWVudC50ZXN0KChub2RlIGFzIEVsZW1lbnQpLnRhZ05hbWUpKSB7XG4gICAgICAgICAgLy8gRm9yIHJhdyB0ZXh0IGVsZW1lbnRzIHdlIG5lZWQgdG8gc3BsaXQgdGhlIHRleHQgY29udGVudCBvblxuICAgICAgICAgIC8vIG1hcmtlcnMsIGNyZWF0ZSBhIFRleHQgbm9kZSBmb3IgZWFjaCBzZWdtZW50LCBhbmQgY3JlYXRlXG4gICAgICAgICAgLy8gYSBUZW1wbGF0ZVBhcnQgZm9yIGVhY2ggbWFya2VyLlxuICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSAobm9kZSBhcyBFbGVtZW50KS50ZXh0Q29udGVudCEuc3BsaXQobWFya2VyKTtcbiAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaWYgKGxhc3RJbmRleCA+IDApIHtcbiAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLnRleHRDb250ZW50ID0gdHJ1c3RlZFR5cGVzXG4gICAgICAgICAgICAgID8gKHRydXN0ZWRUeXBlcy5lbXB0eVNjcmlwdCBhcyB1bmtub3duIGFzICcnKVxuICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgdGV4dCBub2RlIGZvciBlYWNoIGxpdGVyYWwgc2VjdGlvblxuICAgICAgICAgICAgLy8gVGhlc2Ugbm9kZXMgYXJlIGFsc28gdXNlZCBhcyB0aGUgbWFya2VycyBmb3Igbm9kZSBwYXJ0c1xuICAgICAgICAgICAgLy8gV2UgY2FuJ3QgdXNlIGVtcHR5IHRleHQgbm9kZXMgYXMgbWFya2VycyBiZWNhdXNlIHRoZXkncmVcbiAgICAgICAgICAgIC8vIG5vcm1hbGl6ZWQgd2hlbiBjbG9uaW5nIGluIElFIChjb3VsZCBzaW1wbGlmeSB3aGVuXG4gICAgICAgICAgICAvLyBJRSBpcyBubyBsb25nZXIgc3VwcG9ydGVkKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAobm9kZSBhcyBFbGVtZW50KS5hcHBlbmQoc3RyaW5nc1tpXSwgY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICAgICAgICAvLyBXYWxrIHBhc3QgdGhlIG1hcmtlciBub2RlIHdlIGp1c3QgYWRkZWRcbiAgICAgICAgICAgICAgd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgICAgICAgIHBhcnRzLnB1c2goe3R5cGU6IENISUxEX1BBUlQsIGluZGV4OiArK25vZGVJbmRleH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm90ZSBiZWNhdXNlIHRoaXMgbWFya2VyIGlzIGFkZGVkIGFmdGVyIHRoZSB3YWxrZXIncyBjdXJyZW50XG4gICAgICAgICAgICAvLyBub2RlLCBpdCB3aWxsIGJlIHdhbGtlZCB0byBpbiB0aGUgb3V0ZXIgbG9vcCAoYW5kIGlnbm9yZWQpLCBzb1xuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBhZGp1c3Qgbm9kZUluZGV4IGhlcmVcbiAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLmFwcGVuZChzdHJpbmdzW2xhc3RJbmRleF0sIGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICBjb25zdCBkYXRhID0gKG5vZGUgYXMgQ29tbWVudCkuZGF0YTtcbiAgICAgICAgaWYgKGRhdGEgPT09IG1hcmtlck1hdGNoKSB7XG4gICAgICAgICAgcGFydHMucHVzaCh7dHlwZTogQ0hJTERfUEFSVCwgaW5kZXg6IG5vZGVJbmRleH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgICAgd2hpbGUgKChpID0gKG5vZGUgYXMgQ29tbWVudCkuZGF0YS5pbmRleE9mKG1hcmtlciwgaSArIDEpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIENvbW1lbnQgbm9kZSBoYXMgYSBiaW5kaW5nIG1hcmtlciBpbnNpZGUsIG1ha2UgYW4gaW5hY3RpdmUgcGFydFxuICAgICAgICAgICAgLy8gVGhlIGJpbmRpbmcgd29uJ3Qgd29yaywgYnV0IHN1YnNlcXVlbnQgYmluZGluZ3Mgd2lsbFxuICAgICAgICAgICAgcGFydHMucHVzaCh7dHlwZTogQ09NTUVOVF9QQVJULCBpbmRleDogbm9kZUluZGV4fSk7XG4gICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBlbmQgb2YgdGhlIG1hdGNoXG4gICAgICAgICAgICBpICs9IG1hcmtlci5sZW5ndGggLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9kZUluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKERFVl9NT0RFKSB7XG4gICAgICAvLyBJZiB0aGVyZSB3YXMgYSBkdXBsaWNhdGUgYXR0cmlidXRlIG9uIGEgdGFnLCB0aGVuIHdoZW4gdGhlIHRhZyBpc1xuICAgICAgLy8gcGFyc2VkIGludG8gYW4gZWxlbWVudCB0aGUgYXR0cmlidXRlIGdldHMgZGUtZHVwbGljYXRlZC4gV2UgY2FuIGRldGVjdFxuICAgICAgLy8gdGhpcyBtaXNtYXRjaCBpZiB3ZSBoYXZlbid0IHByZWNpc2VseSBjb25zdW1lZCBldmVyeSBhdHRyaWJ1dGUgbmFtZVxuICAgICAgLy8gd2hlbiBwcmVwYXJpbmcgdGhlIHRlbXBsYXRlLiBUaGlzIHdvcmtzIGJlY2F1c2UgYGF0dHJOYW1lc2AgaXMgYnVpbHRcbiAgICAgIC8vIGZyb20gdGhlIHRlbXBsYXRlIHN0cmluZyBhbmQgYGF0dHJOYW1lSW5kZXhgIGNvbWVzIGZyb20gcHJvY2Vzc2luZyB0aGVcbiAgICAgIC8vIHJlc3VsdGluZyBET00uXG4gICAgICBpZiAoYXR0ck5hbWVzLmxlbmd0aCAhPT0gYXR0ck5hbWVJbmRleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYERldGVjdGVkIGR1cGxpY2F0ZSBhdHRyaWJ1dGUgYmluZGluZ3MuIFRoaXMgb2NjdXJzIGlmIHlvdXIgdGVtcGxhdGUgYCArXG4gICAgICAgICAgICBgaGFzIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzIG9uIGFuIGVsZW1lbnQgdGFnLiBGb3IgZXhhbXBsZSBgICtcbiAgICAgICAgICAgIGBcIjxpbnB1dCA/ZGlzYWJsZWQ9XFwke3RydWV9ID9kaXNhYmxlZD1cXCR7ZmFsc2V9PlwiIGNvbnRhaW5zIGEgYCArXG4gICAgICAgICAgICBgZHVwbGljYXRlIFwiZGlzYWJsZWRcIiBhdHRyaWJ1dGUuIFRoZSBlcnJvciB3YXMgZGV0ZWN0ZWQgaW4gYCArXG4gICAgICAgICAgICBgdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZTogXFxuYCArXG4gICAgICAgICAgICAnYCcgK1xuICAgICAgICAgICAgc3RyaW5ncy5qb2luKCckey4uLn0nKSArXG4gICAgICAgICAgICAnYCdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBjb3VsZCBzZXQgd2Fsa2VyLmN1cnJlbnROb2RlIHRvIGFub3RoZXIgbm9kZSBoZXJlIHRvIHByZXZlbnQgYSBtZW1vcnlcbiAgICAvLyBsZWFrLCBidXQgZXZlcnkgdGltZSB3ZSBwcmVwYXJlIGEgdGVtcGxhdGUsIHdlIGltbWVkaWF0ZWx5IHJlbmRlciBpdFxuICAgIC8vIGFuZCByZS11c2UgdGhlIHdhbGtlciBpbiBuZXcgVGVtcGxhdGVJbnN0YW5jZS5fY2xvbmUoKS5cbiAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAga2luZDogJ3RlbXBsYXRlIHByZXAnLFxuICAgICAgICB0ZW1wbGF0ZTogdGhpcyxcbiAgICAgICAgY2xvbmFibGVUZW1wbGF0ZTogdGhpcy5lbCxcbiAgICAgICAgcGFydHM6IHRoaXMucGFydHMsXG4gICAgICAgIHN0cmluZ3MsXG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIE92ZXJyaWRkZW4gdmlhIGBsaXRIdG1sUG9seWZpbGxTdXBwb3J0YCB0byBwcm92aWRlIHBsYXRmb3JtIHN1cHBvcnQuXG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBzdGF0aWMgY3JlYXRlRWxlbWVudChodG1sOiBUcnVzdGVkSFRNTCwgX29wdGlvbnM/OiBSZW5kZXJPcHRpb25zKSB7XG4gICAgY29uc3QgZWwgPSBkLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgZWwuaW5uZXJIVE1MID0gaHRtbCBhcyB1bmtub3duIGFzIHN0cmluZztcbiAgICByZXR1cm4gZWw7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEaXNjb25uZWN0YWJsZSB7XG4gIF8kcGFyZW50PzogRGlzY29ubmVjdGFibGU7XG4gIF8kZGlzY29ubmVjdGFibGVDaGlsZHJlbj86IFNldDxEaXNjb25uZWN0YWJsZT47XG4gIC8vIFJhdGhlciB0aGFuIGhvbGQgY29ubmVjdGlvbiBzdGF0ZSBvbiBpbnN0YW5jZXMsIERpc2Nvbm5lY3RhYmxlcyByZWN1cnNpdmVseVxuICAvLyBmZXRjaCB0aGUgY29ubmVjdGlvbiBzdGF0ZSBmcm9tIHRoZSBSb290UGFydCB0aGV5IGFyZSBjb25uZWN0ZWQgaW4gdmlhXG4gIC8vIGdldHRlcnMgdXAgdGhlIERpc2Nvbm5lY3RhYmxlIHRyZWUgdmlhIF8kcGFyZW50IHJlZmVyZW5jZXMuIFRoaXMgcHVzaGVzIHRoZVxuICAvLyBjb3N0IG9mIHRyYWNraW5nIHRoZSBpc0Nvbm5lY3RlZCBzdGF0ZSB0byBgQXN5bmNEaXJlY3RpdmVzYCwgYW5kIGF2b2lkc1xuICAvLyBuZWVkaW5nIHRvIHBhc3MgYWxsIERpc2Nvbm5lY3RhYmxlcyAocGFydHMsIHRlbXBsYXRlIGluc3RhbmNlcywgYW5kXG4gIC8vIGRpcmVjdGl2ZXMpIHRoZWlyIGNvbm5lY3Rpb24gc3RhdGUgZWFjaCB0aW1lIGl0IGNoYW5nZXMsIHdoaWNoIHdvdWxkIGJlXG4gIC8vIGNvc3RseSBmb3IgdHJlZXMgdGhhdCBoYXZlIG5vIEFzeW5jRGlyZWN0aXZlcy5cbiAgXyRpc0Nvbm5lY3RlZDogYm9vbGVhbjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShcbiAgcGFydDogQ2hpbGRQYXJ0IHwgQXR0cmlidXRlUGFydCB8IEVsZW1lbnRQYXJ0LFxuICB2YWx1ZTogdW5rbm93bixcbiAgcGFyZW50OiBEaXJlY3RpdmVQYXJlbnQgPSBwYXJ0LFxuICBhdHRyaWJ1dGVJbmRleD86IG51bWJlclxuKTogdW5rbm93biB7XG4gIC8vIEJhaWwgZWFybHkgaWYgdGhlIHZhbHVlIGlzIGV4cGxpY2l0bHkgbm9DaGFuZ2UuIE5vdGUsIHRoaXMgbWVhbnMgYW55XG4gIC8vIG5lc3RlZCBkaXJlY3RpdmUgaXMgc3RpbGwgYXR0YWNoZWQgYW5kIGlzIG5vdCBydW4uXG4gIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgbGV0IGN1cnJlbnREaXJlY3RpdmUgPVxuICAgIGF0dHJpYnV0ZUluZGV4ICE9PSB1bmRlZmluZWRcbiAgICAgID8gKHBhcmVudCBhcyBBdHRyaWJ1dGVQYXJ0KS5fX2RpcmVjdGl2ZXM/LlthdHRyaWJ1dGVJbmRleF1cbiAgICAgIDogKHBhcmVudCBhcyBDaGlsZFBhcnQgfCBFbGVtZW50UGFydCB8IERpcmVjdGl2ZSkuX19kaXJlY3RpdmU7XG4gIGNvbnN0IG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvciA9IGlzUHJpbWl0aXZlKHZhbHVlKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgICAgKHZhbHVlIGFzIERpcmVjdGl2ZVJlc3VsdClbJ18kbGl0RGlyZWN0aXZlJCddO1xuICBpZiAoY3VycmVudERpcmVjdGl2ZT8uY29uc3RydWN0b3IgIT09IG5leHREaXJlY3RpdmVDb25zdHJ1Y3Rvcikge1xuICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgY3VycmVudERpcmVjdGl2ZT8uWydfJG5vdGlmeURpcmVjdGl2ZUNvbm5lY3Rpb25DaGFuZ2VkJ10/LihmYWxzZSk7XG4gICAgaWYgKG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50RGlyZWN0aXZlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50RGlyZWN0aXZlID0gbmV3IG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvcihwYXJ0IGFzIFBhcnRJbmZvKTtcbiAgICAgIGN1cnJlbnREaXJlY3RpdmUuXyRpbml0aWFsaXplKHBhcnQsIHBhcmVudCwgYXR0cmlidXRlSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgKChwYXJlbnQgYXMgQXR0cmlidXRlUGFydCkuX19kaXJlY3RpdmVzID8/PSBbXSlbYXR0cmlidXRlSW5kZXhdID1cbiAgICAgICAgY3VycmVudERpcmVjdGl2ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHBhcmVudCBhcyBDaGlsZFBhcnQgfCBEaXJlY3RpdmUpLl9fZGlyZWN0aXZlID0gY3VycmVudERpcmVjdGl2ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJlbnREaXJlY3RpdmUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gcmVzb2x2ZURpcmVjdGl2ZShcbiAgICAgIHBhcnQsXG4gICAgICBjdXJyZW50RGlyZWN0aXZlLl8kcmVzb2x2ZShwYXJ0LCAodmFsdWUgYXMgRGlyZWN0aXZlUmVzdWx0KS52YWx1ZXMpLFxuICAgICAgY3VycmVudERpcmVjdGl2ZSxcbiAgICAgIGF0dHJpYnV0ZUluZGV4XG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCB0eXBlIHtUZW1wbGF0ZUluc3RhbmNlfTtcbi8qKlxuICogQW4gdXBkYXRlYWJsZSBpbnN0YW5jZSBvZiBhIFRlbXBsYXRlLiBIb2xkcyByZWZlcmVuY2VzIHRvIHRoZSBQYXJ0cyB1c2VkIHRvXG4gKiB1cGRhdGUgdGhlIHRlbXBsYXRlIGluc3RhbmNlLlxuICovXG5jbGFzcyBUZW1wbGF0ZUluc3RhbmNlIGltcGxlbWVudHMgRGlzY29ubmVjdGFibGUge1xuICBfJHRlbXBsYXRlOiBUZW1wbGF0ZTtcbiAgXyRwYXJ0czogQXJyYXk8UGFydCB8IHVuZGVmaW5lZD4gPSBbXTtcblxuICAvKiogQGludGVybmFsICovXG4gIF8kcGFyZW50OiBDaGlsZFBhcnQ7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuPzogU2V0PERpc2Nvbm5lY3RhYmxlPiA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZTogVGVtcGxhdGUsIHBhcmVudDogQ2hpbGRQYXJ0KSB7XG4gICAgdGhpcy5fJHRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgdGhpcy5fJHBhcmVudCA9IHBhcmVudDtcbiAgfVxuXG4gIC8vIENhbGxlZCBieSBDaGlsZFBhcnQgcGFyZW50Tm9kZSBnZXR0ZXJcbiAgZ2V0IHBhcmVudE5vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQucGFyZW50Tm9kZTtcbiAgfVxuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQuXyRpc0Nvbm5lY3RlZDtcbiAgfVxuXG4gIC8vIFRoaXMgbWV0aG9kIGlzIHNlcGFyYXRlIGZyb20gdGhlIGNvbnN0cnVjdG9yIGJlY2F1c2Ugd2UgbmVlZCB0byByZXR1cm4gYVxuICAvLyBEb2N1bWVudEZyYWdtZW50IGFuZCB3ZSBkb24ndCB3YW50IHRvIGhvbGQgb250byBpdCB3aXRoIGFuIGluc3RhbmNlIGZpZWxkLlxuICBfY2xvbmUob3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsOiB7Y29udGVudH0sXG4gICAgICBwYXJ0czogcGFydHMsXG4gICAgfSA9IHRoaXMuXyR0ZW1wbGF0ZTtcbiAgICBjb25zdCBmcmFnbWVudCA9IChvcHRpb25zPy5jcmVhdGlvblNjb3BlID8/IGQpLmltcG9ydE5vZGUoY29udGVudCwgdHJ1ZSk7XG4gICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gZnJhZ21lbnQ7XG5cbiAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpITtcbiAgICBsZXQgbm9kZUluZGV4ID0gMDtcbiAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICBsZXQgdGVtcGxhdGVQYXJ0ID0gcGFydHNbMF07XG5cbiAgICB3aGlsZSAodGVtcGxhdGVQYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChub2RlSW5kZXggPT09IHRlbXBsYXRlUGFydC5pbmRleCkge1xuICAgICAgICBsZXQgcGFydDogUGFydCB8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRlbXBsYXRlUGFydC50eXBlID09PSBDSElMRF9QQVJUKSB7XG4gICAgICAgICAgcGFydCA9IG5ldyBDaGlsZFBhcnQoXG4gICAgICAgICAgICBub2RlIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgbm9kZS5uZXh0U2libGluZyxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZVBhcnQudHlwZSA9PT0gQVRUUklCVVRFX1BBUlQpIHtcbiAgICAgICAgICBwYXJ0ID0gbmV3IHRlbXBsYXRlUGFydC5jdG9yKFxuICAgICAgICAgICAgbm9kZSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgIHRlbXBsYXRlUGFydC5uYW1lLFxuICAgICAgICAgICAgdGVtcGxhdGVQYXJ0LnN0cmluZ3MsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVQYXJ0LnR5cGUgPT09IEVMRU1FTlRfUEFSVCkge1xuICAgICAgICAgIHBhcnQgPSBuZXcgRWxlbWVudFBhcnQobm9kZSBhcyBIVE1MRWxlbWVudCwgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fJHBhcnRzLnB1c2gocGFydCk7XG4gICAgICAgIHRlbXBsYXRlUGFydCA9IHBhcnRzWysrcGFydEluZGV4XTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlSW5kZXggIT09IHRlbXBsYXRlUGFydD8uaW5kZXgpIHtcbiAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpITtcbiAgICAgICAgbm9kZUluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdlIG5lZWQgdG8gc2V0IHRoZSBjdXJyZW50Tm9kZSBhd2F5IGZyb20gdGhlIGNsb25lZCB0cmVlIHNvIHRoYXQgd2VcbiAgICAvLyBkb24ndCBob2xkIG9udG8gdGhlIHRyZWUgZXZlbiBpZiB0aGUgdHJlZSBpcyBkZXRhY2hlZCBhbmQgc2hvdWxkIGJlXG4gICAgLy8gZnJlZWQuXG4gICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gZDtcbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH1cblxuICBfdXBkYXRlKHZhbHVlczogQXJyYXk8dW5rbm93bj4pIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuXyRwYXJ0cykge1xuICAgICAgaWYgKHBhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICAgICAgZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAgICBraW5kOiAnc2V0IHBhcnQnLFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNbaV0sXG4gICAgICAgICAgICB2YWx1ZUluZGV4OiBpLFxuICAgICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgICAgdGVtcGxhdGVJbnN0YW5jZTogdGhpcyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKChwYXJ0IGFzIEF0dHJpYnV0ZVBhcnQpLnN0cmluZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIChwYXJ0IGFzIEF0dHJpYnV0ZVBhcnQpLl8kc2V0VmFsdWUodmFsdWVzLCBwYXJ0IGFzIEF0dHJpYnV0ZVBhcnQsIGkpO1xuICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgdmFsdWVzIHRoZSBwYXJ0IGNvbnN1bWVzIGlzIHBhcnQuc3RyaW5ncy5sZW5ndGggLSAxXG4gICAgICAgICAgLy8gc2luY2UgdmFsdWVzIGFyZSBpbiBiZXR3ZWVuIHRlbXBsYXRlIHNwYW5zLiBXZSBpbmNyZW1lbnQgaSBieSAxXG4gICAgICAgICAgLy8gbGF0ZXIgaW4gdGhlIGxvb3AsIHNvIGluY3JlbWVudCBpdCBieSBwYXJ0LnN0cmluZ3MubGVuZ3RoIC0gMiBoZXJlXG4gICAgICAgICAgaSArPSAocGFydCBhcyBBdHRyaWJ1dGVQYXJ0KS5zdHJpbmdzIS5sZW5ndGggLSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnQuXyRzZXRWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICB9XG59XG5cbi8qXG4gKiBQYXJ0c1xuICovXG50eXBlIEF0dHJpYnV0ZVRlbXBsYXRlUGFydCA9IHtcbiAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIEFUVFJJQlVURV9QQVJUO1xuICByZWFkb25seSBpbmRleDogbnVtYmVyO1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGN0b3I6IHR5cGVvZiBBdHRyaWJ1dGVQYXJ0O1xuICByZWFkb25seSBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz47XG59O1xudHlwZSBDaGlsZFRlbXBsYXRlUGFydCA9IHtcbiAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIENISUxEX1BBUlQ7XG4gIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XG59O1xudHlwZSBFbGVtZW50VGVtcGxhdGVQYXJ0ID0ge1xuICByZWFkb25seSB0eXBlOiB0eXBlb2YgRUxFTUVOVF9QQVJUO1xuICByZWFkb25seSBpbmRleDogbnVtYmVyO1xufTtcbnR5cGUgQ29tbWVudFRlbXBsYXRlUGFydCA9IHtcbiAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIENPTU1FTlRfUEFSVDtcbiAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbn07XG5cbi8qKlxuICogQSBUZW1wbGF0ZVBhcnQgcmVwcmVzZW50cyBhIGR5bmFtaWMgcGFydCBpbiBhIHRlbXBsYXRlLCBiZWZvcmUgdGhlIHRlbXBsYXRlXG4gKiBpcyBpbnN0YW50aWF0ZWQuIFdoZW4gYSB0ZW1wbGF0ZSBpcyBpbnN0YW50aWF0ZWQgUGFydHMgYXJlIGNyZWF0ZWQgZnJvbVxuICogVGVtcGxhdGVQYXJ0cy5cbiAqL1xudHlwZSBUZW1wbGF0ZVBhcnQgPVxuICB8IENoaWxkVGVtcGxhdGVQYXJ0XG4gIHwgQXR0cmlidXRlVGVtcGxhdGVQYXJ0XG4gIHwgRWxlbWVudFRlbXBsYXRlUGFydFxuICB8IENvbW1lbnRUZW1wbGF0ZVBhcnQ7XG5cbmV4cG9ydCB0eXBlIFBhcnQgPVxuICB8IENoaWxkUGFydFxuICB8IEF0dHJpYnV0ZVBhcnRcbiAgfCBQcm9wZXJ0eVBhcnRcbiAgfCBCb29sZWFuQXR0cmlidXRlUGFydFxuICB8IEVsZW1lbnRQYXJ0XG4gIHwgRXZlbnRQYXJ0O1xuXG5leHBvcnQgdHlwZSB7Q2hpbGRQYXJ0fTtcbmNsYXNzIENoaWxkUGFydCBpbXBsZW1lbnRzIERpc2Nvbm5lY3RhYmxlIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENISUxEX1BBUlQ7XG4gIHJlYWRvbmx5IG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gIF8kY29tbWl0dGVkVmFsdWU6IHVua25vd24gPSBub3RoaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIF9fZGlyZWN0aXZlPzogRGlyZWN0aXZlO1xuICAvKiogQGludGVybmFsICovXG4gIF8kc3RhcnROb2RlOiBDaGlsZE5vZGU7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRlbmROb2RlOiBDaGlsZE5vZGUgfCBudWxsO1xuICBwcml2YXRlIF90ZXh0U2FuaXRpemVyOiBWYWx1ZVNhbml0aXplciB8IHVuZGVmaW5lZDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJHBhcmVudDogRGlzY29ubmVjdGFibGUgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBDb25uZWN0aW9uIHN0YXRlIGZvciBSb290UGFydHMgb25seSAoaS5lLiBDaGlsZFBhcnQgd2l0aG91dCBfJHBhcmVudFxuICAgKiByZXR1cm5lZCBmcm9tIHRvcC1sZXZlbCBgcmVuZGVyYCkuIFRoaXMgZmllbGQgaXMgdW51c2VkIG90aGVyd2lzZS4gVGhlXG4gICAqIGludGVudGlvbiB3b3VsZCBiZSBjbGVhcmVyIGlmIHdlIG1hZGUgYFJvb3RQYXJ0YCBhIHN1YmNsYXNzIG9mIGBDaGlsZFBhcnRgXG4gICAqIHdpdGggdGhpcyBmaWVsZCAoYW5kIGEgZGlmZmVyZW50IF8kaXNDb25uZWN0ZWQgZ2V0dGVyKSwgYnV0IHRoZSBzdWJjbGFzc1xuICAgKiBjYXVzZWQgYSBwZXJmIHJlZ3Jlc3Npb24sIHBvc3NpYmx5IGR1ZSB0byBtYWtpbmcgY2FsbCBzaXRlcyBwb2x5bW9ycGhpYy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfX2lzQ29ubmVjdGVkOiBib29sZWFuO1xuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgLy8gQ2hpbGRQYXJ0cyB0aGF0IGFyZSBub3QgYXQgdGhlIHJvb3Qgc2hvdWxkIGFsd2F5cyBiZSBjcmVhdGVkIHdpdGggYVxuICAgIC8vIHBhcmVudDsgb25seSBSb290Q2hpbGROb2RlJ3Mgd29uJ3QsIHNvIHRoZXkgcmV0dXJuIHRoZSBsb2NhbCBpc0Nvbm5lY3RlZFxuICAgIC8vIHN0YXRlXG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQ/Ll8kaXNDb25uZWN0ZWQgPz8gdGhpcy5fX2lzQ29ubmVjdGVkO1xuICB9XG5cbiAgLy8gVGhlIGZvbGxvd2luZyBmaWVsZHMgd2lsbCBiZSBwYXRjaGVkIG9udG8gQ2hpbGRQYXJ0cyB3aGVuIHJlcXVpcmVkIGJ5XG4gIC8vIEFzeW5jRGlyZWN0aXZlXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuPzogU2V0PERpc2Nvbm5lY3RhYmxlPiA9IHVuZGVmaW5lZDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJG5vdGlmeUNvbm5lY3Rpb25DaGFuZ2VkPyhcbiAgICBpc0Nvbm5lY3RlZDogYm9vbGVhbixcbiAgICByZW1vdmVGcm9tUGFyZW50PzogYm9vbGVhbixcbiAgICBmcm9tPzogbnVtYmVyXG4gICk6IHZvaWQ7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRyZXBhcmVudERpc2Nvbm5lY3RhYmxlcz8ocGFyZW50OiBEaXNjb25uZWN0YWJsZSk6IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc3RhcnROb2RlOiBDaGlsZE5vZGUsXG4gICAgZW5kTm9kZTogQ2hpbGROb2RlIHwgbnVsbCxcbiAgICBwYXJlbnQ6IFRlbXBsYXRlSW5zdGFuY2UgfCBDaGlsZFBhcnQgfCB1bmRlZmluZWQsXG4gICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZFxuICApIHtcbiAgICB0aGlzLl8kc3RhcnROb2RlID0gc3RhcnROb2RlO1xuICAgIHRoaXMuXyRlbmROb2RlID0gZW5kTm9kZTtcbiAgICB0aGlzLl8kcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gTm90ZSBfX2lzQ29ubmVjdGVkIGlzIG9ubHkgZXZlciBhY2Nlc3NlZCBvbiBSb290UGFydHMgKGkuZS4gd2hlbiB0aGVyZSBpc1xuICAgIC8vIG5vIF8kcGFyZW50KTsgdGhlIHZhbHVlIG9uIGEgbm9uLXJvb3QtcGFydCBpcyBcImRvbid0IGNhcmVcIiwgYnV0IGNoZWNraW5nXG4gICAgLy8gZm9yIHBhcmVudCB3b3VsZCBiZSBtb3JlIGNvZGVcbiAgICB0aGlzLl9faXNDb25uZWN0ZWQgPSBvcHRpb25zPy5pc0Nvbm5lY3RlZCA/PyB0cnVlO1xuICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgIC8vIEV4cGxpY2l0bHkgaW5pdGlhbGl6ZSBmb3IgY29uc2lzdGVudCBjbGFzcyBzaGFwZS5cbiAgICAgIHRoaXMuX3RleHRTYW5pdGl6ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJlbnQgbm9kZSBpbnRvIHdoaWNoIHRoZSBwYXJ0IHJlbmRlcnMgaXRzIGNvbnRlbnQuXG4gICAqXG4gICAqIEEgQ2hpbGRQYXJ0J3MgY29udGVudCBjb25zaXN0cyBvZiBhIHJhbmdlIG9mIGFkamFjZW50IGNoaWxkIG5vZGVzIG9mXG4gICAqIGAucGFyZW50Tm9kZWAsIHBvc3NpYmx5IGJvcmRlcmVkIGJ5ICdtYXJrZXIgbm9kZXMnIChgLnN0YXJ0Tm9kZWAgYW5kXG4gICAqIGAuZW5kTm9kZWApLlxuICAgKlxuICAgKiAtIElmIGJvdGggYC5zdGFydE5vZGVgIGFuZCBgLmVuZE5vZGVgIGFyZSBub24tbnVsbCwgdGhlbiB0aGUgcGFydCdzIGNvbnRlbnRcbiAgICogY29uc2lzdHMgb2YgYWxsIHNpYmxpbmdzIGJldHdlZW4gYC5zdGFydE5vZGVgIGFuZCBgLmVuZE5vZGVgLCBleGNsdXNpdmVseS5cbiAgICpcbiAgICogLSBJZiBgLnN0YXJ0Tm9kZWAgaXMgbm9uLW51bGwgYnV0IGAuZW5kTm9kZWAgaXMgbnVsbCwgdGhlbiB0aGUgcGFydCdzXG4gICAqIGNvbnRlbnQgY29uc2lzdHMgb2YgYWxsIHNpYmxpbmdzIGZvbGxvd2luZyBgLnN0YXJ0Tm9kZWAsIHVwIHRvIGFuZFxuICAgKiBpbmNsdWRpbmcgdGhlIGxhc3QgY2hpbGQgb2YgYC5wYXJlbnROb2RlYC4gSWYgYC5lbmROb2RlYCBpcyBub24tbnVsbCwgdGhlblxuICAgKiBgLnN0YXJ0Tm9kZWAgd2lsbCBhbHdheXMgYmUgbm9uLW51bGwuXG4gICAqXG4gICAqIC0gSWYgYm90aCBgLmVuZE5vZGVgIGFuZCBgLnN0YXJ0Tm9kZWAgYXJlIG51bGwsIHRoZW4gdGhlIHBhcnQncyBjb250ZW50XG4gICAqIGNvbnNpc3RzIG9mIGFsbCBjaGlsZCBub2RlcyBvZiBgLnBhcmVudE5vZGVgLlxuICAgKi9cbiAgZ2V0IHBhcmVudE5vZGUoKTogTm9kZSB7XG4gICAgbGV0IHBhcmVudE5vZGU6IE5vZGUgPSB3cmFwKHRoaXMuXyRzdGFydE5vZGUpLnBhcmVudE5vZGUhO1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuXyRwYXJlbnQ7XG4gICAgaWYgKFxuICAgICAgcGFyZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHBhcmVudE5vZGU/Lm5vZGVUeXBlID09PSAxMSAvKiBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UICovXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGUgcGFyZW50Tm9kZSBpcyBhIERvY3VtZW50RnJhZ21lbnQsIGl0IG1heSBiZSBiZWNhdXNlIHRoZSBET00gaXNcbiAgICAgIC8vIHN0aWxsIGluIHRoZSBjbG9uZWQgZnJhZ21lbnQgZHVyaW5nIGluaXRpYWwgcmVuZGVyOyBpZiBzbywgZ2V0IHRoZSByZWFsXG4gICAgICAvLyBwYXJlbnROb2RlIHRoZSBwYXJ0IHdpbGwgYmUgY29tbWl0dGVkIGludG8gYnkgYXNraW5nIHRoZSBwYXJlbnQuXG4gICAgICBwYXJlbnROb2RlID0gKHBhcmVudCBhcyBDaGlsZFBhcnQgfCBUZW1wbGF0ZUluc3RhbmNlKS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcGFydCdzIGxlYWRpbmcgbWFya2VyIG5vZGUsIGlmIGFueS4gU2VlIGAucGFyZW50Tm9kZWAgZm9yIG1vcmVcbiAgICogaW5mb3JtYXRpb24uXG4gICAqL1xuICBnZXQgc3RhcnROb2RlKCk6IE5vZGUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fJHN0YXJ0Tm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcGFydCdzIHRyYWlsaW5nIG1hcmtlciBub2RlLCBpZiBhbnkuIFNlZSBgLnBhcmVudE5vZGVgIGZvciBtb3JlXG4gICAqIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgZ2V0IGVuZE5vZGUoKTogTm9kZSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl8kZW5kTm9kZTtcbiAgfVxuXG4gIF8kc2V0VmFsdWUodmFsdWU6IHVua25vd24sIGRpcmVjdGl2ZVBhcmVudDogRGlyZWN0aXZlUGFyZW50ID0gdGhpcyk6IHZvaWQge1xuICAgIGlmIChERVZfTU9ERSAmJiB0aGlzLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRoaXMgXFxgQ2hpbGRQYXJ0XFxgIGhhcyBubyBcXGBwYXJlbnROb2RlXFxgIGFuZCB0aGVyZWZvcmUgY2Fubm90IGFjY2VwdCBhIHZhbHVlLiBUaGlzIGxpa2VseSBtZWFucyB0aGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBwYXJ0IHdhcyBtYW5pcHVsYXRlZCBpbiBhbiB1bnN1cHBvcnRlZCB3YXkgb3V0c2lkZSBvZiBMaXQncyBjb250cm9sIHN1Y2ggdGhhdCB0aGUgcGFydCdzIG1hcmtlciBub2RlcyB3ZXJlIGVqZWN0ZWQgZnJvbSBET00uIEZvciBleGFtcGxlLCBzZXR0aW5nIHRoZSBlbGVtZW50J3MgXFxgaW5uZXJIVE1MXFxgIG9yIFxcYHRleHRDb250ZW50XFxgIGNhbiBkbyB0aGlzLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHZhbHVlID0gcmVzb2x2ZURpcmVjdGl2ZSh0aGlzLCB2YWx1ZSwgZGlyZWN0aXZlUGFyZW50KTtcbiAgICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgICAvLyBOb24tcmVuZGVyaW5nIGNoaWxkIHZhbHVlcy4gSXQncyBpbXBvcnRhbnQgdGhhdCB0aGVzZSBkbyBub3QgcmVuZGVyXG4gICAgICAvLyBlbXB0eSB0ZXh0IG5vZGVzIHRvIGF2b2lkIGlzc3VlcyB3aXRoIHByZXZlbnRpbmcgZGVmYXVsdCA8c2xvdD5cbiAgICAgIC8vIGZhbGxiYWNrIGNvbnRlbnQuXG4gICAgICBpZiAodmFsdWUgPT09IG5vdGhpbmcgfHwgdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgaWYgKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSAhPT0gbm90aGluZykge1xuICAgICAgICAgIGRlYnVnTG9nRXZlbnQgJiZcbiAgICAgICAgICAgIGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgICAgICBraW5kOiAnY29tbWl0IG5vdGhpbmcgdG8gY2hpbGQnLFxuICAgICAgICAgICAgICBzdGFydDogdGhpcy5fJHN0YXJ0Tm9kZSxcbiAgICAgICAgICAgICAgZW5kOiB0aGlzLl8kZW5kTm9kZSxcbiAgICAgICAgICAgICAgcGFyZW50OiB0aGlzLl8kcGFyZW50LFxuICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl8kY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSBub3RoaW5nO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gdGhpcy5fJGNvbW1pdHRlZFZhbHVlICYmIHZhbHVlICE9PSBub0NoYW5nZSkge1xuICAgICAgICB0aGlzLl9jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgfSBlbHNlIGlmICgodmFsdWUgYXMgVGVtcGxhdGVSZXN1bHQpWydfJGxpdFR5cGUkJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUgYXMgVGVtcGxhdGVSZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAoKHZhbHVlIGFzIE5vZGUpLm5vZGVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChERVZfTU9ERSAmJiB0aGlzLm9wdGlvbnM/Lmhvc3QgPT09IHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NvbW1pdFRleHQoXG4gICAgICAgICAgYFtwcm9iYWJsZSBtaXN0YWtlOiByZW5kZXJlZCBhIHRlbXBsYXRlJ3MgaG9zdCBpbiBpdHNlbGYgYCArXG4gICAgICAgICAgICBgKGNvbW1vbmx5IGNhdXNlZCBieSB3cml0aW5nIFxcJHt0aGlzfSBpbiBhIHRlbXBsYXRlXWBcbiAgICAgICAgKTtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBBdHRlbXB0ZWQgdG8gcmVuZGVyIHRoZSB0ZW1wbGF0ZSBob3N0YCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBgaW5zaWRlIGl0c2VsZi4gVGhpcyBpcyBhbG1vc3QgYWx3YXlzIGEgbWlzdGFrZSwgYW5kIGluIGRldiBtb2RlIGAsXG4gICAgICAgICAgYHdlIHJlbmRlciBzb21lIHdhcm5pbmcgdGV4dC4gSW4gcHJvZHVjdGlvbiBob3dldmVyLCB3ZSdsbCBgLFxuICAgICAgICAgIGByZW5kZXIgaXQsIHdoaWNoIHdpbGwgdXN1YWxseSByZXN1bHQgaW4gYW4gZXJyb3IsIGFuZCBzb21ldGltZXMgYCxcbiAgICAgICAgICBgaW4gdGhlIGVsZW1lbnQgZGlzYXBwZWFyaW5nIGZyb20gdGhlIERPTS5gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NvbW1pdE5vZGUodmFsdWUgYXMgTm9kZSk7XG4gICAgfSBlbHNlIGlmIChpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgdGhpcy5fY29tbWl0SXRlcmFibGUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGYWxsYmFjaywgd2lsbCByZW5kZXIgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvblxuICAgICAgdGhpcy5fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfaW5zZXJ0PFQgZXh0ZW5kcyBOb2RlPihub2RlOiBUKSB7XG4gICAgcmV0dXJuIHdyYXAod3JhcCh0aGlzLl8kc3RhcnROb2RlKS5wYXJlbnROb2RlISkuaW5zZXJ0QmVmb3JlKFxuICAgICAgbm9kZSxcbiAgICAgIHRoaXMuXyRlbmROb2RlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbW1pdE5vZGUodmFsdWU6IE5vZGUpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fJGNvbW1pdHRlZFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fJGNsZWFyKCk7XG4gICAgICBpZiAoXG4gICAgICAgIEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUyAmJlxuICAgICAgICBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwgIT09IG5vb3BTYW5pdGl6ZXJcbiAgICAgICkge1xuICAgICAgICBjb25zdCBwYXJlbnROb2RlTmFtZSA9IHRoaXMuXyRzdGFydE5vZGUucGFyZW50Tm9kZT8ubm9kZU5hbWU7XG4gICAgICAgIGlmIChwYXJlbnROb2RlTmFtZSA9PT0gJ1NUWUxFJyB8fCBwYXJlbnROb2RlTmFtZSA9PT0gJ1NDUklQVCcpIHtcbiAgICAgICAgICBsZXQgbWVzc2FnZSA9ICdGb3JiaWRkZW4nO1xuICAgICAgICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGVOYW1lID09PSAnU1RZTEUnKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIGBMaXQgZG9lcyBub3Qgc3VwcG9ydCBiaW5kaW5nIGluc2lkZSBzdHlsZSBub2Rlcy4gYCArXG4gICAgICAgICAgICAgICAgYFRoaXMgaXMgYSBzZWN1cml0eSByaXNrLCBhcyBzdHlsZSBpbmplY3Rpb24gYXR0YWNrcyBjYW4gYCArXG4gICAgICAgICAgICAgICAgYGV4ZmlsdHJhdGUgZGF0YSBhbmQgc3Bvb2YgVUlzLiBgICtcbiAgICAgICAgICAgICAgICBgQ29uc2lkZXIgaW5zdGVhZCB1c2luZyBjc3NcXGAuLi5cXGAgbGl0ZXJhbHMgYCArXG4gICAgICAgICAgICAgICAgYHRvIGNvbXBvc2Ugc3R5bGVzLCBhbmQgZG8gZHluYW1pYyBzdHlsaW5nIHdpdGggYCArXG4gICAgICAgICAgICAgICAgYGNzcyBjdXN0b20gcHJvcGVydGllcywgOjpwYXJ0cywgPHNsb3Q+cywgYCArXG4gICAgICAgICAgICAgICAgYGFuZCBieSBtdXRhdGluZyB0aGUgRE9NIHJhdGhlciB0aGFuIHN0eWxlc2hlZXRzLmA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtZXNzYWdlID1cbiAgICAgICAgICAgICAgICBgTGl0IGRvZXMgbm90IHN1cHBvcnQgYmluZGluZyBpbnNpZGUgc2NyaXB0IG5vZGVzLiBgICtcbiAgICAgICAgICAgICAgICBgVGhpcyBpcyBhIHNlY3VyaXR5IHJpc2ssIGFzIGl0IGNvdWxkIGFsbG93IGFyYml0cmFyeSBgICtcbiAgICAgICAgICAgICAgICBgY29kZSBleGVjdXRpb24uYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICAgIGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgIGtpbmQ6ICdjb21taXQgbm9kZScsXG4gICAgICAgICAgc3RhcnQ6IHRoaXMuXyRzdGFydE5vZGUsXG4gICAgICAgICAgcGFyZW50OiB0aGlzLl8kcGFyZW50LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gdGhpcy5faW5zZXJ0KHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jb21taXRUZXh0KHZhbHVlOiB1bmtub3duKTogdm9pZCB7XG4gICAgLy8gSWYgdGhlIGNvbW1pdHRlZCB2YWx1ZSBpcyBhIHByaW1pdGl2ZSBpdCBtZWFucyB3ZSBjYWxsZWQgX2NvbW1pdFRleHQgb25cbiAgICAvLyB0aGUgcHJldmlvdXMgcmVuZGVyLCBhbmQgd2Uga25vdyB0aGF0IHRoaXMuXyRzdGFydE5vZGUubmV4dFNpYmxpbmcgaXMgYVxuICAgIC8vIFRleHQgbm9kZS4gV2UgY2FuIG5vdyBqdXN0IHJlcGxhY2UgdGhlIHRleHQgY29udGVudCAoLmRhdGEpIG9mIHRoZSBub2RlLlxuICAgIGlmIChcbiAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSAhPT0gbm90aGluZyAmJlxuICAgICAgaXNQcmltaXRpdmUodGhpcy5fJGNvbW1pdHRlZFZhbHVlKVxuICAgICkge1xuICAgICAgY29uc3Qgbm9kZSA9IHdyYXAodGhpcy5fJHN0YXJ0Tm9kZSkubmV4dFNpYmxpbmcgYXMgVGV4dDtcbiAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHRTYW5pdGl6ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuX3RleHRTYW5pdGl6ZXIgPSBjcmVhdGVTYW5pdGl6ZXIobm9kZSwgJ2RhdGEnLCAncHJvcGVydHknKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHRoaXMuX3RleHRTYW5pdGl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgZGVidWdMb2dFdmVudCAmJlxuICAgICAgICBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICBraW5kOiAnY29tbWl0IHRleHQnLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICAgIChub2RlIGFzIFRleHQpLmRhdGEgPSB2YWx1ZSBhcyBzdHJpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgY29uc3QgdGV4dE5vZGUgPSBkLmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdGhpcy5fY29tbWl0Tm9kZSh0ZXh0Tm9kZSk7XG4gICAgICAgIC8vIFdoZW4gc2V0dGluZyB0ZXh0IGNvbnRlbnQsIGZvciBzZWN1cml0eSBwdXJwb3NlcyBpdCBtYXR0ZXJzIGEgbG90XG4gICAgICAgIC8vIHdoYXQgdGhlIHBhcmVudCBpcy4gRm9yIGV4YW1wbGUsIDxzdHlsZT4gYW5kIDxzY3JpcHQ+IG5lZWQgdG8gYmVcbiAgICAgICAgLy8gaGFuZGxlZCB3aXRoIGNhcmUsIHdoaWxlIDxzcGFuPiBkb2VzIG5vdC4gU28gZmlyc3Qgd2UgbmVlZCB0byBwdXQgYVxuICAgICAgICAvLyB0ZXh0IG5vZGUgaW50byB0aGUgZG9jdW1lbnQsIHRoZW4gd2UgY2FuIHNhbml0aXplIGl0cyBjb250ZW50LlxuICAgICAgICBpZiAodGhpcy5fdGV4dFNhbml0aXplciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fdGV4dFNhbml0aXplciA9IGNyZWF0ZVNhbml0aXplcih0ZXh0Tm9kZSwgJ2RhdGEnLCAncHJvcGVydHknKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHRoaXMuX3RleHRTYW5pdGl6ZXIodmFsdWUpO1xuICAgICAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICAgICAgZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAgICBraW5kOiAnY29tbWl0IHRleHQnLFxuICAgICAgICAgICAgbm9kZTogdGV4dE5vZGUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGV4dE5vZGUuZGF0YSA9IHZhbHVlIGFzIHN0cmluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NvbW1pdE5vZGUoZC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSBhcyBzdHJpbmcpKTtcbiAgICAgICAgZGVidWdMb2dFdmVudCAmJlxuICAgICAgICAgIGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgICAga2luZDogJ2NvbW1pdCB0ZXh0JyxcbiAgICAgICAgICAgIG5vZGU6IHdyYXAodGhpcy5fJHN0YXJ0Tm9kZSkubmV4dFNpYmxpbmcgYXMgVGV4dCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbW1pdFRlbXBsYXRlUmVzdWx0KFxuICAgIHJlc3VsdDogVGVtcGxhdGVSZXN1bHQgfCBDb21waWxlZFRlbXBsYXRlUmVzdWx0XG4gICk6IHZvaWQge1xuICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgY29uc3Qge3ZhbHVlcywgWydfJGxpdFR5cGUkJ106IHR5cGV9ID0gcmVzdWx0O1xuICAgIC8vIElmICRsaXRUeXBlJCBpcyBhIG51bWJlciwgcmVzdWx0IGlzIGEgcGxhaW4gVGVtcGxhdGVSZXN1bHQgYW5kIHdlIGdldFxuICAgIC8vIHRoZSB0ZW1wbGF0ZSBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZS4gSWYgbm90LCByZXN1bHQgaXMgYVxuICAgIC8vIENvbXBpbGVkVGVtcGxhdGVSZXN1bHQgYW5kIF8kbGl0VHlwZSQgaXMgYSBDb21waWxlZFRlbXBsYXRlIGFuZCB3ZSBuZWVkXG4gICAgLy8gdG8gY3JlYXRlIHRoZSA8dGVtcGxhdGU+IGVsZW1lbnQgdGhlIGZpcnN0IHRpbWUgd2Ugc2VlIGl0LlxuICAgIGNvbnN0IHRlbXBsYXRlOiBUZW1wbGF0ZSB8IENvbXBpbGVkVGVtcGxhdGUgPVxuICAgICAgdHlwZW9mIHR5cGUgPT09ICdudW1iZXInXG4gICAgICAgID8gdGhpcy5fJGdldFRlbXBsYXRlKHJlc3VsdCBhcyBVbmNvbXBpbGVkVGVtcGxhdGVSZXN1bHQpXG4gICAgICAgIDogKHR5cGUuZWwgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKHR5cGUuZWwgPSBUZW1wbGF0ZS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICB0cnVzdEZyb21UZW1wbGF0ZVN0cmluZyh0eXBlLmgsIHR5cGUuaFswXSksXG4gICAgICAgICAgICAgIHRoaXMub3B0aW9uc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgdHlwZSk7XG5cbiAgICBpZiAoKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBUZW1wbGF0ZUluc3RhbmNlKT8uXyR0ZW1wbGF0ZSA9PT0gdGVtcGxhdGUpIHtcbiAgICAgIGRlYnVnTG9nRXZlbnQgJiZcbiAgICAgICAgZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAga2luZDogJ3RlbXBsYXRlIHVwZGF0aW5nJyxcbiAgICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgICBpbnN0YW5jZTogdGhpcy5fJGNvbW1pdHRlZFZhbHVlIGFzIFRlbXBsYXRlSW5zdGFuY2UsXG4gICAgICAgICAgcGFydHM6ICh0aGlzLl8kY29tbWl0dGVkVmFsdWUgYXMgVGVtcGxhdGVJbnN0YW5jZSkuXyRwYXJ0cyxcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICB9KTtcbiAgICAgICh0aGlzLl8kY29tbWl0dGVkVmFsdWUgYXMgVGVtcGxhdGVJbnN0YW5jZSkuX3VwZGF0ZSh2YWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBUZW1wbGF0ZUluc3RhbmNlKHRlbXBsYXRlIGFzIFRlbXBsYXRlLCB0aGlzKTtcbiAgICAgIGNvbnN0IGZyYWdtZW50ID0gaW5zdGFuY2UuX2Nsb25lKHRoaXMub3B0aW9ucyk7XG4gICAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICAgIGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgIGtpbmQ6ICd0ZW1wbGF0ZSBpbnN0YW50aWF0ZWQnLFxuICAgICAgICAgIHRlbXBsYXRlLFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIHBhcnRzOiBpbnN0YW5jZS5fJHBhcnRzLFxuICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgIH0pO1xuICAgICAgaW5zdGFuY2UuX3VwZGF0ZSh2YWx1ZXMpO1xuICAgICAgZGVidWdMb2dFdmVudCAmJlxuICAgICAgICBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICBraW5kOiAndGVtcGxhdGUgaW5zdGFudGlhdGVkIGFuZCB1cGRhdGVkJyxcbiAgICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICBwYXJ0czogaW5zdGFuY2UuXyRwYXJ0cyxcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICB9KTtcbiAgICAgIHRoaXMuX2NvbW1pdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gaW5zdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgLy8gT3ZlcnJpZGRlbiB2aWEgYGxpdEh0bWxQb2x5ZmlsbFN1cHBvcnRgIHRvIHByb3ZpZGUgcGxhdGZvcm0gc3VwcG9ydC5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGdldFRlbXBsYXRlKHJlc3VsdDogVW5jb21waWxlZFRlbXBsYXRlUmVzdWx0KSB7XG4gICAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5nZXQocmVzdWx0LnN0cmluZ3MpO1xuICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZW1wbGF0ZUNhY2hlLnNldChyZXN1bHQuc3RyaW5ncywgKHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBfY29tbWl0SXRlcmFibGUodmFsdWU6IEl0ZXJhYmxlPHVua25vd24+KTogdm9pZCB7XG4gICAgLy8gRm9yIGFuIEl0ZXJhYmxlLCB3ZSBjcmVhdGUgYSBuZXcgSW5zdGFuY2VQYXJ0IHBlciBpdGVtLCB0aGVuIHNldCBpdHNcbiAgICAvLyB2YWx1ZSB0byB0aGUgaXRlbS4gVGhpcyBpcyBhIGxpdHRsZSBiaXQgb2Ygb3ZlcmhlYWQgZm9yIGV2ZXJ5IGl0ZW0gaW5cbiAgICAvLyBhbiBJdGVyYWJsZSwgYnV0IGl0IGxldHMgdXMgcmVjdXJzZSBlYXNpbHkgYW5kIGVmZmljaWVudGx5IHVwZGF0ZSBBcnJheXNcbiAgICAvLyBvZiBUZW1wbGF0ZVJlc3VsdHMgdGhhdCB3aWxsIGJlIGNvbW1vbmx5IHJldHVybmVkIGZyb20gZXhwcmVzc2lvbnMgbGlrZTpcbiAgICAvLyBhcnJheS5tYXAoKGkpID0+IGh0bWxgJHtpfWApLCBieSByZXVzaW5nIGV4aXN0aW5nIFRlbXBsYXRlSW5zdGFuY2VzLlxuXG4gICAgLy8gSWYgdmFsdWUgaXMgYW4gYXJyYXksIHRoZW4gdGhlIHByZXZpb3VzIHJlbmRlciB3YXMgb2YgYW5cbiAgICAvLyBpdGVyYWJsZSBhbmQgdmFsdWUgd2lsbCBjb250YWluIHRoZSBDaGlsZFBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgLy8gcmVuZGVyLiBJZiB2YWx1ZSBpcyBub3QgYW4gYXJyYXksIGNsZWFyIHRoaXMgcGFydCBhbmQgbWFrZSBhIG5ld1xuICAgIC8vIGFycmF5IGZvciBDaGlsZFBhcnRzLlxuICAgIGlmICghaXNBcnJheSh0aGlzLl8kY29tbWl0dGVkVmFsdWUpKSB7XG4gICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSBbXTtcbiAgICAgIHRoaXMuXyRjbGVhcigpO1xuICAgIH1cblxuICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgIC8vIGl0ZW1zIGZyb20gYSBwcmV2aW91cyByZW5kZXJcbiAgICBjb25zdCBpdGVtUGFydHMgPSB0aGlzLl8kY29tbWl0dGVkVmFsdWUgYXMgQ2hpbGRQYXJ0W107XG4gICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgbGV0IGl0ZW1QYXJ0OiBDaGlsZFBhcnQgfCB1bmRlZmluZWQ7XG5cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgIGlmIChwYXJ0SW5kZXggPT09IGl0ZW1QYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgbm8gZXhpc3RpbmcgcGFydCwgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAvLyBUT0RPIChqdXN0aW5mYWduYW5pKTogdGVzdCBwZXJmIGltcGFjdCBvZiBhbHdheXMgY3JlYXRpbmcgdHdvIHBhcnRzXG4gICAgICAgIC8vIGluc3RlYWQgb2Ygc2hhcmluZyBwYXJ0cyBiZXR3ZWVuIG5vZGVzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9saXQvbGl0L2lzc3Vlcy8xMjY2XG4gICAgICAgIGl0ZW1QYXJ0cy5wdXNoKFxuICAgICAgICAgIChpdGVtUGFydCA9IG5ldyBDaGlsZFBhcnQoXG4gICAgICAgICAgICB0aGlzLl9pbnNlcnQoY3JlYXRlTWFya2VyKCkpLFxuICAgICAgICAgICAgdGhpcy5faW5zZXJ0KGNyZWF0ZU1hcmtlcigpKSxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNcbiAgICAgICAgICApKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV1c2UgYW4gZXhpc3RpbmcgcGFydFxuICAgICAgICBpdGVtUGFydCA9IGl0ZW1QYXJ0c1twYXJ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgaXRlbVBhcnQuXyRzZXRWYWx1ZShpdGVtKTtcbiAgICAgIHBhcnRJbmRleCsrO1xuICAgIH1cblxuICAgIGlmIChwYXJ0SW5kZXggPCBpdGVtUGFydHMubGVuZ3RoKSB7XG4gICAgICAvLyBpdGVtUGFydHMgYWx3YXlzIGhhdmUgZW5kIG5vZGVzXG4gICAgICB0aGlzLl8kY2xlYXIoXG4gICAgICAgIGl0ZW1QYXJ0ICYmIHdyYXAoaXRlbVBhcnQuXyRlbmROb2RlISkubmV4dFNpYmxpbmcsXG4gICAgICAgIHBhcnRJbmRleFxuICAgICAgKTtcbiAgICAgIC8vIFRydW5jYXRlIHRoZSBwYXJ0cyBhcnJheSBzbyBfdmFsdWUgcmVmbGVjdHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgIGl0ZW1QYXJ0cy5sZW5ndGggPSBwYXJ0SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIG5vZGVzIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBQYXJ0IGZyb20gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHN0YXJ0IFN0YXJ0IG5vZGUgdG8gY2xlYXIgZnJvbSwgZm9yIGNsZWFyaW5nIGEgc3Vic2V0IG9mIHRoZSBwYXJ0J3NcbiAgICogICAgIERPTSAodXNlZCB3aGVuIHRydW5jYXRpbmcgaXRlcmFibGVzKVxuICAgKiBAcGFyYW0gZnJvbSAgV2hlbiBgc3RhcnRgIGlzIHNwZWNpZmllZCwgdGhlIGluZGV4IHdpdGhpbiB0aGUgaXRlcmFibGUgZnJvbVxuICAgKiAgICAgd2hpY2ggQ2hpbGRQYXJ0cyBhcmUgYmVpbmcgcmVtb3ZlZCwgdXNlZCBmb3IgZGlzY29ubmVjdGluZyBkaXJlY3RpdmVzIGluXG4gICAqICAgICB0aG9zZSBQYXJ0cy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfJGNsZWFyKFxuICAgIHN0YXJ0OiBDaGlsZE5vZGUgfCBudWxsID0gd3JhcCh0aGlzLl8kc3RhcnROb2RlKS5uZXh0U2libGluZyxcbiAgICBmcm9tPzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMuXyRub3RpZnlDb25uZWN0aW9uQ2hhbmdlZD8uKGZhbHNlLCB0cnVlLCBmcm9tKTtcbiAgICB3aGlsZSAoc3RhcnQgJiYgc3RhcnQgIT09IHRoaXMuXyRlbmROb2RlKSB7XG4gICAgICBjb25zdCBuID0gd3JhcChzdGFydCEpLm5leHRTaWJsaW5nO1xuICAgICAgKHdyYXAoc3RhcnQhKSBhcyBFbGVtZW50KS5yZW1vdmUoKTtcbiAgICAgIHN0YXJ0ID0gbjtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIFJvb3RQYXJ0J3MgYGlzQ29ubmVjdGVkYC4gTm90ZSB0aGF0IHRoaXMgbWV0aG9kXG4gICAqIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBgUm9vdFBhcnRgcyAodGhlIGBDaGlsZFBhcnRgIHJldHVybmVkIGZyb20gYVxuICAgKiB0b3AtbGV2ZWwgYHJlbmRlcigpYCBjYWxsKS4gSXQgaGFzIG5vIGVmZmVjdCBvbiBub24tcm9vdCBDaGlsZFBhcnRzLlxuICAgKiBAcGFyYW0gaXNDb25uZWN0ZWQgV2hldGhlciB0byBzZXRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRDb25uZWN0ZWQoaXNDb25uZWN0ZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5fJHBhcmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9faXNDb25uZWN0ZWQgPSBpc0Nvbm5lY3RlZDtcbiAgICAgIHRoaXMuXyRub3RpZnlDb25uZWN0aW9uQ2hhbmdlZD8uKGlzQ29ubmVjdGVkKTtcbiAgICB9IGVsc2UgaWYgKERFVl9NT0RFKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdwYXJ0LnNldENvbm5lY3RlZCgpIG1heSBvbmx5IGJlIGNhbGxlZCBvbiBhICcgK1xuICAgICAgICAgICdSb290UGFydCByZXR1cm5lZCBmcm9tIHJlbmRlcigpLidcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQSB0b3AtbGV2ZWwgYENoaWxkUGFydGAgcmV0dXJuZWQgZnJvbSBgcmVuZGVyYCB0aGF0IG1hbmFnZXMgdGhlIGNvbm5lY3RlZFxuICogc3RhdGUgb2YgYEFzeW5jRGlyZWN0aXZlYHMgY3JlYXRlZCB0aHJvdWdob3V0IHRoZSB0cmVlIGJlbG93IGl0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvb3RQYXJ0IGV4dGVuZHMgQ2hpbGRQYXJ0IHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIGNvbm5lY3Rpb24gc3RhdGUgZm9yIGBBc3luY0RpcmVjdGl2ZWBzIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyByb290XG4gICAqIENoaWxkUGFydC5cbiAgICpcbiAgICogbGl0LWh0bWwgZG9lcyBub3QgYXV0b21hdGljYWxseSBtb25pdG9yIHRoZSBjb25uZWN0ZWRuZXNzIG9mIERPTSByZW5kZXJlZDtcbiAgICogYXMgc3VjaCwgaXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBjYWxsZXIgdG8gYHJlbmRlcmAgdG8gZW5zdXJlIHRoYXRcbiAgICogYHBhcnQuc2V0Q29ubmVjdGVkKGZhbHNlKWAgaXMgY2FsbGVkIGJlZm9yZSB0aGUgcGFydCBvYmplY3QgaXMgcG90ZW50aWFsbHlcbiAgICogZGlzY2FyZGVkLCB0byBlbnN1cmUgdGhhdCBgQXN5bmNEaXJlY3RpdmVgcyBoYXZlIGEgY2hhbmNlIHRvIGRpc3Bvc2Ugb2ZcbiAgICogYW55IHJlc291cmNlcyBiZWluZyBoZWxkLiBJZiBhIGBSb290UGFydGAgdGhhdCB3YXMgcHJldmlvdXNseVxuICAgKiBkaXNjb25uZWN0ZWQgaXMgc3Vic2VxdWVudGx5IHJlLWNvbm5lY3RlZCAoYW5kIGl0cyBgQXN5bmNEaXJlY3RpdmVgcyBzaG91bGRcbiAgICogcmUtY29ubmVjdCksIGBzZXRDb25uZWN0ZWQodHJ1ZSlgIHNob3VsZCBiZSBjYWxsZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpc0Nvbm5lY3RlZCBXaGV0aGVyIGRpcmVjdGl2ZXMgd2l0aGluIHRoaXMgdHJlZSBzaG91bGQgYmUgY29ubmVjdGVkXG4gICAqIG9yIG5vdFxuICAgKi9cbiAgc2V0Q29ubmVjdGVkKGlzQ29ubmVjdGVkOiBib29sZWFuKTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUge0F0dHJpYnV0ZVBhcnR9O1xuY2xhc3MgQXR0cmlidXRlUGFydCBpbXBsZW1lbnRzIERpc2Nvbm5lY3RhYmxlIHtcbiAgcmVhZG9ubHkgdHlwZTpcbiAgICB8IHR5cGVvZiBBVFRSSUJVVEVfUEFSVFxuICAgIHwgdHlwZW9mIFBST1BFUlRZX1BBUlRcbiAgICB8IHR5cGVvZiBCT09MRUFOX0FUVFJJQlVURV9QQVJUXG4gICAgfCB0eXBlb2YgRVZFTlRfUEFSVCA9IEFUVFJJQlVURV9QQVJUO1xuICByZWFkb25seSBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICByZWFkb25seSBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBJZiB0aGlzIGF0dHJpYnV0ZSBwYXJ0IHJlcHJlc2VudHMgYW4gaW50ZXJwb2xhdGlvbiwgdGhpcyBjb250YWlucyB0aGVcbiAgICogc3RhdGljIHN0cmluZ3Mgb2YgdGhlIGludGVycG9sYXRpb24uIEZvciBzaW5nbGUtdmFsdWUsIGNvbXBsZXRlIGJpbmRpbmdzLFxuICAgKiB0aGlzIGlzIHVuZGVmaW5lZC5cbiAgICovXG4gIHJlYWRvbmx5IHN0cmluZ3M/OiBSZWFkb25seUFycmF5PHN0cmluZz47XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgXyRjb21taXR0ZWRWYWx1ZTogdW5rbm93biB8IEFycmF5PHVua25vd24+ID0gbm90aGluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfX2RpcmVjdGl2ZXM/OiBBcnJheTxEaXJlY3RpdmUgfCB1bmRlZmluZWQ+O1xuICAvKiogQGludGVybmFsICovXG4gIF8kcGFyZW50OiBEaXNjb25uZWN0YWJsZTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4/OiBTZXQ8RGlzY29ubmVjdGFibGU+ID0gdW5kZWZpbmVkO1xuXG4gIHByb3RlY3RlZCBfc2FuaXRpemVyOiBWYWx1ZVNhbml0aXplciB8IHVuZGVmaW5lZDtcblxuICBnZXQgdGFnTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWU7XG4gIH1cblxuICAvLyBTZWUgY29tbWVudCBpbiBEaXNjb25uZWN0YWJsZSBpbnRlcmZhY2UgZm9yIHdoeSB0aGlzIGlzIGEgZ2V0dGVyXG4gIGdldCBfJGlzQ29ubmVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl8kcGFyZW50Ll8kaXNDb25uZWN0ZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgc3RyaW5nczogUmVhZG9ubHlBcnJheTxzdHJpbmc+LFxuICAgIHBhcmVudDogRGlzY29ubmVjdGFibGUsXG4gICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyB8IHVuZGVmaW5lZFxuICApIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fJHBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmIChzdHJpbmdzLmxlbmd0aCA+IDIgfHwgc3RyaW5nc1swXSAhPT0gJycgfHwgc3RyaW5nc1sxXSAhPT0gJycpIHtcbiAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IG5ldyBBcnJheShzdHJpbmdzLmxlbmd0aCAtIDEpLmZpbGwobmV3IFN0cmluZygpKTtcbiAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IG5vdGhpbmc7XG4gICAgfVxuICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgIHRoaXMuX3Nhbml0aXplciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhpcyBwYXJ0IGJ5IHJlc29sdmluZyB0aGUgdmFsdWUgZnJvbSBwb3NzaWJseSBtdWx0aXBsZVxuICAgKiB2YWx1ZXMgYW5kIHN0YXRpYyBzdHJpbmdzIGFuZCBjb21taXR0aW5nIGl0IHRvIHRoZSBET00uXG4gICAqIElmIHRoaXMgcGFydCBpcyBzaW5nbGUtdmFsdWVkLCBgdGhpcy5fc3RyaW5nc2Agd2lsbCBiZSB1bmRlZmluZWQsIGFuZCB0aGVcbiAgICogbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgdmFsdWUgYXJndW1lbnQuIElmIHRoaXMgcGFydCBpc1xuICAgKiBtdWx0aS12YWx1ZSwgYHRoaXMuX3N0cmluZ3NgIHdpbGwgYmUgZGVmaW5lZCwgYW5kIHRoZSBtZXRob2QgaXMgY2FsbGVkXG4gICAqIHdpdGggdGhlIHZhbHVlIGFycmF5IG9mIHRoZSBwYXJ0J3Mgb3duaW5nIFRlbXBsYXRlSW5zdGFuY2UsIGFuZCBhbiBvZmZzZXRcbiAgICogaW50byB0aGUgdmFsdWUgYXJyYXkgZnJvbSB3aGljaCB0aGUgdmFsdWVzIHNob3VsZCBiZSByZWFkLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBvdmVybG9hZGVkIHRoaXMgd2F5IHRvIGVsaW1pbmF0ZSBzaG9ydC1saXZlZCBhcnJheSBzbGljZXNcbiAgICogb2YgdGhlIHRlbXBsYXRlIGluc3RhbmNlIHZhbHVlcywgYW5kIGFsbG93IGEgZmFzdC1wYXRoIGZvciBzaW5nbGUtdmFsdWVkXG4gICAqIHBhcnRzLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHBhcnQgdmFsdWUsIG9yIGFuIGFycmF5IG9mIHZhbHVlcyBmb3IgbXVsdGktdmFsdWVkIHBhcnRzXG4gICAqIEBwYXJhbSB2YWx1ZUluZGV4IHRoZSBpbmRleCB0byBzdGFydCByZWFkaW5nIHZhbHVlcyBmcm9tLiBgdW5kZWZpbmVkYCBmb3JcbiAgICogICBzaW5nbGUtdmFsdWVkIHBhcnRzXG4gICAqIEBwYXJhbSBub0NvbW1pdCBjYXVzZXMgdGhlIHBhcnQgdG8gbm90IGNvbW1pdCBpdHMgdmFsdWUgdG8gdGhlIERPTS4gVXNlZFxuICAgKiAgIGluIGh5ZHJhdGlvbiB0byBwcmltZSBhdHRyaWJ1dGUgcGFydHMgd2l0aCB0aGVpciBmaXJzdC1yZW5kZXJlZCB2YWx1ZSxcbiAgICogICBidXQgbm90IHNldCB0aGUgYXR0cmlidXRlLCBhbmQgaW4gU1NSIHRvIG5vLW9wIHRoZSBET00gb3BlcmF0aW9uIGFuZFxuICAgKiAgIGNhcHR1cmUgdGhlIHZhbHVlIGZvciBzZXJpYWxpemF0aW9uLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF8kc2V0VmFsdWUoXG4gICAgdmFsdWU6IHVua25vd24gfCBBcnJheTx1bmtub3duPixcbiAgICBkaXJlY3RpdmVQYXJlbnQ6IERpcmVjdGl2ZVBhcmVudCA9IHRoaXMsXG4gICAgdmFsdWVJbmRleD86IG51bWJlcixcbiAgICBub0NvbW1pdD86IGJvb2xlYW5cbiAgKSB7XG4gICAgY29uc3Qgc3RyaW5ncyA9IHRoaXMuc3RyaW5ncztcblxuICAgIC8vIFdoZXRoZXIgYW55IG9mIHRoZSB2YWx1ZXMgaGFzIGNoYW5nZWQsIGZvciBkaXJ0eS1jaGVja2luZ1xuICAgIGxldCBjaGFuZ2UgPSBmYWxzZTtcblxuICAgIGlmIChzdHJpbmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFNpbmdsZS12YWx1ZSBiaW5kaW5nIGNhc2VcbiAgICAgIHZhbHVlID0gcmVzb2x2ZURpcmVjdGl2ZSh0aGlzLCB2YWx1ZSwgZGlyZWN0aXZlUGFyZW50LCAwKTtcbiAgICAgIGNoYW5nZSA9XG4gICAgICAgICFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHxcbiAgICAgICAgKHZhbHVlICE9PSB0aGlzLl8kY29tbWl0dGVkVmFsdWUgJiYgdmFsdWUgIT09IG5vQ2hhbmdlKTtcbiAgICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEludGVycG9sYXRpb24gY2FzZVxuICAgICAgY29uc3QgdmFsdWVzID0gdmFsdWUgYXMgQXJyYXk8dW5rbm93bj47XG4gICAgICB2YWx1ZSA9IHN0cmluZ3NbMF07XG5cbiAgICAgIGxldCBpLCB2O1xuICAgICAgZm9yIChpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHYgPSByZXNvbHZlRGlyZWN0aXZlKHRoaXMsIHZhbHVlc1t2YWx1ZUluZGV4ISArIGldLCBkaXJlY3RpdmVQYXJlbnQsIGkpO1xuXG4gICAgICAgIGlmICh2ID09PSBub0NoYW5nZSkge1xuICAgICAgICAgIC8vIElmIHRoZSB1c2VyLXByb3ZpZGVkIHZhbHVlIGlzIGBub0NoYW5nZWAsIHVzZSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICB2ID0gKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBBcnJheTx1bmtub3duPilbaV07XG4gICAgICAgIH1cbiAgICAgICAgY2hhbmdlIHx8PVxuICAgICAgICAgICFpc1ByaW1pdGl2ZSh2KSB8fCB2ICE9PSAodGhpcy5fJGNvbW1pdHRlZFZhbHVlIGFzIEFycmF5PHVua25vd24+KVtpXTtcbiAgICAgICAgaWYgKHYgPT09IG5vdGhpbmcpIHtcbiAgICAgICAgICB2YWx1ZSA9IG5vdGhpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT09IG5vdGhpbmcpIHtcbiAgICAgICAgICB2YWx1ZSArPSAodiA/PyAnJykgKyBzdHJpbmdzW2kgKyAxXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBhbHdheXMgcmVjb3JkIGVhY2ggdmFsdWUsIGV2ZW4gaWYgb25lIGlzIGBub3RoaW5nYCwgZm9yIGZ1dHVyZVxuICAgICAgICAvLyBjaGFuZ2UgZGV0ZWN0aW9uLlxuICAgICAgICAodGhpcy5fJGNvbW1pdHRlZFZhbHVlIGFzIEFycmF5PHVua25vd24+KVtpXSA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaGFuZ2UgJiYgIW5vQ29tbWl0KSB7XG4gICAgICB0aGlzLl9jb21taXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfY29tbWl0VmFsdWUodmFsdWU6IHVua25vd24pIHtcbiAgICBpZiAodmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgICh3cmFwKHRoaXMuZWxlbWVudCkgYXMgRWxlbWVudCkucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nhbml0aXplciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fc2FuaXRpemVyID0gc2FuaXRpemVyRmFjdG9yeUludGVybmFsKFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICAgICAgJ2F0dHJpYnV0ZSdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdGhpcy5fc2FuaXRpemVyKHZhbHVlID8/ICcnKTtcbiAgICAgIH1cbiAgICAgIGRlYnVnTG9nRXZlbnQgJiZcbiAgICAgICAgZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAga2luZDogJ2NvbW1pdCBhdHRyaWJ1dGUnLFxuICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICAgICh3cmFwKHRoaXMuZWxlbWVudCkgYXMgRWxlbWVudCkuc2V0QXR0cmlidXRlKFxuICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICh2YWx1ZSA/PyAnJykgYXMgc3RyaW5nXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSB7UHJvcGVydHlQYXJ0fTtcbmNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge1xuICBvdmVycmlkZSByZWFkb25seSB0eXBlID0gUFJPUEVSVFlfUEFSVDtcblxuICAvKiogQGludGVybmFsICovXG4gIG92ZXJyaWRlIF9jb21taXRWYWx1ZSh2YWx1ZTogdW5rbm93bikge1xuICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgIGlmICh0aGlzLl9zYW5pdGl6ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9zYW5pdGl6ZXIgPSBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwoXG4gICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgICAncHJvcGVydHknXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRoaXMuX3Nhbml0aXplcih2YWx1ZSk7XG4gICAgfVxuICAgIGRlYnVnTG9nRXZlbnQgJiZcbiAgICAgIGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICBraW5kOiAnY29tbWl0IHByb3BlcnR5JyxcbiAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICh0aGlzLmVsZW1lbnQgYXMgYW55KVt0aGlzLm5hbWVdID0gdmFsdWUgPT09IG5vdGhpbmcgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSB7Qm9vbGVhbkF0dHJpYnV0ZVBhcnR9O1xuY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgb3ZlcnJpZGUgcmVhZG9ubHkgdHlwZSA9IEJPT0xFQU5fQVRUUklCVVRFX1BBUlQ7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBvdmVycmlkZSBfY29tbWl0VmFsdWUodmFsdWU6IHVua25vd24pIHtcbiAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAga2luZDogJ2NvbW1pdCBib29sZWFuIGF0dHJpYnV0ZScsXG4gICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICB2YWx1ZTogISEodmFsdWUgJiYgdmFsdWUgIT09IG5vdGhpbmcpLFxuICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICB9KTtcbiAgICAod3JhcCh0aGlzLmVsZW1lbnQpIGFzIEVsZW1lbnQpLnRvZ2dsZUF0dHJpYnV0ZShcbiAgICAgIHRoaXMubmFtZSxcbiAgICAgICEhdmFsdWUgJiYgdmFsdWUgIT09IG5vdGhpbmdcbiAgICApO1xuICB9XG59XG5cbnR5cGUgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zID0gRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCAmXG4gIFBhcnRpYWw8QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnM+O1xuXG4vKipcbiAqIEFuIEF0dHJpYnV0ZVBhcnQgdGhhdCBtYW5hZ2VzIGFuIGV2ZW50IGxpc3RlbmVyIHZpYSBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lci5cbiAqXG4gKiBUaGlzIHBhcnQgd29ya3MgYnkgYWRkaW5nIGl0c2VsZiBhcyB0aGUgZXZlbnQgbGlzdGVuZXIgb24gYW4gZWxlbWVudCwgdGhlblxuICogZGVsZWdhdGluZyB0byB0aGUgdmFsdWUgcGFzc2VkIHRvIGl0LiBUaGlzIHJlZHVjZXMgdGhlIG51bWJlciBvZiBjYWxscyB0b1xuICogYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIgaWYgdGhlIGxpc3RlbmVyIGNoYW5nZXMgZnJlcXVlbnRseSwgc3VjaCBhcyB3aGVuIGFuXG4gKiBpbmxpbmUgZnVuY3Rpb24gaXMgdXNlZCBhcyBhIGxpc3RlbmVyLlxuICpcbiAqIEJlY2F1c2UgZXZlbnQgb3B0aW9ucyBhcmUgcGFzc2VkIHdoZW4gYWRkaW5nIGxpc3RlbmVycywgd2UgbXVzdCB0YWtlIGNhc2VcbiAqIHRvIGFkZCBhbmQgcmVtb3ZlIHRoZSBwYXJ0IGFzIGEgbGlzdGVuZXIgd2hlbiB0aGUgZXZlbnQgb3B0aW9ucyBjaGFuZ2UuXG4gKi9cbmV4cG9ydCB0eXBlIHtFdmVudFBhcnR9O1xuY2xhc3MgRXZlbnRQYXJ0IGV4dGVuZHMgQXR0cmlidXRlUGFydCB7XG4gIG92ZXJyaWRlIHJlYWRvbmx5IHR5cGUgPSBFVkVOVF9QQVJUO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBzdHJpbmdzOiBSZWFkb25seUFycmF5PHN0cmluZz4sXG4gICAgcGFyZW50OiBEaXNjb25uZWN0YWJsZSxcbiAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MsIHBhcmVudCwgb3B0aW9ucyk7XG5cbiAgICBpZiAoREVWX01PREUgJiYgdGhpcy5zdHJpbmdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEEgXFxgPCR7ZWxlbWVudC5sb2NhbE5hbWV9PlxcYCBoYXMgYSBcXGBAJHtuYW1lfT0uLi5cXGAgbGlzdGVuZXIgd2l0aCBgICtcbiAgICAgICAgICAnaW52YWxpZCBjb250ZW50LiBFdmVudCBsaXN0ZW5lcnMgaW4gdGVtcGxhdGVzIG11c3QgaGF2ZSBleGFjdGx5ICcgK1xuICAgICAgICAgICdvbmUgZXhwcmVzc2lvbiBhbmQgbm8gc3Vycm91bmRpbmcgdGV4dC4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEV2ZW50UGFydCBkb2VzIG5vdCB1c2UgdGhlIGJhc2UgXyRzZXRWYWx1ZS9fcmVzb2x2ZVZhbHVlIGltcGxlbWVudGF0aW9uXG4gIC8vIHNpbmNlIHRoZSBkaXJ0eSBjaGVja2luZyBpcyBtb3JlIGNvbXBsZXhcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBvdmVycmlkZSBfJHNldFZhbHVlKFxuICAgIG5ld0xpc3RlbmVyOiB1bmtub3duLFxuICAgIGRpcmVjdGl2ZVBhcmVudDogRGlyZWN0aXZlUGFyZW50ID0gdGhpc1xuICApIHtcbiAgICBuZXdMaXN0ZW5lciA9XG4gICAgICByZXNvbHZlRGlyZWN0aXZlKHRoaXMsIG5ld0xpc3RlbmVyLCBkaXJlY3RpdmVQYXJlbnQsIDApID8/IG5vdGhpbmc7XG4gICAgaWYgKG5ld0xpc3RlbmVyID09PSBub0NoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvbGRMaXN0ZW5lciA9IHRoaXMuXyRjb21taXR0ZWRWYWx1ZTtcblxuICAgIC8vIElmIHRoZSBuZXcgdmFsdWUgaXMgbm90aGluZyBvciBhbnkgb3B0aW9ucyBjaGFuZ2Ugd2UgaGF2ZSB0byByZW1vdmUgdGhlXG4gICAgLy8gcGFydCBhcyBhIGxpc3RlbmVyLlxuICAgIGNvbnN0IHNob3VsZFJlbW92ZUxpc3RlbmVyID1cbiAgICAgIChuZXdMaXN0ZW5lciA9PT0gbm90aGluZyAmJiBvbGRMaXN0ZW5lciAhPT0gbm90aGluZykgfHxcbiAgICAgIChuZXdMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnMpLmNhcHR1cmUgIT09XG4gICAgICAgIChvbGRMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnMpLmNhcHR1cmUgfHxcbiAgICAgIChuZXdMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnMpLm9uY2UgIT09XG4gICAgICAgIChvbGRMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnMpLm9uY2UgfHxcbiAgICAgIChuZXdMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnMpLnBhc3NpdmUgIT09XG4gICAgICAgIChvbGRMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnMpLnBhc3NpdmU7XG5cbiAgICAvLyBJZiB0aGUgbmV3IHZhbHVlIGlzIG5vdCBub3RoaW5nIGFuZCB3ZSByZW1vdmVkIHRoZSBsaXN0ZW5lciwgd2UgaGF2ZVxuICAgIC8vIHRvIGFkZCB0aGUgcGFydCBhcyBhIGxpc3RlbmVyLlxuICAgIGNvbnN0IHNob3VsZEFkZExpc3RlbmVyID1cbiAgICAgIG5ld0xpc3RlbmVyICE9PSBub3RoaW5nICYmXG4gICAgICAob2xkTGlzdGVuZXIgPT09IG5vdGhpbmcgfHwgc2hvdWxkUmVtb3ZlTGlzdGVuZXIpO1xuXG4gICAgZGVidWdMb2dFdmVudCAmJlxuICAgICAgZGVidWdMb2dFdmVudCh7XG4gICAgICAgIGtpbmQ6ICdjb21taXQgZXZlbnQgbGlzdGVuZXInLFxuICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgdmFsdWU6IG5ld0xpc3RlbmVyLFxuICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiBzaG91bGRSZW1vdmVMaXN0ZW5lcixcbiAgICAgICAgYWRkTGlzdGVuZXI6IHNob3VsZEFkZExpc3RlbmVyLFxuICAgICAgICBvbGRMaXN0ZW5lcixcbiAgICAgIH0pO1xuICAgIGlmIChzaG91bGRSZW1vdmVMaXN0ZW5lcikge1xuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgdGhpcyxcbiAgICAgICAgb2xkTGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgIC8vIEJld2FyZTogSUUxMSBhbmQgQ2hyb21lIDQxIGRvbid0IGxpa2UgdXNpbmcgdGhlIGxpc3RlbmVyIGFzIHRoZVxuICAgICAgLy8gb3B0aW9ucyBvYmplY3QuIEZpZ3VyZSBvdXQgaG93IHRvIGRlYWwgdy8gdGhpcyBpbiBJRTExIC0gbWF5YmVcbiAgICAgIC8vIHBhdGNoIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICB0aGlzLFxuICAgICAgICBuZXdMaXN0ZW5lciBhcyBFdmVudExpc3RlbmVyV2l0aE9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IG5ld0xpc3RlbmVyO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZS5jYWxsKHRoaXMub3B0aW9ucz8uaG9zdCA/PyB0aGlzLmVsZW1lbnQsIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSBhcyBFdmVudExpc3RlbmVyT2JqZWN0KS5oYW5kbGVFdmVudChldmVudCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIHtFbGVtZW50UGFydH07XG5jbGFzcyBFbGVtZW50UGFydCBpbXBsZW1lbnRzIERpc2Nvbm5lY3RhYmxlIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEVMRU1FTlRfUEFSVDtcblxuICAvKiogQGludGVybmFsICovXG4gIF9fZGlyZWN0aXZlPzogRGlyZWN0aXZlO1xuXG4gIC8vIFRoaXMgaXMgdG8gZW5zdXJlIHRoYXQgZXZlcnkgUGFydCBoYXMgYSBfJGNvbW1pdHRlZFZhbHVlXG4gIF8kY29tbWl0dGVkVmFsdWU6IHVuZGVmaW5lZDtcblxuICAvKiogQGludGVybmFsICovXG4gIF8kcGFyZW50ITogRGlzY29ubmVjdGFibGU7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4/OiBTZXQ8RGlzY29ubmVjdGFibGU+ID0gdW5kZWZpbmVkO1xuXG4gIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgcGFyZW50OiBEaXNjb25uZWN0YWJsZSxcbiAgICBvcHRpb25zOiBSZW5kZXJPcHRpb25zIHwgdW5kZWZpbmVkXG4gICkge1xuICAgIHRoaXMuXyRwYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8vIFNlZSBjb21tZW50IGluIERpc2Nvbm5lY3RhYmxlIGludGVyZmFjZSBmb3Igd2h5IHRoaXMgaXMgYSBnZXR0ZXJcbiAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuXyRwYXJlbnQuXyRpc0Nvbm5lY3RlZDtcbiAgfVxuXG4gIF8kc2V0VmFsdWUodmFsdWU6IHVua25vd24pOiB2b2lkIHtcbiAgICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgICBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAga2luZDogJ2NvbW1pdCB0byBlbGVtZW50IGJpbmRpbmcnLFxuICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICB9KTtcbiAgICByZXNvbHZlRGlyZWN0aXZlKHRoaXMsIHZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIEVORCBVU0VSUyBTSE9VTEQgTk9UIFJFTFkgT04gVEhJUyBPQkpFQ1QuXG4gKlxuICogUHJpdmF0ZSBleHBvcnRzIGZvciB1c2UgYnkgb3RoZXIgTGl0IHBhY2thZ2VzLCBub3QgaW50ZW5kZWQgZm9yIHVzZSBieVxuICogZXh0ZXJuYWwgdXNlcnMuXG4gKlxuICogV2UgY3VycmVudGx5IGRvIG5vdCBtYWtlIGEgbWFuZ2xlZCByb2xsdXAgYnVpbGQgb2YgdGhlIGxpdC1zc3IgY29kZS4gSW4gb3JkZXJcbiAqIHRvIGtlZXAgYSBudW1iZXIgb2YgKG90aGVyd2lzZSBwcml2YXRlKSB0b3AtbGV2ZWwgZXhwb3J0cyBtYW5nbGVkIGluIHRoZVxuICogY2xpZW50IHNpZGUgY29kZSwgd2UgZXhwb3J0IGEgXyRMSCBvYmplY3QgY29udGFpbmluZyB0aG9zZSBtZW1iZXJzIChvclxuICogaGVscGVyIG1ldGhvZHMgZm9yIGFjY2Vzc2luZyBwcml2YXRlIGZpZWxkcyBvZiB0aG9zZSBtZW1iZXJzKSwgYW5kIHRoZW5cbiAqIHJlLWV4cG9ydCB0aGVtIGZvciB1c2UgaW4gbGl0LXNzci4gVGhpcyBrZWVwcyBsaXQtc3NyIGFnbm9zdGljIHRvIHdoZXRoZXIgdGhlXG4gKiBjbGllbnQtc2lkZSBjb2RlIGlzIGJlaW5nIHVzZWQgaW4gYGRldmAgbW9kZSBvciBgcHJvZGAgbW9kZS5cbiAqXG4gKiBUaGlzIGhhcyBhIHVuaXF1ZSBuYW1lLCB0byBkaXNhbWJpZ3VhdGUgaXQgZnJvbSBwcml2YXRlIGV4cG9ydHMgaW5cbiAqIGxpdC1lbGVtZW50LCB3aGljaCByZS1leHBvcnRzIGFsbCBvZiBsaXQtaHRtbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgXyRMSCA9IHtcbiAgLy8gVXNlZCBpbiBsaXQtc3NyXG4gIF9ib3VuZEF0dHJpYnV0ZVN1ZmZpeDogYm91bmRBdHRyaWJ1dGVTdWZmaXgsXG4gIF9tYXJrZXI6IG1hcmtlcixcbiAgX21hcmtlck1hdGNoOiBtYXJrZXJNYXRjaCxcbiAgX0hUTUxfUkVTVUxUOiBIVE1MX1JFU1VMVCxcbiAgX2dldFRlbXBsYXRlSHRtbDogZ2V0VGVtcGxhdGVIdG1sLFxuICAvLyBVc2VkIGluIHRlc3RzIGFuZCBwcml2YXRlLXNzci1zdXBwb3J0XG4gIF9UZW1wbGF0ZUluc3RhbmNlOiBUZW1wbGF0ZUluc3RhbmNlLFxuICBfaXNJdGVyYWJsZTogaXNJdGVyYWJsZSxcbiAgX3Jlc29sdmVEaXJlY3RpdmU6IHJlc29sdmVEaXJlY3RpdmUsXG4gIF9DaGlsZFBhcnQ6IENoaWxkUGFydCxcbiAgX0F0dHJpYnV0ZVBhcnQ6IEF0dHJpYnV0ZVBhcnQsXG4gIF9Cb29sZWFuQXR0cmlidXRlUGFydDogQm9vbGVhbkF0dHJpYnV0ZVBhcnQsXG4gIF9FdmVudFBhcnQ6IEV2ZW50UGFydCxcbiAgX1Byb3BlcnR5UGFydDogUHJvcGVydHlQYXJ0LFxuICBfRWxlbWVudFBhcnQ6IEVsZW1lbnRQYXJ0LFxufTtcblxuLy8gQXBwbHkgcG9seWZpbGxzIGlmIGF2YWlsYWJsZVxuY29uc3QgcG9seWZpbGxTdXBwb3J0ID0gREVWX01PREVcbiAgPyBnbG9iYWwubGl0SHRtbFBvbHlmaWxsU3VwcG9ydERldk1vZGVcbiAgOiBnbG9iYWwubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtcbnBvbHlmaWxsU3VwcG9ydD8uKFRlbXBsYXRlLCBDaGlsZFBhcnQpO1xuXG4vLyBJTVBPUlRBTlQ6IGRvIG5vdCBjaGFuZ2UgdGhlIHByb3BlcnR5IG5hbWUgb3IgdGhlIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbi8vIFRoaXMgbGluZSB3aWxsIGJlIHVzZWQgaW4gcmVnZXhlcyB0byBzZWFyY2ggZm9yIGxpdC1odG1sIHVzYWdlLlxuKGdsb2JhbC5saXRIdG1sVmVyc2lvbnMgPz89IFtdKS5wdXNoKCczLjIuMScpO1xuaWYgKERFVl9NT0RFICYmIGdsb2JhbC5saXRIdG1sVmVyc2lvbnMubGVuZ3RoID4gMSkge1xuICBpc3N1ZVdhcm5pbmchKFxuICAgICdtdWx0aXBsZS12ZXJzaW9ucycsXG4gICAgYE11bHRpcGxlIHZlcnNpb25zIG9mIExpdCBsb2FkZWQuIGAgK1xuICAgICAgYExvYWRpbmcgbXVsdGlwbGUgdmVyc2lvbnMgaXMgbm90IHJlY29tbWVuZGVkLmBcbiAgKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIGEgdmFsdWUsIHVzdWFsbHkgYSBsaXQtaHRtbCBUZW1wbGF0ZVJlc3VsdCwgdG8gdGhlIGNvbnRhaW5lci5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgcmVuZGVycyB0aGUgdGV4dCBcIkhlbGxvLCBab2UhXCIgaW5zaWRlIGEgcGFyYWdyYXBoIHRhZywgYXBwZW5kaW5nXG4gKiBpdCB0byB0aGUgY29udGFpbmVyIGBkb2N1bWVudC5ib2R5YC5cbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtodG1sLCByZW5kZXJ9IGZyb20gJ2xpdCc7XG4gKlxuICogY29uc3QgbmFtZSA9IFwiWm9lXCI7XG4gKiByZW5kZXIoaHRtbGA8cD5IZWxsbywgJHtuYW1lfSE8L3A+YCwgZG9jdW1lbnQuYm9keSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgQW55IFtyZW5kZXJhYmxlXG4gKiAgIHZhbHVlXShodHRwczovL2xpdC5kZXYvZG9jcy90ZW1wbGF0ZXMvZXhwcmVzc2lvbnMvI2NoaWxkLWV4cHJlc3Npb25zKSxcbiAqICAgdHlwaWNhbGx5IGEge0BsaW5rY29kZSBUZW1wbGF0ZVJlc3VsdH0gY3JlYXRlZCBieSBldmFsdWF0aW5nIGEgdGVtcGxhdGUgdGFnXG4gKiAgIGxpa2Uge0BsaW5rY29kZSBodG1sfSBvciB7QGxpbmtjb2RlIHN2Z30uXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIGNvbnRhaW5lciB0byByZW5kZXIgdG8uIFRoZSBmaXJzdCByZW5kZXIgd2lsbCBhcHBlbmRcbiAqICAgdGhlIHJlbmRlcmVkIHZhbHVlIHRvIHRoZSBjb250YWluZXIsIGFuZCBzdWJzZXF1ZW50IHJlbmRlcnMgd2lsbFxuICogICBlZmZpY2llbnRseSB1cGRhdGUgdGhlIHJlbmRlcmVkIHZhbHVlIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhc1xuICogICBwcmV2aW91c2x5IHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgU2VlIHtAbGlua2NvZGUgUmVuZGVyT3B0aW9uc30gZm9yIG9wdGlvbnMgZG9jdW1lbnRhdGlvbi5cbiAqIEBzZWVcbiAqIHtAbGluayBodHRwczovL2xpdC5kZXYvZG9jcy9saWJyYXJpZXMvc3RhbmRhbG9uZS10ZW1wbGF0ZXMvI3JlbmRlcmluZy1saXQtaHRtbC10ZW1wbGF0ZXN8IFJlbmRlcmluZyBMaXQgSFRNTCBUZW1wbGF0ZXN9XG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAoXG4gIHZhbHVlOiB1bmtub3duLFxuICBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudCxcbiAgb3B0aW9ucz86IFJlbmRlck9wdGlvbnNcbik6IFJvb3RQYXJ0ID0+IHtcbiAgaWYgKERFVl9NT0RFICYmIGNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgLy8gR2l2ZSBhIGNsZWFyZXIgZXJyb3IgbWVzc2FnZSB0aGFuXG4gICAgLy8gICAgIFVuY2F1Z2h0IFR5cGVFcnJvcjogQ2Fubm90IHJlYWQgcHJvcGVydGllcyBvZiBudWxsIChyZWFkaW5nXG4gICAgLy8gICAgICdfJGxpdFBhcnQkJylcbiAgICAvLyB3aGljaCByZWFkcyBsaWtlIGFuIGludGVybmFsIExpdCBlcnJvci5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvIG1heSBub3QgYmUgJHtjb250YWluZXJ9YCk7XG4gIH1cbiAgY29uc3QgcmVuZGVySWQgPSBERVZfTU9ERSA/IGRlYnVnTG9nUmVuZGVySWQrKyA6IDA7XG4gIGNvbnN0IHBhcnRPd25lck5vZGUgPSBvcHRpb25zPy5yZW5kZXJCZWZvcmUgPz8gY29udGFpbmVyO1xuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBsZXQgcGFydDogQ2hpbGRQYXJ0ID0gKHBhcnRPd25lck5vZGUgYXMgYW55KVsnXyRsaXRQYXJ0JCddO1xuICBkZWJ1Z0xvZ0V2ZW50ICYmXG4gICAgZGVidWdMb2dFdmVudCh7XG4gICAgICBraW5kOiAnYmVnaW4gcmVuZGVyJyxcbiAgICAgIGlkOiByZW5kZXJJZCxcbiAgICAgIHZhbHVlLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHBhcnQsXG4gICAgfSk7XG4gIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBlbmROb2RlID0gb3B0aW9ucz8ucmVuZGVyQmVmb3JlID8/IG51bGw7XG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIChwYXJ0T3duZXJOb2RlIGFzIGFueSlbJ18kbGl0UGFydCQnXSA9IHBhcnQgPSBuZXcgQ2hpbGRQYXJ0KFxuICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgZW5kTm9kZSksXG4gICAgICBlbmROb2RlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgb3B0aW9ucyA/PyB7fVxuICAgICk7XG4gIH1cbiAgcGFydC5fJHNldFZhbHVlKHZhbHVlKTtcbiAgZGVidWdMb2dFdmVudCAmJlxuICAgIGRlYnVnTG9nRXZlbnQoe1xuICAgICAga2luZDogJ2VuZCByZW5kZXInLFxuICAgICAgaWQ6IHJlbmRlcklkLFxuICAgICAgdmFsdWUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBvcHRpb25zLFxuICAgICAgcGFydCxcbiAgICB9KTtcbiAgcmV0dXJuIHBhcnQgYXMgUm9vdFBhcnQ7XG59O1xuXG5pZiAoRU5BQkxFX0VYVFJBX1NFQ1VSSVRZX0hPT0tTKSB7XG4gIHJlbmRlci5zZXRTYW5pdGl6ZXIgPSBzZXRTYW5pdGl6ZXI7XG4gIHJlbmRlci5jcmVhdGVTYW5pdGl6ZXIgPSBjcmVhdGVTYW5pdGl6ZXI7XG4gIGlmIChERVZfTU9ERSkge1xuICAgIHJlbmRlci5fdGVzdE9ubHlDbGVhclNhbml0aXplckZhY3RvcnlEb05vdENhbGxPckVsc2UgPVxuICAgICAgX3Rlc3RPbmx5Q2xlYXJTYW5pdGl6ZXJGYWN0b3J5RG9Ob3RDYWxsT3JFbHNlO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwgfSBmcm9tIFwibGl0LWh0bWxcIjtcblxuLy8gTG9vayBvbiB0aGUgbWFpbiBpbmRleCBwYWdlIGZvciBhbGwgdGhlIGFsbG93ZWQgbmFtZXMuXG4vL1xuLy8gSW5zdGFudGlhdGVzIGFuIFNWRyBpY29uIHZpYSB0aGUgPHVzZT4gdGFnLlxuZXhwb3J0IGNvbnN0IGljb24gPSAobmFtZTogc3RyaW5nKTogVGVtcGxhdGVSZXN1bHQgPT4ge1xuICByZXR1cm4gaHRtbGBcbiAgPHN2Z1xuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgIHdpZHRoPVwiMjRcIlxuICAgIGhlaWdodD1cIjI0XCJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgPlxuICAgIDx1c2UgaHJlZj0jJHtuYW1lfT5cbiAgPC9zdmc+YDtcbn07XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gXCJsaXQtaHRtbFwiO1xuaW1wb3J0IHsgaWNvbiB9IGZyb20gXCIuLi9pY29ucy9pY29uc1wiO1xuXG5leHBvcnQgY2xhc3MgRXJyb3JQb3B1cCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgbWVzc2FnZTogc3RyaW5nID0gXCJcIjtcblxuICBwdWJsaWMgc3RhdGljIGRpc3BsYXlNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGltZW91dDogbnVtYmVyID0gMCkge1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcjxFcnJvclBvcHVwPihcImVycm9yLXBvcHVwXCIpIVxuICAgICAgLmRpc3BsYXlNZXNzYWdlSW1wbChtZXNzYWdlLCB0aW1lb3V0KTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGxheU1lc3NhZ2VJbXBsKG1lc3NhZ2U6IHN0cmluZywgdGltZW91dDogbnVtYmVyID0gMCkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgaWYgKHRpbWVvdXQgIT09IDApIHtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuaGlkZSgpLCB0aW1lb3V0KTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLnVuaGlkZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1bmhpZGUoKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBoaWRlKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8c3Bhbj4ke3RoaXMubWVzc2FnZX08L3NwYW4+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiaWNvbi1idXR0b25cIiB0aXRsZT1cIkNsb3NlXCIgQGNsaWNrPSR7KCkgPT4gdGhpcy5oaWRlKCl9PlxuICAgICAgICAke2ljb24oXCJjaGVja1wiKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIGA7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZXJyb3ItcG9wdXBcIiwgRXJyb3JQb3B1cCk7XG4iLCAiaW1wb3J0IHsgRXJyb3JQb3B1cCB9IGZyb20gJy4uL2Vycm9yLXBvcHVwL2Vycm9yLXBvcHVwJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4uL3Jlc3VsdCc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcCB7XG4gICAgJ2Vycm9yLXJlcG9ydCc6IEN1c3RvbUV2ZW50PEVycm9yPjtcbiAgfVxufVxuXG50eXBlIEVycm9yTWVzc2FnZVJlcG9ydGluZyA9ICdFcnJvclBvcHVwJyB8ICdEb2N1bWVudEV2ZW50JztcblxubGV0IHR5cGVPZlJlcG9ydGluZzogRXJyb3JNZXNzYWdlUmVwb3J0aW5nID0gJ0Vycm9yUG9wdXAnO1xuXG5leHBvcnQgY29uc3Qgc2V0RXJyb3JNZXNzYWdlUmVwb3J0aW5nID0gKHQ6IEVycm9yTWVzc2FnZVJlcG9ydGluZykgPT4ge1xuICB0eXBlT2ZSZXBvcnRpbmcgPSB0O1xufTtcblxuLy8gRGlzcGxheXMgdGhlIGdpdmVuIGVycm9yLlxuZXhwb3J0IGNvbnN0IHJlcG9ydEVycm9yTXNnID0gKGVycm9yOiBFcnJvcikgPT4ge1xuICBpZiAodHlwZU9mUmVwb3J0aW5nID09PSAnRXJyb3JQb3B1cCcpIHtcbiAgICBFcnJvclBvcHVwLmRpc3BsYXlNZXNzYWdlKGVycm9yLm1lc3NhZ2UpO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdlcnJvci1yZXBvcnQnLCB7IGRldGFpbDogZXJyb3IgfSkpO1xuICB9XG59O1xuXG4vLyBSZXBvcnRzIHRoZSBlcnJvciBpZiB0aGUgZ2l2ZW4gUmVzdWx0IGlzIG5vdCBvay5cbmV4cG9ydCBjb25zdCByZXBvcnRJZkVycm9yID0gPFQ+KHJldDogUmVzdWx0PFQ+KSA9PiB7XG4gIGlmICghcmV0Lm9rKSB7XG4gICAgcmVwb3J0RXJyb3JNc2cocmV0LmVycm9yKTtcbiAgfVxufTtcbiIsICJpbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSAnLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluJztcbmltcG9ydCB7IHJlcG9ydElmRXJyb3IgfSBmcm9tICcuLi9yZXBvcnQtZXJyb3IvcmVwb3J0LWVycm9yJztcblxuLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIGFkZCB0eXBlcy5cbmNvbnN0IHZzY29kZSA9IGFjcXVpcmVWc0NvZGVBcGkoKTtcblxuaW50ZXJmYWNlIGdldEZpbGVEYXRhQm9keSB7XG4gIGNvbnRlbnRUeXBlOiBzdHJpbmc7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZpbmlzaGVkLWluaXQnLCAoKSA9PiB7XG4gIGNvbnN0IGV4cGxhbk1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEV4cGxhbk1haW4+KCdleHBsYW4tbWFpbicpITtcbiAgZXhwbGFuTWFpbi5lbWJlZGRlZCgpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgYXN5bmMgKGUpID0+IHtcbiAgICBjb25zdCB7IHR5cGUsIGJvZHksIHJlcXVlc3RJZCB9ID0gZS5kYXRhO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnaW5pdCc6IHtcbiAgICAgICAgaWYgKGJvZHkudW50aXRsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgZXhwbGFuTWFpbi5mcm9tVWludDhBcnJheShib2R5LnZhbHVlIGFzIFVpbnQ4QXJyYXkpO1xuICAgICAgICAgIHJlcG9ydElmRXJyb3IocmV0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhc2UgJ2dldEZpbGVEYXRhJzoge1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IChib2R5IGFzIGdldEZpbGVEYXRhQm9keSkuY29udGVudFR5cGU7XG4gICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IGV4cGxhbk1haW4udG9Vbml0OEFycmF5KGNvbnRlbnRUeXBlKTtcbiAgICAgICAgaWYgKCFyZXQub2spIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2c2NvZGUucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6ICdyZXNwb25zZScsXG4gICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgIGJvZHk6IHJldC52YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3VuZG8nOiB7XG4gICAgICAgIGF3YWl0IGV4cGxhbk1haW4udW5kbygpO1xuICAgICAgICB2c2NvZGUucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6ICdyZXNwb25zZScsXG4gICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FzZSAncmVkbyc6IHtcbiAgICAgICAgYXdhaXQgZXhwbGFuTWFpbi5yZWRvKCk7XG4gICAgICAgIHZzY29kZS5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2c2NvZGUucG9zdE1lc3NhZ2UoeyB0eXBlOiAncmVhZHknIH0pO1xufSk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2VkaXQtYWN0aW9uJywgKCkgPT4ge1xuICB2c2NvZGUucG9zdE1lc3NhZ2UoeyB0eXBlOiAnZWRpdCcgfSk7XG59KTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3ItcmVwb3J0JywgKGU6IEN1c3RvbUV2ZW50PEVycm9yPikgPT4ge1xuICBjb25zb2xlLmxvZygnZnJvbSBicmlkZ2UnLCBlLmRldGFpbCk7XG4gIHZzY29kZS5wb3N0TWVzc2FnZSh7XG4gICAgdHlwZTogJ2Vycm9yLXJlcG9ydCcsXG4gICAgdmFsdWU6IGUuZGV0YWlsLm1lc3NhZ2UsXG4gIH0pO1xufSk7XG4iLCAiLyoqIFJlc3VsdCBhbGxvd3MgZWFzaWVyIGhhbmRsaW5nIG9mIHJldHVybmluZyBlaXRoZXIgYW4gZXJyb3Igb3IgYSB2YWx1ZSBmcm9tIGFcbiAqIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IHR5cGUgUmVzdWx0PFQ+ID0geyBvazogdHJ1ZTsgdmFsdWU6IFQgfSB8IHsgb2s6IGZhbHNlOyBlcnJvcjogRXJyb3IgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9rPFQ+KHZhbHVlOiBUKTogUmVzdWx0PFQ+IHtcbiAgcmV0dXJuIHsgb2s6IHRydWUsIHZhbHVlOiB2YWx1ZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3I8VD4odmFsdWU6IHN0cmluZyB8IEVycm9yKTogUmVzdWx0PFQ+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7IG9rOiBmYWxzZSwgZXJyb3I6IG5ldyBFcnJvcih2YWx1ZSkgfTtcbiAgfVxuICByZXR1cm4geyBvazogZmFsc2UsIGVycm9yOiB2YWx1ZSB9O1xufVxuIiwgImltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tICcuLi9leHBsYW5NYWluL2V4cGxhbk1haW4nO1xuaW1wb3J0IHsgT3AgfSBmcm9tICcuLi9vcHMvb3BzJztcbmltcG9ydCB7IG9rLCBSZXN1bHQgfSBmcm9tICcuLi9yZXN1bHQnO1xuXG5leHBvcnQgdHlwZSBQb3N0QWN0b25Xb3JrID0gJycgfCAncGFpbnRDaGFydCcgfCAncGxhbkRlZmluaXRpb25DaGFuZ2VkJztcblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yaztcbiAgLy8gVE9ETyAtIERvIHdlIG5lZWQgYSBQb3N0QWN0aW9uRm9jdXM6IG51bWJlciB3aGljaCBwb2ludHMgdG8gdGhlIFRhc2sgd2Ugc2hvdWxkIG1vdmUgdGhlIGZvY3VzIHRvP1xuICB1bmRvOiBib29sZWFuOyAvLyBJZiB0cnVlIGluY2x1ZGUgaW4gdW5kby9yZWRvIGFjdGlvbnMuXG4gIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+Pjtcbn1cblxuZXhwb3J0IGNsYXNzIE5PT1BBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gJ0RvZXMgbm90aGluZyc7XG4gIHBvc3RBY3Rpb25Xb3JrOiBQb3N0QWN0b25Xb3JrID0gJyc7XG4gIHVuZG86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGFzeW5jIGRvKF86IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgcmV0dXJuIG9rKG5ldyBOT09QQWN0aW9uKCkpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25Gcm9tT3Age1xuICBuYW1lOiBzdHJpbmcgPSAnQWN0aW9uRnJvbU9wJztcbiAgZGVzY3JpcHRpb246IHN0cmluZyA9ICdBY3Rpb24gY29uc3RydWN0ZWQgZGlyZWN0bHkgZnJvbSBhbiBPcC4nO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yaztcbiAgdW5kbzogYm9vbGVhbjtcblxuICBvcDogT3A7XG5cbiAgY29uc3RydWN0b3Iob3A6IE9wLCBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yaywgdW5kbzogYm9vbGVhbikge1xuICAgIHRoaXMucG9zdEFjdGlvbldvcmsgPSBwb3N0QWN0aW9uV29yaztcbiAgICB0aGlzLnVuZG8gPSB1bmRvO1xuICAgIHRoaXMub3AgPSBvcDtcbiAgfVxuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgY29uc3QgcmV0ID0gdGhpcy5vcC5hcHBseVRvKGV4cGxhbk1haW4ucGxhbik7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGV4cGxhbk1haW4ucGxhbiA9IHJldC52YWx1ZS5wbGFuO1xuICAgIHJldHVybiBvayhcbiAgICAgIG5ldyBBY3Rpb25Gcm9tT3AocmV0LnZhbHVlLmludmVyc2UsIHRoaXMucG9zdEFjdGlvbldvcmssIHRoaXMudW5kbylcbiAgICApO1xuICB9XG59XG4iLCAiLyoqIE9uZSB2ZXJ0ZXggb2YgYSBncmFwaC4gKi9cbmV4cG9ydCB0eXBlIFZlcnRleCA9IG9iamVjdDtcblxuLyoqIEV2ZXJ5IFZlcnRleCBpbiBhIGdyYXBoLiAqL1xuZXhwb3J0IHR5cGUgVmVydGljZXMgPSBWZXJ0ZXhbXTtcblxuLyoqIEEgc3Vic2V0IG9mIFZlcnRpY2VzIHJlZmVycmVkIHRvIGJ5IHRoZWlyIGluZGV4IG51bWJlci4gKi9cbmV4cG9ydCB0eXBlIFZlcnRleEluZGljZXMgPSBudW1iZXJbXTtcblxuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RlZEVkZ2VTZXJpYWxpemVkIHtcbiAgaTogbnVtYmVyO1xuICBqOiBudW1iZXI7XG59XG5cbi8qKiBPbmUgZWRnZSBvZiBhIGdyYXBoLCB3aGljaCBpcyBhIGRpcmVjdGVkIGNvbm5lY3Rpb24gZnJvbSB0aGUgaSd0aCBWZXJ0ZXggdG9cbnRoZSBqJ3RoIFZlcnRleCwgd2hlcmUgdGhlIFZlcnRleCBpcyBzdG9yZWQgaW4gYSBWZXJ0aWNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIERpcmVjdGVkRWRnZSB7XG4gIGk6IG51bWJlciA9IDA7XG4gIGo6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoaTogbnVtYmVyID0gMCwgajogbnVtYmVyID0gMCkge1xuICAgIHRoaXMuaSA9IGk7XG4gICAgdGhpcy5qID0gajtcbiAgfVxuXG4gIGVxdWFsKHJoczogRGlyZWN0ZWRFZGdlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHJocy5pID09PSB0aGlzLmkgJiYgcmhzLmogPT09IHRoaXMuajtcbiAgfVxuXG4gIHRvSlNPTigpOiBEaXJlY3RlZEVkZ2VTZXJpYWxpemVkIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTogdGhpcy5pLFxuICAgICAgajogdGhpcy5qLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oZGVzOiBEaXJlY3RlZEVkZ2VTZXJpYWxpemVkKTogRGlyZWN0ZWRFZGdlIHtcbiAgICByZXR1cm4gbmV3IERpcmVjdGVkRWRnZShkZXMuaSwgZGVzLmopO1xuICB9XG59XG5cbi8qKiBFdmVyeSBFZ2RlIGluIGEgZ3JhcGguICovXG5leHBvcnQgdHlwZSBFZGdlcyA9IERpcmVjdGVkRWRnZVtdO1xuXG4vKiogQSBncmFwaCBpcyBqdXN0IGEgY29sbGVjdGlvbiBvZiBWZXJ0aWNlcyBhbmQgRWRnZXMgYmV0d2VlbiB0aG9zZSB2ZXJ0aWNlcy4gKi9cbmV4cG9ydCB0eXBlIERpcmVjdGVkR3JhcGggPSB7XG4gIFZlcnRpY2VzOiBWZXJ0aWNlcztcbiAgRWRnZXM6IEVkZ2VzO1xufTtcblxuLyoqXG4gR3JvdXBzIHRoZSBFZGdlcyBieSB0aGVpciBgaWAgdmFsdWUuXG5cbiBAcGFyYW0gZWRnZXMgLSBBbGwgdGhlIEVnZXMgaW4gYSBEaXJlY3RlZEdyYXBoLlxuIEByZXR1cm5zIEEgbWFwIGZyb20gdGhlIFZlcnRleCBpbmRleCB0byBhbGwgdGhlIEVkZ2VzIHRoYXQgc3RhcnQgYXRcbiAgIGF0IHRoYXQgVmVydGV4IGluZGV4LlxuICovXG5leHBvcnQgY29uc3QgZWRnZXNCeVNyY1RvTWFwID0gKGVkZ2VzOiBFZGdlcyk6IE1hcDxudW1iZXIsIEVkZ2VzPiA9PiB7XG4gIGNvbnN0IHJldCA9IG5ldyBNYXA8bnVtYmVyLCBFZGdlcz4oKTtcblxuICBlZGdlcy5mb3JFYWNoKChlOiBEaXJlY3RlZEVkZ2UpID0+IHtcbiAgICBjb25zdCBhcnIgPSByZXQuZ2V0KGUuaSkgfHwgW107XG4gICAgYXJyLnB1c2goZSk7XG4gICAgcmV0LnNldChlLmksIGFycik7XG4gIH0pO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAgIEdyb3VwcyB0aGUgRWRnZXMgYnkgdGhlaXIgYGpgIHZhbHVlLlxuICBcbiAgIEBwYXJhbSBlZGdlcyAtIEFsbCB0aGUgRWRnZXMgaW4gYSBEaXJlY3RlZEdyYXBoLlxuICAgQHJldHVybnMgQSBtYXAgZnJvbSB0aGUgVmVydGV4IGluZGV4IHRvIGFsbCB0aGUgRWRnZXMgdGhhdCBlbmQgYXRcbiAgICAgYXQgdGhhdCBWZXJ0ZXggaW5kZXguXG4gICAqL1xuXG5leHBvcnQgY29uc3QgZWRnZXNCeURzdFRvTWFwID0gKGVkZ2VzOiBFZGdlcyk6IE1hcDxudW1iZXIsIEVkZ2VzPiA9PiB7XG4gIGNvbnN0IHJldCA9IG5ldyBNYXA8bnVtYmVyLCBFZGdlcz4oKTtcblxuICBlZGdlcy5mb3JFYWNoKChlOiBEaXJlY3RlZEVkZ2UpID0+IHtcbiAgICBjb25zdCBhcnIgPSByZXQuZ2V0KGUuaikgfHwgW107XG4gICAgYXJyLnB1c2goZSk7XG4gICAgcmV0LnNldChlLmosIGFycik7XG4gIH0pO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5leHBvcnQgdHlwZSBTcmNBbmREc3RSZXR1cm4gPSB7XG4gIGJ5U3JjOiBNYXA8bnVtYmVyLCBFZGdlcz47XG4gIGJ5RHN0OiBNYXA8bnVtYmVyLCBFZGdlcz47XG59O1xuXG5leHBvcnQgY29uc3QgZWRnZXNCeVNyY0FuZERzdFRvTWFwID0gKGVkZ2VzOiBFZGdlcyk6IFNyY0FuZERzdFJldHVybiA9PiB7XG4gIGNvbnN0IHJldCA9IHtcbiAgICBieVNyYzogbmV3IE1hcDxudW1iZXIsIEVkZ2VzPigpLFxuICAgIGJ5RHN0OiBuZXcgTWFwPG51bWJlciwgRWRnZXM+KCksXG4gIH07XG5cbiAgZWRnZXMuZm9yRWFjaCgoZTogRGlyZWN0ZWRFZGdlKSA9PiB7XG4gICAgbGV0IGFyciA9IHJldC5ieVNyYy5nZXQoZS5pKSB8fCBbXTtcbiAgICBhcnIucHVzaChlKTtcbiAgICByZXQuYnlTcmMuc2V0KGUuaSwgYXJyKTtcbiAgICBhcnIgPSByZXQuYnlEc3QuZ2V0KGUuaikgfHwgW107XG4gICAgYXJyLnB1c2goZSk7XG4gICAgcmV0LmJ5RHN0LnNldChlLmosIGFycik7XG4gIH0pO1xuXG4gIHJldHVybiByZXQ7XG59O1xuIiwgImltcG9ydCB7IFJlc3VsdCwgb2sgfSBmcm9tIFwiLi4vcmVzdWx0LnRzXCI7XG5pbXBvcnQgeyBQbGFuIH0gZnJvbSBcIi4uL3BsYW4vcGxhbi50c1wiO1xuXG4vLyBPcGVyYXRpb25zIG9uIFBsYW5zLiBOb3RlIHRoZXkgYXJlIHJldmVyc2libGUsIHNvIHdlIGNhbiBoYXZlIGFuICd1bmRvJyBsaXN0LlxuXG4vLyBBbHNvLCBzb21lIG9wZXJhdGlvbnMgbWlnaHQgaGF2ZSAncGFydGlhbHMnLCBpLmUuIHJldHVybiBhIGxpc3Qgb2YgdmFsaWRcbi8vIG9wdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBvcGVyYXRpb24uIEZvciBleGFtcGxlLCBhZGRpbmcgYVxuLy8gcHJlZGVjZXNzb3IgY291bGQgbGlzdCBhbGwgdGhlIFRhc2tzIHRoYXQgd291bGQgbm90IGZvcm0gYSBsb29wLCBpLmUuIGV4Y2x1ZGVcbi8vIGFsbCBkZXNjZW5kZW50cywgYW5kIHRoZSBUYXNrIGl0c2VsZiwgZnJvbSB0aGUgbGlzdCBvZiBvcHRpb25zLlxuLy9cbi8vICogQ2hhbmdlIHN0cmluZyB2YWx1ZSBpbiBhIFRhc2suXG4vLyAqIENoYW5nZSBkdXJhdGlvbiB2YWx1ZSBpbiBhIFRhc2suXG4vLyAqIEluc2VydCBuZXcgZW1wdHkgVGFzayBhZnRlciBJbmRleC5cbi8vICogU3BsaXQgYSBUYXNrLiAoUHJlZGVjZXNzb3IgdGFrZXMgYWxsIGluY29taW5nIGVkZ2VzLCBzb3VyY2UgdGFza3MgYWxsIG91dGdvaW5nIGVkZ2VzKS5cbi8vXG4vLyAqIER1cGxpY2F0ZSBhIFRhc2sgKGFsbCBlZGdlcyBhcmUgZHVwbGljYXRlZCBmcm9tIHRoZSBzb3VyY2UgVGFzaykuXG4vLyAqIERlbGV0ZSBwcmVkZWNlc3NvciB0byBhIFRhc2suXG4vLyAqIERlbGV0ZSBzdWNjZXNzb3IgdG8gYSBUYXNrLlxuLy8gKiBEZWxldGUgYSBUYXNrLlxuXG4vLyBOZWVkIFVuZG8vUmVkbyBTdGFja3MuXG4vLyBUaGVzZSByZWNvcmQgdGhlIHN1Yi1vcHMgZm9yIGVhY2ggbGFyZ2Ugb3AuIEUuZy4gYW4gaW5zZXJ0IHRhc2sgb3AgaXMgbWFkZVxuLy8gb2YgdGhyZWUgc3ViLW9wczpcbi8vICAgIDEuIGluc2VydCB0YXNrIGludG8gVmVydGljZXMgYW5kIHJlbnVtYmVyIEVkZ2VzXG4vLyAgICAyLiBBZGQgZWRnZSBmcm9tIFN0YXJ0IHRvIE5ldyBUYXNrXG4vLyAgICAzLiBBZGQgZWRnZSBmcm9tIE5ldyBUYXNrIHRvIEZpbmlzaFxuLy9cbi8vIEVhY2ggc3ViLW9wOlxuLy8gICAgMS4gUmVjb3JkcyBhbGwgdGhlIGluZm8gaXQgbmVlZHMgdG8gd29yay5cbi8vICAgIDIuIENhbiBiZSBcImFwcGxpZWRcIiB0byBhIFBsYW4uXG4vLyAgICAzLiBDYW4gZ2VuZXJhdGUgaXRzIGludmVyc2Ugc3ViLW9wLlxuXG4vLyBUaGUgcmVzdWx0cyBmcm9tIGFwcGx5aW5nIGEgU3ViT3AuIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIGdldCB0aGUgaW52ZXJzZSBvZlxuLy8gYSBTdWJPcCBzaW5jZSB0aGUgU3ViT3AgaW52ZXJzZSBtaWdodCBkZXBlbmQgb24gdGhlIHN0YXRlIG9mIHRoZSBQbGFuIGF0IHRoZVxuLy8gdGltZSB0aGUgU3ViT3Agd2FzIGFwcGxpZWQuXG5leHBvcnQgaW50ZXJmYWNlIFN1Yk9wUmVzdWx0IHtcbiAgcGxhbjogUGxhbjtcbiAgaW52ZXJzZTogU3ViT3A7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3ViT3Age1xuICAvLyBJZiB0aGUgYXBwbHkgcmV0dXJucyBhbiBlcnJvciBpdCBpcyBndWFyYW50ZWVkIG5vdCB0byBoYXZlIG1vZGlmaWVkIHRoZVxuICAvLyBQbGFuLlxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wUmVzdWx0IHtcbiAgcGxhbjogUGxhbjtcbiAgaW52ZXJzZTogT3A7XG59XG5cbi8vIE9wIGFyZSBvcGVyYXRpb25zIGFyZSBhcHBsaWVkIHRvIG1ha2UgY2hhbmdlcyB0byBhIFBsYW4uXG5leHBvcnQgY2xhc3MgT3Age1xuICBzdWJPcHM6IFN1Yk9wW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihzdWJPcHM6IFN1Yk9wW10pIHtcbiAgICB0aGlzLnN1Yk9wcyA9IHN1Yk9wcztcbiAgfVxuXG4gIC8vIFJldmVydHMgYWxsIFN1Yk9wcyB1cCB0byB0aGUgZ2l2ZW4gaW5kZXguXG4gIGFwcGx5QWxsSW52ZXJzZVN1Yk9wc1RvUGxhbihcbiAgICBwbGFuOiBQbGFuLFxuICAgIGludmVyc2VTdWJPcHM6IFN1Yk9wW10sXG4gICk6IFJlc3VsdDxQbGFuPiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnZlcnNlU3ViT3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlID0gaW52ZXJzZVN1Yk9wc1tpXS5hcHBseVRvKHBsYW4pO1xuICAgICAgaWYgKCFlLm9rKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgcGxhbiA9IGUudmFsdWUucGxhbjtcbiAgICB9XG5cbiAgICByZXR1cm4gb2socGxhbik7XG4gIH1cblxuICAvLyBBcHBsaWVzIHRoZSBPcCB0byBhIFBsYW4uXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxPcFJlc3VsdD4ge1xuICAgIGNvbnN0IGludmVyc2VTdWJPcHM6IFN1Yk9wW10gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ViT3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlID0gdGhpcy5zdWJPcHNbaV0uYXBwbHlUbyhwbGFuKTtcbiAgICAgIGlmICghZS5vaykge1xuICAgICAgICAvLyBSZXZlcnQgYWxsIHRoZSBTdWJPcHMgYXBwbGllZCB1cCB0byB0aGlzIHBvaW50IHRvIGdldCB0aGUgUGxhbiBiYWNrIGluIGFcbiAgICAgICAgLy8gZ29vZCBwbGFjZS5cbiAgICAgICAgY29uc3QgcmV2ZXJ0RXJyID0gdGhpcy5hcHBseUFsbEludmVyc2VTdWJPcHNUb1BsYW4ocGxhbiwgaW52ZXJzZVN1Yk9wcyk7XG4gICAgICAgIGlmICghcmV2ZXJ0RXJyLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJldmVydEVycjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHBsYW4gPSBlLnZhbHVlLnBsYW47XG4gICAgICBpbnZlcnNlU3ViT3BzLnVuc2hpZnQoZS52YWx1ZS5pbnZlcnNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2soe1xuICAgICAgcGxhbjogcGxhbixcbiAgICAgIGludmVyc2U6IG5ldyBPcChpbnZlcnNlU3ViT3BzKSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBBbGxPcHNSZXN1bHQgPSB7XG4gIG9wczogT3BbXTtcbiAgcGxhbjogUGxhbjtcbn07XG5cbmNvbnN0IGFwcGx5QWxsSW52ZXJzZU9wc1RvUGxhbiA9IChpbnZlcnNlczogT3BbXSwgcGxhbjogUGxhbik6IFJlc3VsdDxQbGFuPiA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW52ZXJzZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByZXMgPSBpbnZlcnNlc1tpXS5hcHBseVRvKHBsYW4pO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBwbGFuID0gcmVzLnZhbHVlLnBsYW47XG4gIH1cblxuICByZXR1cm4gb2socGxhbik7XG59O1xuXG4vLyBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgYXBwbHlpbmcgbXVsdGlwbGUgT3BzIHRvIGEgcGxhbiwgdXNlZCBtb3N0bHkgZm9yXG4vLyB0ZXN0aW5nLlxuZXhwb3J0IGNvbnN0IGFwcGx5QWxsT3BzVG9QbGFuID0gKFxuICBvcHM6IE9wW10sXG4gIHBsYW46IFBsYW4sXG4pOiBSZXN1bHQ8QWxsT3BzUmVzdWx0PiA9PiB7XG4gIGNvbnN0IGludmVyc2VzOiBPcFtdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcmVzID0gb3BzW2ldLmFwcGx5VG8ocGxhbik7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IGludmVyc2VSZXMgPSBhcHBseUFsbEludmVyc2VPcHNUb1BsYW4oaW52ZXJzZXMsIHBsYW4pO1xuICAgICAgaWYgKCFpbnZlcnNlUmVzLm9rKSB7XG4gICAgICAgIC8vIFRPRE8gQ2FuIHdlIHdyYXAgdGhlIEVycm9yIGluIGFub3RoZXIgZXJyb3IgdG8gbWFrZSBpdCBjbGVhciB0aGlzXG4gICAgICAgIC8vIGVycm9yIGhhcHBlbmVkIHdoZW4gdHJ5aW5nIHRvIGNsZWFuIHVwIGZyb20gdGhlIHByZXZpb3VzIEVycm9yIHdoZW5cbiAgICAgICAgLy8gdGhlIGFwcGx5KCkgZmFpbGVkLlxuICAgICAgICByZXR1cm4gaW52ZXJzZVJlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGludmVyc2VzLnVuc2hpZnQocmVzLnZhbHVlLmludmVyc2UpO1xuICAgIHBsYW4gPSByZXMudmFsdWUucGxhbjtcbiAgfVxuXG4gIHJldHVybiBvayh7XG4gICAgb3BzOiBpbnZlcnNlcyxcbiAgICBwbGFuOiBwbGFuLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBhcHBseUFsbE9wc1RvUGxhbkFuZFRoZW5JbnZlcnNlID0gKFxuICBvcHM6IE9wW10sXG4gIHBsYW46IFBsYW4sXG4pOiBSZXN1bHQ8QWxsT3BzUmVzdWx0PiA9PiB7XG4gIGNvbnN0IHJlcyA9IGFwcGx5QWxsT3BzVG9QbGFuKG9wcywgcGxhbik7XG4gIGlmICghcmVzLm9rKSB7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICByZXR1cm4gYXBwbHlBbGxPcHNUb1BsYW4ocmVzLnZhbHVlLm9wcywgcmVzLnZhbHVlLnBsYW4pO1xufTtcbi8vIE5vT3AgaXMgYSBuby1vcC5cbmV4cG9ydCBmdW5jdGlvbiBOb09wKCk6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbXSk7XG59XG4iLCAiLy8gQ2hhbmdlTWV0cmljVmFsdWVcblxuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuLi9jaGFydC9jaGFydC50c1wiO1xuaW1wb3J0IHsgTWV0cmljRGVmaW5pdGlvbiB9IGZyb20gXCIuLi9tZXRyaWNzL21ldHJpY3MudHNcIjtcbmltcG9ydCB7IFBsYW4gfSBmcm9tIFwiLi4vcGxhbi9wbGFuLnRzXCI7XG5pbXBvcnQgeyBSZXN1bHQsIGVycm9yLCBvayB9IGZyb20gXCIuLi9yZXN1bHQudHNcIjtcbmltcG9ydCB7IE9wLCBTdWJPcCwgU3ViT3BSZXN1bHQgfSBmcm9tIFwiLi9vcHMudHNcIjtcblxuZXhwb3J0IGNsYXNzIEFkZE1ldHJpY1N1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBuYW1lOiBzdHJpbmc7XG4gIG1ldHJpY0RlZmluaXRpb246IE1ldHJpY0RlZmluaXRpb247XG5cbiAgLy8gTWFwcyBhbiBpbmRleCBvZiBhIFRhc2sgdG8gYSB2YWx1ZSBmb3IgdGhlIGdpdmVuIG1ldHJpYyBrZXkuXG4gIHRhc2tNZXRyaWNWYWx1ZXM6IE1hcDxudW1iZXIsIG51bWJlcj47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIG1ldHJpY0RlZmluaXRpb246IE1ldHJpY0RlZmluaXRpb24sXG4gICAgdGFza01ldHJpY1ZhbHVlczogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXAoKSwgLy8gU2hvdWxkIG9ubHkgYmUgc3VwcGxpZWQgYnkgaW52ZXJzZSBhY3Rpb25zLlxuICApIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMubWV0cmljRGVmaW5pdGlvbiA9IG1ldHJpY0RlZmluaXRpb247XG4gICAgdGhpcy50YXNrTWV0cmljVmFsdWVzID0gdGFza01ldHJpY1ZhbHVlcztcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGlmIChwbGFuLmdldE1ldHJpY0RlZmluaXRpb24odGhpcy5uYW1lKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5uYW1lfSBhbHJlYWR5IGV4aXN0cyBhcyBhIE1ldHJpY2ApO1xuICAgIH1cblxuICAgIHBsYW4uc2V0TWV0cmljRGVmaW5pdGlvbih0aGlzLm5hbWUsIHRoaXMubWV0cmljRGVmaW5pdGlvbik7XG5cbiAgICAvLyBOb3cgbG9vcCBvdmVyIGV2ZXJ5IHRhc2sgYW5kIGFkZCB0aGlzIG1ldHJpYyBhbmQgc2V0IGl0IHRvIHRoZSBkZWZhdWx0LFxuICAgIC8vIHVubGVzcyB0aGVyZSBpcyBtYXRjaGluZyBlbnRyeSBpbiB0YXNrTWV0cmljVmFsdWVzLCBpbiB3aGljaCBjYXNlIHdlIHdpbGxcbiAgICAvLyB1c2UgdGhhdCB2YWx1ZSwgaS5lLiB0aGlzIEFkZE1ldHJpY1N1Yk9wIGlzIGFjdHVhbGx5IGEgcmV2ZXJ0IG9mIGFcbiAgICAvLyBEZWxldGVNZXRyaWNTdWJPcC5cbiAgICBwbGFuLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2ssIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHRhc2suc2V0TWV0cmljKFxuICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgIHRoaXMudGFza01ldHJpY1ZhbHVlcy5nZXQoaW5kZXgpIHx8IHRoaXMubWV0cmljRGVmaW5pdGlvbi5kZWZhdWx0LFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvayh7IHBsYW46IHBsYW4sIGludmVyc2U6IHRoaXMuaW52ZXJzZSgpIH0pO1xuICB9XG5cbiAgaW52ZXJzZSgpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBEZWxldGVNZXRyaWNTdWJPcCh0aGlzLm5hbWUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVNZXRyaWNTdWJPcCBpbXBsZW1lbnRzIFN1Yk9wIHtcbiAgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBtZXRyaWNEZWZpbml0aW9uID0gcGxhbi5nZXRNZXRyaWNEZWZpbml0aW9uKHRoaXMubmFtZSk7XG5cbiAgICBpZiAobWV0cmljRGVmaW5pdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgIGBUaGUgbWV0cmljIHdpdGggbmFtZSAke3RoaXMubmFtZX0gZG9lcyBub3QgZXhpc3QgYW5kIGNhbid0IGJlIGRlbGV0ZWQuYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG1ldHJpY0RlZmluaXRpb24uaXNTdGF0aWMpIHtcbiAgICAgIHJldHVybiBlcnJvcihgVGhlIHN0YXRpYyBNZXRyaWMgJHt0aGlzLm5hbWV9IGNhbid0IGJlIGRlbGV0ZWQuYCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGZyb20gcmVzb3VyY2UgZGVmaW5pdGlvbnMuXG4gICAgcGxhbi5kZWxldGVNZXRyaWNEZWZpbml0aW9uKHRoaXMubmFtZSk7XG5cbiAgICBjb25zdCB0YXNrSW5kZXhUb0RlbGV0ZWRNZXRyaWNWYWx1ZTogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICAgIC8vIE5vdyBsb29rIGF0IGFsbCBUYXNrcyBhbmQgcmVtb3ZlIGB0aGlzLm5hbWVgIGZyb20gdGhlIG1ldHJpYyB3aGlsZSBhbHNvXG4gICAgLy8gYnVpbGRpbmcgdXAgdGhlIGluZm8gbmVlZGVkIGZvciBhIHJldmVydC5cbiAgICBwbGFuLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2ssIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGFzay5nZXRNZXRyaWModGhpcy5uYW1lKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhc2tJbmRleFRvRGVsZXRlZE1ldHJpY1ZhbHVlLnNldChpbmRleCwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdGFzay5kZWxldGVNZXRyaWModGhpcy5uYW1lKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvayh7XG4gICAgICBwbGFuOiBwbGFuLFxuICAgICAgaW52ZXJzZTogdGhpcy5pbnZlcnNlKG1ldHJpY0RlZmluaXRpb24sIHRhc2tJbmRleFRvRGVsZXRlZE1ldHJpY1ZhbHVlKSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaW52ZXJzZShcbiAgICBtZXRyaWNEZWZpbml0aW9uOiBNZXRyaWNEZWZpbml0aW9uLFxuICAgIG1ldHJpY1ZhbHVlc0ZvckRlbGV0ZWRSZXNvdXJjZU5hbWU6IE1hcDxudW1iZXIsIG51bWJlcj4sXG4gICk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IEFkZE1ldHJpY1N1Yk9wKFxuICAgICAgdGhpcy5uYW1lLFxuICAgICAgbWV0cmljRGVmaW5pdGlvbixcbiAgICAgIG1ldHJpY1ZhbHVlc0ZvckRlbGV0ZWRSZXNvdXJjZU5hbWUsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVuYW1lTWV0cmljU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIG9sZE5hbWU6IHN0cmluZztcbiAgbmV3TmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG9sZE5hbWU6IHN0cmluZywgbmV3TmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vbGROYW1lID0gb2xkTmFtZTtcbiAgICB0aGlzLm5ld05hbWUgPSBuZXdOYW1lO1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgaWYgKHBsYW4uZ2V0TWV0cmljRGVmaW5pdGlvbih0aGlzLm5ld05hbWUpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihgJHt0aGlzLm5ld05hbWV9IGFscmVhZHkgZXhpc3RzIGFzIGEgbWV0cmljLmApO1xuICAgIH1cblxuICAgIGNvbnN0IG1ldHJpY0RlZmluaXRpb24gPSBwbGFuLmdldE1ldHJpY0RlZmluaXRpb24odGhpcy5vbGROYW1lKTtcbiAgICBpZiAobWV0cmljRGVmaW5pdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5vbGROYW1lfSBkb2VzIG5vdCBleGlzdCBhcyBhIE1ldHJpY2ApO1xuICAgIH1cbiAgICBpZiAobWV0cmljRGVmaW5pdGlvbi5pc1N0YXRpYykge1xuICAgICAgcmV0dXJuIGVycm9yKGBTdGF0aWMgbWV0cmljICR7dGhpcy5vbGROYW1lfSBjYW4ndCBiZSByZW5hbWVkLmApO1xuICAgIH1cblxuICAgIHBsYW4uc2V0TWV0cmljRGVmaW5pdGlvbih0aGlzLm5ld05hbWUsIG1ldHJpY0RlZmluaXRpb24pO1xuICAgIHBsYW4uZGVsZXRlTWV0cmljRGVmaW5pdGlvbih0aGlzLm9sZE5hbWUpO1xuXG4gICAgLy8gTm93IGxvb3Agb3ZlciBldmVyeSB0YXNrIGFuZCByZW5hbWUgdGhpcyBtZXRyaWMuXG4gICAgcGxhbi5jaGFydC5WZXJ0aWNlcy5mb3JFYWNoKCh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRhc2suZ2V0TWV0cmljKHRoaXMub2xkTmFtZSkgfHwgbWV0cmljRGVmaW5pdGlvbi5kZWZhdWx0O1xuICAgICAgdGFzay5zZXRNZXRyaWModGhpcy5uZXdOYW1lLCB2YWx1ZSk7XG4gICAgICB0YXNrLmRlbGV0ZU1ldHJpYyh0aGlzLm9sZE5hbWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKCkgfSk7XG4gIH1cblxuICBpbnZlcnNlKCk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IFJlbmFtZU1ldHJpY1N1Yk9wKHRoaXMubmV3TmFtZSwgdGhpcy5vbGROYW1lKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTWV0cmljU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIG5hbWU6IHN0cmluZztcbiAgbWV0cmljRGVmaW5pdGlvbjogTWV0cmljRGVmaW5pdGlvbjtcblxuICAvLyBNYXBzIGFuIGluZGV4IG9mIGEgVGFzayB0byBhIHZhbHVlIGZvciB0aGUgZ2l2ZW4gbWV0cmljIGtleS5cbiAgdGFza01ldHJpY1ZhbHVlczogTWFwPG51bWJlciwgbnVtYmVyPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgbWV0cmljRGVmaW5pdGlvbjogTWV0cmljRGVmaW5pdGlvbixcbiAgICB0YXNrTWV0cmljVmFsdWVzOiBNYXA8bnVtYmVyLCBudW1iZXI+ID0gbmV3IE1hcCgpLCAvLyBTaG91bGQgb25seSBiZSBzdXBwbGllZCBieSBpbnZlcnNlIGFjdGlvbnMuXG4gICkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5tZXRyaWNEZWZpbml0aW9uID0gbWV0cmljRGVmaW5pdGlvbjtcbiAgICB0aGlzLnRhc2tNZXRyaWNWYWx1ZXMgPSB0YXNrTWV0cmljVmFsdWVzO1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgY29uc3Qgb2xkTWV0cmljRGVmaW5pdGlvbiA9IHBsYW4uZ2V0TWV0cmljRGVmaW5pdGlvbih0aGlzLm5hbWUpO1xuICAgIGlmIChvbGRNZXRyaWNEZWZpbml0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihgJHt0aGlzLm5hbWV9IGRvZXMgbm90IGV4aXN0IGFzIGEgTWV0cmljYCk7XG4gICAgfVxuICAgIGlmIChvbGRNZXRyaWNEZWZpbml0aW9uLmlzU3RhdGljKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYFN0YXRpYyBtZXRyaWMgJHt0aGlzLm5hbWV9IGNhbid0IGJlIHVwZGF0ZWQuYCk7XG4gICAgfVxuXG4gICAgLy8gUmF0aW9uYWxpemUgZGVmYXVsdCBzaG91bGQgYmUgaW4gW21pbiwgbWF4XS5cbiAgICB0aGlzLm1ldHJpY0RlZmluaXRpb24uZGVmYXVsdCA9IHRoaXMubWV0cmljRGVmaW5pdGlvbi5yYW5nZS5jbGFtcChcbiAgICAgIHRoaXMubWV0cmljRGVmaW5pdGlvbi5kZWZhdWx0LFxuICAgICk7XG5cbiAgICBwbGFuLnNldE1ldHJpY0RlZmluaXRpb24odGhpcy5uYW1lLCB0aGlzLm1ldHJpY0RlZmluaXRpb24pO1xuXG4gICAgY29uc3QgdGFza01ldHJpY1ZhbHVlczogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbiAgICAvLyBOb3cgbG9vcCBvdmVyIGV2ZXJ5IHRhc2sgYW5kIHVwZGF0ZSB0aGUgbWV0cmljIHZhbHVlcyB0byByZWZsZWN0IHRoZSBuZXdcbiAgICAvLyBtZXRyaWMgZGVmaW5pdGlvbiwgdW5sZXNzIHRoZXJlIGlzIG1hdGNoaW5nIGVudHJ5IGluIHRhc2tNZXRyaWNWYWx1ZXMsIGluXG4gICAgLy8gd2hpY2ggY2FzZSB3ZSB3aWxsIHVzZSB0aGF0IHZhbHVlLCBpLmUuIHRoaXMgVXBkYXRlTWV0cmljU3ViT3AgaXNcbiAgICAvLyBhY3R1YWxseSBhIHJldmVydCBvZiBhbm90aGVyIFVwZGF0ZU1ldHJpY1N1Yk9wLlxuICAgIHBsYW4uY2hhcnQuVmVydGljZXMuZm9yRWFjaCgodGFzazogVGFzaywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0YXNrLmdldE1ldHJpYyh0aGlzLm5hbWUpITtcblxuICAgICAgbGV0IG5ld1ZhbHVlOiBudW1iZXI7XG4gICAgICBpZiAodGhpcy50YXNrTWV0cmljVmFsdWVzLmhhcyhpbmRleCkpIHtcbiAgICAgICAgLy8gdGFza01ldHJpY1ZhbHVlcyBoYXMgYSB2YWx1ZSB0aGVuIHVzZSB0aGF0LCBhcyB0aGlzIGlzIGFuIGludmVyc2VcbiAgICAgICAgLy8gb3BlcmF0aW9uLlxuICAgICAgICBuZXdWYWx1ZSA9IHRoaXMudGFza01ldHJpY1ZhbHVlcy5nZXQoaW5kZXgpITtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIG9sZFZhbHVlID09PSBvbGRNZXRyaWNEZWZpbml0aW9uLmRlZmF1bHQgJiZcbiAgICAgICAgdGhpcy5tZXRyaWNEZWZpbml0aW9uLnJhbmdlLm1pbiA8PSBvbGRWYWx1ZSAmJlxuICAgICAgICB0aGlzLm1ldHJpY0RlZmluaXRpb24ucmFuZ2UubWF4ID4gb2xkVmFsdWVcbiAgICAgICkge1xuICAgICAgICAvLyBJZiB0aGUgb2xkVmFsdWUgaXMgdGhlIGRlZmF1bHQsIGNoYW5nZSBpdCB0byB0aGUgbmV3IGRlZmF1bHQsIGJ1dCBvbmx5IGlmIHRoZVxuICAgICAgICAvLyBuZXcgZGVmYXVsdCBpcyBpbiB0aGUgcmFuZ2UuXG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5tZXRyaWNEZWZpbml0aW9uLmRlZmF1bHQ7XG4gICAgICAgIHRhc2tNZXRyaWNWYWx1ZXMuc2V0KGluZGV4LCBvbGRWYWx1ZSk7XG5cbiAgICAgICAgLy8gV2hhdCBtaWdodCBoYXZlIGNoYW5nZWQgaXMgdGhlIG1pbiBvciBtYXggbmV3VmFsdWUsIHdoaWNoIG1pZ2h0IG1ha2VcbiAgICAgICAgLy8gdGhlIGRlZmF1bHQgdmFsdWUgaW52YWxpZC5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENsYW1wLlxuICAgICAgICBuZXdWYWx1ZSA9IHRoaXMubWV0cmljRGVmaW5pdGlvbi5yYW5nZS5jbGFtcChvbGRWYWx1ZSk7XG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5tZXRyaWNEZWZpbml0aW9uLnByZWNpc2lvbi5yb3VuZChuZXdWYWx1ZSk7XG4gICAgICAgIHRhc2tNZXRyaWNWYWx1ZXMuc2V0KGluZGV4LCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0YXNrLnNldE1ldHJpYyh0aGlzLm5hbWUsIG5ld1ZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvayh7XG4gICAgICBwbGFuOiBwbGFuLFxuICAgICAgaW52ZXJzZTogdGhpcy5pbnZlcnNlKG9sZE1ldHJpY0RlZmluaXRpb24sIHRhc2tNZXRyaWNWYWx1ZXMpLFxuICAgIH0pO1xuICB9XG5cbiAgaW52ZXJzZShcbiAgICBvbGRNZXRyaWNEZWZpbml0aW9uOiBNZXRyaWNEZWZpbml0aW9uLFxuICAgIHRhc2tNZXRyaWNWYWx1ZXM6IE1hcDxudW1iZXIsIG51bWJlcj4sXG4gICk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IFVwZGF0ZU1ldHJpY1N1Yk9wKFxuICAgICAgdGhpcy5uYW1lLFxuICAgICAgb2xkTWV0cmljRGVmaW5pdGlvbixcbiAgICAgIHRhc2tNZXRyaWNWYWx1ZXMsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0TWV0cmljVmFsdWVTdWJPcCBpbXBsZW1lbnRzIFN1Yk9wIHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogbnVtYmVyO1xuICB0YXNrSW5kZXg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIHRhc2tJbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy50YXNrSW5kZXggPSB0YXNrSW5kZXg7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBtZXRyaWNzRGVmaW5pdGlvbiA9IHBsYW4uZ2V0TWV0cmljRGVmaW5pdGlvbih0aGlzLm5hbWUpO1xuICAgIGlmIChtZXRyaWNzRGVmaW5pdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5uYW1lfSBkb2VzIG5vdCBleGlzdCBhcyBhIE1ldHJpY2ApO1xuICAgIH1cblxuICAgIGNvbnN0IHRhc2sgPSBwbGFuLmNoYXJ0LlZlcnRpY2VzW3RoaXMudGFza0luZGV4XTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRhc2suZ2V0TWV0cmljKHRoaXMubmFtZSkgfHwgbWV0cmljc0RlZmluaXRpb24uZGVmYXVsdDtcbiAgICB0YXNrLnNldE1ldHJpYyh0aGlzLm5hbWUsIG1ldHJpY3NEZWZpbml0aW9uLmNsYW1wQW5kUm91bmQodGhpcy52YWx1ZSkpO1xuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKG9sZFZhbHVlKSB9KTtcbiAgfVxuXG4gIGludmVyc2UodmFsdWU6IG51bWJlcik6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IFNldE1ldHJpY1ZhbHVlU3ViT3AodGhpcy5uYW1lLCB2YWx1ZSwgdGhpcy50YXNrSW5kZXgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBZGRNZXRyaWNPcChcbiAgbmFtZTogc3RyaW5nLFxuICBtZXRyaWNEZWZpbml0aW9uOiBNZXRyaWNEZWZpbml0aW9uLFxuKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgQWRkTWV0cmljU3ViT3AobmFtZSwgbWV0cmljRGVmaW5pdGlvbildKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERlbGV0ZU1ldHJpY09wKG5hbWU6IHN0cmluZyk6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IERlbGV0ZU1ldHJpY1N1Yk9wKG5hbWUpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZW5hbWVNZXRyaWNPcChvbGROYW1lOiBzdHJpbmcsIG5ld05hbWU6IHN0cmluZyk6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IFJlbmFtZU1ldHJpY1N1Yk9wKG9sZE5hbWUsIG5ld05hbWUpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVcGRhdGVNZXRyaWNPcChcbiAgbmFtZTogc3RyaW5nLFxuICBtZXRyaWNEZWZpbml0aW9uOiBNZXRyaWNEZWZpbml0aW9uLFxuKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgVXBkYXRlTWV0cmljU3ViT3AobmFtZSwgbWV0cmljRGVmaW5pdGlvbildKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNldE1ldHJpY1ZhbHVlT3AoXG4gIG5hbWU6IHN0cmluZyxcbiAgdmFsdWU6IG51bWJlcixcbiAgdGFza0luZGV4OiBudW1iZXIsXG4pOiBPcCB7XG4gIHJldHVybiBuZXcgT3AoW25ldyBTZXRNZXRyaWNWYWx1ZVN1Yk9wKG5hbWUsIHZhbHVlLCB0YXNrSW5kZXgpXSk7XG59XG4iLCAiaW1wb3J0IHsgUmVzdWx0LCBvaywgZXJyb3IgfSBmcm9tICcuLi9yZXN1bHQudHMnO1xuaW1wb3J0IHsgRGlyZWN0ZWRFZGdlLCBlZGdlc0J5U3JjQW5kRHN0VG9NYXAgfSBmcm9tICcuLi9kYWcvZGFnLnRzJztcbmltcG9ydCB7IFBsYW4gfSBmcm9tICcuLi9wbGFuL3BsYW4udHMnO1xuaW1wb3J0IHsgQ2hhcnQsIFRhc2sgfSBmcm9tICcuLi9jaGFydC9jaGFydC50cyc7XG5pbXBvcnQgeyBPcCwgU3ViT3AsIFN1Yk9wUmVzdWx0IH0gZnJvbSAnLi9vcHMudHMnO1xuaW1wb3J0IHsgU2V0TWV0cmljVmFsdWVTdWJPcCB9IGZyb20gJy4vbWV0cmljcy50cyc7XG5cbi8qKiBBIHZhbHVlIG9mIC0xIGZvciBqIG1lYW5zIHRoZSBGaW5pc2ggTWlsZXN0b25lLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIERpcmVjdGVkRWRnZUZvclBsYW4oXG4gIGk6IG51bWJlcixcbiAgajogbnVtYmVyLFxuICBwbGFuOiBQbGFuXG4pOiBSZXN1bHQ8RGlyZWN0ZWRFZGdlPiB7XG4gIGNvbnN0IGNoYXJ0ID0gcGxhbi5jaGFydDtcbiAgaWYgKGogPT09IC0xKSB7XG4gICAgaiA9IGNoYXJ0LlZlcnRpY2VzLmxlbmd0aCAtIDE7XG4gIH1cbiAgaWYgKGkgPCAwIHx8IGkgPj0gY2hhcnQuVmVydGljZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGVycm9yKFxuICAgICAgYGkgaW5kZXggb3V0IG9mIHJhbmdlOiAke2l9IG5vdCBpbiBbMCwgJHtjaGFydC5WZXJ0aWNlcy5sZW5ndGggLSAxfV1gXG4gICAgKTtcbiAgfVxuICBpZiAoaiA8IDAgfHwgaiA+PSBjaGFydC5WZXJ0aWNlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZXJyb3IoXG4gICAgICBgaiBpbmRleCBvdXQgb2YgcmFuZ2U6ICR7an0gbm90IGluIFswLCAke2NoYXJ0LlZlcnRpY2VzLmxlbmd0aCAtIDF9XWBcbiAgICApO1xuICB9XG4gIGlmIChpID09PSBqKSB7XG4gICAgcmV0dXJuIGVycm9yKGBBIFRhc2sgY2FuIG5vdCBkZXBlbmQgb24gaXRzZWxmOiAke2l9ID09PSAke2p9YCk7XG4gIH1cbiAgcmV0dXJuIG9rKG5ldyBEaXJlY3RlZEVkZ2UoaSwgaikpO1xufVxuXG5leHBvcnQgY2xhc3MgQWRkRWRnZVN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBpOiBudW1iZXIgPSAwO1xuICBqOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgdGhpcy5pID0gaTtcbiAgICB0aGlzLmogPSBqO1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgaWYgKHRoaXMuaSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuaSA9IHBsYW4uY2hhcnQuVmVydGljZXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaiA9PT0gLTEpIHtcbiAgICAgIHRoaXMuaiA9IHBsYW4uY2hhcnQuVmVydGljZXMubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICBjb25zdCBlID0gRGlyZWN0ZWRFZGdlRm9yUGxhbih0aGlzLmksIHRoaXMuaiwgcGxhbik7XG4gICAgaWYgKCFlLm9rKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9XG5cbiAgICAvLyBPbmx5IGFkZCB0aGUgZWRnZSBpZiBpdCBkb2Vzbid0IGV4aXN0cyBhbHJlYWR5LlxuICAgIGlmICghcGxhbi5jaGFydC5FZGdlcy5maW5kKCh2YWx1ZTogRGlyZWN0ZWRFZGdlKSA9PiB2YWx1ZS5lcXVhbChlLnZhbHVlKSkpIHtcbiAgICAgIHBsYW4uY2hhcnQuRWRnZXMucHVzaChlLnZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2soe1xuICAgICAgcGxhbjogcGxhbixcbiAgICAgIGludmVyc2U6IHRoaXMuaW52ZXJzZSgpLFxuICAgIH0pO1xuICB9XG5cbiAgaW52ZXJzZSgpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBSZW1vdmVFZGdlU3VwT3AodGhpcy5pLCB0aGlzLmopO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdmVFZGdlU3VwT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGk6IG51bWJlciA9IDA7XG4gIGo6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoaTogbnVtYmVyLCBqOiBudW1iZXIpIHtcbiAgICB0aGlzLmkgPSBpO1xuICAgIHRoaXMuaiA9IGo7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBpZiAodGhpcy5pID09PSAtMSkge1xuICAgICAgdGhpcy5pID0gcGxhbi5jaGFydC5WZXJ0aWNlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5qID09PSAtMSkge1xuICAgICAgdGhpcy5qID0gcGxhbi5jaGFydC5WZXJ0aWNlcy5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIGNvbnN0IGUgPSBEaXJlY3RlZEVkZ2VGb3JQbGFuKHRoaXMuaSwgdGhpcy5qLCBwbGFuKTtcbiAgICBpZiAoIWUub2spIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBwbGFuLmNoYXJ0LkVkZ2VzID0gcGxhbi5jaGFydC5FZGdlcy5maWx0ZXIoXG4gICAgICAodjogRGlyZWN0ZWRFZGdlKTogYm9vbGVhbiA9PiAhdi5lcXVhbChlLnZhbHVlKVxuICAgICk7XG5cbiAgICByZXR1cm4gb2soe1xuICAgICAgcGxhbjogcGxhbixcbiAgICAgIGludmVyc2U6IHRoaXMuaW52ZXJzZSgpLFxuICAgIH0pO1xuICB9XG5cbiAgaW52ZXJzZSgpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBBZGRFZGdlU3ViT3AodGhpcy5pLCB0aGlzLmopO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4SW5SYW5nZUZvclZlcnRpY2VzKGluZGV4OiBudW1iZXIsIGNoYXJ0OiBDaGFydCk6IFJlc3VsdDxudWxsPiB7XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBjaGFydC5WZXJ0aWNlcy5sZW5ndGggLSAyKSB7XG4gICAgcmV0dXJuIGVycm9yKGAke2luZGV4fSBpcyBub3QgaW4gcmFuZ2UgWzAsICR7Y2hhcnQuVmVydGljZXMubGVuZ3RoIC0gMn1dYCk7XG4gIH1cbiAgcmV0dXJuIG9rKG51bGwpO1xufVxuXG5mdW5jdGlvbiBpbmRleEluUmFuZ2VGb3JWZXJ0aWNlc0V4Y2x1c2l2ZShcbiAgaW5kZXg6IG51bWJlcixcbiAgY2hhcnQ6IENoYXJ0XG4pOiBSZXN1bHQ8bnVsbD4ge1xuICBpZiAoaW5kZXggPCAxIHx8IGluZGV4ID4gY2hhcnQuVmVydGljZXMubGVuZ3RoIC0gMikge1xuICAgIHJldHVybiBlcnJvcihgJHtpbmRleH0gaXMgbm90IGluIHJhbmdlIFsxLCAke2NoYXJ0LlZlcnRpY2VzLmxlbmd0aCAtIDJ9XWApO1xuICB9XG4gIHJldHVybiBvayhudWxsKTtcbn1cblxuZXhwb3J0IGNsYXNzIEFkZFRhc2tBZnRlclN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBpbmRleDogbnVtYmVyID0gMDtcbiAgZnVsbFRhc2tUb0JlUmVzdG9yZWQ6IEZ1bGxUYXNrVG9CZVJlc3RvcmVkIHwgbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGZ1bGxUYXNrVG9CZVJlc3RvcmVkOiBGdWxsVGFza1RvQmVSZXN0b3JlZCB8IG51bGwgPSBudWxsXG4gICkge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmZ1bGxUYXNrVG9CZVJlc3RvcmVkID0gZnVsbFRhc2tUb0JlUmVzdG9yZWQ7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBjaGFydCA9IHBsYW4uY2hhcnQ7XG4gICAgY29uc3QgcmV0ID0gaW5kZXhJblJhbmdlRm9yVmVydGljZXModGhpcy5pbmRleCwgY2hhcnQpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBsZXQgdGFzayA9IHBsYW4ubmV3VGFzaygpO1xuICAgIGlmICh0aGlzLmZ1bGxUYXNrVG9CZVJlc3RvcmVkICE9PSBudWxsKSB7XG4gICAgICB0YXNrID0gdGhpcy5mdWxsVGFza1RvQmVSZXN0b3JlZC50YXNrO1xuICAgIH1cbiAgICBwbGFuLmNoYXJ0LlZlcnRpY2VzLnNwbGljZSh0aGlzLmluZGV4ICsgMSwgMCwgdGFzayk7XG5cbiAgICAvLyBVcGRhdGUgRWRnZXMuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydC5FZGdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWRnZSA9IGNoYXJ0LkVkZ2VzW2ldO1xuICAgICAgaWYgKGVkZ2UuaSA+PSB0aGlzLmluZGV4ICsgMSkge1xuICAgICAgICBlZGdlLmkrKztcbiAgICAgIH1cbiAgICAgIGlmIChlZGdlLmogPj0gdGhpcy5pbmRleCArIDEpIHtcbiAgICAgICAgZWRnZS5qKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZnVsbFRhc2tUb0JlUmVzdG9yZWQgIT09IG51bGwpIHtcbiAgICAgIGNoYXJ0LkVkZ2VzLnB1c2goLi4udGhpcy5mdWxsVGFza1RvQmVSZXN0b3JlZC5lZGdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKCkgfSk7XG4gIH1cblxuICBpbnZlcnNlKCk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IERlbGV0ZVRhc2tTdWJPcCh0aGlzLmluZGV4ICsgMSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIER1cFRhc2tTdWJPcCBpbXBsZW1lbnRzIFN1Yk9wIHtcbiAgaW5kZXg6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IGNoYXJ0ID0gcGxhbi5jaGFydDtcbiAgICBjb25zdCByZXQgPSBpbmRleEluUmFuZ2VGb3JWZXJ0aWNlc0V4Y2x1c2l2ZSh0aGlzLmluZGV4LCBjaGFydCk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY29uc3QgY29weSA9IHBsYW4uY2hhcnQuVmVydGljZXNbdGhpcy5pbmRleF0uZHVwKCk7XG4gICAgLy8gSW5zZXJ0IHRoZSBkdXBsaWNhdGUgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIFRhc2sgaXQgaXMgY29waWVkIGZyb20uXG4gICAgcGxhbi5jaGFydC5WZXJ0aWNlcy5zcGxpY2UodGhpcy5pbmRleCwgMCwgY29weSk7XG5cbiAgICAvLyBVcGRhdGUgRWRnZXMuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydC5FZGdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWRnZSA9IGNoYXJ0LkVkZ2VzW2ldO1xuICAgICAgaWYgKGVkZ2UuaSA+IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgZWRnZS5pKys7XG4gICAgICB9XG4gICAgICBpZiAoZWRnZS5qID4gdGhpcy5pbmRleCkge1xuICAgICAgICBlZGdlLmorKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKCkgfSk7XG4gIH1cblxuICBpbnZlcnNlKCk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IERlbGV0ZVRhc2tTdWJPcCh0aGlzLmluZGV4ICsgMSk7XG4gIH1cbn1cblxudHlwZSBTdWJzdGl0dXRpb24gPSBNYXA8RGlyZWN0ZWRFZGdlLCBEaXJlY3RlZEVkZ2U+O1xuXG5leHBvcnQgY2xhc3MgTW92ZUFsbE91dGdvaW5nRWRnZXNGcm9tVG9TdWJPcCBpbXBsZW1lbnRzIFN1Yk9wIHtcbiAgZnJvbVRhc2tJbmRleDogbnVtYmVyID0gMDtcbiAgdG9UYXNrSW5kZXg6IG51bWJlciA9IDA7XG4gIGFjdHVhbE1vdmVzOiBTdWJzdGl0dXRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZnJvbVRhc2tJbmRleDogbnVtYmVyLFxuICAgIHRvVGFza0luZGV4OiBudW1iZXIsXG4gICAgYWN0dWFsTW92ZXM6IFN1YnN0aXR1dGlvbiA9IG5ldyBNYXAoKVxuICApIHtcbiAgICB0aGlzLmZyb21UYXNrSW5kZXggPSBmcm9tVGFza0luZGV4O1xuICAgIHRoaXMudG9UYXNrSW5kZXggPSB0b1Rhc2tJbmRleDtcbiAgICB0aGlzLmFjdHVhbE1vdmVzID0gYWN0dWFsTW92ZXM7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBjaGFydCA9IHBsYW4uY2hhcnQ7XG4gICAgbGV0IHJldCA9IGluZGV4SW5SYW5nZUZvclZlcnRpY2VzRXhjbHVzaXZlKHRoaXMuZnJvbVRhc2tJbmRleCwgY2hhcnQpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICByZXQgPSBpbmRleEluUmFuZ2VGb3JWZXJ0aWNlc0V4Y2x1c2l2ZSh0aGlzLnRvVGFza0luZGV4LCBjaGFydCk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWN0dWFsTW92ZXMudmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgYWN0dWFsTW92ZXM6IFN1YnN0aXR1dGlvbiA9IG5ldyBNYXAoKTtcbiAgICAgIC8vIFVwZGF0ZSBhbGwgRWRnZXMgdGhhdCBzdGFydCBhdCAnZnJvbVRhc2tJbmRleCcgYW5kIGNoYW5nZSB0aGUgc3RhcnQgdG8gJ3RvVGFza0luZGV4Jy5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnQuRWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZWRnZSA9IGNoYXJ0LkVkZ2VzW2ldO1xuICAgICAgICAvLyBTa2lwIHRoZSBjb3JuZXIgY2FzZSB0aGVyZSBmcm9tVGFza0luZGV4IHBvaW50cyB0byBUYXNrSW5kZXguXG4gICAgICAgIGlmIChlZGdlLmkgPT09IHRoaXMuZnJvbVRhc2tJbmRleCAmJiBlZGdlLmogPT09IHRoaXMudG9UYXNrSW5kZXgpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlZGdlLmkgPT09IHRoaXMuZnJvbVRhc2tJbmRleCkge1xuICAgICAgICAgIGFjdHVhbE1vdmVzLnNldChcbiAgICAgICAgICAgIG5ldyBEaXJlY3RlZEVkZ2UodGhpcy50b1Rhc2tJbmRleCwgZWRnZS5qKSxcbiAgICAgICAgICAgIG5ldyBEaXJlY3RlZEVkZ2UoZWRnZS5pLCBlZGdlLmopXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlZGdlLmkgPSB0aGlzLnRvVGFza0luZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2soe1xuICAgICAgICBwbGFuOiBwbGFuLFxuICAgICAgICBpbnZlcnNlOiB0aGlzLmludmVyc2UoXG4gICAgICAgICAgdGhpcy50b1Rhc2tJbmRleCxcbiAgICAgICAgICB0aGlzLmZyb21UYXNrSW5kZXgsXG4gICAgICAgICAgYWN0dWFsTW92ZXNcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0LkVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5ld0VkZ2UgPSB0aGlzLmFjdHVhbE1vdmVzLmdldChwbGFuLmNoYXJ0LkVkZ2VzW2ldKTtcbiAgICAgICAgaWYgKG5ld0VkZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHBsYW4uY2hhcnQuRWRnZXNbaV0gPSBuZXdFZGdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvayh7XG4gICAgICAgIHBsYW46IHBsYW4sXG4gICAgICAgIGludmVyc2U6IG5ldyBNb3ZlQWxsT3V0Z29pbmdFZGdlc0Zyb21Ub1N1Yk9wKFxuICAgICAgICAgIHRoaXMudG9UYXNrSW5kZXgsXG4gICAgICAgICAgdGhpcy5mcm9tVGFza0luZGV4XG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpbnZlcnNlKFxuICAgIHRvVGFza0luZGV4OiBudW1iZXIsXG4gICAgZnJvbVRhc2tJbmRleDogbnVtYmVyLFxuICAgIGFjdHVhbE1vdmVzOiBTdWJzdGl0dXRpb25cbiAgKTogU3ViT3Age1xuICAgIHJldHVybiBuZXcgTW92ZUFsbE91dGdvaW5nRWRnZXNGcm9tVG9TdWJPcChcbiAgICAgIHRvVGFza0luZGV4LFxuICAgICAgZnJvbVRhc2tJbmRleCxcbiAgICAgIGFjdHVhbE1vdmVzXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29weUFsbEVkZ2VzRnJvbVRvU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGZyb21JbmRleDogbnVtYmVyID0gMDtcbiAgdG9JbmRleDogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3Rvcihmcm9tSW5kZXg6IG51bWJlciwgdG9JbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5mcm9tSW5kZXggPSBmcm9tSW5kZXg7XG4gICAgdGhpcy50b0luZGV4ID0gdG9JbmRleDtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IHJldCA9IGluZGV4SW5SYW5nZUZvclZlcnRpY2VzKHRoaXMuZnJvbUluZGV4LCBwbGFuLmNoYXJ0KTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdFZGdlczogRGlyZWN0ZWRFZGdlW10gPSBbXTtcbiAgICBwbGFuLmNoYXJ0LkVkZ2VzLmZvckVhY2goKGVkZ2U6IERpcmVjdGVkRWRnZSkgPT4ge1xuICAgICAgaWYgKGVkZ2UuaSA9PT0gdGhpcy5mcm9tSW5kZXgpIHtcbiAgICAgICAgbmV3RWRnZXMucHVzaChuZXcgRGlyZWN0ZWRFZGdlKHRoaXMudG9JbmRleCwgZWRnZS5qKSk7XG4gICAgICB9XG4gICAgICBpZiAoZWRnZS5qID09PSB0aGlzLmZyb21JbmRleCkge1xuICAgICAgICBuZXdFZGdlcy5wdXNoKG5ldyBEaXJlY3RlZEVkZ2UoZWRnZS5pLCB0aGlzLnRvSW5kZXgpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwbGFuLmNoYXJ0LkVkZ2VzLnB1c2goLi4ubmV3RWRnZXMpO1xuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogbmV3IFJlbW92ZUFsbEVkZ2VzU3ViT3AobmV3RWRnZXMpIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdmVBbGxFZGdlc1N1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBlZGdlczogRGlyZWN0ZWRFZGdlW107XG5cbiAgY29uc3RydWN0b3IoZWRnZXM6IERpcmVjdGVkRWRnZVtdKSB7XG4gICAgdGhpcy5lZGdlcyA9IGVkZ2VzO1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgcGxhbi5jaGFydC5FZGdlcyA9IHBsYW4uY2hhcnQuRWRnZXMuZmlsdGVyKFxuICAgICAgKGVkZ2U6IERpcmVjdGVkRWRnZSkgPT5cbiAgICAgICAgLTEgPT09XG4gICAgICAgIHRoaXMuZWRnZXMuZmluZEluZGV4KCh0b0JlUmVtb3ZlZDogRGlyZWN0ZWRFZGdlKSA9PlxuICAgICAgICAgIGVkZ2UuZXF1YWwodG9CZVJlbW92ZWQpXG4gICAgICAgIClcbiAgICApO1xuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogbmV3IEFkZEFsbEVkZ2VzU3ViT3AodGhpcy5lZGdlcykgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkZEFsbEVkZ2VzU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGVkZ2VzOiBEaXJlY3RlZEVkZ2VbXTtcblxuICBjb25zdHJ1Y3RvcihlZGdlczogRGlyZWN0ZWRFZGdlW10pIHtcbiAgICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBwbGFuLmNoYXJ0LkVkZ2VzLnB1c2goLi4udGhpcy5lZGdlcyk7XG5cbiAgICByZXR1cm4gb2soeyBwbGFuOiBwbGFuLCBpbnZlcnNlOiBuZXcgUmVtb3ZlQWxsRWRnZXNTdWJPcCh0aGlzLmVkZ2VzKSB9KTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgRnVsbFRhc2tUb0JlUmVzdG9yZWQge1xuICBlZGdlczogRGlyZWN0ZWRFZGdlW107XG4gIHRhc2s6IFRhc2s7XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVUYXNrU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGluZGV4OiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBjaGFydCA9IHBsYW4uY2hhcnQ7XG4gICAgY29uc3QgcmV0ID0gaW5kZXhJblJhbmdlRm9yVmVydGljZXModGhpcy5pbmRleCwgY2hhcnQpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNvbnN0IGVkZ2VzVG9CZVJlc3RvcmVkID0gY2hhcnQuRWRnZXMuZmlsdGVyKChkZTogRGlyZWN0ZWRFZGdlKSA9PiB7XG4gICAgICBpZiAoZGUuaSA9PT0gdGhpcy5pbmRleCB8fCBkZS5qID09PSB0aGlzLmluZGV4KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gRmlyc3QgcmVtb3ZlIGFsbCBlZGdlcyB0byBhbmQgZnJvbSB0aGUgdGFzay5cbiAgICBjaGFydC5FZGdlcyA9IGNoYXJ0LkVkZ2VzLmZpbHRlcigoZGU6IERpcmVjdGVkRWRnZSkgPT4ge1xuICAgICAgaWYgKGRlLmkgPT09IHRoaXMuaW5kZXggfHwgZGUuaiA9PT0gdGhpcy5pbmRleCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBlZGdlcyBmb3IgdGFza3MgdGhhdCB3aWxsIGVuZCB1cCBhdCBhIG5ldyBpbmRleC5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0LkVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlZGdlID0gY2hhcnQuRWRnZXNbaV07XG4gICAgICBpZiAoZWRnZS5pID4gdGhpcy5pbmRleCkge1xuICAgICAgICBlZGdlLmktLTtcbiAgICAgIH1cbiAgICAgIGlmIChlZGdlLmogPiB0aGlzLmluZGV4KSB7XG4gICAgICAgIGVkZ2Uuai0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRhc2tUb0JlUmVzdG9yZWQgPSBjaGFydC5WZXJ0aWNlcy5zcGxpY2UodGhpcy5pbmRleCwgMSk7XG4gICAgY29uc3QgZnVsbFRhc2tUb0JlUmVzdG9yZWQgPSB7XG4gICAgICBlZGdlczogZWRnZXNUb0JlUmVzdG9yZWQsXG4gICAgICB0YXNrOiB0YXNrVG9CZVJlc3RvcmVkWzBdLFxuICAgIH07XG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKGZ1bGxUYXNrVG9CZVJlc3RvcmVkKSB9KTtcbiAgfVxuXG4gIGludmVyc2UoZnVsbFRhc2tUb0JlUmVzdG9yZWQ6IEZ1bGxUYXNrVG9CZVJlc3RvcmVkKTogU3ViT3Age1xuICAgIHJldHVybiBuZXcgQWRkVGFza0FmdGVyU3ViT3AodGhpcy5pbmRleCAtIDEsIGZ1bGxUYXNrVG9CZVJlc3RvcmVkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmF0aW9uYWxpemVFZGdlc1N1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgY29uc3Qgc3JjQW5kRHN0ID0gZWRnZXNCeVNyY0FuZERzdFRvTWFwKHBsYW4uY2hhcnQuRWRnZXMpO1xuICAgIGNvbnN0IFN0YXJ0ID0gMDtcbiAgICBjb25zdCBGaW5pc2ggPSBwbGFuLmNoYXJ0LlZlcnRpY2VzLmxlbmd0aCAtIDE7XG5cbiAgICAvLyBsb29wIG92ZXIgYWxsIHZlcnRpY3MgZnJvbSBbU3RhcnQsIEZpbmlzaCkgYW5kIGxvb2sgZm9yIHRoZWlyXG4gICAgLy8gZGVzdGluYXRpb25zLiBJZiB0aGV5IGhhdmUgbm9uZSB0aGVuIGFkZCBpbiBhbiBlZGdlIHRvIEZpbmlzaC4gSWYgdGhleVxuICAgIC8vIGhhdmUgbW9yZSB0aGFuIG9uZSB0aGVuIHJlbW92ZSBhbnkgbGlua3MgdG8gRmluaXNoLlxuICAgIGZvciAobGV0IGkgPSBTdGFydDsgaSA8IEZpbmlzaDsgaSsrKSB7XG4gICAgICBjb25zdCBkZXN0aW5hdGlvbnMgPSBzcmNBbmREc3QuYnlTcmMuZ2V0KGkpO1xuICAgICAgaWYgKGRlc3RpbmF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHRvQmVBZGRlZCA9IG5ldyBEaXJlY3RlZEVkZ2UoaSwgRmluaXNoKTtcbiAgICAgICAgcGxhbi5jaGFydC5FZGdlcy5wdXNoKHRvQmVBZGRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBcmUgdGhlcmUgYW55IHVuZWVkZWQgRWdkZXMgdG8gRmluaXNoPyBJZiBzbyBmaWx0ZXIgdGhlbSBvdXQuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBkZXN0aW5hdGlvbnMubGVuZ3RoID4gMSAmJlxuICAgICAgICAgIGRlc3RpbmF0aW9ucy5maW5kKCh2YWx1ZTogRGlyZWN0ZWRFZGdlKSA9PiB2YWx1ZS5qID09PSBGaW5pc2gpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHRvQmVSZW1vdmVkID0gbmV3IERpcmVjdGVkRWRnZShpLCBGaW5pc2gpO1xuICAgICAgICAgIHBsYW4uY2hhcnQuRWRnZXMgPSBwbGFuLmNoYXJ0LkVkZ2VzLmZpbHRlcihcbiAgICAgICAgICAgICh2YWx1ZTogRGlyZWN0ZWRFZGdlKSA9PiAhdG9CZVJlbW92ZWQuZXF1YWwodmFsdWUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGxvb3Agb3ZlciBhbGwgdmVydGljcyBmcm9tKFN0YXJ0LCBGaW5pc2hdIGFuZCBsb29rIGZvciB0aGVpciBzb3VyY2VzLiBJZlxuICAgIC8vIHRoZXkgaGF2ZSBub25lIHRoZW4gYWRkIGluIGFuIGVkZ2UgZnJvbSBTdGFydC4gSWYgdGhleSBoYXZlIG1vcmUgdGhhbiBvbmVcbiAgICAvLyB0aGVuIHJlbW92ZSBhbnkgbGlua3MgZnJvbSBTdGFydC5cbiAgICBmb3IgKGxldCBpID0gU3RhcnQgKyAxOyBpIDwgRmluaXNoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRlc3RpbmF0aW9ucyA9IHNyY0FuZERzdC5ieURzdC5nZXQoaSk7XG4gICAgICBpZiAoZGVzdGluYXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgdG9CZUFkZGVkID0gbmV3IERpcmVjdGVkRWRnZShTdGFydCwgaSk7XG4gICAgICAgIHBsYW4uY2hhcnQuRWRnZXMucHVzaCh0b0JlQWRkZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXJlIHRoZXJlIGFueSB1bi1uZWVkZWQgRWdkZXMgZnJvbSBTdGFydD8gSWYgc28gZmlsdGVyIHRoZW0gb3V0LlxuICAgICAgICBpZiAoXG4gICAgICAgICAgZGVzdGluYXRpb25zLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgICBkZXN0aW5hdGlvbnMuZmluZCgodmFsdWU6IERpcmVjdGVkRWRnZSkgPT4gdmFsdWUuaSA9PT0gU3RhcnQpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHRvQmVSZW1vdmVkID0gbmV3IERpcmVjdGVkRWRnZShTdGFydCwgaSk7XG4gICAgICAgICAgcGxhbi5jaGFydC5FZGdlcyA9IHBsYW4uY2hhcnQuRWRnZXMuZmlsdGVyKFxuICAgICAgICAgICAgKHZhbHVlOiBEaXJlY3RlZEVkZ2UpID0+ICF0b0JlUmVtb3ZlZC5lcXVhbCh2YWx1ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwbGFuLmNoYXJ0LkVkZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcGxhbi5jaGFydC5FZGdlcy5wdXNoKG5ldyBEaXJlY3RlZEVkZ2UoU3RhcnQsIEZpbmlzaCkpO1xuICAgIH1cblxuICAgIHJldHVybiBvayh7IHBsYW46IHBsYW4sIGludmVyc2U6IHRoaXMuaW52ZXJzZSgpIH0pO1xuICB9XG5cbiAgaW52ZXJzZSgpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBSYXRpb25hbGl6ZUVkZ2VzU3ViT3AoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0VGFza05hbWVTdWJPcCBpbXBsZW1lbnRzIFN1Yk9wIHtcbiAgdGFza0luZGV4OiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih0YXNrSW5kZXg6IG51bWJlciwgbmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy50YXNrSW5kZXggPSB0YXNrSW5kZXg7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IHJldCA9IGluZGV4SW5SYW5nZUZvclZlcnRpY2VzKHRoaXMudGFza0luZGV4LCBwbGFuLmNoYXJ0KTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgY29uc3Qgb2xkTmFtZSA9IHBsYW4uY2hhcnQuVmVydGljZXNbdGhpcy50YXNrSW5kZXhdLm5hbWU7XG4gICAgcGxhbi5jaGFydC5WZXJ0aWNlc1t0aGlzLnRhc2tJbmRleF0ubmFtZSA9IHRoaXMubmFtZTtcbiAgICByZXR1cm4gb2soe1xuICAgICAgcGxhbjogcGxhbixcbiAgICAgIGludmVyc2U6IHRoaXMuaW52ZXJzZShvbGROYW1lKSxcbiAgICB9KTtcbiAgfVxuXG4gIGludmVyc2Uob2xkTmFtZTogc3RyaW5nKTogU3ViT3Age1xuICAgIHJldHVybiBuZXcgU2V0VGFza05hbWVTdWJPcCh0aGlzLnRhc2tJbmRleCwgb2xkTmFtZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEluc2VydE5ld0VtcHR5TWlsZXN0b25lQWZ0ZXJPcCh0YXNrSW5kZXg6IG51bWJlcik6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbXG4gICAgbmV3IFJhdGlvbmFsaXplRWRnZXNTdWJPcCgpLFxuICAgIG5ldyBBZGRUYXNrQWZ0ZXJTdWJPcCh0YXNrSW5kZXgpLFxuICAgIG5ldyBBZGRFZGdlU3ViT3AoMCwgdGFza0luZGV4ICsgMSksXG4gICAgbmV3IEFkZEVkZ2VTdWJPcCh0YXNrSW5kZXggKyAxLCAtMSksXG4gICAgbmV3IFJhdGlvbmFsaXplRWRnZXNTdWJPcCgpLFxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNldFRhc2tOYW1lT3AodGFza0luZGV4OiBudW1iZXIsIG5hbWU6IHN0cmluZyk6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IFNldFRhc2tOYW1lU3ViT3AodGFza0luZGV4LCBuYW1lKV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3BsaXRUYXNrT3AodGFza0luZGV4OiBudW1iZXIpOiBPcCB7XG4gIGNvbnN0IHN1Yk9wczogU3ViT3BbXSA9IFtcbiAgICBuZXcgRHVwVGFza1N1Yk9wKHRhc2tJbmRleCksXG4gICAgbmV3IEFkZEVkZ2VTdWJPcCh0YXNrSW5kZXgsIHRhc2tJbmRleCArIDEpLFxuICAgIG5ldyBNb3ZlQWxsT3V0Z29pbmdFZGdlc0Zyb21Ub1N1Yk9wKHRhc2tJbmRleCwgdGFza0luZGV4ICsgMSksXG4gIF07XG5cbiAgcmV0dXJuIG5ldyBPcChzdWJPcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRHVwVGFza09wKHRhc2tJbmRleDogbnVtYmVyKTogT3Age1xuICBjb25zdCBzdWJPcHM6IFN1Yk9wW10gPSBbXG4gICAgbmV3IER1cFRhc2tTdWJPcCh0YXNrSW5kZXgpLFxuICAgIG5ldyBDb3B5QWxsRWRnZXNGcm9tVG9TdWJPcCh0YXNrSW5kZXgsIHRhc2tJbmRleCArIDEpLFxuICBdO1xuXG4gIHJldHVybiBuZXcgT3Aoc3ViT3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERlbGV0ZVRhc2tPcCh0YXNrSW5kZXg6IG51bWJlcik6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbXG4gICAgbmV3IFJhdGlvbmFsaXplRWRnZXNTdWJPcCgpLFxuICAgIG5ldyBEZWxldGVUYXNrU3ViT3AodGFza0luZGV4KSxcbiAgICBuZXcgUmF0aW9uYWxpemVFZGdlc1N1Yk9wKCksXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkRWRnZU9wKGZyb21UYXNrSW5kZXg6IG51bWJlciwgdG9UYXNrSW5kZXg6IG51bWJlcik6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbXG4gICAgbmV3IFJhdGlvbmFsaXplRWRnZXNTdWJPcCgpLFxuICAgIG5ldyBBZGRFZGdlU3ViT3AoZnJvbVRhc2tJbmRleCwgdG9UYXNrSW5kZXgpLFxuICAgIG5ldyBSYXRpb25hbGl6ZUVkZ2VzU3ViT3AoKSxcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSYXRpb25hbGl6ZUVkZ2VzT3AoKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgUmF0aW9uYWxpemVFZGdlc1N1Yk9wKCldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlbW92ZUVkZ2VPcChpOiBudW1iZXIsIGo6IG51bWJlcik6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbXG4gICAgbmV3IFJhdGlvbmFsaXplRWRnZXNTdWJPcCgpLFxuICAgIG5ldyBSZW1vdmVFZGdlU3VwT3AoaSwgaiksXG4gICAgbmV3IFJhdGlvbmFsaXplRWRnZXNTdWJPcCgpLFxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEluc2VydE5ld0VtcHR5VGFza0FmdGVyT3AodGFza0luZGV4OiBudW1iZXIpOiBPcCB7XG4gIHJldHVybiBuZXcgT3AoW1xuICAgIG5ldyBSYXRpb25hbGl6ZUVkZ2VzU3ViT3AoKSxcbiAgICBuZXcgQWRkVGFza0FmdGVyU3ViT3AodGFza0luZGV4KSxcbiAgICBuZXcgU2V0TWV0cmljVmFsdWVTdWJPcCgnRHVyYXRpb24nLCAxMCwgdGFza0luZGV4ICsgMSksXG4gICAgbmV3IEFkZEVkZ2VTdWJPcCgwLCB0YXNrSW5kZXggKyAxKSxcbiAgICBuZXcgQWRkRWRnZVN1Yk9wKHRhc2tJbmRleCArIDEsIC0xKSxcbiAgICBuZXcgUmF0aW9uYWxpemVFZGdlc1N1Yk9wKCksXG4gIF0pO1xufVxuIiwgImltcG9ydCB7IEFkZERlcGVuZGVuY3lEaWFsb2cgfSBmcm9tIFwiLi4vLi4vYWRkLWRlcGVuZGVuY3ktZGlhbG9nL2FkZC1kZXBlbmRlbmN5LWRpYWxvZ1wiO1xuaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gXCIuLi8uLi9leHBsYW5NYWluL2V4cGxhbk1haW5cIjtcbmltcG9ydCB7IEFkZEVkZ2VPcCB9IGZyb20gXCIuLi8uLi9vcHMvY2hhcnRcIjtcbmltcG9ydCB7IGVycm9yLCBvaywgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL3Jlc3VsdFwiO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25Gcm9tT3AsIFBvc3RBY3RvbldvcmsgfSBmcm9tIFwiLi4vYWN0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBBZGRQcmVkZWNlc3NvckFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPVxuICAgIFwiUHJvbXB0cyBmb3IgYW5kIGFkZHMgYSBwcmVkZWNlc3NvciB0byB0aGUgY3VycmVudCBUYXNrLlwiO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yayA9IFwicGxhbkRlZmluaXRpb25DaGFuZ2VkXCI7XG4gIHVuZG86IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgaWYgKGV4cGxhbk1haW4uc2VsZWN0ZWRUYXNrID09PSAtMSkge1xuICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcihcIkEgVGFzayBtdXN0IGJlIHNlbGVjdGVkLlwiKSk7XG4gICAgfVxuICAgIGNvbnN0IHByZWRUYXNrSW5kZXggPSBhd2FpdCBleHBsYW5NYWluXG4gICAgICAucXVlcnlTZWxlY3RvcjxBZGREZXBlbmRlbmN5RGlhbG9nPihcImFkZC1kZXBlbmRlbmN5LWRpYWxvZ1wiKSFcbiAgICAgIC5zZWxlY3REZXBlbmRlbmN5KGV4cGxhbk1haW4ucGxhbi5jaGFydCwgZXhwbGFuTWFpbi5zZWxlY3RlZFRhc2ssIFwicHJlZFwiKTtcbiAgICBpZiAocHJlZFRhc2tJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IobmV3IEVycm9yKFwiTm8gcHJlZGVjZXNzb3Igd2FzIHNlbGVjdGVkLlwiKSk7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IEFkZEVkZ2VPcChwcmVkVGFza0luZGV4LCBleHBsYW5NYWluLnNlbGVjdGVkVGFzaykuYXBwbHlUbyhcbiAgICAgIGV4cGxhbk1haW4ucGxhbixcbiAgICApO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICByZXR1cm4gb2soXG4gICAgICBuZXcgQWN0aW9uRnJvbU9wKFxuICAgICAgICByZXQudmFsdWUuaW52ZXJzZSxcbiAgICAgICAgKHRoaXMucG9zdEFjdGlvbldvcmsgPSB0aGlzLnBvc3RBY3Rpb25Xb3JrKSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEFkZERlcGVuZGVuY3lEaWFsb2cgfSBmcm9tIFwiLi4vLi4vYWRkLWRlcGVuZGVuY3ktZGlhbG9nL2FkZC1kZXBlbmRlbmN5LWRpYWxvZ1wiO1xuaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gXCIuLi8uLi9leHBsYW5NYWluL2V4cGxhbk1haW5cIjtcbmltcG9ydCB7IEFkZEVkZ2VPcCB9IGZyb20gXCIuLi8uLi9vcHMvY2hhcnRcIjtcbmltcG9ydCB7IGVycm9yLCBvaywgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL3Jlc3VsdFwiO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25Gcm9tT3AsIFBvc3RBY3RvbldvcmsgfSBmcm9tIFwiLi4vYWN0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBBZGRTdWNjZXNzb3JBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gXCJQcm9tcHRzIGZvciBhbmQgYWRkcyBhIHN1Y2Nlc3NvciB0byB0aGUgY3VycmVudCBUYXNrLlwiO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yayA9IFwicGxhbkRlZmluaXRpb25DaGFuZ2VkXCI7XG4gIHVuZG86IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgaWYgKGV4cGxhbk1haW4uc2VsZWN0ZWRUYXNrID09PSAtMSkge1xuICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcihcIkEgVGFzayBtdXN0IGJlIHNlbGVjdGVkLlwiKSk7XG4gICAgfVxuICAgIGNvbnN0IHN1Y2NUYXNrSW5kZXggPSBhd2FpdCBleHBsYW5NYWluXG4gICAgICAucXVlcnlTZWxlY3RvcjxBZGREZXBlbmRlbmN5RGlhbG9nPihcImFkZC1kZXBlbmRlbmN5LWRpYWxvZ1wiKSFcbiAgICAgIC5zZWxlY3REZXBlbmRlbmN5KGV4cGxhbk1haW4ucGxhbi5jaGFydCwgZXhwbGFuTWFpbi5zZWxlY3RlZFRhc2ssIFwic3VjY1wiKTtcbiAgICBpZiAoc3VjY1Rhc2tJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IobmV3IEVycm9yKFwiTm8gc3VjY2Vzc29yIHdhcyBzZWxlY3RlZC5cIikpO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBBZGRFZGdlT3AoZXhwbGFuTWFpbi5zZWxlY3RlZFRhc2ssIHN1Y2NUYXNrSW5kZXgpLmFwcGx5VG8oXG4gICAgICBleHBsYW5NYWluLnBsYW4sXG4gICAgKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgcmV0dXJuIG9rKFxuICAgICAgbmV3IEFjdGlvbkZyb21PcChcbiAgICAgICAgcmV0LnZhbHVlLmludmVyc2UsXG4gICAgICAgICh0aGlzLnBvc3RBY3Rpb25Xb3JrID0gdGhpcy5wb3N0QWN0aW9uV29yayksXG4gICAgICAgIHRydWUsXG4gICAgICApLFxuICAgICk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBEZXZlbG9wZXJQYW5lbERpYWxvZyB9IGZyb20gXCIuLi8uLi9kZXZlbG9wZXItcGFuZWwvZGV2ZWxvcGVyLXBhbmVsXCI7XG5pbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSBcIi4uLy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpblwiO1xuaW1wb3J0IHsgb2ssIFJlc3VsdCB9IGZyb20gXCIuLi8uLi9yZXN1bHRcIjtcbmltcG9ydCB7IEFjdGlvbiwgTk9PUEFjdGlvbiwgUG9zdEFjdG9uV29yayB9IGZyb20gXCIuLi9hY3Rpb25cIjtcblxuZXhwb3J0IGNsYXNzIERldmVsb3BlclBhbmVsQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgZGVzY3JpcHRpb246IHN0cmluZyA9IFwiT3BlbnMgdGhlIGRldmVsb3BlciBwYW5lbC5cIjtcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmsgPSBcIlwiO1xuICB1bmRvOiBib29sZWFuID0gZmFsc2U7XG5cbiAgYXN5bmMgZG8oZXhwbGFuTWFpbjogRXhwbGFuTWFpbik6IFByb21pc2U8UmVzdWx0PEFjdGlvbj4+IHtcbiAgICBleHBsYW5NYWluXG4gICAgICAucXVlcnlTZWxlY3RvcjxEZXZlbG9wZXJQYW5lbERpYWxvZz4oXCJkZXZlbG9wZXItcGFuZWxcIikhXG4gICAgICAuc2hvd0RpYWxvZyhleHBsYW5NYWluKTtcblxuICAgIC8vIFVuZG8gaXMgbm90IGEgcmV2ZXJzaWJsZSBhY3Rpb24uXG4gICAgcmV0dXJuIG9rKG5ldyBOT09QQWN0aW9uKCkpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gJy4uLy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpbic7XG5pbXBvcnQgeyBvaywgUmVzdWx0IH0gZnJvbSAnLi4vLi4vcmVzdWx0JztcbmltcG9ydCB7IFNlYXJjaFRhc2tQYW5lbCB9IGZyb20gJy4uLy4uL3NlYXJjaC9zZWFyY2gtdGFzay1wYW5lbCc7XG5pbXBvcnQgeyBBY3Rpb24sIFBvc3RBY3RvbldvcmsgfSBmcm9tICcuLi9hY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgR29Ub1NlYXJjaEFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnTW92ZXMgZm9jdXMgdG8gc2VhcmNoIGNvbnRyb2wuJztcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmsgPSAnJztcbiAgdW5kbzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgYXN5bmMgZG8oX2V4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yPFNlYXJjaFRhc2tQYW5lbD4oJ3NlYXJjaC10YXNrLXBhbmVsJykhXG4gICAgICAuc2V0S2V5Ym9hcmRGb2N1c1RvSW5wdXQoJ25hbWUtb25seScpO1xuICAgIHJldHVybiBvayh0aGlzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR29Ub0Z1bGxTZWFyY2hBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nID1cbiAgICAnTW92ZXMgZm9jdXMgdG8gc2VhcmNoIGNvbnRyb2wgYW5kIGRvZXMgYSBmdWxsIHNlYXJjaCBvZiBhbGwgcmVzb3VyY2UgdmFsdWVzLic7XG4gIHBvc3RBY3Rpb25Xb3JrOiBQb3N0QWN0b25Xb3JrID0gJyc7XG4gIHVuZG86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGFzeW5jIGRvKF9leHBsYW5NYWluOiBFeHBsYW5NYWluKTogUHJvbWlzZTxSZXN1bHQ8QWN0aW9uPj4ge1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcjxTZWFyY2hUYXNrUGFuZWw+KCdzZWFyY2gtdGFzay1wYW5lbCcpIVxuICAgICAgLnNldEtleWJvYXJkRm9jdXNUb0lucHV0KCdmdWxsLWluZm8nKTtcbiAgICByZXR1cm4gb2sodGhpcyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSBcIi4uLy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpblwiO1xuaW1wb3J0IHsgb2ssIFJlc3VsdCB9IGZyb20gXCIuLi8uLi9yZXN1bHRcIjtcbmltcG9ydCB7IEFjdGlvbiwgUG9zdEFjdG9uV29yayB9IGZyb20gXCIuLi9hY3Rpb25cIjtcblxuZXhwb3J0IGNsYXNzIEhlbHBBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gXCJEaXNwbGF5cyB0aGUgaGVscCBkaWFsb2cuXCI7XG4gIHBvc3RBY3Rpb25Xb3JrOiBQb3N0QWN0b25Xb3JrID0gXCJcIjtcbiAgdW5kbzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgZXhwbGFuTWFpblxuICAgICAgLnF1ZXJ5U2VsZWN0b3I8SFRNTERpYWxvZ0VsZW1lbnQ+KFwia2V5Ym9hcmQtbWFwLWRpYWxvZ1wiKSFcbiAgICAgIC5zaG93TW9kYWwoKTtcbiAgICByZXR1cm4gb2sodGhpcyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSBcIi4uLy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpblwiO1xuaW1wb3J0IHsgb2ssIFJlc3VsdCB9IGZyb20gXCIuLi8uLi9yZXN1bHRcIjtcbmltcG9ydCB7IEFjdGlvbiwgUG9zdEFjdG9uV29yayB9IGZyb20gXCIuLi9hY3Rpb25cIjtcblxuZXhwb3J0IGNsYXNzIFJlc2V0Wm9vbUFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSBcIlVuZG9lcyB0aGUgem9vbS5cIjtcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmsgPSBcInBhaW50Q2hhcnRcIjtcbiAgdW5kbzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgZXhwbGFuTWFpbi5kaXNwbGF5UmFuZ2UgPSBudWxsO1xuICAgIHJldHVybiBvayh0aGlzKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tICcuLi8uLi9leHBsYW5NYWluL2V4cGxhbk1haW4nO1xuaW1wb3J0IHtcbiAgRGVsZXRlVGFza09wLFxuICBEdXBUYXNrT3AsXG4gIEluc2VydE5ld0VtcHR5VGFza0FmdGVyT3AsXG4gIFNwbGl0VGFza09wLFxufSBmcm9tICcuLi8uLi9vcHMvY2hhcnQnO1xuaW1wb3J0IHsgZXJyb3IsIG9rLCBSZXN1bHQgfSBmcm9tICcuLi8uLi9yZXN1bHQnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25Gcm9tT3AsIFBvc3RBY3RvbldvcmsgfSBmcm9tICcuLi9hY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgU3BsaXRUYXNrQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgZGVzY3JpcHRpb246IHN0cmluZyA9ICdTcGxpdHMgYSB0YXNrLic7XG4gIHBvc3RBY3Rpb25Xb3JrOiBQb3N0QWN0b25Xb3JrID0gJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCc7XG4gIHVuZG86IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgaWYgKGV4cGxhbk1haW4uc2VsZWN0ZWRUYXNrID09PSAtMSkge1xuICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcignQSB0YXNrIG11c3QgYmUgc2VsZWN0ZWQgZmlyc3QuJykpO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBTcGxpdFRhc2tPcChleHBsYW5NYWluLnNlbGVjdGVkVGFzaykuYXBwbHlUbyhleHBsYW5NYWluLnBsYW4pO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICByZXR1cm4gb2soXG4gICAgICBuZXcgQWN0aW9uRnJvbU9wKHJldC52YWx1ZS5pbnZlcnNlLCB0aGlzLnBvc3RBY3Rpb25Xb3JrLCB0aGlzLnVuZG8pXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHVwVGFza0FjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnRHVwbGljYXRlcyBhIHRhc2suJztcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmsgPSAncGxhbkRlZmluaXRpb25DaGFuZ2VkJztcbiAgdW5kbzogYm9vbGVhbiA9IHRydWU7XG5cbiAgYXN5bmMgZG8oZXhwbGFuTWFpbjogRXhwbGFuTWFpbik6IFByb21pc2U8UmVzdWx0PEFjdGlvbj4+IHtcbiAgICBpZiAoZXhwbGFuTWFpbi5zZWxlY3RlZFRhc2sgPT09IC0xKSB7XG4gICAgICByZXR1cm4gZXJyb3IobmV3IEVycm9yKCdBIHRhc2sgbXVzdCBiZSBzZWxlY3RlZCBmaXJzdC4nKSk7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IER1cFRhc2tPcChleHBsYW5NYWluLnNlbGVjdGVkVGFzaykuYXBwbHlUbyhleHBsYW5NYWluLnBsYW4pO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICByZXR1cm4gb2soXG4gICAgICBuZXcgQWN0aW9uRnJvbU9wKHJldC52YWx1ZS5pbnZlcnNlLCB0aGlzLnBvc3RBY3Rpb25Xb3JrLCB0aGlzLnVuZG8pXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmV3VGFza0FjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnQ3JlYXRlcyBhIG5ldyB0YXNrLic7XG4gIHBvc3RBY3Rpb25Xb3JrOiBQb3N0QWN0b25Xb3JrID0gJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCc7XG4gIHVuZG86IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgY29uc3QgcmV0ID0gSW5zZXJ0TmV3RW1wdHlUYXNrQWZ0ZXJPcCgwKS5hcHBseVRvKGV4cGxhbk1haW4ucGxhbik7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIHJldHVybiBvayhcbiAgICAgIG5ldyBBY3Rpb25Gcm9tT3AocmV0LnZhbHVlLmludmVyc2UsIHRoaXMucG9zdEFjdGlvbldvcmssIHRoaXMudW5kbylcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVUYXNrQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgZGVzY3JpcHRpb246IHN0cmluZyA9ICdEZWxldGVzIGEgdGFzay4nO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yayA9ICdwbGFuRGVmaW5pdGlvbkNoYW5nZWQnO1xuICB1bmRvOiBib29sZWFuID0gdHJ1ZTtcblxuICBhc3luYyBkbyhleHBsYW5NYWluOiBFeHBsYW5NYWluKTogUHJvbWlzZTxSZXN1bHQ8QWN0aW9uPj4ge1xuICAgIGlmIChleHBsYW5NYWluLnNlbGVjdGVkVGFzayA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBlcnJvcihuZXcgRXJyb3IoJ0EgdGFzayBtdXN0IGJlIHNlbGVjdGVkIGZpcnN0LicpKTtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gRGVsZXRlVGFza09wKGV4cGxhbk1haW4uc2VsZWN0ZWRUYXNrKS5hcHBseVRvKGV4cGxhbk1haW4ucGxhbik7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGV4cGxhbk1haW4uc2VsZWN0ZWRUYXNrID0gLTE7XG4gICAgcmV0dXJuIG9rKFxuICAgICAgbmV3IEFjdGlvbkZyb21PcChyZXQudmFsdWUuaW52ZXJzZSwgdGhpcy5wb3N0QWN0aW9uV29yaywgdGhpcy51bmRvKVxuICAgICk7XG4gIH1cbn1cbiIsICJjb25zdCBkYXJrTW9kZUxvY2FsU3RvcmFnZUtleSA9IFwiZXhwbGFuLWRhcmttb2RlXCI7XG5cbi8qKiBXaGVuIHRoZSBnaXZlbiBlbGVtZW50IGlzIGNsaWNrZWQsIHRoZW4gdG9nZ2xlIHRoZSBgZGFya21vZGVgIGNsYXNzIG9uIHRoZVxuICogYm9keSBlbGVtZW50LiAqL1xuZXhwb3J0IGNvbnN0IHRvZ2dsZVRoZW1lID0gKCkgPT4ge1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgZGFya01vZGVMb2NhbFN0b3JhZ2VLZXksXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKFwiZGFya21vZGVcIikgPyBcIjFcIiA6IFwiMFwiLFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5U3RvcmVkVGhlbWUgPSAoKSA9PiB7XG4gIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICBcImRhcmttb2RlXCIsXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGRhcmtNb2RlTG9jYWxTdG9yYWdlS2V5KSA9PT0gXCIxXCIsXG4gICk7XG59O1xuIiwgImltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tIFwiLi4vLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluXCI7XG5pbXBvcnQgeyBvaywgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL3Jlc3VsdFwiO1xuaW1wb3J0IHsgdG9nZ2xlVGhlbWUgfSBmcm9tIFwiLi4vLi4vc3R5bGUvdG9nZ2xlci90b2dnbGVyXCI7XG5pbXBvcnQgeyBBY3Rpb24sIFBvc3RBY3RvbldvcmsgfSBmcm9tIFwiLi4vYWN0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBUb2dnbGVEYXJrTW9kZUFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSBcIlRvZ2dsZXMgZGFyayBtb2RlLlwiO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yayA9IFwicGFpbnRDaGFydFwiO1xuICB1bmRvOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBhc3luYyBkbyhleHBsYW5NYWluOiBFeHBsYW5NYWluKTogUHJvbWlzZTxSZXN1bHQ8QWN0aW9uPj4ge1xuICAgIHRvZ2dsZVRoZW1lKCk7XG4gICAgLy8gVG9nZ2xlRGFya01vZGVBY3Rpb24gaXMgaXRzIG93biBpbnZlcnNlLlxuICAgIHJldHVybiBvayh0aGlzKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tICcuLi8uLi9leHBsYW5NYWluL2V4cGxhbk1haW4nO1xuaW1wb3J0IHsgb2ssIFJlc3VsdCB9IGZyb20gJy4uLy4uL3Jlc3VsdCc7XG5pbXBvcnQgeyBBY3Rpb24sIFBvc3RBY3RvbldvcmsgfSBmcm9tICcuLi9hY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgVG9nZ2xlUmFkYXJBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gJ1RvZ2dsZXMgdGhlIHJhZGFyIHZpZXcuJztcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmsgPSAnJztcbiAgdW5kbzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgZXhwbGFuTWFpbi50b2dnbGVSYWRhcigpO1xuICAgIC8vIFRvZ2dsZVJhZGFyQWN0aW9uIGlzIGl0cyBvd24gaW52ZXJzZS5cbiAgICByZXR1cm4gb2sodGhpcyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSAnLi4vLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluJztcbmltcG9ydCB7IG9rLCBSZXN1bHQgfSBmcm9tICcuLi8uLi9yZXN1bHQnO1xuaW1wb3J0IHsgQWN0aW9uLCBOT09QQWN0aW9uLCBQb3N0QWN0b25Xb3JrIH0gZnJvbSAnLi4vYWN0aW9uJztcbmltcG9ydCB7IHJlZG8sIHVuZG8gfSBmcm9tICcuLi9leGVjdXRlJztcblxuZXhwb3J0IGNsYXNzIFVuZG9BY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gJ1VuZG9lcyB0aGUgbGFzdCBhY3Rpb24uJztcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmsgPSAnJztcbiAgdW5kbzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGFzeW5jIGRvKGV4cGxhbk1haW46IEV4cGxhbk1haW4pOiBQcm9taXNlPFJlc3VsdDxBY3Rpb24+PiB7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgdW5kbyhleHBsYW5NYWluKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvLyBVbmRvIGlzIG5vdCBhIHJldmVyc2libGUgYWN0aW9uLlxuICAgIHJldHVybiBvayhuZXcgTk9PUEFjdGlvbigpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVkb0FjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnUmVkb2VzIHRoZSBtb3N0IHJlY2VudCB1bmRvIGFjdGlvbi4nO1xuICBwb3N0QWN0aW9uV29yazogUG9zdEFjdG9uV29yayA9ICcnO1xuICB1bmRvOiBib29sZWFuID0gZmFsc2U7XG5cbiAgYXN5bmMgZG8oZXhwbGFuTWFpbjogRXhwbGFuTWFpbik6IFByb21pc2U8UmVzdWx0PEFjdGlvbj4+IHtcbiAgICBjb25zdCByZXQgPSBhd2FpdCByZWRvKGV4cGxhbk1haW4pO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8vIFJlZG8gaXMgbm90IGEgcmV2ZXJzaWJsZSBhY3Rpb24uXG4gICAgcmV0dXJuIG9rKG5ldyBOT09QQWN0aW9uKCkpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcIi4vYWN0aW9uLnRzXCI7XG5pbXBvcnQgeyBBZGRQcmVkZWNlc3NvckFjdGlvbiB9IGZyb20gXCIuL2FjdGlvbnMvYWRkUHJlZGVjZXNzb3IudHNcIjtcbmltcG9ydCB7IEFkZFN1Y2Nlc3NvckFjdGlvbiB9IGZyb20gXCIuL2FjdGlvbnMvYWRkU3VjY2Vzc29yLnRzXCI7XG5pbXBvcnQgeyBEZXZlbG9wZXJQYW5lbEFjdGlvbiB9IGZyb20gXCIuL2FjdGlvbnMvZGV2ZWxvcGVyLnRzXCI7XG5pbXBvcnQge1xuICBHb1RvRnVsbFNlYXJjaEFjdGlvbixcbiAgR29Ub1NlYXJjaEFjdGlvbixcbn0gZnJvbSBcIi4vYWN0aW9ucy9nb3RvU2VhcmNoLnRzXCI7XG5pbXBvcnQgeyBIZWxwQWN0aW9uIH0gZnJvbSBcIi4vYWN0aW9ucy9oZWxwLnRzXCI7XG5pbXBvcnQgeyBSZXNldFpvb21BY3Rpb24gfSBmcm9tIFwiLi9hY3Rpb25zL3Jlc2V0Wm9vbS50c1wiO1xuaW1wb3J0IHtcbiAgRGVsZXRlVGFza0FjdGlvbixcbiAgRHVwVGFza0FjdGlvbixcbiAgTmV3VGFza0FjdGlvbixcbiAgU3BsaXRUYXNrQWN0aW9uLFxufSBmcm9tIFwiLi9hY3Rpb25zL3Rhc2tzLnRzXCI7XG5pbXBvcnQgeyBUb2dnbGVEYXJrTW9kZUFjdGlvbiB9IGZyb20gXCIuL2FjdGlvbnMvdG9nZ2xlRGFya01vZGUudHNcIjtcbmltcG9ydCB7IFRvZ2dsZVJhZGFyQWN0aW9uIH0gZnJvbSBcIi4vYWN0aW9ucy90b2dnbGVSYWRhci50c1wiO1xuaW1wb3J0IHsgUmVkb0FjdGlvbiwgVW5kb0FjdGlvbiB9IGZyb20gXCIuL2FjdGlvbnMvdW5kby50c1wiO1xuXG5leHBvcnQgdHlwZSBBY3Rpb25OYW1lcyA9XG4gIHwgXCJUb2dnbGVEYXJrTW9kZUFjdGlvblwiXG4gIHwgXCJUb2dnbGVSYWRhckFjdGlvblwiXG4gIHwgXCJSZXNldFpvb21BY3Rpb25cIlxuICB8IFwiVW5kb0FjdGlvblwiXG4gIHwgXCJSZWRvQWN0aW9uXCJcbiAgfCBcIkhlbHBBY3Rpb25cIlxuICB8IFwiU3BsaXRUYXNrQWN0aW9uXCJcbiAgfCBcIkR1cFRhc2tBY3Rpb25cIlxuICB8IFwiTmV3VGFza0FjdGlvblwiXG4gIHwgXCJEZWxldGVUYXNrQWN0aW9uXCJcbiAgfCBcIkdvVG9TZWFyY2hBY3Rpb25cIlxuICB8IFwiR29Ub0Z1bGxTZWFyY2hBY3Rpb25cIlxuICB8IFwiQWRkUHJlZGVjZXNzb3JBY3Rpb25cIlxuICB8IFwiQWRkU3VjY2Vzc29yQWN0aW9uXCJcbiAgfCBcIkRldmVsb3BlclBhbmVsQWN0aW9uXCI7XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25SZWdpc3RyeTogUmVjb3JkPEFjdGlvbk5hbWVzLCBBY3Rpb24+ID0ge1xuICBUb2dnbGVEYXJrTW9kZUFjdGlvbjogbmV3IFRvZ2dsZURhcmtNb2RlQWN0aW9uKCksXG4gIFRvZ2dsZVJhZGFyQWN0aW9uOiBuZXcgVG9nZ2xlUmFkYXJBY3Rpb24oKSxcbiAgUmVzZXRab29tQWN0aW9uOiBuZXcgUmVzZXRab29tQWN0aW9uKCksXG4gIFVuZG9BY3Rpb246IG5ldyBVbmRvQWN0aW9uKCksXG4gIFJlZG9BY3Rpb246IG5ldyBSZWRvQWN0aW9uKCksXG4gIEhlbHBBY3Rpb246IG5ldyBIZWxwQWN0aW9uKCksXG4gIFNwbGl0VGFza0FjdGlvbjogbmV3IFNwbGl0VGFza0FjdGlvbigpLFxuICBEdXBUYXNrQWN0aW9uOiBuZXcgRHVwVGFza0FjdGlvbigpLFxuICBOZXdUYXNrQWN0aW9uOiBuZXcgTmV3VGFza0FjdGlvbigpLFxuICBEZWxldGVUYXNrQWN0aW9uOiBuZXcgRGVsZXRlVGFza0FjdGlvbigpLFxuICBHb1RvU2VhcmNoQWN0aW9uOiBuZXcgR29Ub1NlYXJjaEFjdGlvbigpLFxuICBHb1RvRnVsbFNlYXJjaEFjdGlvbjogbmV3IEdvVG9GdWxsU2VhcmNoQWN0aW9uKCksXG4gIEFkZFByZWRlY2Vzc29yQWN0aW9uOiBuZXcgQWRkUHJlZGVjZXNzb3JBY3Rpb24oKSxcbiAgQWRkU3VjY2Vzc29yQWN0aW9uOiBuZXcgQWRkU3VjY2Vzc29yQWN0aW9uKCksXG4gIERldmVsb3BlclBhbmVsQWN0aW9uOiBuZXcgRGV2ZWxvcGVyUGFuZWxBY3Rpb24oKSxcbn07XG4iLCAiaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gJy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpbi50cyc7XG5pbXBvcnQgeyBPcCB9IGZyb20gJy4uL29wcy9vcHMudHMnO1xuaW1wb3J0IHsgb2ssIFJlc3VsdCB9IGZyb20gJy4uL3Jlc3VsdC50cyc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkZyb21PcCwgUG9zdEFjdG9uV29yayB9IGZyb20gJy4vYWN0aW9uLnRzJztcbmltcG9ydCB7IEFjdGlvbk5hbWVzLCBBY3Rpb25SZWdpc3RyeSB9IGZyb20gJy4vcmVnaXN0cnkudHMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAge1xuICAgICdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCc6IEN1c3RvbUV2ZW50PG51bGw+O1xuICB9XG59XG5cbnR5cGUgdHlwZU9mQWN0aW9uID0gJ25vcm1hbCcgfCAndW5kbycgfCAncmVkbyc7XG5cbmNvbnN0IHVuZG9TdGFjazogQWN0aW9uW10gPSBbXTtcbmNvbnN0IHJlZG9TdGFjazogQWN0aW9uW10gPSBbXTtcblxuZXhwb3J0IGNvbnN0IHVuZG8gPSBhc3luYyAoZXhwbGFuTWFpbjogRXhwbGFuTWFpbik6IFByb21pc2U8UmVzdWx0PG51bGw+PiA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IHVuZG9TdGFjay5wb3AoKSE7XG4gIGlmICghYWN0aW9uKSB7XG4gICAgcmV0dXJuIG9rKG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IGV4ZWN1dGVBY3Rpb24oYWN0aW9uLCBleHBsYW5NYWluLCAndW5kbycpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZG8gPSBhc3luYyAoZXhwbGFuTWFpbjogRXhwbGFuTWFpbik6IFByb21pc2U8UmVzdWx0PG51bGw+PiA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IHJlZG9TdGFjay5wb3AoKSE7XG4gIGlmICghYWN0aW9uKSB7XG4gICAgcmV0dXJuIG9rKG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IGV4ZWN1dGVBY3Rpb24oYWN0aW9uLCBleHBsYW5NYWluLCAncmVkbycpO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVCeU5hbWUgPSBhc3luYyAoXG4gIG5hbWU6IEFjdGlvbk5hbWVzLFxuICBleHBsYW5NYWluOiBFeHBsYW5NYWluXG4pOiBQcm9taXNlPFJlc3VsdDxudWxsPj4gPT4ge1xuICByZXR1cm4gZXhlY3V0ZUFjdGlvbihBY3Rpb25SZWdpc3RyeVtuYW1lXSwgZXhwbGFuTWFpbik7XG59O1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZUFjdGlvbiA9IGFzeW5jIChcbiAgYWN0aW9uOiBBY3Rpb24sXG4gIGV4cGxhbk1haW46IEV4cGxhbk1haW4sXG4gIHR5cGVPZkFjdGlvbjogdHlwZU9mQWN0aW9uID0gJ25vcm1hbCdcbik6IFByb21pc2U8UmVzdWx0PG51bGw+PiA9PiB7XG4gIGNvbnN0IHJldCA9IGF3YWl0IGFjdGlvbi5kbyhleHBsYW5NYWluKTtcbiAgaWYgKCFyZXQub2spIHtcbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIHN3aXRjaCAoYWN0aW9uLnBvc3RBY3Rpb25Xb3JrKSB7XG4gICAgY2FzZSAnJzpcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGFpbnRDaGFydCc6XG4gICAgICBleHBsYW5NYWluLnBhaW50Q2hhcnQoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGxhbkRlZmluaXRpb25DaGFuZ2VkJzpcbiAgICAgIGV4cGxhbk1haW4ucGxhbkRlZmluaXRpb25IYXNCZWVuQ2hhbmdlZCgpO1xuICAgICAgZXhwbGFuTWFpbi5wYWludENoYXJ0KCk7XG4gICAgICAvLyBTZW5kIGFuIGV2ZW50IGluIGNhc2Ugd2UgaGF2ZSBhbnkgZGlhbG9ncyB1cCB0aGF0IG5lZWQgdG8gcmUtcmVuZGVyIGlmXG4gICAgICAvLyB0aGUgcGxhbiBjaGFuZ2VkLCBwb3NzaWJsZSBzaW5jZSBDdHJsLVogd29ya3MgZnJvbSBhbnl3aGVyZS5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcpKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChhY3Rpb24udW5kbykge1xuICAgIHN3aXRjaCAodHlwZU9mQWN0aW9uKSB7XG4gICAgICBjYXNlICdub3JtYWwnOlxuICAgICAgICB1bmRvU3RhY2sucHVzaChyZXQudmFsdWUpO1xuICAgICAgICByZWRvU3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2VkaXQtYWN0aW9uJykpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndW5kbyc6XG4gICAgICAgIHJlZG9TdGFjay5wdXNoKHJldC52YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdyZWRvJzpcbiAgICAgICAgdW5kb1N0YWNrLnB1c2gocmV0LnZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvayhudWxsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3AgPSBhc3luYyAoXG4gIG9wOiBPcCxcbiAgcG9zdEFjdGlvbldvcms6IFBvc3RBY3RvbldvcmssXG4gIHVuZG86IGJvb2xlYW4sXG4gIGV4cGxhbk1haW46IEV4cGxhbk1haW5cbik6IFByb21pc2U8UmVzdWx0PG51bGw+PiA9PiB7XG4gIHJldHVybiBleGVjdXRlQWN0aW9uKG5ldyBBY3Rpb25Gcm9tT3Aob3AsIHBvc3RBY3Rpb25Xb3JrLCB1bmRvKSwgZXhwbGFuTWFpbik7XG59O1xuIiwgImltcG9ydCB7IGV4ZWN1dGVCeU5hbWUgfSBmcm9tICcuLi9hY3Rpb24vZXhlY3V0ZSc7XG5pbXBvcnQgeyBBY3Rpb25OYW1lcyB9IGZyb20gJy4uL2FjdGlvbi9yZWdpc3RyeSc7XG5pbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSAnLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluJztcbmltcG9ydCB7IHJlcG9ydElmRXJyb3IgfSBmcm9tICcuLi9yZXBvcnQtZXJyb3IvcmVwb3J0LWVycm9yJztcblxuZXhwb3J0IGNvbnN0IEtleU1hcDogTWFwPHN0cmluZywgQWN0aW9uTmFtZXM+ID0gbmV3IE1hcChbXG4gIFsnc2hpZnQtY3RybC1SJywgJ1RvZ2dsZVJhZGFyQWN0aW9uJ10sXG4gIFsnc2hpZnQtY3RybC1NJywgJ1RvZ2dsZURhcmtNb2RlQWN0aW9uJ10sXG4gIFsnc2hpZnQtY3RybC1aJywgJ1Jlc2V0Wm9vbUFjdGlvbiddLFxuICBbJ2N0cmwteicsICdVbmRvQWN0aW9uJ10sXG4gIFsnY3RybC15JywgJ1JlZG9BY3Rpb24nXSxcbiAgWydzaGlmdC1jdHJsLUgnLCAnSGVscEFjdGlvbiddLFxuICBbJ3NoaWZ0LWN0cmwtfCcsICdTcGxpdFRhc2tBY3Rpb24nXSxcbiAgWydzaGlmdC1jdHJsLV8nLCAnRHVwVGFza0FjdGlvbiddLFxuICBbJ2FsdC1JbnNlcnQnLCAnTmV3VGFza0FjdGlvbiddLFxuICBbJ2FsdC1EZWxldGUnLCAnRGVsZXRlVGFza0FjdGlvbiddLFxuICBbJ2N0cmwtZicsICdHb1RvU2VhcmNoQWN0aW9uJ10sXG4gIFsnc2hpZnQtY3RybC1GJywgJ0dvVG9GdWxsU2VhcmNoQWN0aW9uJ10sXG4gIFsnc2hpZnQtY3RybC08JywgJ0FkZFByZWRlY2Vzc29yQWN0aW9uJ10sXG4gIFsnc2hpZnQtY3RybC0+JywgJ0FkZFN1Y2Nlc3NvckFjdGlvbiddLFxuICBbJ3NoaWZ0LWN0cmwtVicsICdEZXZlbG9wZXJQYW5lbEFjdGlvbiddLFxuXSk7XG5cbmxldCBleHBsYW5NYWluOiBFeHBsYW5NYWluO1xuXG5leHBvcnQgY29uc3QgU3RhcnRLZXlib2FyZEhhbmRsaW5nID0gKGVtOiBFeHBsYW5NYWluKSA9PiB7XG4gIGV4cGxhbk1haW4gPSBlbTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93bik7XG59O1xuXG5jb25zdCBvbktleURvd24gPSBhc3luYyAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICBjb25zdCBrZXluYW1lID0gYCR7ZS5zaGlmdEtleSA/ICdzaGlmdC0nIDogJyd9JHtlLmN0cmxLZXkgPyAnY3RybC0nIDogJyd9JHtlLm1ldGFLZXkgPyAnbWV0YS0nIDogJyd9JHtlLmFsdEtleSA/ICdhbHQtJyA6ICcnfSR7ZS5rZXl9YDtcbiAgLy8gY29uc29sZS5sb2coa2V5bmFtZSk7XG4gIGNvbnN0IGFjdGlvbk5hbWUgPSBLZXlNYXAuZ2V0KGtleW5hbWUpO1xuICBpZiAoYWN0aW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZUJ5TmFtZShhY3Rpb25OYW1lLCBleHBsYW5NYWluKTtcbiAgcmVwb3J0SWZFcnJvcihyZXQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVubWFwVW5kb0FuZFJlZG8gPSAoKSA9PiB7XG4gIEtleU1hcC5kZWxldGUoJ2N0cmwteicpO1xuICBLZXlNYXAuZGVsZXRlKCdjdHJsLXknKTtcbn07XG4iLCAiaW1wb3J0IHsgaHRtbCwgcmVuZGVyIH0gZnJvbSBcImxpdC1odG1sXCI7XG5pbXBvcnQgeyBLZXlNYXAgfSBmcm9tIFwiLi4va2V5bWFwL2tleW1hcC50c1wiO1xuaW1wb3J0IHsgQWN0aW9uUmVnaXN0cnkgfSBmcm9tIFwiLi4vYWN0aW9uL3JlZ2lzdHJ5XCI7XG5cbmNsYXNzIEtleWJvYXJkTWFwRGlhbG9nIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBjb25zdCBrZXltYXBFbnRyaWVzID0gWy4uLktleU1hcC5lbnRyaWVzKCldO1xuICAgIGtleW1hcEVudHJpZXMuc29ydCgpO1xuICAgIHJlbmRlcihcbiAgICAgIGh0bWxgXG4gICAgICAgIDxkaWFsb2c+XG4gICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgJHtrZXltYXBFbnRyaWVzLm1hcChcbiAgICAgICAgICAgICAgKFtrZXksIGFjdGlvbk5hbWVdKSA9PlxuICAgICAgICAgICAgICAgIGh0bWxgPHRyPlxuICAgICAgICAgICAgICAgICAgPHRkPiR7a2V5fTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+JHtBY3Rpb25SZWdpc3RyeVthY3Rpb25OYW1lXS5kZXNjcmlwdGlvbn08L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+YCxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPC9kaWFsb2c+XG4gICAgICBgLFxuICAgICAgdGhpcyxcbiAgICApO1xuICB9XG5cbiAgc2hvd01vZGFsKCkge1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MRGlhbG9nRWxlbWVudD4oXCJkaWFsb2dcIikhLnNob3dNb2RhbCgpO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImtleWJvYXJkLW1hcC1kaWFsb2dcIiwgS2V5Ym9hcmRNYXBEaWFsb2cpO1xuIiwgImltcG9ydCB7IFRlbXBsYXRlUmVzdWx0LCBodG1sLCByZW5kZXIgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSAnLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluJztcblxuZXhwb3J0IGNsYXNzIEltYWdlRXhwb3J0UGFuZWwgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGV4cGxhbk1haW46IEV4cGxhbk1haW4gfCBudWxsID0gbnVsbDtcbiAgcGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZXhwbGFuTWFpbiAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ3BsYW4tZGVmaW5pdGlvbi1jaGFuZ2VkJyxcbiAgICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcsXG4gICAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgc2V0Q29uZmlnKGV4cGxhbk1haW46IEV4cGxhbk1haW4pIHtcbiAgICB0aGlzLmV4cGxhbk1haW4gPSBleHBsYW5NYWluO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBpZiAoIXRoaXMuZXhwbGFuTWFpbikge1xuICAgICAgcmV0dXJuIGh0bWxgYDtcbiAgICB9XG4gICAgY29uc3QgaW1hZ2VFeHBvcnRXaWR0aCA9IHRoaXMuZXhwbGFuTWFpbi5pbWFnZUV4cG9ydFdpZHRoUHg7XG4gICAgcmV0dXJuIGh0bWxgIDxoMz5JbWFnZSBFeHBvcnQ8L2gzPlxuICAgIFxuICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgV2lkdGggKHB4KSBcbiAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgdHlwZT1udW1iZXIgXG4gICAgICAgICAgICAudmFsdWU9JHtpbWFnZUV4cG9ydFdpZHRofVxuICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBJbnB1dEV2ZW50KSA9PiB0aGlzLndpZHRoQ2hhbmdlKGUpfVxuICAgICAgICAgICAgbWluPTEwMFxuICAgICAgICAgICAgbWF4PTEwMDAwMDBcbiAgICAgICAgICAgIHN0ZXA9MVxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgPlxuICAgICAgICA8L2xhYmxlPlxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgdHlwZT1jaGVja2JveCBcbiAgICAgICAgICAgIC5jaGVja2VkPSR7dGhpcy5leHBsYW5NYWluLmltYWdlRXhwb3J0QmFja2dyb3VuZFRyYW5zcGFyZW50fVxuICAgICAgICAgICAgQGlucHV0PSR7KGU6IElucHV0RXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudENoYW5nZShlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgVHJhbnNwYXJlbnQgQmFja2dyb3VuZFxuICAgICAgICA8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHdpZHRoQ2hhbmdlKGU6IElucHV0RXZlbnQpIHtcbiAgICBjb25zdCBuZXdXaWR0aDogbnVtYmVyID0gKyhlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICBpZiAobmV3V2lkdGggPiAwICYmIG5ld1dpZHRoIDwgMTAwMDAwMCkge1xuICAgICAgdGhpcy5leHBsYW5NYWluIS5pbWFnZUV4cG9ydFdpZHRoUHggPSBuZXdXaWR0aDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRyYW5zcGFyZW50Q2hhbmdlKGU6IElucHV0RXZlbnQpIHtcbiAgICBjb25zdCBiOiBib29sZWFuID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQ7XG4gICAgdGhpcy5leHBsYW5NYWluIS5pbWFnZUV4cG9ydEJhY2tncm91bmRUcmFuc3BhcmVudCA9IGI7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdpbWFnZS1leHBvcnQtcGFuZWwnLCBJbWFnZUV4cG9ydFBhbmVsKTtcbiIsICJleHBvcnQgY2xhc3MgUHJvbXB0RGlhbG9nIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBkaWFsb2c6IEhUTUxEaWFsb2dFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIGhlYWRpbmc6IEhUTUxIZWFkaW5nRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcmVzb2x2ZTogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgdGhpcy5kaWFsb2cgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2RpYWxvZycpITtcbiAgICB0aGlzLmhlYWRpbmcgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2gzJyk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG5cbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNwcm9tcHQtY2FuY2VsJykhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5kaWFsb2chLmNsb3NlKCk7XG4gICAgICB0aGlzLnJlc29sdmUobnVsbCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNwcm9tcHQtb2snKSEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmRpYWxvZyEuY2xvc2UoKTtcbiAgICAgIHRoaXMucmVzb2x2ZSh0aGlzLmlucHV0RWxlbWVudCEudmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvbXB0KGhlYWRpbmc6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvbWlzZTxzdHJpbmcgfCBudWxsPigocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuaGVhZGluZyEudGV4dENvbnRlbnQgPSBoZWFkaW5nO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50IS52YWx1ZSA9ICcnO1xuICAgIHRoaXMuZGlhbG9nIS5zaG93TW9kYWwoKTtcblxuICAgIHJldHVybiBwO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgncHJvbXB0LWRpYWxvZycsIFByb21wdERpYWxvZyk7XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gXCJsaXQtaHRtbFwiO1xuaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gXCIuLi9leHBsYW5NYWluL2V4cGxhbk1haW5cIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgR2xvYmFsRXZlbnRIYW5kbGVyc0V2ZW50TWFwIHtcbiAgICBcImdyb3VwLWJ5LXJlc291cmNlLWNoYW5nZWRcIjogQ3VzdG9tRXZlbnQ8c3RyaW5nPjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR3JvdXBCeUNvbnRyb2wgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGV4cGxhbk1haW46IEV4cGxhbk1haW4gfCBudWxsID0gbnVsbDtcblxuICAvKiogQWxsIG9mIHRoZSB0eXBlcyBvZiByZXNvdXJjZXMgaW4gdGhlIHBsYW4uICovXG4gIGdyb3VwQnlPcHRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHNlbGVjdGVkR3JvdXBCeTogc3RyaW5nID0gXCJcIjtcblxuICBwbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFjazogKCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5leHBsYW5NYWluICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucG9wdWxhdGVHcm91cEJ5KCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHBvcHVsYXRlR3JvdXBCeSgpIHtcbiAgICBjb25zdCBwbGFuID0gdGhpcy5leHBsYW5NYWluPy5wbGFuO1xuICAgIGlmIChwbGFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5ncm91cEJ5T3B0aW9ucyA9IFtcIlwiLCAuLi5PYmplY3Qua2V5cyhwbGFuLnJlc291cmNlRGVmaW5pdGlvbnMpXTtcbiAgICBpZiAoIXRoaXMuZ3JvdXBCeU9wdGlvbnMuaW5jbHVkZXModGhpcy5zZWxlY3RlZEdyb3VwQnkpKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkR3JvdXBCeSA9IFwiXCI7XG4gICAgfVxuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwicGxhbi1kZWZpbml0aW9uLWNoYW5nZWRcIixcbiAgICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2ssXG4gICAgKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcInBsYW4tZGVmaW5pdGlvbi1jaGFuZ2VkXCIsXG4gICAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlcigpIHtcbiAgICByZW5kZXIodGhpcy50ZW1wbGF0ZSgpLCB0aGlzKTtcbiAgfVxuXG4gIHNldENvbmZpZyhleHBsYW5NYWluOiBFeHBsYW5NYWluKSB7XG4gICAgdGhpcy5leHBsYW5NYWluID0gZXhwbGFuTWFpbjtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vIGdyb3VwaW5nIGlzIHRvIGJlIGRvbmUuXG4gIGdldFNlbGVjdGVkR3JvdXAoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEdyb3VwQnk7XG4gIH1cblxuICBncm91cEJ5Q2hhbmdlZChlOiBJbnB1dEV2ZW50KSB7XG4gICAgdGhpcy5zZWxlY3RlZEdyb3VwQnkgPSAoZS50YXJnZXQgYXMgSFRNTFNlbGVjdEVsZW1lbnQpLnZhbHVlO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChcImdyb3VwLWJ5LXJlc291cmNlLWNoYW5nZWRcIiwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHRoaXMuc2VsZWN0ZWRHcm91cEJ5LFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdGVtcGxhdGUoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHNlbGVjdCBAaW5wdXQ9JHsoZTogSW5wdXRFdmVudCkgPT4gdGhpcy5ncm91cEJ5Q2hhbmdlZChlKX0+XG4gICAgICAgICR7dGhpcy5ncm91cEJ5T3B0aW9ucy5tYXAoKGdyb3VwQnk6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IGxhYmVsID0gZ3JvdXBCeSA/IGdyb3VwQnkgOiBcIihub25lKVwiO1xuICAgICAgICAgIHJldHVybiBodG1sYDxvcHRpb24gP3NlbGVjdGVkPSR7Z3JvdXBCeSA9PT0gdGhpcy5zZWxlY3RlZEdyb3VwQnl9PlxuICAgICAgICAgICAgJHtsYWJlbH1cbiAgICAgICAgICA8L29wdGlvbj5gO1xuICAgICAgICB9KX1cbiAgICAgIDwvc2VsZWN0PlxuICAgIGA7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZ3JvdXBieS1jb250cm9sXCIsIEdyb3VwQnlDb250cm9sKTtcbiIsICJjbGFzcyBUYWJCdXR0b25zIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBhbGxCdXR0b25zOiBIVE1MQnV0dG9uRWxlbWVudFtdID0gW107XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uXCIpLmZvckVhY2goKGJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGJ1dHRvbi5kYXRhc2V0LnRhcmdldDtcbiAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWxsQnV0dG9ucy5wdXNoKGJ1dHRvbik7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuaGlkZUFsbEJ1dCh0YXJnZXQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhpZGVBbGxCdXQodGFyZ2V0OiBzdHJpbmcpIHtcbiAgICB0aGlzLmFsbEJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgdGFiUGFuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidXR0b24uZGF0YXNldC50YXJnZXQhKTtcbiAgICAgIGlmIChidXR0b24uZGF0YXNldC50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICB0YWJQYW5lbD8uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhYlBhbmVsPy5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInRhYi1idXR0b25zXCIsIFRhYkJ1dHRvbnMpO1xuIiwgImltcG9ydCB7IFJlc3VsdCwgZXJyb3IsIG9rIH0gZnJvbSBcIi4uL3Jlc3VsdFwiO1xuXG4vLyBBbGwgZGF0ZXMgYXJlIHN0b3JlZCBhbmQgY2FsY3VsYXRlZCBhcyBub29uIFVUQyBmb3IgY29uc2lzdGVuY3kuXG5cbi8vIENvbnZlcnRzIGEgRGF0ZSBpbnRvIGEgZm9ybSB0byBmZWVkIHRvIGFuIEhUTUxEYXRlSW5wdXQuXG5leHBvcnQgY29uc3QgZGF0ZURpc3BsYXkgPSAoZDogRGF0ZSk6IHN0cmluZyA9PiBkLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuXG5leHBvcnQgY29uc3QgZGF0ZUNvbnRyb2xEYXRlUmUgPSAvXFxkezR9LVxcZHsyfS1cXGR7Mn0vO1xuXG5leHBvcnQgY29uc3QgcGFyc2VEYXRlU3RyaW5nID0gKHM6IHN0cmluZyk6IFJlc3VsdDxEYXRlPiA9PiB7XG4gIGlmICghZGF0ZUNvbnRyb2xEYXRlUmUudGVzdChzKSkge1xuICAgIHJldHVybiBlcnJvcihuZXcgRXJyb3IoYCR7c30gaXMgbm90IGEgdmFsaWQgZGF0ZWApKTtcbiAgfVxuXG4gIHJldHVybiBvayhuZXcgRGF0ZShzICsgXCJUMTI6MDA6MDAuMDAwWlwiKSk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9kYXlBc1VUQyA9ICgpOiBEYXRlID0+IHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XG4gIHJldHVybiBuZXcgRGF0ZShcbiAgICBEYXRlLlVUQyhkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgZC5nZXREYXRlKCksIDEyLCAwLCAwKSxcbiAgKTtcbn07XG4iLCAiaW1wb3J0IHtcbiAgZGF0ZURpc3BsYXksXG4gIHBhcnNlRGF0ZVN0cmluZyxcbiAgdG9kYXlBc1VUQyxcbn0gZnJvbSBcIi4uL2RhdGUtY29udHJvbC11dGlscy9kYXRlLWNvbnRyb2wtdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgUGxhblN0YXR1cyA9XG4gIHwgeyBzdGFnZTogXCJ1bnN0YXJ0ZWRcIjsgc3RhcnQ6IDAgfVxuICB8IHtcbiAgICAgIHN0YWdlOiBcInN0YXJ0ZWRcIjtcbiAgICAgIHN0YXJ0OiBudW1iZXI7IC8vIE51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoLiBDb3VsZCBwcm9iYWJseSBiZSBjaGFuZ2VkIHRvIGEgRGF0ZS5cbiAgICB9O1xuXG5leHBvcnQgY29uc3Qgc3RhdHVzVG9EYXRlID0gKHN0YXR1czogUGxhblN0YXR1cyk6IERhdGUgPT4ge1xuICBpZiAoc3RhdHVzLnN0YWdlID09PSBcInVuc3RhcnRlZFwiKSB7XG4gICAgcmV0dXJuIHRvZGF5QXNVVEMoKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgRGF0ZShzdGF0dXMuc3RhcnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVuc3RhcnRlZDogUGxhblN0YXR1cyA9IHsgc3RhZ2U6IFwidW5zdGFydGVkXCIsIHN0YXJ0OiAwIH07XG5cbmV4cG9ydCB0eXBlIFBsYW5TdGF0dXNTZXJpYWxpemVkID0ge1xuICBzdGFnZTogc3RyaW5nO1xuICBzdGFydDogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IHRvSlNPTiA9IChwOiBQbGFuU3RhdHVzKTogUGxhblN0YXR1c1NlcmlhbGl6ZWQgPT4ge1xuICBjb25zdCByZXQ6IFBsYW5TdGF0dXNTZXJpYWxpemVkID0ge1xuICAgIHN0YWdlOiBcInVuc3RhcnRlZFwiLFxuICAgIHN0YXJ0OiBcIlwiLFxuICB9O1xuICBpZiAocC5zdGFnZSA9PT0gXCJzdGFydGVkXCIpIHtcbiAgICByZXQuc3RhZ2UgPSBcInN0YXJ0ZWRcIjtcbiAgICByZXQuc3RhcnQgPSBkYXRlRGlzcGxheShuZXcgRGF0ZShwLnN0YXJ0KSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbmV4cG9ydCBjb25zdCBmcm9tSlNPTiA9IChwOiBQbGFuU3RhdHVzU2VyaWFsaXplZCk6IFBsYW5TdGF0dXMgPT4ge1xuICBjb25zdCB1bnN0YXJ0ZWQ6IFBsYW5TdGF0dXMgPSB7IHN0YWdlOiBcInVuc3RhcnRlZFwiLCBzdGFydDogMCB9O1xuXG4gIGlmIChwLnN0YWdlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5zdGFydGVkO1xuICB9XG4gIGlmIChwLnN0YWdlID09PSBcInN0YXJ0ZWRcIikge1xuICAgIGlmIChwLnN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bnN0YXJ0ZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IHBhcnNlRGF0ZVN0cmluZyhwLnN0YXJ0KTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHVuc3RhcnRlZDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YWdlOiBcInN0YXJ0ZWRcIixcbiAgICAgIHN0YXJ0OiByZXQudmFsdWUuZ2V0VGltZSgpLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHVuc3RhcnRlZDtcbn07XG4iLCAiaW1wb3J0IHtcbiAgVmVydGV4LFxuICBWZXJ0ZXhJbmRpY2VzLFxuICBEaXJlY3RlZEdyYXBoLFxuICBlZGdlc0J5U3JjVG9NYXAsXG59IGZyb20gXCIuLi9kYWcudHNcIjtcblxuLyoqXG5UaGUgcmV0dXJuIHR5cGUgZm9yIHRoZSBUb3Bsb2dpY2FsU29ydCBmdW5jdGlvbi4gXG4gKi9cbnR5cGUgVFNSZXR1cm4gPSB7XG4gIGhhc0N5Y2xlczogYm9vbGVhbjtcblxuICBjeWNsZTogVmVydGV4SW5kaWNlcztcblxuICBvcmRlcjogVmVydGV4SW5kaWNlcztcbn07XG5cbi8qKlxuUmV0dXJucyBhIHRvcG9sb2dpY2FsIHNvcnQgb3JkZXIgZm9yIGEgRGlyZWN0ZWRHcmFwaCwgb3IgdGhlIG1lbWJlcnMgb2YgYSBjeWNsZSBpZiBhXG50b3BvbG9naWNhbCBzb3J0IGNhbid0IGJlIGRvbmUuXG4gXG4gVGhlIHRvcG9sb2dpY2FsIHNvcnQgY29tZXMgZnJvbTpcblxuICAgIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RvcG9sb2dpY2FsX3NvcnRpbmcjRGVwdGgtZmlyc3Rfc2VhcmNoXG5cbkwgXHUyMTkwIEVtcHR5IGxpc3QgdGhhdCB3aWxsIGNvbnRhaW4gdGhlIHNvcnRlZCBub2Rlc1xud2hpbGUgZXhpc3RzIG5vZGVzIHdpdGhvdXQgYSBwZXJtYW5lbnQgbWFyayBkb1xuICAgIHNlbGVjdCBhbiB1bm1hcmtlZCBub2RlIG5cbiAgICB2aXNpdChuKVxuXG5mdW5jdGlvbiB2aXNpdChub2RlIG4pXG4gICAgaWYgbiBoYXMgYSBwZXJtYW5lbnQgbWFyayB0aGVuXG4gICAgICAgIHJldHVyblxuICAgIGlmIG4gaGFzIGEgdGVtcG9yYXJ5IG1hcmsgdGhlblxuICAgICAgICBzdG9wICAgKGdyYXBoIGhhcyBhdCBsZWFzdCBvbmUgY3ljbGUpXG5cbiAgICBtYXJrIG4gd2l0aCBhIHRlbXBvcmFyeSBtYXJrXG5cbiAgICBmb3IgZWFjaCBub2RlIG0gd2l0aCBhbiBlZGdlIGZyb20gbiB0byBtIGRvXG4gICAgICAgIHZpc2l0KG0pXG5cbiAgICByZW1vdmUgdGVtcG9yYXJ5IG1hcmsgZnJvbSBuXG4gICAgbWFyayBuIHdpdGggYSBwZXJtYW5lbnQgbWFya1xuICAgIGFkZCBuIHRvIGhlYWQgb2YgTFxuXG4gKi9cbmV4cG9ydCBjb25zdCB0b3BvbG9naWNhbFNvcnQgPSAoZzogRGlyZWN0ZWRHcmFwaCk6IFRTUmV0dXJuID0+IHtcbiAgY29uc3QgcmV0OiBUU1JldHVybiA9IHtcbiAgICBoYXNDeWNsZXM6IGZhbHNlLFxuICAgIGN5Y2xlOiBbXSxcbiAgICBvcmRlcjogW10sXG4gIH07XG5cbiAgY29uc3QgZWRnZU1hcCA9IGVkZ2VzQnlTcmNUb01hcChnLkVkZ2VzKTtcblxuICBjb25zdCBub2Rlc1dpdGhvdXRQZXJtYW5lbnRNYXJrID0gbmV3IFNldDxudW1iZXI+KCk7XG4gIGcuVmVydGljZXMuZm9yRWFjaCgoXzogVmVydGV4LCBpbmRleDogbnVtYmVyKSA9PlxuICAgIG5vZGVzV2l0aG91dFBlcm1hbmVudE1hcmsuYWRkKGluZGV4KSxcbiAgKTtcblxuICBjb25zdCBoYXNQZXJtYW5lbnRNYXJrID0gKGluZGV4OiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICByZXR1cm4gIW5vZGVzV2l0aG91dFBlcm1hbmVudE1hcmsuaGFzKGluZGV4KTtcbiAgfTtcblxuICBjb25zdCB0ZW1wb3JhcnlNYXJrID0gbmV3IFNldDxudW1iZXI+KCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgIGlmIChoYXNQZXJtYW5lbnRNYXJrKGluZGV4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0ZW1wb3JhcnlNYXJrLmhhcyhpbmRleCkpIHtcbiAgICAgIC8vIFdlIG9ubHkgcmV0dXJuIGZhbHNlIG9uIGZpbmRpbmcgYSBsb29wLCB3aGljaCBpcyBzdG9yZWQgaW5cbiAgICAgIC8vIHRlbXBvcmFyeU1hcmsuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRlbXBvcmFyeU1hcmsuYWRkKGluZGV4KTtcblxuICAgIGNvbnN0IG5leHRFZGdlcyA9IGVkZ2VNYXAuZ2V0KGluZGV4KTtcbiAgICBpZiAobmV4dEVkZ2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dEVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGUgPSBuZXh0RWRnZXNbaV07XG4gICAgICAgIGlmICghdmlzaXQoZS5qKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRlbXBvcmFyeU1hcmsuZGVsZXRlKGluZGV4KTtcbiAgICBub2Rlc1dpdGhvdXRQZXJtYW5lbnRNYXJrLmRlbGV0ZShpbmRleCk7XG4gICAgcmV0Lm9yZGVyLnVuc2hpZnQoaW5kZXgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIFdlIHdpbGwgcHJlc3VtZSB0aGF0IFZlcnRleFswXSBpcyB0aGUgc3RhcnQgbm9kZSBhbmQgdGhhdCB3ZSBzaG91bGQgc3RhcnQgdGhlcmUuXG4gIGNvbnN0IG9rID0gdmlzaXQoMCk7XG4gIGlmICghb2spIHtcbiAgICByZXQuaGFzQ3ljbGVzID0gdHJ1ZTtcbiAgICByZXQuY3ljbGUgPSBbLi4udGVtcG9yYXJ5TWFyay5rZXlzKCldO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG4iLCAiaW1wb3J0IHsgUmVzdWx0LCBvaywgZXJyb3IgfSBmcm9tIFwiLi4vcmVzdWx0LnRzXCI7XG5pbXBvcnQge1xuICBWZXJ0ZXhJbmRpY2VzLFxuICBFZGdlcyxcbiAgRGlyZWN0ZWRHcmFwaCxcbiAgZWRnZXNCeVNyY1RvTWFwLFxuICBlZGdlc0J5RHN0VG9NYXAsXG4gIERpcmVjdGVkRWRnZSxcbiAgRGlyZWN0ZWRFZGdlU2VyaWFsaXplZCxcbn0gZnJvbSBcIi4uL2RhZy9kYWdcIjtcblxuaW1wb3J0IHsgdG9wb2xvZ2ljYWxTb3J0IH0gZnJvbSBcIi4uL2RhZy9hbGdvcml0aG1zL3RvcG9zb3J0LnRzXCI7XG5pbXBvcnQgeyBNZXRyaWNWYWx1ZXMgfSBmcm9tIFwiLi4vbWV0cmljcy9tZXRyaWNzLnRzXCI7XG5pbXBvcnQgeyBUYXNrRHVyYXRpb24gfSBmcm9tIFwiLi4vdHlwZXMvdHlwZXMudHNcIjtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEFTS19OQU1FID0gXCJUYXNrIE5hbWVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUYXNrU2VyaWFsaXplZCB7XG4gIHJlc291cmNlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgbWV0cmljczogTWV0cmljVmFsdWVzO1xuICBuYW1lOiBzdHJpbmc7XG4gIGlkOiBzdHJpbmc7XG59XG5cbi8vIERvIHdlIGNyZWF0ZSBzdWItY2xhc3NlcyBhbmQgdGhlbiBzZXJpYWxpemUgc2VwYXJhdGVseT8gT3IgZG8gd2UgaGF2ZSBhXG4vLyBjb25maWcgYWJvdXQgd2hpY2ggdHlwZSBvZiBEdXJhdGlvblNhbXBsZXIgaXMgYmVpbmcgdXNlZD9cbi8vXG4vLyBXZSBjYW4gdXNlIHRyYWRpdGlvbmFsIG9wdGltaXN0aWMvcGVzc2ltaXN0aWMgdmFsdWUuIE9yIEphY29iaWFuJ3Ncbi8vIHVuY2VydGFpbnRseSBtdWx0aXBsaWVycyBbMS4xLCAxLjUsIDIsIDVdIGFuZCB0aGVpciBpbnZlcnNlcyB0byBnZW5lcmF0ZSBhblxuLy8gb3B0aW1pc3RpYyBwZXNzaW1pc3RpYy5cblxuLyoqIFRhc2sgaXMgYSBWZXJ0ZXggd2l0aCBkZXRhaWxzIGFib3V0IHRoZSBUYXNrIHRvIGNvbXBsZXRlLiAqL1xuZXhwb3J0IGNsYXNzIFRhc2sge1xuICAvLyBSZXNvdXJjZSBrZXlzIGFuZCB2YWx1ZXMuIFRoZSBwYXJlbnQgcGxhbiBjb250YWlucyBhbGwgdGhlIHJlc291cmNlXG4gIC8vIGRlZmluaXRpb25zLlxuICByZXNvdXJjZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gIG1ldHJpY3M6IE1ldHJpY1ZhbHVlcztcbiAgbmFtZTogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZyA9IFwiXCIpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lIHx8IERFRkFVTFRfVEFTS19OQU1FO1xuICAgIHRoaXMubWV0cmljcyA9IHt9O1xuICAgIHRoaXMucmVzb3VyY2VzID0ge307XG4gICAgdGhpcy5pZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gIH1cblxuICB0b0pTT04oKTogVGFza1NlcmlhbGl6ZWQge1xuICAgIHJldHVybiB7XG4gICAgICByZXNvdXJjZXM6IHRoaXMucmVzb3VyY2VzLFxuICAgICAgbWV0cmljczogdGhpcy5tZXRyaWNzLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSlNPTih0YXNrU2VyaWFsaXplZDogVGFza1NlcmlhbGl6ZWQpOiBUYXNrIHtcbiAgICBjb25zdCByZXQgPSBuZXcgVGFzayh0YXNrU2VyaWFsaXplZC5uYW1lKTtcbiAgICByZXQuaWQgPSB0YXNrU2VyaWFsaXplZC5pZDtcbiAgICByZXQucmVzb3VyY2VzID0gdGFza1NlcmlhbGl6ZWQucmVzb3VyY2VzO1xuICAgIHJldC5tZXRyaWNzID0gdGFza1NlcmlhbGl6ZWQubWV0cmljcztcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGR1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWV0cmljKFwiRHVyYXRpb25cIikhO1xuICB9XG5cbiAgcHVibGljIHNldCBkdXJhdGlvbih2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRNZXRyaWMoXCJEdXJhdGlvblwiLCB2YWx1ZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWV0cmljKGtleTogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNzW2tleV07XG4gIH1cblxuICBwdWJsaWMgc2V0TWV0cmljKGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5tZXRyaWNzW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVNZXRyaWMoa2V5OiBzdHJpbmcpIHtcbiAgICBkZWxldGUgdGhpcy5tZXRyaWNzW2tleV07XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVzb3VyY2Uoa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlc291cmNlc1trZXldO1xuICB9XG5cbiAgcHVibGljIHNldFJlc291cmNlKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXNvdXJjZXNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZVJlc291cmNlKGtleTogc3RyaW5nKSB7XG4gICAgZGVsZXRlIHRoaXMucmVzb3VyY2VzW2tleV07XG4gIH1cblxuICBwdWJsaWMgZHVwKCk6IFRhc2sge1xuICAgIGNvbnN0IHJldCA9IG5ldyBUYXNrKCk7XG4gICAgcmV0LnJlc291cmNlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucmVzb3VyY2VzKTtcbiAgICByZXQubWV0cmljcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubWV0cmljcyk7XG4gICAgcmV0Lm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBUYXNrcyA9IFRhc2tbXTtcblxuZXhwb3J0IGludGVyZmFjZSBDaGFydFNlcmlhbGl6ZWQge1xuICB2ZXJ0aWNlczogVGFza1NlcmlhbGl6ZWRbXTtcbiAgZWRnZXM6IERpcmVjdGVkRWRnZVNlcmlhbGl6ZWRbXTtcbn1cblxuLyoqIEEgQ2hhcnQgaXMgYSBEaXJlY3RlZEdyYXBoLCBidXQgd2l0aCBUYXNrcyBmb3IgVmVydGljZXMuICovXG5leHBvcnQgY2xhc3MgQ2hhcnQge1xuICBWZXJ0aWNlczogVGFza3M7XG4gIEVkZ2VzOiBFZGdlcztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBzdGFydCA9IG5ldyBUYXNrKFwiU3RhcnRcIik7XG4gICAgc3RhcnQuc2V0TWV0cmljKFwiRHVyYXRpb25cIiwgMCk7XG4gICAgY29uc3QgZmluaXNoID0gbmV3IFRhc2soXCJGaW5pc2hcIik7XG4gICAgZmluaXNoLnNldE1ldHJpYyhcIkR1cmF0aW9uXCIsIDApO1xuICAgIHRoaXMuVmVydGljZXMgPSBbc3RhcnQsIGZpbmlzaF07XG4gICAgdGhpcy5FZGdlcyA9IFtuZXcgRGlyZWN0ZWRFZGdlKDAsIDEpXTtcbiAgfVxuXG4gIHRvSlNPTigpOiBDaGFydFNlcmlhbGl6ZWQge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0aWNlczogdGhpcy5WZXJ0aWNlcy5tYXAoKHQ6IFRhc2spID0+IHQudG9KU09OKCkpLFxuICAgICAgZWRnZXM6IHRoaXMuRWRnZXMubWFwKChlOiBEaXJlY3RlZEVkZ2UpID0+IGUudG9KU09OKCkpLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oY2hhcnRTZXJpYWxpemVkOiBDaGFydFNlcmlhbGl6ZWQpOiBDaGFydCB7XG4gICAgY29uc3QgcmV0ID0gbmV3IENoYXJ0KCk7XG4gICAgcmV0LlZlcnRpY2VzID0gY2hhcnRTZXJpYWxpemVkLnZlcnRpY2VzLm1hcCgodHM6IFRhc2tTZXJpYWxpemVkKSA9PlxuICAgICAgVGFzay5mcm9tSlNPTih0cyksXG4gICAgKTtcbiAgICByZXQuRWRnZXMgPSBjaGFydFNlcmlhbGl6ZWQuZWRnZXMubWFwKFxuICAgICAgKGRpcmVjdGVkRWRnZVNlcmlhbGl6ZWQ6IERpcmVjdGVkRWRnZVNlcmlhbGl6ZWQpID0+XG4gICAgICAgIERpcmVjdGVkRWRnZS5mcm9tSlNPTihkaXJlY3RlZEVkZ2VTZXJpYWxpemVkKSxcbiAgICApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgVG9wb2xvZ2ljYWxPcmRlciA9IFZlcnRleEluZGljZXM7XG5cbmV4cG9ydCB0eXBlIFZhbGlkYXRlUmVzdWx0ID0gUmVzdWx0PFRvcG9sb2dpY2FsT3JkZXI+O1xuXG4vKiogVmFsaWRhdGVzIHRoZSBEaXJlY3RlZEdyYXBoIGNvbXBvbmVudCBvZiBhIENoYXJ0IGlzIHZhbGlkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0ZWRHcmFwaChnOiBEaXJlY3RlZEdyYXBoKTogVmFsaWRhdGVSZXN1bHQge1xuICBpZiAoZy5WZXJ0aWNlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGVycm9yKFxuICAgICAgXCJDaGFydCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgdHdvIG5vZGUsIHRoZSBzdGFydCBhbmQgZmluaXNoIHRhc2tzLlwiLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBlZGdlc0J5RHN0ID0gZWRnZXNCeURzdFRvTWFwKGcuRWRnZXMpO1xuICBjb25zdCBlZGdlc0J5U3JjID0gZWRnZXNCeVNyY1RvTWFwKGcuRWRnZXMpO1xuXG4gIC8vIFRoZSBmaXJzdCBWZXJ0ZXgsIFRfMCBha2EgdGhlIFN0YXJ0IE1pbGVzdG9uZSwgbXVzdCBoYXZlIDAgaW5jb21pbmcgZWRnZXMuXG4gIGlmIChlZGdlc0J5RHN0LmdldCgwKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycm9yKFwiVGhlIHN0YXJ0IG5vZGUgKDApIGhhcyBhbiBpbmNvbWluZyBlZGdlLlwiKTtcbiAgfVxuXG4gIC8vIEFuZCBvbmx5IFRfMCBzaG91bGQgaGF2ZSAwIGluY29taW5nIGVkZ2VzLlxuICBmb3IgKGxldCBpID0gMTsgaSA8IGcuVmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZWRnZXNCeURzdC5nZXQoaSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGVycm9yKFxuICAgICAgICBgRm91bmQgbm9kZSB0aGF0IGlzbid0ICgwKSB0aGF0IGhhcyBubyBpbmNvbWluZyBlZGdlczogJHtpfWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSBsYXN0IFZlcnRleCwgVF9maW5pc2gsIHRoZSBGaW5pc2ggTWlsZXN0b25lLCBtdXN0IGhhdmUgMCBvdXRnb2luZyBlZGdlcy5cbiAgaWYgKGVkZ2VzQnlTcmMuZ2V0KGcuVmVydGljZXMubGVuZ3RoIC0gMSkgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnJvcihcbiAgICAgIFwiVGhlIGxhc3Qgbm9kZSwgd2hpY2ggc2hvdWxkIGJlIHRoZSBGaW5pc2ggTWlsZXN0b25lLCBoYXMgYW4gb3V0Z29pbmcgZWRnZS5cIixcbiAgICApO1xuICB9XG5cbiAgLy8gQW5kIG9ubHkgVF9maW5pc2ggc2hvdWxkIGhhdmUgMCBvdXRnb2luZyBlZGdlcy5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnLlZlcnRpY2VzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGlmIChlZGdlc0J5U3JjLmdldChpKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgIGBGb3VuZCBub2RlIHRoYXQgaXNuJ3QgVF9maW5pc2ggdGhhdCBoYXMgbm8gb3V0Z29pbmcgZWRnZXM6ICR7aX1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBudW1WZXJ0aWNlcyA9IGcuVmVydGljZXMubGVuZ3RoO1xuICAvLyBBbmQgYWxsIGVkZ2VzIG1ha2Ugc2Vuc2UsIGkuZS4gdGhleSBhbGwgcG9pbnQgdG8gdmVydGV4ZXMgdGhhdCBleGlzdC5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnLkVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGcuRWRnZXNbaV07XG4gICAgaWYgKFxuICAgICAgZWxlbWVudC5pIDwgMCB8fFxuICAgICAgZWxlbWVudC5pID49IG51bVZlcnRpY2VzIHx8XG4gICAgICBlbGVtZW50LmogPCAwIHx8XG4gICAgICBlbGVtZW50LmogPj0gbnVtVmVydGljZXNcbiAgICApIHtcbiAgICAgIHJldHVybiBlcnJvcihgRWRnZSAke2VsZW1lbnR9IHBvaW50cyB0byBhIG5vbi1leGlzdGVudCBWZXJ0ZXguYCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IHdlIGNvbmZpcm0gdGhhdCB3ZSBoYXZlIGEgRGlyZWN0ZWQgQWN5Y2xpYyBHcmFwaCwgaS5lLiB0aGUgZ3JhcGggaGFzIG5vXG4gIC8vIGN5Y2xlcyBieSBjcmVhdGluZyBhIHRvcG9sb2dpY2FsIHNvcnQgc3RhcnRpbmcgYXQgVF8wXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RvcG9sb2dpY2FsX3NvcnRpbmcjRGVwdGgtZmlyc3Rfc2VhcmNoXG4gIGNvbnN0IHRzUmV0ID0gdG9wb2xvZ2ljYWxTb3J0KGcpO1xuICBpZiAodHNSZXQuaGFzQ3ljbGVzKSB7XG4gICAgcmV0dXJuIGVycm9yKGBDaGFydCBoYXMgY3ljbGU6ICR7Wy4uLnRzUmV0LmN5Y2xlXS5qb2luKFwiLCBcIil9YCk7XG4gIH1cblxuICByZXR1cm4gb2sodHNSZXQub3JkZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2hhcnRWYWxpZGF0ZShcbiAgYzogQ2hhcnQsXG4gIHRhc2tEdXJhdGlvbjogVGFza0R1cmF0aW9uIHwgbnVsbCA9IG51bGwsXG4pOiBWYWxpZGF0ZVJlc3VsdCB7XG4gIGlmICh0YXNrRHVyYXRpb24gPT09IG51bGwpIHtcbiAgICB0YXNrRHVyYXRpb24gPSAodGFza0luZGV4OiBudW1iZXIpID0+IGMuVmVydGljZXNbdGFza0luZGV4XS5kdXJhdGlvbjtcbiAgfVxuICBjb25zdCByZXQgPSB2YWxpZGF0ZURpcmVjdGVkR3JhcGgoYyk7XG4gIGlmICghcmV0Lm9rKSB7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBpZiAodGFza0R1cmF0aW9uKDApICE9PSAwKSB7XG4gICAgcmV0dXJuIGVycm9yKFxuICAgICAgYFN0YXJ0IE1pbGVzdG9uZSBtdXN0IGhhdmUgZHVyYXRpb24gb2YgMCwgaW5zdGVhZCBnb3QgJHt0YXNrRHVyYXRpb24oMCl9YCxcbiAgICApO1xuICB9XG4gIGlmICh0YXNrRHVyYXRpb24oYy5WZXJ0aWNlcy5sZW5ndGggLSAxKSAhPT0gMCkge1xuICAgIHJldHVybiBlcnJvcihcbiAgICAgIGBGaW5pc2ggTWlsZXN0b25lIG11c3QgaGF2ZSBkdXJhdGlvbiBvZiAwLCBpbnN0ZWFkIGdvdCAke3Rhc2tEdXJhdGlvbihcbiAgICAgICAgYy5WZXJ0aWNlcy5sZW5ndGggLSAxLFxuICAgICAgKX1gLFxuICAgICk7XG4gIH1cbiAgY29uc3QgYWxsSURzID0gbmV3IFNldCgpO1xuICBmb3IgKGxldCB0YXNrSW5kZXggPSAwOyB0YXNrSW5kZXggPCBjLlZlcnRpY2VzLmxlbmd0aDsgdGFza0luZGV4KyspIHtcbiAgICBjb25zdCB0YXNrID0gYy5WZXJ0aWNlc1t0YXNrSW5kZXhdO1xuICAgIGlmIChhbGxJRHMuaGFzKHRhc2suaWQpKSB7XG4gICAgICByZXR1cm4gZXJyb3IobmV3IEVycm9yKGBUd28gdGFza3MgY29udGFpbiB0aGUgc2FtZSBJRDogJHt0YXNrLmlkfWApKTtcbiAgICB9XG4gICAgYWxsSURzLmFkZCh0YXNrLmlkKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwgImltcG9ydCB7IFJlc3VsdCwgb2ssIGVycm9yIH0gZnJvbSAnLi4vcmVzdWx0LnRzJztcbmltcG9ydCB7IENoYXJ0LCBDaGFydFZhbGlkYXRlIH0gZnJvbSAnLi4vY2hhcnQvY2hhcnQudHMnO1xuaW1wb3J0IHsgRGlyZWN0ZWRFZGdlLCBlZGdlc0J5U3JjQW5kRHN0VG9NYXAgfSBmcm9tICcuLi9kYWcvZGFnLnRzJztcbmltcG9ydCB7IFJvdW5kZXIsIFRhc2tEdXJhdGlvbiB9IGZyb20gJy4uL3R5cGVzL3R5cGVzLnRzJztcblxuLyoqIFNwYW4gcmVwcmVzZW50cyB3aGVuIGEgdGFzayB3aWxsIGJlIGRvbmUsIGkuZS4gaXQgY29udGFpbnMgdGhlIHRpbWUgdGhlIHRhc2tcbiAqIGlzIGV4cGVjdGVkIHRvIGJlZ2luIGFuZCBlbmQuICovXG5leHBvcnQgY2xhc3MgU3BhbiB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGZpbmlzaDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHN0YXJ0OiBudW1iZXIgPSAwLCBmaW5pc2g6IG51bWJlciA9IDApIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5maW5pc2ggPSBmaW5pc2g7XG4gIH1cbn1cblxuLyoqIFRoZSBzdGFuZGFyZCBzbGFjayBjYWxjdWxhdGlvbiB2YWx1ZXMuICovXG5leHBvcnQgY2xhc3MgU2xhY2sge1xuICBlYXJseTogU3BhbiA9IG5ldyBTcGFuKCk7XG4gIGxhdGU6IFNwYW4gPSBuZXcgU3BhbigpO1xuICBzbGFjazogbnVtYmVyID0gMDtcbn1cblxuZXhwb3J0IHR5cGUgU2xhY2tSZXN1bHQgPSBSZXN1bHQ8U2xhY2tbXT47XG5cbmV4cG9ydCB0eXBlIFNsYWNrT3ZlcnJpZGUgPSAodGFza0luZGV4OiBudW1iZXIpID0+IG51bWJlciB8IHVuZGVmaW5lZDtcblxuLy8gQ2FsY3VsYXRlIHRoZSBzbGFjayBmb3IgZWFjaCBUYXNrIGluIHRoZSBDaGFydC5cbmV4cG9ydCBmdW5jdGlvbiBDb21wdXRlU2xhY2soXG4gIGM6IENoYXJ0LFxuICB0YXNrRHVyYXRpb246IFRhc2tEdXJhdGlvbiB8IG51bGwgPSBudWxsLFxuICByb3VuZDogUm91bmRlcixcbiAgZWFybHlTdGFydE92ZXJyaWRlOiBTbGFja092ZXJyaWRlIHwgbnVsbCA9IG51bGwsXG4gIGVhcmx5RmluaXNoT3ZlcnJpZGU6IFNsYWNrT3ZlcnJpZGUgfCBudWxsID0gbnVsbFxuKTogU2xhY2tSZXN1bHQge1xuICBpZiAodGFza0R1cmF0aW9uID09PSBudWxsKSB7XG4gICAgdGFza0R1cmF0aW9uID0gKHRhc2tJbmRleDogbnVtYmVyKSA9PiBjLlZlcnRpY2VzW3Rhc2tJbmRleF0uZHVyYXRpb247XG4gIH1cblxuICAvLyBDcmVhdGUgYSBTbGFjayBmb3IgZWFjaCBUYXNrLlxuICBjb25zdCBzbGFja3M6IFNsYWNrW10gPSBuZXcgQXJyYXkoYy5WZXJ0aWNlcy5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGMuVmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICBzbGFja3NbaV0gPSBuZXcgU2xhY2soKTtcbiAgfVxuXG4gIGNvbnN0IHIgPSBDaGFydFZhbGlkYXRlKGMsIHRhc2tEdXJhdGlvbik7XG4gIGlmICghci5vaykge1xuICAgIHJldHVybiBlcnJvcihyLmVycm9yKTtcbiAgfVxuXG4gIGNvbnN0IGVkZ2VzID0gZWRnZXNCeVNyY0FuZERzdFRvTWFwKGMuRWRnZXMpO1xuXG4gIGNvbnN0IHRvcG9sb2dpY2FsT3JkZXIgPSByLnZhbHVlO1xuXG4gIC8vIEZpcnN0IGdvIGZvcndhcmQgdGhyb3VnaCB0aGUgdG9wb2xvZ2ljYWwgc29ydCBhbmQgZmluZCB0aGUgZWFybHkgc3RhcnQgZm9yXG4gIC8vIGVhY2ggdGFzaywgd2hpY2ggaXMgdGhlIG1heCBvZiBhbGwgdGhlIHByZWRlY2Vzc29ycyBlYXJseSBmaW5pc2ggdmFsdWVzLlxuICAvLyBTaW5jZSB3ZSBrbm93IHRoZSBkdXJhdGlvbiB3ZSBjYW4gYWxzbyBjb21wdXRlIHRoZSBlYXJseSBmaW5pc2guXG4gIHRvcG9sb2dpY2FsT3JkZXIuc2xpY2UoMSkuZm9yRWFjaCgodmVydGV4SW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHNsYWNrID0gc2xhY2tzW3ZlcnRleEluZGV4XTtcbiAgICBzbGFjay5lYXJseS5zdGFydCA9IE1hdGgubWF4KFxuICAgICAgLi4uZWRnZXMuYnlEc3QuZ2V0KHZlcnRleEluZGV4KSEubWFwKChlOiBEaXJlY3RlZEVkZ2UpOiBudW1iZXIgPT4ge1xuICAgICAgICBjb25zdCBwcmVkZWNlc3NvclNsYWNrID0gc2xhY2tzW2UuaV07XG4gICAgICAgIHJldHVybiBwcmVkZWNlc3NvclNsYWNrLmVhcmx5LmZpbmlzaDtcbiAgICAgIH0pXG4gICAgKTtcbiAgICBjb25zdCBlYXJseVN0YXJ0T3ZlcnJpZGVWYWx1ZSA9IGVhcmx5U3RhcnRPdmVycmlkZT8uKHZlcnRleEluZGV4KTtcbiAgICBpZiAoZWFybHlTdGFydE92ZXJyaWRlVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2xhY2suZWFybHkuc3RhcnQgPSBlYXJseVN0YXJ0T3ZlcnJpZGVWYWx1ZTtcbiAgICB9XG4gICAgY29uc3QgZWFybHlGaW5pc2hPdmVycmlkZVZhbHVlID0gZWFybHlGaW5pc2hPdmVycmlkZT8uKHZlcnRleEluZGV4KTtcbiAgICBpZiAoZWFybHlGaW5pc2hPdmVycmlkZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNsYWNrLmVhcmx5LmZpbmlzaCA9IGVhcmx5RmluaXNoT3ZlcnJpZGVWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xhY2suZWFybHkuZmluaXNoID0gcm91bmQoc2xhY2suZWFybHkuc3RhcnQgKyB0YXNrRHVyYXRpb24odmVydGV4SW5kZXgpKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIE5vdyBiYWNrd2FyZHMgdGhyb3VnaCB0aGUgdG9wb2xvZ2ljYWwgc29ydCBhbmQgZmluZCB0aGUgbGF0ZSBmaW5pc2ggb2YgZWFjaFxuICAvLyB0YXNrLCB3aGljaCBpcyB0aGUgbWluIG9mIGFsbCB0aGUgc3VjY2Vzc29yIHRhc2tzIGxhdGUgc3RhcnRzLiBBZ2FpbiBzaW5jZVxuICAvLyB3ZSBrbm93IHRoZSBkdXJhdGlvbiB3ZSBjYW4gYWxzbyBjb21wdXRlIHRoZSBsYXRlIHN0YXJ0LiBGaW5hbGx5LCBzaW5jZSB3ZVxuICAvLyBub3cgaGF2ZSBhbGwgdGhlIGVhcmx5L2xhdGUgYW5kIHN0YXJ0L2ZpbmlzaCB2YWx1ZXMgd2UgY2FuIG5vdyBjYWxjdWF0ZSB0aGVcbiAgLy8gc2xhY2suXG4gIHRvcG9sb2dpY2FsT3JkZXIucmV2ZXJzZSgpLmZvckVhY2goKHZlcnRleEluZGV4OiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBzbGFjayA9IHNsYWNrc1t2ZXJ0ZXhJbmRleF07XG4gICAgY29uc3Qgc3VjY2Vzc29ycyA9IGVkZ2VzLmJ5U3JjLmdldCh2ZXJ0ZXhJbmRleCk7XG4gICAgaWYgKCFzdWNjZXNzb3JzIHx8IGVhcmx5U3RhcnRPdmVycmlkZT8uKHZlcnRleEluZGV4KSkge1xuICAgICAgc2xhY2subGF0ZS5maW5pc2ggPSBzbGFjay5lYXJseS5maW5pc2g7XG4gICAgICBzbGFjay5sYXRlLnN0YXJ0ID0gc2xhY2suZWFybHkuc3RhcnQ7XG4gICAgICBzbGFjay5zbGFjayA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxhdGVTdGFydHMgPSBlZGdlcy5ieVNyY1xuICAgICAgICAuZ2V0KHZlcnRleEluZGV4KSFcbiAgICAgICAgLm1hcCgoZTogRGlyZWN0ZWRFZGdlKTogbnVtYmVyID0+IHtcbiAgICAgICAgICBjb25zdCBzdWNjZXNzb3JTbGFjayA9IHNsYWNrc1tlLmpdO1xuICAgICAgICAgIHJldHVybiBzdWNjZXNzb3JTbGFjay5sYXRlLnN0YXJ0O1xuICAgICAgICB9KTtcbiAgICAgIGlmIChsYXRlU3RhcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzbGFjay5sYXRlLmZpbmlzaCA9IHNsYWNrLmVhcmx5LmZpbmlzaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsYWNrLmxhdGUuZmluaXNoID0gTWF0aC5taW4oLi4ubGF0ZVN0YXJ0cyk7XG4gICAgICB9XG4gICAgICBzbGFjay5sYXRlLnN0YXJ0ID0gcm91bmQoc2xhY2subGF0ZS5maW5pc2ggLSB0YXNrRHVyYXRpb24odmVydGV4SW5kZXgpKTtcbiAgICAgIHNsYWNrLnNsYWNrID0gcm91bmQoc2xhY2subGF0ZS5maW5pc2ggLSBzbGFjay5lYXJseS5maW5pc2gpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG9rKHNsYWNrcyk7XG59XG5cbmV4cG9ydCBjb25zdCBDcml0aWNhbFBhdGggPSAoc2xhY2tzOiBTbGFja1tdLCByb3VuZDogUm91bmRlcik6IG51bWJlcltdID0+IHtcbiAgY29uc3QgcmV0OiBudW1iZXJbXSA9IFtdO1xuICBzbGFja3MuZm9yRWFjaCgoc2xhY2s6IFNsYWNrLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKFxuICAgICAgcm91bmQoc2xhY2subGF0ZS5maW5pc2ggLSBzbGFjay5lYXJseS5maW5pc2gpIDwgTnVtYmVyLkVQU0lMT04gJiZcbiAgICAgIHJvdW5kKHNsYWNrLmVhcmx5LmZpbmlzaCAtIHNsYWNrLmVhcmx5LnN0YXJ0KSA+IE51bWJlci5FUFNJTE9OXG4gICAgKSB7XG4gICAgICByZXQucHVzaChpbmRleCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn07XG4iLCAiaW1wb3J0IHsgU3BhbiB9IGZyb20gXCIuLi9zbGFjay9zbGFja1wiO1xuXG4vLyBUaGUgY29tcGxldGlvbiBzdGF0dXMgb2YgYSBUYXNrLiBUaGUgdmFsdWUgb2YgYHN0YXJ0YCBhbmQgdmFsdWVzIGluIGBzcGFuYFxuLy8gYW5kIGR1cmF0aW9uIG9mZnNldHMsIGp1c3QgbGlrZSB3aGF0IGFyZSB1c2VkIGluIHRoZSBTcGFucyB1c2VkIGluIHJlbmRlcmluZy5cbmV4cG9ydCB0eXBlIFRhc2tDb21wbGV0aW9uID1cbiAgfCB7IHN0YWdlOiBcInVuc3RhcnRlZFwiIH1cbiAgfCB7XG4gICAgICBzdGFnZTogXCJzdGFydGVkXCI7XG4gICAgICBzdGFydDogbnVtYmVyO1xuICAgICAgcGVyY2VudENvbXBsZXRlOiBudW1iZXI7XG4gICAgfVxuICB8IHtcbiAgICAgIHN0YWdlOiBcImZpbmlzaGVkXCI7XG4gICAgICBzcGFuOiBTcGFuO1xuICAgIH07XG5cbmV4cG9ydCB0eXBlIFRhc2tDb21wbGV0aW9uU2VyaWFsaXplZCA9IHtcbiAgc3RhZ2U6IHN0cmluZztcbiAgc3RhcnQ6IG51bWJlcjtcbiAgcGVyY2VudENvbXBsZXRlOiBudW1iZXI7XG4gIGZpbmlzaDogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IHRhc2tVbnN0YXJ0ZWQgPSB7IHN0YWdlOiBcInVuc3RhcnRlZFwiIH07XG5cbmV4cG9ydCB0eXBlIFRhc2tDb21wbGV0aW9ucyA9IHsgW2tleTogc3RyaW5nXTogVGFza0NvbXBsZXRpb24gfTtcbmV4cG9ydCB0eXBlIFRhc2tDb21wbGV0aW9uc1NlcmlhbGl6ZWQgPSB7XG4gIFtrZXk6IHN0cmluZ106IFRhc2tDb21wbGV0aW9uU2VyaWFsaXplZDtcbn07XG5cbmV4cG9ydCBjb25zdCB0b0pTT04gPSAoXG4gIHRhc2tDb21wbGV0aW9uOiBUYXNrQ29tcGxldGlvbixcbik6IFRhc2tDb21wbGV0aW9uU2VyaWFsaXplZCA9PiB7XG4gIGNvbnN0IHJldDogVGFza0NvbXBsZXRpb25TZXJpYWxpemVkID0ge1xuICAgIHN0YWdlOiB0YXNrQ29tcGxldGlvbi5zdGFnZSBhcyBzdHJpbmcsXG4gICAgc3RhcnQ6IDAsXG4gICAgZmluaXNoOiAwLFxuICAgIHBlcmNlbnRDb21wbGV0ZTogMCxcbiAgfTtcblxuICBzd2l0Y2ggKHRhc2tDb21wbGV0aW9uLnN0YWdlKSB7XG4gICAgY2FzZSBcInVuc3RhcnRlZFwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0YXJ0ZWRcIjpcbiAgICAgIHJldC5zdGFydCA9IHRhc2tDb21wbGV0aW9uLnN0YXJ0O1xuICAgICAgcmV0LnBlcmNlbnRDb21wbGV0ZSA9IHRhc2tDb21wbGV0aW9uLnBlcmNlbnRDb21wbGV0ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJmaW5pc2hlZFwiOlxuICAgICAgcmV0LnN0YXJ0ID0gdGFza0NvbXBsZXRpb24uc3Bhbi5zdGFydDtcbiAgICAgIHJldC5maW5pc2ggPSB0YXNrQ29tcGxldGlvbi5zcGFuLmZpbmlzaDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0YXNrQ29tcGxldGlvbiBzYXRpc2ZpZXMgbmV2ZXI7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuZXhwb3J0IGNvbnN0IGZyb21KU09OID0gKFxuICB0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWQ6IFRhc2tDb21wbGV0aW9uU2VyaWFsaXplZCxcbik6IFRhc2tDb21wbGV0aW9uID0+IHtcbiAgY29uc3QgdW5zdGFydGVkOiBUYXNrQ29tcGxldGlvbiA9IHsgc3RhZ2U6IFwidW5zdGFydGVkXCIgfTtcbiAgc3dpdGNoICh0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWQuc3RhZ2UpIHtcbiAgICBjYXNlIFwidW5zdGFydGVkXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFnZTogXCJ1bnN0YXJ0ZWRcIixcbiAgICAgIH07XG4gICAgY2FzZSBcInN0YXJ0ZWRcIjpcbiAgICAgIGlmICh0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWQuc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5zdGFydGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhZ2U6IFwic3RhcnRlZFwiLFxuICAgICAgICBzdGFydDogdGFza0NvbXBsZXRpb25TZXJpYWxpemVkLnN0YXJ0LFxuICAgICAgICBwZXJjZW50Q29tcGxldGU6IHRhc2tDb21wbGV0aW9uU2VyaWFsaXplZC5wZXJjZW50Q29tcGxldGUsXG4gICAgICB9O1xuICAgIGNhc2UgXCJmaW5pc2hlZFwiOlxuICAgICAgaWYgKFxuICAgICAgICB0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWQuc3RhcnQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICB0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWQuZmluaXNoID09PSB1bmRlZmluZWRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdW5zdGFydGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhZ2U6IFwiZmluaXNoZWRcIixcbiAgICAgICAgc3BhbjogbmV3IFNwYW4oXG4gICAgICAgICAgdGFza0NvbXBsZXRpb25TZXJpYWxpemVkLnN0YXJ0LFxuICAgICAgICAgIHRhc2tDb21wbGV0aW9uU2VyaWFsaXplZC5maW5pc2gsXG4gICAgICAgICksXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5zdGFydGVkO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdGFza0NvbXBsZXRpb25zVG9KU09OID0gKFxuICB0OiBUYXNrQ29tcGxldGlvbnMsXG4pOiBUYXNrQ29tcGxldGlvbnNTZXJpYWxpemVkID0+IHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyh0KS5tYXAoKFtrZXksIHRhc2tDb21wbGV0aW9uXSkgPT4gW1xuICAgICAga2V5LFxuICAgICAgdG9KU09OKHRhc2tDb21wbGV0aW9uKSxcbiAgICBdKSxcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0YXNrQ29tcGxldGlvbnNGcm9tSlNPTiA9IChcbiAgdDogVGFza0NvbXBsZXRpb25zU2VyaWFsaXplZCxcbik6IFRhc2tDb21wbGV0aW9ucyA9PiB7XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgT2JqZWN0LmVudHJpZXModCkubWFwKChba2V5LCB0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWRdKSA9PiBbXG4gICAgICBrZXksXG4gICAgICBmcm9tSlNPTih0YXNrQ29tcGxldGlvblNlcmlhbGl6ZWQpLFxuICAgIF0pLFxuICApO1xufTtcbiIsICIvLyBPcHMgZm9yIHVwZGF0aW5nIGEgUGxhbidzIHN0YXJ0IHN0YXR1cyBhbmQgdGhlIGNvbXBsZXRpb24gc3RhdHVzIG9mIFRhc2tzLlxuXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi4vY2hhcnQvY2hhcnQnO1xuaW1wb3J0IHsgUGxhbiB9IGZyb20gJy4uL3BsYW4vcGxhbic7XG5pbXBvcnQgeyBQbGFuU3RhdHVzLCBmcm9tSlNPTiwgdG9KU09OIH0gZnJvbSAnLi4vcGxhbl9zdGF0dXMvcGxhbl9zdGF0dXMnO1xuaW1wb3J0IHsgUmVzdWx0LCBlcnJvciwgb2sgfSBmcm9tICcuLi9yZXN1bHQnO1xuaW1wb3J0IHtcbiAgVGFza0NvbXBsZXRpb24sXG4gIFRhc2tDb21wbGV0aW9ucyxcbiAgdGFza0NvbXBsZXRpb25zRnJvbUpTT04sXG4gIHRhc2tDb21wbGV0aW9uc1RvSlNPTixcbn0gZnJvbSAnLi4vdGFza19jb21wbGV0aW9uL3Rhc2tfY29tcGxldGlvbic7XG5pbXBvcnQgeyBPcCwgU3ViT3AsIFN1Yk9wUmVzdWx0IH0gZnJvbSAnLi9vcHMnO1xuaW1wb3J0IHtcbiAgdG9KU09OIGFzIHRhc2tUb0pTT04sXG4gIGZyb21KU09OIGFzIHRhc2tGcm9tSlNPTixcbn0gZnJvbSAnLi4vdGFza19jb21wbGV0aW9uL3Rhc2tfY29tcGxldGlvbic7XG5pbXBvcnQgeyBVbml0VHlwZXMgfSBmcm9tICcuLi91bml0cy91bml0JztcblxuZXhwb3J0IGNsYXNzIFNldFBsYW5TdGFydFN0YXRlU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIHZhbHVlOiBQbGFuU3RhdHVzO1xuICB0YXNrQ29tcGxldGlvbnM6IFRhc2tDb21wbGV0aW9ucyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHZhbHVlOiBQbGFuU3RhdHVzLFxuICAgIHRhc2tDb21wbGV0aW9uczogVGFza0NvbXBsZXRpb25zIHwgbnVsbCA9IG51bGxcbiAgKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudGFza0NvbXBsZXRpb25zID0gdGFza0NvbXBsZXRpb25zO1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgY29uc3Qgb2xkU3RhdHVzID0gZnJvbUpTT04odG9KU09OKHBsYW4uc3RhdHVzKSk7XG4gICAgcGxhbi5zdGF0dXMgPSB0aGlzLnZhbHVlO1xuXG4gICAgY29uc3QgdGFza0NvbXBsZXRpb25zU25hcHNob3QgPSB0YXNrQ29tcGxldGlvbnNGcm9tSlNPTihcbiAgICAgIHRhc2tDb21wbGV0aW9uc1RvSlNPTihwbGFuLnRhc2tDb21wbGV0aW9uKVxuICAgICk7XG5cbiAgICBpZiAodGhpcy50YXNrQ29tcGxldGlvbnMgIT09IG51bGwpIHtcbiAgICAgIHBsYW4udGFza0NvbXBsZXRpb24gPSB0aGlzLnRhc2tDb21wbGV0aW9ucztcbiAgICB9XG5cbiAgICBpZiAocGxhbi5zdGF0dXMuc3RhZ2UgPT09ICd1bnN0YXJ0ZWQnKSB7XG4gICAgICAvLyBOb3cgbG9vcCBvdmVyIGV2ZXJ5IHRhc2sgYW5kIHNldCB0aGUgVGFza0NvbXBsZXRpb24gdG8gdW5zdGFydGVkLlxuICAgICAgcGxhbi5jaGFydC5WZXJ0aWNlcy5mb3JFYWNoKCh0YXNrOiBUYXNrKSA9PiB7XG4gICAgICAgIHBsYW4udGFza0NvbXBsZXRpb25bdGFzay5pZF0gPSB7IHN0YWdlOiAndW5zdGFydGVkJyB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9rKHtcbiAgICAgIHBsYW46IHBsYW4sXG4gICAgICBpbnZlcnNlOiBuZXcgU2V0UGxhblN0YXJ0U3RhdGVTdWJPcChvbGRTdGF0dXMsIHRhc2tDb21wbGV0aW9uc1NuYXBzaG90KSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlUGxhblN0YXJ0RGF0ZVN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBzdGFydDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHN0YXJ0OiBudW1iZXIpIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBpZiAocGxhbi5zdGF0dXMuc3RhZ2UgIT09ICdzdGFydGVkJykge1xuICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcihcIkNhbid0IHNldCBzdGFydCBkYXRlIG9uIGFuIHVuc3RhcnRlZCBwbGFuLlwiKSk7XG4gICAgfVxuICAgIGNvbnN0IG9sZFN0YXJ0ID0gcGxhbi5zdGF0dXMuc3RhcnQ7XG4gICAgcGxhbi5zdGF0dXMuc3RhcnQgPSB0aGlzLnN0YXJ0O1xuXG4gICAgcmV0dXJuIG9rKHtcbiAgICAgIHBsYW46IHBsYW4sXG4gICAgICBpbnZlcnNlOiBuZXcgVXBkYXRlUGxhblN0YXJ0RGF0ZVN1Yk9wKG9sZFN0YXJ0KSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0UGxhblVuaXRzU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIHVuaXQ6IFVuaXRUeXBlcztcblxuICBjb25zdHJ1Y3Rvcih1bml0OiBVbml0VHlwZXMpIHtcbiAgICB0aGlzLnVuaXQgPSB1bml0O1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgY29uc3Qgb2xkVW5pdHMgPSBwbGFuLmR1cmF0aW9uVW5pdHMua2luZCgpO1xuICAgIHBsYW4uc2V0RHVyYXRpb25Vbml0cyh0aGlzLnVuaXQpO1xuXG4gICAgcmV0dXJuIG9rKHtcbiAgICAgIHBsYW46IHBsYW4sXG4gICAgICBpbnZlcnNlOiBuZXcgU2V0UGxhblVuaXRzU3ViT3Aob2xkVW5pdHMpLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRUYXNrQ29tcGxldGlvblN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICB0YXNrSW5kZXg6IG51bWJlcjtcbiAgdmFsdWU6IFRhc2tDb21wbGV0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHRhc2tJbmRleDogbnVtYmVyLCB2YWx1ZTogVGFza0NvbXBsZXRpb24pIHtcbiAgICB0aGlzLnRhc2tJbmRleCA9IHRhc2tJbmRleDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBpZiAodGhpcy52YWx1ZS5zdGFnZSAhPT0gJ3Vuc3RhcnRlZCcgJiYgcGxhbi5zdGF0dXMuc3RhZ2UgPT09ICd1bnN0YXJ0ZWQnKSB7XG4gICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgIG5ldyBFcnJvcihcIkNhbid0IHN0YXJ0IGEgdGFzayBpZiB0aGUgcGxhbiBoYXNuJ3QgYmVlbiBzdGFydGVkLlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmFsdWUuc3RhZ2UgPT09ICdzdGFydGVkJykge1xuICAgICAgaWYgKHRoaXMudmFsdWUuc3RhcnQgPCAwKSB7XG4gICAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIlRoZSBzdGFydCBvZiBhIHRhc2sgY2FuJ3QgY29tZSBiZWZvZSB0aGUgc3RhcnQgb2YgdGhlIHBsYW4uXCJcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy52YWx1ZS5wZXJjZW50Q29tcGxldGUgPCAxIHx8IHRoaXMudmFsdWUucGVyY2VudENvbXBsZXRlID4gOTkpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcignUGVyY2VudCBDb21wbGV0ZSBtdXN0IGJlIGluIFsxLCA5OV0uJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZS5zdGFnZSA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgaWYgKHRoaXMudmFsdWUuc3Bhbi5maW5pc2ggPCB0aGlzLnZhbHVlLnNwYW4uc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcihcIkZpbmlzaCBjYW4ndCBjb21lIGJlZm9yZSBTdGFydC5cIikpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudmFsdWUuc3Bhbi5zdGFydCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKFxuICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiVGhlIHN0YXJ0IG9mIGEgdGFzayBjYW4ndCBjb21lIGJlZm9lIHRoZSBzdGFydCBvZiB0aGUgcGxhbi5cIlxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXQgPSBwbGFuLmdldFRhc2tDb21wbGV0aW9uKHRoaXMudGFza0luZGV4KTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjb25zdCBvbGRUYXNrU3RhdHVzID0gdGFza0Zyb21KU09OKHRhc2tUb0pTT04ocmV0LnZhbHVlKSk7XG4gICAgY29uc3Qgc2V0UmV0ID0gcGxhbi5zZXRUYXNrQ29tcGxldGlvbih0aGlzLnRhc2tJbmRleCwgdGhpcy52YWx1ZSk7XG4gICAgaWYgKCFzZXRSZXQub2spIHtcbiAgICAgIHJldHVybiBzZXRSZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9rKHtcbiAgICAgIHBsYW46IHBsYW4sXG4gICAgICBpbnZlcnNlOiBuZXcgU2V0VGFza0NvbXBsZXRpb25TdWJPcCh0aGlzLnRhc2tJbmRleCwgb2xkVGFza1N0YXR1cyksXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNldFRhc2tDb21wbGV0aW9uT3AoXG4gIHRhc2tJbmRleDogbnVtYmVyLFxuICB2YWx1ZTogVGFza0NvbXBsZXRpb25cbik6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IFNldFRhc2tDb21wbGV0aW9uU3ViT3AodGFza0luZGV4LCB2YWx1ZSldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNldFBsYW5Vbml0c09wKHVuaXQ6IFVuaXRUeXBlcyk6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IFNldFBsYW5Vbml0c1N1Yk9wKHVuaXQpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXRQbGFuU3RhcnRTdGF0ZU9wKHZhbHVlOiBQbGFuU3RhdHVzKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgU2V0UGxhblN0YXJ0U3RhdGVTdWJPcCh2YWx1ZSldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFVwZGF0ZVBsYW5TdGFydERhdGVPcChzdGFydDogbnVtYmVyKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgVXBkYXRlUGxhblN0YXJ0RGF0ZVN1Yk9wKHN0YXJ0KV0pO1xufVxuIiwgImltcG9ydCB7XG4gIGRhdGVEaXNwbGF5LFxuICBwYXJzZURhdGVTdHJpbmcsXG59IGZyb20gJy4uL2RhdGUtY29udHJvbC11dGlscy9kYXRlLWNvbnRyb2wtdXRpbHMnO1xuaW1wb3J0IHsgUmVzdWx0LCBlcnJvciwgb2sgfSBmcm9tICcuLi9yZXN1bHQnO1xuXG5leHBvcnQgY2xhc3MgV2Vla2RheXMge1xuICBzdGFydDogRGF0ZTtcblxuICAvKipcbiAgICogTWFwcyBmcm9tIGEgbnVtYmVyIG9mIHdlZWtkYXlzIChmcm9tIHRoaXMuc3RhcnQpIHRvIGEgbnVtYmVyIG9mIGRheXMgKHdoaWNoXG4gICAqIGlnbm9yZXMgaW5jbHVkZXMgd2Vla2VuZHMuXG4gICAqL1xuICBjYWNoZTogTWFwPG51bWJlciwgbnVtYmVyPjtcbiAgbGFzdENhY2hlRW50cnk6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihzdGFydDogRGF0ZSkge1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuY2FjaGUuc2V0KDAsIDApO1xuICAgIHRoaXMubGFzdENhY2hlRW50cnkgPSAwO1xuICB9XG5cbiAgZGF0ZVRvV2Vla2RheShzOiBzdHJpbmcpOiBSZXN1bHQ8bnVtYmVyPiB7XG4gICAgY29uc3QgcmV0ID0gcGFyc2VEYXRlU3RyaW5nKHMpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBjb25zdCBkYXRlID0gcmV0LnZhbHVlO1xuICAgIGlmIChkYXRlIDw9IHRoaXMuc3RhcnQpIHtcbiAgICAgIHJldHVybiBlcnJvcihuZXcgRXJyb3IoYCR7ZGF0ZX0gY29tZXMgYmVmb3JlICR7dGhpcy5zdGFydH1gKSk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUodGhpcy5zdGFydC5nZXRUaW1lKCkpO1xuICAgIGxldCBmb3JtYXR0ZWREYXRlID0gZGF0ZURpc3BsYXkoc3RhcnQpO1xuICAgIGxldCB3ZWVrRGF5ID0gMDtcbiAgICB3aGlsZSAoZm9ybWF0dGVkRGF0ZSA8IHMpIHtcbiAgICAgIGNvbnN0IG9sZERhdGUgPSBzdGFydC5nZXREYXRlKCk7XG4gICAgICBzdGFydC5zZXREYXRlKG9sZERhdGUgKyAxKTtcblxuICAgICAgY29uc3QgZGF5T2ZXZWVrID0gc3RhcnQuZ2V0RGF5KCk7XG4gICAgICBpZiAoZGF5T2ZXZWVrID09PSAwIHx8IGRheU9mV2VlayA9PT0gNikge1xuICAgICAgICAvLyBTdW4gb3IgU2F0LlxuICAgICAgICAvLyBUT0RPIC0gSGVyZSBpcyB3aGVyZSBob2xpZGF5IGNoZWNrcyB3b3VsZCBnby5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHdlZWtEYXkgKz0gMTtcbiAgICAgIGZvcm1hdHRlZERhdGUgPSBkYXRlRGlzcGxheShzdGFydCk7XG4gICAgfVxuICAgIHJldHVybiBvayh3ZWVrRGF5KTtcbiAgfVxuXG4gIHdlZWtkYXlzVG9EYXlzKG51bVdlZWtkYXlzOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChudW1XZWVrZGF5cyA8IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBudW1XZWVrZGF5cyA9IE1hdGgudHJ1bmMobnVtV2Vla2RheXMpO1xuICAgIGNvbnN0IGNhY2hlVmFsdWUgPSB0aGlzLmNhY2hlLmdldChudW1XZWVrZGF5cyk7XG4gICAgaWYgKGNhY2hlVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNhY2hlVmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSh0aGlzLnN0YXJ0LmdldFRpbWUoKSk7XG4gICAgbGV0IHdlZWtkYXkgPSB0aGlzLmxhc3RDYWNoZUVudHJ5O1xuICAgIGxldCBkYXkgPSB0aGlzLmNhY2hlLmdldCh3ZWVrZGF5KSE7XG4gICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgKyBkYXkpO1xuXG4gICAgd2hpbGUgKHdlZWtkYXkgIT09IG51bVdlZWtkYXlzKSB7XG4gICAgICBjb25zdCBvbGREYXRlID0gc3RhcnQuZ2V0RGF0ZSgpO1xuICAgICAgc3RhcnQuc2V0RGF0ZShvbGREYXRlICsgMSk7XG4gICAgICBkYXkgKz0gMTtcblxuICAgICAgY29uc3QgZGF5T2ZXZWVrID0gc3RhcnQuZ2V0RGF5KCk7XG4gICAgICBpZiAoZGF5T2ZXZWVrID09PSAwIHx8IGRheU9mV2VlayA9PT0gNikge1xuICAgICAgICAvLyBTdW4gb3IgU2F0LlxuICAgICAgICAvLyBUT0RPIC0gSGVyZSBpcyB3aGVyZSBob2xpZGF5IGNoZWNrcyB3b3VsZCBnby5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB3ZWVrZGF5ICs9IDE7XG4gICAgICB0aGlzLmNhY2hlLnNldCh3ZWVrZGF5LCBkYXkpO1xuICAgIH1cbiAgICB0aGlzLmxhc3RDYWNoZUVudHJ5ID0gd2Vla2RheTtcbiAgICByZXR1cm4gZGF5O1xuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgZGF0ZURpc3BsYXksXG4gIHBhcnNlRGF0ZVN0cmluZyxcbn0gZnJvbSAnLi4vZGF0ZS1jb250cm9sLXV0aWxzL2RhdGUtY29udHJvbC11dGlscyc7XG5pbXBvcnQgeyBNZXRyaWNEZWZpbml0aW9uIH0gZnJvbSAnLi4vbWV0cmljcy9tZXRyaWNzJztcbmltcG9ydCB7IFJlc3VsdCwgZXJyb3IsIG9rIH0gZnJvbSAnLi4vcmVzdWx0JztcbmltcG9ydCB7IFdlZWtkYXlzIH0gZnJvbSAnLi93ZWVrZGF5cyc7XG5cbi8vIFVuaXQgZGVzY3JpYmVzIGhvdyB0aGUgZHVyYXRpb24gdmFsdWVzIGFyZSB0byBiZSBpbnRlcnByZXRlZC5cbmFic3RyYWN0IGNsYXNzIFVuaXQge1xuICAvLyBDb252ZXJ0IGEgZHVyYXRpb24gaW50byBhIGRpc3BsYXlhYmxlIHN0cmluZy5cbiAgYWJzdHJhY3QgZGlzcGxheVRpbWUodDogbnVtYmVyLCBsb2NhbGU/OiBJbnRsLkxvY2FsZXNBcmd1bWVudCk6IHN0cmluZztcblxuICAvLyBQYXJzZSBhIGR1cmF0aW9uLCBlaXRoZXIgYXMgYSByYXcgbnVtYmVyLCBvciBpbiBhIHNob3J0aGFuZCBkdXJhdGlvbiwgc3VjaFxuICAvLyBhcyAxZCwgMmQsIDV5LlxuICBhYnN0cmFjdCBwYXJzZShzOiBzdHJpbmcpOiBSZXN1bHQ8bnVtYmVyPjtcblxuICAvLyBUT0RPIC0gTmVlZHMgYSBtZXRob2QgdG8gZ28gZnJvbSBEYXRlKCkgdG8gZHVyYXRpb24uXG59XG5cbi8vIFRoZSBmb3JtIGEgVW5pdCB0YWtlcyB3aGVuIHNlcmlhbGl6ZWQgdG8gSlNPTi5cbi8vXG4vLyBOb3RlIHdlIGRvbid0IHNlcmlhbGl6ZSB0aGUgTWV0cmljRGVmaW5pdGlvbiBzaW5jZSB0aGF0IGNvbWVzIGZyb20gdGhlXG4vLyBcIkR1cmF0aW9uXCIgc3RhdGljIG1ldHJpYy5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdFNlcmlhbGl6ZWQge1xuICB1bml0VHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVW5pdEJhc2UgaW1wbGVtZW50cyBVbml0IHtcbiAgcHJvdGVjdGVkIHN0YXJ0OiBEYXRlO1xuICBwcm90ZWN0ZWQgbWV0cmljRGVmbjogTWV0cmljRGVmaW5pdGlvbjtcbiAgcHJvdGVjdGVkIHVuaXRUeXBlOiBVbml0VHlwZXM7XG5cbiAgY29uc3RydWN0b3Ioc3RhcnQ6IERhdGUsIG1ldHJpY0RlZm46IE1ldHJpY0RlZmluaXRpb24sIHVuaXRUeXBlOiBVbml0VHlwZXMpIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5tZXRyaWNEZWZuID0gbWV0cmljRGVmbjtcbiAgICB0aGlzLnVuaXRUeXBlID0gdW5pdFR5cGU7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGRpc3BsYXlUaW1lKF90OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXMuJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGFzRGF0ZShfdDogbnVtYmVyKTogRGF0ZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3Nlcy4nKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgcGFyc2UoX3M6IHN0cmluZyk6IFJlc3VsdDxudW1iZXI+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc2VzLicpO1xuICB9XG5cbiAga2luZCgpOiBVbml0VHlwZXMge1xuICAgIHJldHVybiB0aGlzLnVuaXRUeXBlO1xuICB9XG5cbiAgdG9KU09OKCk6IFVuaXRTZXJpYWxpemVkIHtcbiAgICByZXR1cm4geyB1bml0VHlwZTogdGhpcy51bml0VHlwZSB9O1xuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKFxuICAgIHM6IFVuaXRTZXJpYWxpemVkLFxuICAgIHN0YXJ0OiBEYXRlLFxuICAgIG1ldHJpY0RlZm46IE1ldHJpY0RlZmluaXRpb25cbiAgKTogVW5pdEJhc2Uge1xuICAgIHJldHVybiBVbml0QnVpbGRlcnNbdG9Vbml0KHMudW5pdFR5cGUpXShzdGFydCwgbWV0cmljRGVmbik7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFVOSVRfVFlQRVMgPSBbJ1VuaXRsZXNzJywgJ0RheXMnLCAnV2Vla2RheXMnXSBhcyBjb25zdDtcblxuLy8gQWxsIHR5cGVzIG9mIGR1cmF0aW9uIHVuaXRzIGF2YWlsYWJsZS5cbmV4cG9ydCB0eXBlIFVuaXRUeXBlcyA9ICh0eXBlb2YgVU5JVF9UWVBFUylbbnVtYmVyXTtcblxuLy8gRGVzY3JpYmVzIGVhY2ggdHlwZSBvZiBVbml0IGF2YWlsYWJsZS5cbmV4cG9ydCBjb25zdCBVbml0RGVzY3JpcHRpb25zOiBSZWNvcmQ8VW5pdFR5cGVzLCBzdHJpbmc+ID0ge1xuICBVbml0bGVzczogJ1VuaXRsZXNzIGR1cmF0aW9ucy4nLFxuICBEYXlzOiAnRGF5cywgd2l0aCA3IGRheXMgYSB3ZWVrLicsXG4gIFdlZWtkYXlzOiAnRGF5cywgd2l0aCA1IGRheXMgYSB3ZWVrLicsXG59O1xuXG4vLyBCdWlsZGVycyBmb3IgZWFjaCB0eXBlIG9mIFVuaXQuXG5leHBvcnQgY29uc3QgVW5pdEJ1aWxkZXJzOiBSZWNvcmQ8XG4gIFVuaXRUeXBlcyxcbiAgKHN0YXJ0OiBEYXRlLCBtZXRyaWNEZWZuOiBNZXRyaWNEZWZpbml0aW9uKSA9PiBVbml0QmFzZVxuPiA9IHtcbiAgVW5pdGxlc3M6IChzdGFydDogRGF0ZSwgbWV0cmljRGVmbjogTWV0cmljRGVmaW5pdGlvbikgPT5cbiAgICBuZXcgVW5pdGxlc3Moc3RhcnQsIG1ldHJpY0RlZm4pLFxuICBEYXlzOiAoc3RhcnQ6IERhdGUsIG1ldHJpY0RlZm46IE1ldHJpY0RlZmluaXRpb24pID0+XG4gICAgbmV3IERheXMoc3RhcnQsIG1ldHJpY0RlZm4pLFxuICBXZWVrZGF5czogKHN0YXJ0OiBEYXRlLCBtZXRyaWNEZWZuOiBNZXRyaWNEZWZpbml0aW9uKSA9PlxuICAgIG5ldyBXZWVrRGF5cyhzdGFydCwgbWV0cmljRGVmbiksXG59O1xuXG4vLyBQYXJzZSBzdHJpbmcgaW50byBhIHZhbGlkIFVuaXRUeXBlcy5cbmV4cG9ydCBjb25zdCB0b1VuaXQgPSAoczogc3RyaW5nKTogVW5pdFR5cGVzID0+IHtcbiAgaWYgKFVOSVRfVFlQRVMuc29tZSgodDogVW5pdFR5cGVzKSA9PiB0ID09PSBzKSkge1xuICAgIHJldHVybiBzIGFzIFVuaXRUeXBlcztcbiAgfVxuICByZXR1cm4gJ1VuaXRsZXNzJztcbn07XG5cbi8vIFVuaXRsZXNzLlxuZXhwb3J0IGNsYXNzIFVuaXRsZXNzIGV4dGVuZHMgVW5pdEJhc2UgaW1wbGVtZW50cyBVbml0IHtcbiAgY29uc3RydWN0b3Ioc3RhcnQ6IERhdGUsIG1ldHJpY0RlZm46IE1ldHJpY0RlZmluaXRpb24pIHtcbiAgICBzdXBlcihzdGFydCwgbWV0cmljRGVmbiwgJ1VuaXRsZXNzJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGRpc3BsYXlUaW1lKHQ6IG51bWJlciwgX2xvY2FsZT86IEludGwuTG9jYWxlc0FyZ3VtZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNEZWZuLmNsYW1wQW5kUm91bmQodCkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgYXNEYXRlKF90OiBudW1iZXIpOiBEYXRlIHtcbiAgICAvLyBTaG91bGQgbmV2ZXIgYmUgY2FsbGVkLlxuICAgIHJldHVybiB0aGlzLnN0YXJ0O1xuICB9XG5cbiAgcGFyc2Uoczogc3RyaW5nKTogUmVzdWx0PG51bWJlcj4ge1xuICAgIGNvbnN0IHBhcnNlZCA9ICtzO1xuICAgIGlmIChOdW1iZXIuaXNOYU4ocGFyc2VkKSkge1xuICAgICAgcmV0dXJuIGVycm9yKG5ldyBFcnJvcihgSW52YWxpZCBudW1iZXIgdmFsdWU6ICR7c31gKSk7XG4gICAgfVxuICAgIHJldHVybiBvayh0aGlzLm1ldHJpY0RlZm4uY2xhbXBBbmRSb3VuZChwYXJzZWQpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF5cyBleHRlbmRzIFVuaXRCYXNlIGltcGxlbWVudHMgVW5pdCB7XG4gIGNvbnN0cnVjdG9yKHN0YXJ0OiBEYXRlLCBtZXRyaWNEZWZuOiBNZXRyaWNEZWZpbml0aW9uKSB7XG4gICAgc3VwZXIoc3RhcnQsIG1ldHJpY0RlZm4sICdEYXlzJyk7XG4gIH1cblxuICBkaXNwbGF5VGltZSh0OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRlRGlzcGxheSh0aGlzLmFzRGF0ZSh0KSk7XG4gIH1cblxuICBhc0RhdGUodDogbnVtYmVyKTogRGF0ZSB7XG4gICAgLy8gRHVwIHRoZSBzdGFydCBEYXRlIGZpcnN0LlxuICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSh0aGlzLnN0YXJ0LmdldFRpbWUoKSk7XG4gICAgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgdCk7XG4gICAgcmV0dXJuIGQ7XG4gIH1cblxuICBwYXJzZShzOiBzdHJpbmcpOiBSZXN1bHQ8bnVtYmVyPiB7XG4gICAgY29uc3QgcmV0ID0gcGFyc2VEYXRlU3RyaW5nKHMpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBjb25zdCBkZWx0YUluTWlsbGlzZWNvbmRzID0gcmV0LnZhbHVlLmdldFRpbWUoKSAtIHRoaXMuc3RhcnQuZ2V0VGltZSgpICsgMTtcbiAgICBpZiAoZGVsdGFJbk1pbGxpc2Vjb25kcyA8IDApIHtcbiAgICAgIHJldHVybiBlcnJvcihuZXcgRXJyb3IoJ0RhdGVzIGJlZm9yZSB0aGUgcGxhbiBzdGFydCBhcmUgbm90IGFsbG93ZWQuJykpO1xuICAgIH1cblxuICAgIHJldHVybiBvayhcbiAgICAgIHRoaXMubWV0cmljRGVmbi5jbGFtcEFuZFJvdW5kKGRlbHRhSW5NaWxsaXNlY29uZHMgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgV2Vla0RheXMgZXh0ZW5kcyBVbml0QmFzZSBpbXBsZW1lbnRzIFVuaXQge1xuICB3ZWVrZGF5czogV2Vla2RheXM7XG5cbiAgY29uc3RydWN0b3Ioc3RhcnQ6IERhdGUsIG1ldHJpY0RlZm46IE1ldHJpY0RlZmluaXRpb24pIHtcbiAgICBzdXBlcihzdGFydCwgbWV0cmljRGVmbiwgJ1dlZWtkYXlzJyk7XG4gICAgdGhpcy53ZWVrZGF5cyA9IG5ldyBXZWVrZGF5cyhzdGFydCk7XG4gIH1cblxuICAvLyBMb2NhbGUgb25seSB1c2VkIGZvciB0ZXN0aW5nLlxuICBkaXNwbGF5VGltZSh0OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRlRGlzcGxheSh0aGlzLmFzRGF0ZSh0KSk7XG4gIH1cblxuICBhc0RhdGUodDogbnVtYmVyKTogRGF0ZSB7XG4gICAgLy8gRHVwIHRoZSBzdGFydCBEYXRlIGZpcnN0LlxuICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSh0aGlzLnN0YXJ0LmdldFRpbWUoKSk7XG4gICAgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgdGhpcy53ZWVrZGF5cy53ZWVrZGF5c1RvRGF5cyh0KSk7XG4gICAgcmV0dXJuIGQ7XG4gIH1cblxuICBwYXJzZShzOiBzdHJpbmcpOiBSZXN1bHQ8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMud2Vla2RheXMuZGF0ZVRvV2Vla2RheShzKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlUmVzdWx0LCBodG1sLCByZW5kZXIgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSAnLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluJztcbmltcG9ydCB7IGRhdGVEaXNwbGF5IH0gZnJvbSAnLi4vZGF0ZS1jb250cm9sLXV0aWxzL2RhdGUtY29udHJvbC11dGlscyc7XG5pbXBvcnQgeyBleGVjdXRlT3AgfSBmcm9tICcuLi9hY3Rpb24vZXhlY3V0ZSc7XG5pbXBvcnQgeyBTZXRQbGFuU3RhcnRTdGF0ZU9wLCBTZXRQbGFuVW5pdHNPcCB9IGZyb20gJy4uL29wcy9wbGFuJztcbmltcG9ydCB7IFVOSVRfVFlQRVMsIHRvVW5pdCB9IGZyb20gJy4uL3VuaXRzL3VuaXQnO1xuaW1wb3J0IHsgcmVwb3J0SWZFcnJvciB9IGZyb20gJy4uL3JlcG9ydC1lcnJvci9yZXBvcnQtZXJyb3InO1xuXG5leHBvcnQgY2xhc3MgUGxhbkNvbmZpZ1BhbmVsIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBleHBsYW5NYWluOiBFeHBsYW5NYWluIHwgbnVsbCA9IG51bGw7XG4gIHBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrOiAoKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmV4cGxhbk1haW4gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcsXG4gICAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAncGxhbi1kZWZpbml0aW9uLWNoYW5nZWQnLFxuICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlcigpIHtcbiAgICByZW5kZXIodGhpcy50ZW1wbGF0ZSgpLCB0aGlzKTtcbiAgfVxuXG4gIHNldENvbmZpZyhleHBsYW5NYWluOiBFeHBsYW5NYWluKSB7XG4gICAgdGhpcy5leHBsYW5NYWluID0gZXhwbGFuTWFpbjtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8aDM+UGxhbiBTdGF0dXM8L2gzPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdj4ke3RoaXMudW5zdGFydGVkQ29udGVudCgpfSAke3RoaXMuc3RhcnRlZENvbnRlbnQoKX08L2Rpdj5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIFVuaXRzXG4gICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgc2l6ZT0ke1VOSVRfVFlQRVMubGVuZ3RofVxuICAgICAgICAgICAgQGlucHV0PSR7KGU6IElucHV0RXZlbnQpID0+IHRoaXMudW5pdENoYW5nZWQoZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgJHtVTklUX1RZUEVTLm1hcCgodW5pdFR5cGUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGh0bWxgPG9wdGlvbiB2YWx1ZT0ke3VuaXRUeXBlfT4ke3VuaXRUeXBlfTwvb3B0aW9uPmA7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVuaXRDaGFuZ2VkKGU6IElucHV0RXZlbnQpIHtcbiAgICBjb25zdCB1bml0QXNTdHJpbmcgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZU9wKFxuICAgICAgU2V0UGxhblVuaXRzT3AodG9Vbml0KHVuaXRBc1N0cmluZykpLFxuICAgICAgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5leHBsYW5NYWluIVxuICAgICk7XG4gICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHVuc3RhcnRlZENvbnRlbnQoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGlmICh0aGlzLmV4cGxhbk1haW4hLnBsYW4uc3RhdHVzLnN0YWdlID09PSAndW5zdGFydGVkJykge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgQGlucHV0PSR7KCkgPT4gdGhpcy5zdGFydCgpfSAvPiBTdGFydGVkXG4gICAgICAgIDwvbGFiZWw+XG4gICAgICBgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRlZENvbnRlbnQoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGlmICh0aGlzLmV4cGxhbk1haW4hLnBsYW4uc3RhdHVzLnN0YWdlID09PSAnc3RhcnRlZCcpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQgQGlucHV0PSR7KCkgPT4gdGhpcy51bnN0YXJ0KCl9IC8+XG4gICAgICAgICAgU3RhcnRlZFxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiZGF0ZVwiXG4gICAgICAgICAgLnZhbHVlPSR7ZGF0ZURpc3BsYXkobmV3IERhdGUodGhpcy5leHBsYW5NYWluIS5wbGFuLnN0YXR1cy5zdGFydCkpfVxuICAgICAgICAgIEBpbnB1dD0keyhlOiBJbnB1dEV2ZW50KSA9PiB0aGlzLmRhdGVDaGFuZ2VkKGUpfVxuICAgICAgICAvPlxuICAgICAgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGh0bWxgYDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRhdGVDaGFuZ2VkKGU6IElucHV0RXZlbnQpIHtcbiAgICBjb25zdCBzdGFydCA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZUFzRGF0ZSEuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHJldCA9IGF3YWl0IGV4ZWN1dGVPcChcbiAgICAgIFNldFBsYW5TdGFydFN0YXRlT3AoeyBzdGFnZTogJ3N0YXJ0ZWQnLCBzdGFydDogc3RhcnQgfSksXG4gICAgICAncGxhbkRlZmluaXRpb25DaGFuZ2VkJyxcbiAgICAgIHRydWUsXG4gICAgICB0aGlzLmV4cGxhbk1haW4hXG4gICAgKTtcbiAgICByZXBvcnRJZkVycm9yKHJldCk7XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzdGFydCgpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZU9wKFxuICAgICAgU2V0UGxhblN0YXJ0U3RhdGVPcCh7IHN0YWdlOiAnc3RhcnRlZCcsIHN0YXJ0OiBzdGFydCB9KSxcbiAgICAgICdwbGFuRGVmaW5pdGlvbkNoYW5nZWQnLFxuICAgICAgdHJ1ZSxcbiAgICAgIHRoaXMuZXhwbGFuTWFpbiFcbiAgICApO1xuICAgIHJlcG9ydElmRXJyb3IocmV0KTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1bnN0YXJ0KCkge1xuICAgIGNvbnN0IHJldCA9IGF3YWl0IGV4ZWN1dGVPcChcbiAgICAgIFNldFBsYW5TdGFydFN0YXRlT3AoeyBzdGFnZTogJ3Vuc3RhcnRlZCcsIHN0YXJ0OiAwIH0pLFxuICAgICAgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5leHBsYW5NYWluIVxuICAgICk7XG4gICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdwbGFuLWNvbmZpZy1wYW5lbCcsIFBsYW5Db25maWdQYW5lbCk7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5cbmltcG9ydCB7RGlzY29ubmVjdGFibGUsIFBhcnR9IGZyb20gJy4vbGl0LWh0bWwuanMnO1xuXG5leHBvcnQge1xuICBBdHRyaWJ1dGVQYXJ0LFxuICBCb29sZWFuQXR0cmlidXRlUGFydCxcbiAgQ2hpbGRQYXJ0LFxuICBFbGVtZW50UGFydCxcbiAgRXZlbnRQYXJ0LFxuICBQYXJ0LFxuICBQcm9wZXJ0eVBhcnQsXG59IGZyb20gJy4vbGl0LWh0bWwuanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdGl2ZUNsYXNzIHtcbiAgbmV3IChwYXJ0OiBQYXJ0SW5mbyk6IERpcmVjdGl2ZTtcbn1cblxuLyoqXG4gKiBUaGlzIHV0aWxpdHkgdHlwZSBleHRyYWN0cyB0aGUgc2lnbmF0dXJlIG9mIGEgZGlyZWN0aXZlIGNsYXNzJ3MgcmVuZGVyKClcbiAqIG1ldGhvZCBzbyB3ZSBjYW4gdXNlIGl0IGZvciB0aGUgdHlwZSBvZiB0aGUgZ2VuZXJhdGVkIGRpcmVjdGl2ZSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgRGlyZWN0aXZlUGFyYW1ldGVyczxDIGV4dGVuZHMgRGlyZWN0aXZlPiA9IFBhcmFtZXRlcnM8Q1sncmVuZGVyJ10+O1xuXG4vKipcbiAqIEEgZ2VuZXJhdGVkIGRpcmVjdGl2ZSBmdW5jdGlvbiBkb2Vzbid0IGV2YWx1YXRlIHRoZSBkaXJlY3RpdmUsIGJ1dCBqdXN0XG4gKiByZXR1cm5zIGEgRGlyZWN0aXZlUmVzdWx0IG9iamVjdCB0aGF0IGNhcHR1cmVzIHRoZSBhcmd1bWVudHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlyZWN0aXZlUmVzdWx0PEMgZXh0ZW5kcyBEaXJlY3RpdmVDbGFzcyA9IERpcmVjdGl2ZUNsYXNzPiB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIFsnXyRsaXREaXJlY3RpdmUkJ106IEM7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgdmFsdWVzOiBEaXJlY3RpdmVQYXJhbWV0ZXJzPEluc3RhbmNlVHlwZTxDPj47XG59XG5cbmV4cG9ydCBjb25zdCBQYXJ0VHlwZSA9IHtcbiAgQVRUUklCVVRFOiAxLFxuICBDSElMRDogMixcbiAgUFJPUEVSVFk6IDMsXG4gIEJPT0xFQU5fQVRUUklCVVRFOiA0LFxuICBFVkVOVDogNSxcbiAgRUxFTUVOVDogNixcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFBhcnRUeXBlID0gKHR5cGVvZiBQYXJ0VHlwZSlba2V5b2YgdHlwZW9mIFBhcnRUeXBlXTtcblxuZXhwb3J0IGludGVyZmFjZSBDaGlsZFBhcnRJbmZvIHtcbiAgcmVhZG9ubHkgdHlwZTogdHlwZW9mIFBhcnRUeXBlLkNISUxEO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF0dHJpYnV0ZVBhcnRJbmZvIHtcbiAgcmVhZG9ubHkgdHlwZTpcbiAgICB8IHR5cGVvZiBQYXJ0VHlwZS5BVFRSSUJVVEVcbiAgICB8IHR5cGVvZiBQYXJ0VHlwZS5QUk9QRVJUWVxuICAgIHwgdHlwZW9mIFBhcnRUeXBlLkJPT0xFQU5fQVRUUklCVVRFXG4gICAgfCB0eXBlb2YgUGFydFR5cGUuRVZFTlQ7XG4gIHJlYWRvbmx5IHN0cmluZ3M/OiBSZWFkb25seUFycmF5PHN0cmluZz47XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgdGFnTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRQYXJ0SW5mbyB7XG4gIHJlYWRvbmx5IHR5cGU6IHR5cGVvZiBQYXJ0VHlwZS5FTEVNRU5UO1xufVxuXG4vKipcbiAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBwYXJ0IGEgZGlyZWN0aXZlIGlzIGJvdW5kIHRvLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjaGVja2luZyB0aGF0IGEgZGlyZWN0aXZlIGlzIGF0dGFjaGVkIHRvIGEgdmFsaWQgcGFydCxcbiAqIHN1Y2ggYXMgd2l0aCBkaXJlY3RpdmUgdGhhdCBjYW4gb25seSBiZSB1c2VkIG9uIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAqL1xuZXhwb3J0IHR5cGUgUGFydEluZm8gPSBDaGlsZFBhcnRJbmZvIHwgQXR0cmlidXRlUGFydEluZm8gfCBFbGVtZW50UGFydEluZm87XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVzZXItZmFjaW5nIGRpcmVjdGl2ZSBmdW5jdGlvbiBmcm9tIGEgRGlyZWN0aXZlIGNsYXNzLiBUaGlzXG4gKiBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgcGFyYW1ldGVycyBhcyB0aGUgZGlyZWN0aXZlJ3MgcmVuZGVyKCkgbWV0aG9kLlxuICovXG5leHBvcnQgY29uc3QgZGlyZWN0aXZlID1cbiAgPEMgZXh0ZW5kcyBEaXJlY3RpdmVDbGFzcz4oYzogQykgPT5cbiAgKC4uLnZhbHVlczogRGlyZWN0aXZlUGFyYW1ldGVyczxJbnN0YW5jZVR5cGU8Qz4+KTogRGlyZWN0aXZlUmVzdWx0PEM+ID0+ICh7XG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgICBbJ18kbGl0RGlyZWN0aXZlJCddOiBjLFxuICAgIHZhbHVlcyxcbiAgfSk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgY3JlYXRpbmcgY3VzdG9tIGRpcmVjdGl2ZXMuIFVzZXJzIHNob3VsZCBleHRlbmQgdGhpcyBjbGFzcyxcbiAqIGltcGxlbWVudCBgcmVuZGVyYCBhbmQvb3IgYHVwZGF0ZWAsIGFuZCB0aGVuIHBhc3MgdGhlaXIgc3ViY2xhc3MgdG9cbiAqIGBkaXJlY3RpdmVgLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGlyZWN0aXZlIGltcGxlbWVudHMgRGlzY29ubmVjdGFibGUge1xuICAvL0BpbnRlcm5hbFxuICBfX3BhcnQhOiBQYXJ0O1xuICAvL0BpbnRlcm5hbFxuICBfX2F0dHJpYnV0ZUluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIC8vQGludGVybmFsXG4gIF9fZGlyZWN0aXZlPzogRGlyZWN0aXZlO1xuXG4gIC8vQGludGVybmFsXG4gIF8kcGFyZW50ITogRGlzY29ubmVjdGFibGU7XG5cbiAgLy8gVGhlc2Ugd2lsbCBvbmx5IGV4aXN0IG9uIHRoZSBBc3luY0RpcmVjdGl2ZSBzdWJjbGFzc1xuICAvL0BpbnRlcm5hbFxuICBfJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4/OiBTZXQ8RGlzY29ubmVjdGFibGU+O1xuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAvL0BpbnRlcm5hbFxuICBbJ18kbm90aWZ5RGlyZWN0aXZlQ29ubmVjdGlvbkNoYW5nZWQnXT8oaXNDb25uZWN0ZWQ6IGJvb2xlYW4pOiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKF9wYXJ0SW5mbzogUGFydEluZm8pIHt9XG5cbiAgLy8gU2VlIGNvbW1lbnQgaW4gRGlzY29ubmVjdGFibGUgaW50ZXJmYWNlIGZvciB3aHkgdGhpcyBpcyBhIGdldHRlclxuICBnZXQgXyRpc0Nvbm5lY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fJHBhcmVudC5fJGlzQ29ubmVjdGVkO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJGluaXRpYWxpemUoXG4gICAgcGFydDogUGFydCxcbiAgICBwYXJlbnQ6IERpc2Nvbm5lY3RhYmxlLFxuICAgIGF0dHJpYnV0ZUluZGV4OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgKSB7XG4gICAgdGhpcy5fX3BhcnQgPSBwYXJ0O1xuICAgIHRoaXMuXyRwYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5fX2F0dHJpYnV0ZUluZGV4ID0gYXR0cmlidXRlSW5kZXg7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfJHJlc29sdmUocGFydDogUGFydCwgcHJvcHM6IEFycmF5PHVua25vd24+KTogdW5rbm93biB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKHBhcnQsIHByb3BzKTtcbiAgfVxuXG4gIGFic3RyYWN0IHJlbmRlciguLi5wcm9wczogQXJyYXk8dW5rbm93bj4pOiB1bmtub3duO1xuXG4gIHVwZGF0ZShfcGFydDogUGFydCwgcHJvcHM6IEFycmF5PHVua25vd24+KTogdW5rbm93biB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKC4uLnByb3BzKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuXG5pbXBvcnQge1xuICBfJExILFxuICBQYXJ0LFxuICBEaXJlY3RpdmVQYXJlbnQsXG4gIENvbXBpbGVkVGVtcGxhdGVSZXN1bHQsXG4gIE1heWJlQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCxcbiAgVW5jb21waWxlZFRlbXBsYXRlUmVzdWx0LFxufSBmcm9tICcuL2xpdC1odG1sLmpzJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZVJlc3VsdCxcbiAgRGlyZWN0aXZlQ2xhc3MsXG4gIFBhcnRJbmZvLFxuICBBdHRyaWJ1dGVQYXJ0SW5mbyxcbn0gZnJvbSAnLi9kaXJlY3RpdmUuanMnO1xudHlwZSBQcmltaXRpdmUgPSBudWxsIHwgdW5kZWZpbmVkIHwgYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IHN5bWJvbCB8IGJpZ2ludDtcblxuY29uc3Qge19DaGlsZFBhcnQ6IENoaWxkUGFydH0gPSBfJExIO1xuXG50eXBlIENoaWxkUGFydCA9IEluc3RhbmNlVHlwZTx0eXBlb2YgQ2hpbGRQYXJ0PjtcblxuY29uc3QgRU5BQkxFX1NIQURZRE9NX05PUEFUQ0ggPSB0cnVlO1xuXG5jb25zdCB3cmFwID1cbiAgRU5BQkxFX1NIQURZRE9NX05PUEFUQ0ggJiZcbiAgd2luZG93LlNoYWR5RE9NPy5pblVzZSAmJlxuICB3aW5kb3cuU2hhZHlET00/Lm5vUGF0Y2ggPT09IHRydWVcbiAgICA/IHdpbmRvdy5TaGFkeURPTSEud3JhcFxuICAgIDogKG5vZGU6IE5vZGUpID0+IG5vZGU7XG5cbi8qKlxuICogVGVzdHMgaWYgYSB2YWx1ZSBpcyBhIHByaW1pdGl2ZSB2YWx1ZS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdHlwZW9mLW9wZXJhdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBpc1ByaW1pdGl2ZSA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFByaW1pdGl2ZSA9PlxuICB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZSAhPSAnZnVuY3Rpb24nKTtcblxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlUmVzdWx0VHlwZSA9IHtcbiAgSFRNTDogMSxcbiAgU1ZHOiAyLFxuICBNQVRITUw6IDMsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBUZW1wbGF0ZVJlc3VsdFR5cGUgPVxuICAodHlwZW9mIFRlbXBsYXRlUmVzdWx0VHlwZSlba2V5b2YgdHlwZW9mIFRlbXBsYXRlUmVzdWx0VHlwZV07XG5cbnR5cGUgSXNUZW1wbGF0ZVJlc3VsdCA9IHtcbiAgKHZhbDogdW5rbm93bik6IHZhbCBpcyBNYXliZUNvbXBpbGVkVGVtcGxhdGVSZXN1bHQ7XG4gIDxUIGV4dGVuZHMgVGVtcGxhdGVSZXN1bHRUeXBlPihcbiAgICB2YWw6IHVua25vd24sXG4gICAgdHlwZTogVFxuICApOiB2YWwgaXMgVW5jb21waWxlZFRlbXBsYXRlUmVzdWx0PFQ+O1xufTtcblxuLyoqXG4gKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGEgVGVtcGxhdGVSZXN1bHQgb3IgYSBDb21waWxlZFRlbXBsYXRlUmVzdWx0LlxuICovXG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZVJlc3VsdDogSXNUZW1wbGF0ZVJlc3VsdCA9IChcbiAgdmFsdWU6IHVua25vd24sXG4gIHR5cGU/OiBUZW1wbGF0ZVJlc3VsdFR5cGVcbik6IHZhbHVlIGlzIFVuY29tcGlsZWRUZW1wbGF0ZVJlc3VsdCA9PlxuICB0eXBlID09PSB1bmRlZmluZWRcbiAgICA/IC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgICAodmFsdWUgYXMgVW5jb21waWxlZFRlbXBsYXRlUmVzdWx0KT8uWydfJGxpdFR5cGUkJ10gIT09IHVuZGVmaW5lZFxuICAgIDogKHZhbHVlIGFzIFVuY29tcGlsZWRUZW1wbGF0ZVJlc3VsdCk/LlsnXyRsaXRUeXBlJCddID09PSB0eXBlO1xuXG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYSBDb21waWxlZFRlbXBsYXRlUmVzdWx0LlxuICovXG5leHBvcnQgY29uc3QgaXNDb21waWxlZFRlbXBsYXRlUmVzdWx0ID0gKFxuICB2YWx1ZTogdW5rbm93blxuKTogdmFsdWUgaXMgQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCA9PiB7XG4gIHJldHVybiAodmFsdWUgYXMgQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCk/LlsnXyRsaXRUeXBlJCddPy5oICE9IG51bGw7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYSBEaXJlY3RpdmVSZXN1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0RpcmVjdGl2ZVJlc3VsdCA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIERpcmVjdGl2ZVJlc3VsdCA9PlxuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAodmFsdWUgYXMgRGlyZWN0aXZlUmVzdWx0KT8uWydfJGxpdERpcmVjdGl2ZSQnXSAhPT0gdW5kZWZpbmVkO1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgRGlyZWN0aXZlIGNsYXNzIGZvciBhIERpcmVjdGl2ZVJlc3VsdFxuICovXG5leHBvcnQgY29uc3QgZ2V0RGlyZWN0aXZlQ2xhc3MgPSAodmFsdWU6IHVua25vd24pOiBEaXJlY3RpdmVDbGFzcyB8IHVuZGVmaW5lZCA9PlxuICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAodmFsdWUgYXMgRGlyZWN0aXZlUmVzdWx0KT8uWydfJGxpdERpcmVjdGl2ZSQnXTtcblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGEgcGFydCBoYXMgb25seSBhIHNpbmdsZS1leHByZXNzaW9uIHdpdGggbm8gc3RyaW5ncyB0b1xuICogaW50ZXJwb2xhdGUgYmV0d2Vlbi5cbiAqXG4gKiBPbmx5IEF0dHJpYnV0ZVBhcnQgYW5kIFByb3BlcnR5UGFydCBjYW4gaGF2ZSBtdWx0aXBsZSBleHByZXNzaW9ucy5cbiAqIE11bHRpLWV4cHJlc3Npb24gcGFydHMgaGF2ZSBhIGBzdHJpbmdzYCBwcm9wZXJ0eSBhbmQgc2luZ2xlLWV4cHJlc3Npb25cbiAqIHBhcnRzIGRvIG5vdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzU2luZ2xlRXhwcmVzc2lvbiA9IChwYXJ0OiBQYXJ0SW5mbykgPT5cbiAgKHBhcnQgYXMgQXR0cmlidXRlUGFydEluZm8pLnN0cmluZ3MgPT09IHVuZGVmaW5lZDtcblxuY29uc3QgY3JlYXRlTWFya2VyID0gKCkgPT4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJyk7XG5cbi8qKlxuICogSW5zZXJ0cyBhIENoaWxkUGFydCBpbnRvIHRoZSBnaXZlbiBjb250YWluZXIgQ2hpbGRQYXJ0J3MgRE9NLCBlaXRoZXIgYXQgdGhlXG4gKiBlbmQgb2YgdGhlIGNvbnRhaW5lciBDaGlsZFBhcnQsIG9yIGJlZm9yZSB0aGUgb3B0aW9uYWwgYHJlZlBhcnRgLlxuICpcbiAqIFRoaXMgZG9lcyBub3QgYWRkIHRoZSBwYXJ0IHRvIHRoZSBjb250YWluZXJQYXJ0J3MgY29tbWl0dGVkIHZhbHVlLiBUaGF0IG11c3RcbiAqIGJlIGRvbmUgYnkgY2FsbGVycy5cbiAqXG4gKiBAcGFyYW0gY29udGFpbmVyUGFydCBQYXJ0IHdpdGhpbiB3aGljaCB0byBhZGQgdGhlIG5ldyBDaGlsZFBhcnRcbiAqIEBwYXJhbSByZWZQYXJ0IFBhcnQgYmVmb3JlIHdoaWNoIHRvIGFkZCB0aGUgbmV3IENoaWxkUGFydDsgd2hlbiBvbWl0dGVkIHRoZVxuICogICAgIHBhcnQgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgYGNvbnRhaW5lclBhcnRgXG4gKiBAcGFyYW0gcGFydCBQYXJ0IHRvIGluc2VydCwgb3IgdW5kZWZpbmVkIHRvIGNyZWF0ZSBhIG5ldyBwYXJ0XG4gKi9cbmV4cG9ydCBjb25zdCBpbnNlcnRQYXJ0ID0gKFxuICBjb250YWluZXJQYXJ0OiBDaGlsZFBhcnQsXG4gIHJlZlBhcnQ/OiBDaGlsZFBhcnQsXG4gIHBhcnQ/OiBDaGlsZFBhcnRcbik6IENoaWxkUGFydCA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IHdyYXAoY29udGFpbmVyUGFydC5fJHN0YXJ0Tm9kZSkucGFyZW50Tm9kZSE7XG5cbiAgY29uc3QgcmVmTm9kZSA9XG4gICAgcmVmUGFydCA9PT0gdW5kZWZpbmVkID8gY29udGFpbmVyUGFydC5fJGVuZE5vZGUgOiByZWZQYXJ0Ll8kc3RhcnROb2RlO1xuXG4gIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzdGFydE5vZGUgPSB3cmFwKGNvbnRhaW5lcikuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCByZWZOb2RlKTtcbiAgICBjb25zdCBlbmROb2RlID0gd3JhcChjb250YWluZXIpLmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgcmVmTm9kZSk7XG4gICAgcGFydCA9IG5ldyBDaGlsZFBhcnQoXG4gICAgICBzdGFydE5vZGUsXG4gICAgICBlbmROb2RlLFxuICAgICAgY29udGFpbmVyUGFydCxcbiAgICAgIGNvbnRhaW5lclBhcnQub3B0aW9uc1xuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZW5kTm9kZSA9IHdyYXAocGFydC5fJGVuZE5vZGUhKS5uZXh0U2libGluZztcbiAgICBjb25zdCBvbGRQYXJlbnQgPSBwYXJ0Ll8kcGFyZW50O1xuICAgIGNvbnN0IHBhcmVudENoYW5nZWQgPSBvbGRQYXJlbnQgIT09IGNvbnRhaW5lclBhcnQ7XG4gICAgaWYgKHBhcmVudENoYW5nZWQpIHtcbiAgICAgIHBhcnQuXyRyZXBhcmVudERpc2Nvbm5lY3RhYmxlcz8uKGNvbnRhaW5lclBhcnQpO1xuICAgICAgLy8gTm90ZSB0aGF0IGFsdGhvdWdoIGBfJHJlcGFyZW50RGlzY29ubmVjdGFibGVzYCB1cGRhdGVzIHRoZSBwYXJ0J3NcbiAgICAgIC8vIGBfJHBhcmVudGAgcmVmZXJlbmNlIGFmdGVyIHVubGlua2luZyBmcm9tIGl0cyBjdXJyZW50IHBhcmVudCwgdGhhdFxuICAgICAgLy8gbWV0aG9kIG9ubHkgZXhpc3RzIGlmIERpc2Nvbm5lY3RhYmxlcyBhcmUgcHJlc2VudCwgc28gd2UgbmVlZCB0b1xuICAgICAgLy8gdW5jb25kaXRpb25hbGx5IHNldCBpdCBoZXJlXG4gICAgICBwYXJ0Ll8kcGFyZW50ID0gY29udGFpbmVyUGFydDtcbiAgICAgIC8vIFNpbmNlIHRoZSBfJGlzQ29ubmVjdGVkIGdldHRlciBpcyBzb21ld2hhdCBjb3N0bHksIG9ubHlcbiAgICAgIC8vIHJlYWQgaXQgb25jZSB3ZSBrbm93IHRoZSBzdWJ0cmVlIGhhcyBkaXJlY3RpdmVzIHRoYXQgbmVlZFxuICAgICAgLy8gdG8gYmUgbm90aWZpZWRcbiAgICAgIGxldCBuZXdDb25uZWN0aW9uU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIHBhcnQuXyRub3RpZnlDb25uZWN0aW9uQ2hhbmdlZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIChuZXdDb25uZWN0aW9uU3RhdGUgPSBjb250YWluZXJQYXJ0Ll8kaXNDb25uZWN0ZWQpICE9PVxuICAgICAgICAgIG9sZFBhcmVudCEuXyRpc0Nvbm5lY3RlZFxuICAgICAgKSB7XG4gICAgICAgIHBhcnQuXyRub3RpZnlDb25uZWN0aW9uQ2hhbmdlZChuZXdDb25uZWN0aW9uU3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5kTm9kZSAhPT0gcmVmTm9kZSB8fCBwYXJlbnRDaGFuZ2VkKSB7XG4gICAgICBsZXQgc3RhcnQ6IE5vZGUgfCBudWxsID0gcGFydC5fJHN0YXJ0Tm9kZTtcbiAgICAgIHdoaWxlIChzdGFydCAhPT0gZW5kTm9kZSkge1xuICAgICAgICBjb25zdCBuOiBOb2RlIHwgbnVsbCA9IHdyYXAoc3RhcnQhKS5uZXh0U2libGluZztcbiAgICAgICAgd3JhcChjb250YWluZXIpLmluc2VydEJlZm9yZShzdGFydCEsIHJlZk5vZGUpO1xuICAgICAgICBzdGFydCA9IG47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnQ7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIGEgUGFydC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvIHNldC91cGRhdGUgdGhlIHZhbHVlIG9mIHVzZXItY3JlYXRlZFxuICogcGFydHMgKGkuZS4gdGhvc2UgY3JlYXRlZCB1c2luZyBgaW5zZXJ0UGFydGApOyBpdCBzaG91bGQgbm90IGJlIHVzZWRcbiAqIGJ5IGRpcmVjdGl2ZXMgdG8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZGlyZWN0aXZlJ3MgY29udGFpbmVyIHBhcnQuIERpcmVjdGl2ZXNcbiAqIHNob3VsZCByZXR1cm4gYSB2YWx1ZSBmcm9tIGB1cGRhdGVgL2ByZW5kZXJgIHRvIHVwZGF0ZSB0aGVpciBwYXJ0IHN0YXRlLlxuICpcbiAqIEZvciBkaXJlY3RpdmVzIHRoYXQgcmVxdWlyZSBzZXR0aW5nIHRoZWlyIHBhcnQgdmFsdWUgYXN5bmNocm9ub3VzbHksIHRoZXlcbiAqIHNob3VsZCBleHRlbmQgYEFzeW5jRGlyZWN0aXZlYCBhbmQgY2FsbCBgdGhpcy5zZXRWYWx1ZSgpYC5cbiAqXG4gKiBAcGFyYW0gcGFydCBQYXJ0IHRvIHNldFxuICogQHBhcmFtIHZhbHVlIFZhbHVlIHRvIHNldFxuICogQHBhcmFtIGluZGV4IEZvciBgQXR0cmlidXRlUGFydGBzLCB0aGUgaW5kZXggdG8gc2V0XG4gKiBAcGFyYW0gZGlyZWN0aXZlUGFyZW50IFVzZWQgaW50ZXJuYWxseTsgc2hvdWxkIG5vdCBiZSBzZXQgYnkgdXNlclxuICovXG5leHBvcnQgY29uc3Qgc2V0Q2hpbGRQYXJ0VmFsdWUgPSA8VCBleHRlbmRzIENoaWxkUGFydD4oXG4gIHBhcnQ6IFQsXG4gIHZhbHVlOiB1bmtub3duLFxuICBkaXJlY3RpdmVQYXJlbnQ6IERpcmVjdGl2ZVBhcmVudCA9IHBhcnRcbik6IFQgPT4ge1xuICBwYXJ0Ll8kc2V0VmFsdWUodmFsdWUsIGRpcmVjdGl2ZVBhcmVudCk7XG4gIHJldHVybiBwYXJ0O1xufTtcblxuLy8gQSBzZW50aW5lbCB2YWx1ZSB0aGF0IGNhbiBuZXZlciBhcHBlYXIgYXMgYSBwYXJ0IHZhbHVlIGV4Y2VwdCB3aGVuIHNldCBieVxuLy8gbGl2ZSgpLiBVc2VkIHRvIGZvcmNlIGEgZGlydHktY2hlY2sgdG8gZmFpbCBhbmQgY2F1c2UgYSByZS1yZW5kZXIuXG5jb25zdCBSRVNFVF9WQUxVRSA9IHt9O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbW1pdHRlZCB2YWx1ZSBvZiBhIENoaWxkUGFydCBkaXJlY3RseSB3aXRob3V0IHRyaWdnZXJpbmcgdGhlXG4gKiBjb21taXQgc3RhZ2Ugb2YgdGhlIHBhcnQuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgaW4gY2FzZXMgd2hlcmUgYSBkaXJlY3RpdmUgbmVlZHMgdG8gdXBkYXRlIHRoZSBwYXJ0IHN1Y2hcbiAqIHRoYXQgdGhlIG5leHQgdXBkYXRlIGRldGVjdHMgYSB2YWx1ZSBjaGFuZ2Ugb3Igbm90LiBXaGVuIHZhbHVlIGlzIG9taXR0ZWQsXG4gKiB0aGUgbmV4dCB1cGRhdGUgd2lsbCBiZSBndWFyYW50ZWVkIHRvIGJlIGRldGVjdGVkIGFzIGEgY2hhbmdlLlxuICpcbiAqIEBwYXJhbSBwYXJ0XG4gKiBAcGFyYW0gdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IHNldENvbW1pdHRlZFZhbHVlID0gKHBhcnQ6IFBhcnQsIHZhbHVlOiB1bmtub3duID0gUkVTRVRfVkFMVUUpID0+XG4gIChwYXJ0Ll8kY29tbWl0dGVkVmFsdWUgPSB2YWx1ZSk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29tbWl0dGVkIHZhbHVlIG9mIGEgQ2hpbGRQYXJ0LlxuICpcbiAqIFRoZSBjb21taXR0ZWQgdmFsdWUgaXMgdXNlZCBmb3IgY2hhbmdlIGRldGVjdGlvbiBhbmQgZWZmaWNpZW50IHVwZGF0ZXMgb2ZcbiAqIHRoZSBwYXJ0LiBJdCBjYW4gZGlmZmVyIGZyb20gdGhlIHZhbHVlIHNldCBieSB0aGUgdGVtcGxhdGUgb3IgZGlyZWN0aXZlIGluXG4gKiBjYXNlcyB3aGVyZSB0aGUgdGVtcGxhdGUgdmFsdWUgaXMgdHJhbnNmb3JtZWQgYmVmb3JlIGJlaW5nIGNvbW1pdHRlZC5cbiAqXG4gKiAtIGBUZW1wbGF0ZVJlc3VsdGBzIGFyZSBjb21taXR0ZWQgYXMgYSBgVGVtcGxhdGVJbnN0YW5jZWBcbiAqIC0gSXRlcmFibGVzIGFyZSBjb21taXR0ZWQgYXMgYEFycmF5PENoaWxkUGFydD5gXG4gKiAtIEFsbCBvdGhlciB0eXBlcyBhcmUgY29tbWl0dGVkIGFzIHRoZSB0ZW1wbGF0ZSB2YWx1ZSBvciB2YWx1ZSByZXR1cm5lZCBvclxuICogICBzZXQgYnkgYSBkaXJlY3RpdmUuXG4gKlxuICogQHBhcmFtIHBhcnRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbW1pdHRlZFZhbHVlID0gKHBhcnQ6IENoaWxkUGFydCkgPT4gcGFydC5fJGNvbW1pdHRlZFZhbHVlO1xuXG4vKipcbiAqIFJlbW92ZXMgYSBDaGlsZFBhcnQgZnJvbSB0aGUgRE9NLCBpbmNsdWRpbmcgYW55IG9mIGl0cyBjb250ZW50LlxuICpcbiAqIEBwYXJhbSBwYXJ0IFRoZSBQYXJ0IHRvIHJlbW92ZVxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlUGFydCA9IChwYXJ0OiBDaGlsZFBhcnQpID0+IHtcbiAgcGFydC5fJG5vdGlmeUNvbm5lY3Rpb25DaGFuZ2VkPy4oZmFsc2UsIHRydWUpO1xuICBsZXQgc3RhcnQ6IENoaWxkTm9kZSB8IG51bGwgPSBwYXJ0Ll8kc3RhcnROb2RlO1xuICBjb25zdCBlbmQ6IENoaWxkTm9kZSB8IG51bGwgPSB3cmFwKHBhcnQuXyRlbmROb2RlISkubmV4dFNpYmxpbmc7XG4gIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgY29uc3QgbjogQ2hpbGROb2RlIHwgbnVsbCA9IHdyYXAoc3RhcnQhKS5uZXh0U2libGluZztcbiAgICAod3JhcChzdGFydCEpIGFzIENoaWxkTm9kZSkucmVtb3ZlKCk7XG4gICAgc3RhcnQgPSBuO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY2xlYXJQYXJ0ID0gKHBhcnQ6IENoaWxkUGFydCkgPT4ge1xuICBwYXJ0Ll8kY2xlYXIoKTtcbn07XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5cbmltcG9ydCB7QXR0cmlidXRlUGFydCwgbm9DaGFuZ2UsIG5vdGhpbmd9IGZyb20gJy4uL2xpdC1odG1sLmpzJztcbmltcG9ydCB7XG4gIGRpcmVjdGl2ZSxcbiAgRGlyZWN0aXZlLFxuICBEaXJlY3RpdmVQYXJhbWV0ZXJzLFxuICBQYXJ0SW5mbyxcbiAgUGFydFR5cGUsXG59IGZyb20gJy4uL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQge2lzU2luZ2xlRXhwcmVzc2lvbiwgc2V0Q29tbWl0dGVkVmFsdWV9IGZyb20gJy4uL2RpcmVjdGl2ZS1oZWxwZXJzLmpzJztcblxuY2xhc3MgTGl2ZURpcmVjdGl2ZSBleHRlbmRzIERpcmVjdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHBhcnRJbmZvOiBQYXJ0SW5mbykge1xuICAgIHN1cGVyKHBhcnRJbmZvKTtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICBwYXJ0SW5mby50eXBlID09PSBQYXJ0VHlwZS5QUk9QRVJUWSB8fFxuICAgICAgICBwYXJ0SW5mby50eXBlID09PSBQYXJ0VHlwZS5BVFRSSUJVVEUgfHxcbiAgICAgICAgcGFydEluZm8udHlwZSA9PT0gUGFydFR5cGUuQk9PTEVBTl9BVFRSSUJVVEVcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSBgbGl2ZWAgZGlyZWN0aXZlIGlzIG5vdCBhbGxvd2VkIG9uIGNoaWxkIG9yIGV2ZW50IGJpbmRpbmdzJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFpc1NpbmdsZUV4cHJlc3Npb24ocGFydEluZm8pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BsaXZlYCBiaW5kaW5ncyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb24nKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIodmFsdWU6IHVua25vd24pIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBvdmVycmlkZSB1cGRhdGUocGFydDogQXR0cmlidXRlUGFydCwgW3ZhbHVlXTogRGlyZWN0aXZlUGFyYW1ldGVyczx0aGlzPikge1xuICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UgfHwgdmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IHBhcnQuZWxlbWVudDtcbiAgICBjb25zdCBuYW1lID0gcGFydC5uYW1lO1xuXG4gICAgaWYgKHBhcnQudHlwZSA9PT0gUGFydFR5cGUuUFJPUEVSVFkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBpZiAodmFsdWUgPT09IChlbGVtZW50IGFzIGFueSlbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIG5vQ2hhbmdlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFydC50eXBlID09PSBQYXJ0VHlwZS5CT09MRUFOX0FUVFJJQlVURSkge1xuICAgICAgaWYgKCEhdmFsdWUgPT09IGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBub0NoYW5nZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcnQudHlwZSA9PT0gUGFydFR5cGUuQVRUUklCVVRFKSB7XG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSkgPT09IFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG5vQ2hhbmdlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXNldHMgdGhlIHBhcnQncyB2YWx1ZSwgY2F1c2luZyBpdHMgZGlydHktY2hlY2sgdG8gZmFpbCBzbyB0aGF0IGl0XG4gICAgLy8gYWx3YXlzIHNldHMgdGhlIHZhbHVlLlxuICAgIHNldENvbW1pdHRlZFZhbHVlKHBhcnQpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBiaW5kaW5nIHZhbHVlcyBhZ2FpbnN0IGxpdmUgRE9NIHZhbHVlcywgaW5zdGVhZCBvZiBwcmV2aW91c2x5IGJvdW5kXG4gKiB2YWx1ZXMsIHdoZW4gZGV0ZXJtaW5pbmcgd2hldGhlciB0byB1cGRhdGUgdGhlIHZhbHVlLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjYXNlcyB3aGVyZSB0aGUgRE9NIHZhbHVlIG1heSBjaGFuZ2UgZnJvbSBvdXRzaWRlIG9mXG4gKiBsaXQtaHRtbCwgc3VjaCBhcyB3aXRoIGEgYmluZGluZyB0byBhbiBgPGlucHV0PmAgZWxlbWVudCdzIGB2YWx1ZWAgcHJvcGVydHksXG4gKiBhIGNvbnRlbnQgZWRpdGFibGUgZWxlbWVudHMgdGV4dCwgb3IgdG8gYSBjdXN0b20gZWxlbWVudCB0aGF0IGNoYW5nZXMgaXQnc1xuICogb3duIHByb3BlcnRpZXMgb3IgYXR0cmlidXRlcy5cbiAqXG4gKiBJbiB0aGVzZSBjYXNlcyBpZiB0aGUgRE9NIHZhbHVlIGNoYW5nZXMsIGJ1dCB0aGUgdmFsdWUgc2V0IHRocm91Z2ggbGl0LWh0bWxcbiAqIGJpbmRpbmdzIGhhc24ndCwgbGl0LWh0bWwgd29uJ3Qga25vdyB0byB1cGRhdGUgdGhlIERPTSB2YWx1ZSBhbmQgd2lsbCBsZWF2ZVxuICogaXQgYWxvbmUuIElmIHRoaXMgaXMgbm90IHdoYXQgeW91IHdhbnQtLWlmIHlvdSB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgRE9NXG4gKiB2YWx1ZSB3aXRoIHRoZSBib3VuZCB2YWx1ZSBubyBtYXR0ZXIgd2hhdC0tdXNlIHRoZSBgbGl2ZSgpYCBkaXJlY3RpdmU6XG4gKlxuICogYGBganNcbiAqIGh0bWxgPGlucHV0IC52YWx1ZT0ke2xpdmUoeCl9PmBcbiAqIGBgYFxuICpcbiAqIGBsaXZlKClgIHBlcmZvcm1zIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrIGFnYWluc3QgdGhlIGxpdmUgRE9NIHZhbHVlLCBhbmQgaWZcbiAqIHRoZSBuZXcgdmFsdWUgaXMgZXF1YWwgdG8gdGhlIGxpdmUgdmFsdWUsIGRvZXMgbm90aGluZy4gVGhpcyBtZWFucyB0aGF0XG4gKiBgbGl2ZSgpYCBzaG91bGQgbm90IGJlIHVzZWQgd2hlbiB0aGUgYmluZGluZyB3aWxsIGNhdXNlIGEgdHlwZSBjb252ZXJzaW9uLiBJZlxuICogeW91IHVzZSBgbGl2ZSgpYCB3aXRoIGFuIGF0dHJpYnV0ZSBiaW5kaW5nLCBtYWtlIHN1cmUgdGhhdCBvbmx5IHN0cmluZ3MgYXJlXG4gKiBwYXNzZWQgaW4sIG9yIHRoZSBiaW5kaW5nIHdpbGwgdXBkYXRlIGV2ZXJ5IHJlbmRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGxpdmUgPSBkaXJlY3RpdmUoTGl2ZURpcmVjdGl2ZSk7XG5cbi8qKlxuICogVGhlIHR5cGUgb2YgdGhlIGNsYXNzIHRoYXQgcG93ZXJzIHRoaXMgZGlyZWN0aXZlLiBOZWNlc3NhcnkgZm9yIG5hbWluZyB0aGVcbiAqIGRpcmVjdGl2ZSdzIHJldHVybiB0eXBlLlxuICovXG5leHBvcnQgdHlwZSB7TGl2ZURpcmVjdGl2ZX07XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IFVuaXRCYXNlIH0gZnJvbSAnLi4vdW5pdHMvdW5pdC50cyc7XG5pbXBvcnQgeyBkYXRlRGlzcGxheSB9IGZyb20gJy4uL2RhdGUtY29udHJvbC11dGlscy9kYXRlLWNvbnRyb2wtdXRpbHMudHMnO1xuaW1wb3J0IHsgbGl2ZSB9IGZyb20gJ2xpdC1odG1sL2RpcmVjdGl2ZXMvbGl2ZS5qcyc7XG5pbXBvcnQgeyByZXBvcnRFcnJvck1zZyB9IGZyb20gJy4uL3JlcG9ydC1lcnJvci9yZXBvcnQtZXJyb3IudHMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAge1xuICAgICdkYXRlLXBpY2tlci1pbnB1dCc6IEN1c3RvbUV2ZW50PG51bWJlcj47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRlUGlja2VyVmFsdWUge1xuICB1bml0OiBVbml0QmFzZTtcbiAgZGF0ZU9mZnNldDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgX3ZhbHVlOiBEYXRlUGlja2VyVmFsdWUgfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgc2V0IHZhbHVlKHY6IERhdGVQaWNrZXJWYWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlID0gdjtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXIoKSB7XG4gICAgcmVuZGVyKHRoaXMudGVtcGxhdGUoKSwgdGhpcyk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBpZiAodGhpcy5fdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuICAgIGNvbnN0IGtpbmQgPSB0aGlzLl92YWx1ZS51bml0LmtpbmQoKTtcbiAgICBpZiAoa2luZCA9PT0gJ1VuaXRsZXNzJykge1xuICAgICAgcmV0dXJuIGh0bWxgIDxpbnB1dFxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIC52YWx1ZT0ke2xpdmUodGhpcy5fdmFsdWUuZGF0ZU9mZnNldCl9XG4gICAgICAgIEBjaGFuZ2U9JHsoZTogSW5wdXRFdmVudCkgPT4gdGhpcy5pbnB1dENoYW5nZWQoZSl9XG4gICAgICAvPmA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiZGF0ZVwiXG4gICAgICAgICAgLnZhbHVlPSR7bGl2ZShcbiAgICAgICAgICAgIGRhdGVEaXNwbGF5KHRoaXMuX3ZhbHVlLnVuaXQuYXNEYXRlKHRoaXMuX3ZhbHVlLmRhdGVPZmZzZXQpKVxuICAgICAgICAgICl9XG4gICAgICAgICAgQGlucHV0PSR7KGU6IElucHV0RXZlbnQpID0+IHRoaXMuaW5wdXRDaGFuZ2VkKGUpfVxuICAgICAgICAvPlxuICAgICAgYDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlucHV0Q2hhbmdlZChlOiBJbnB1dEV2ZW50KSB7XG4gICAgY29uc3QgcmV0ID0gdGhpcy5fdmFsdWUhLnVuaXQucGFyc2UoKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHJlcG9ydEVycm9yTXNnKHJldC5lcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50PG51bWJlcj4oJ2RhdGUtcGlja2VyLWlucHV0Jywge1xuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgZGV0YWlsOiByZXQudmFsdWUsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2RhdGUtcGlja2VyJywgRGF0ZVBpY2tlcik7XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7XG4gIFRhc2tDb21wbGV0aW9uLFxuICBmcm9tSlNPTixcbiAgdG9KU09OLFxufSBmcm9tICcuLi90YXNrX2NvbXBsZXRpb24vdGFza19jb21wbGV0aW9uLnRzJztcbmltcG9ydCB7IFNwYW4gfSBmcm9tICcuLi9zbGFjay9zbGFjay50cyc7XG5pbXBvcnQgeyBTZXRUYXNrQ29tcGxldGlvbk9wIH0gZnJvbSAnLi4vb3BzL3BsYW4udHMnO1xuaW1wb3J0IHsgZXhlY3V0ZU9wIH0gZnJvbSAnLi4vYWN0aW9uL2V4ZWN1dGUudHMnO1xuaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gJy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpbi50cyc7XG5pbXBvcnQgeyBsaXZlIH0gZnJvbSAnbGl0LWh0bWwvZGlyZWN0aXZlcy9saXZlLmpzJztcbmltcG9ydCB7IHJlcG9ydEVycm9yTXNnIH0gZnJvbSAnLi4vcmVwb3J0LWVycm9yL3JlcG9ydC1lcnJvci50cyc7XG5cbmV4cG9ydCBjbGFzcyBUYXNrQ29tcGxldGlvblBhbmVsIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBleHBsYW5NYWluOiBFeHBsYW5NYWluIHwgbnVsbCA9IG51bGw7XG4gIHNwYW46IFNwYW4gfCBudWxsID0gbnVsbDtcbiAgdGFza0luZGV4OiBudW1iZXIgPSAwO1xuICB0YXNrQ29tcGxldGlvbjogVGFza0NvbXBsZXRpb24gfCBudWxsID0gbnVsbDtcbiAgcGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVPbklucHV0KCk7XG4gICAgfTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAncGxhbi1kZWZpbml0aW9uLWNoYW5nZWQnLFxuICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgJ3BsYW4tZGVmaW5pdGlvbi1jaGFuZ2VkJyxcbiAgICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlKGV4cGxhbk1haW46IEV4cGxhbk1haW4sIHRhc2tJbmRleDogbnVtYmVyLCBzcGFuOiBTcGFuKSB7XG4gICAgdGhpcy5leHBsYW5NYWluID0gZXhwbGFuTWFpbjtcbiAgICB0aGlzLnRhc2tJbmRleCA9IHRhc2tJbmRleDtcbiAgICB0aGlzLnNwYW4gPSBzcGFuO1xuICAgIHRoaXMudXBkYXRlT25JbnB1dCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVPbklucHV0KCkge1xuICAgIGNvbnN0IHJldCA9IHRoaXMuZXhwbGFuTWFpbiEucGxhbiEuZ2V0VGFza0NvbXBsZXRpb24odGhpcy50YXNrSW5kZXgpO1xuICAgIGlmIChyZXQub2spIHtcbiAgICAgIHRoaXMudGFza0NvbXBsZXRpb24gPSByZXQudmFsdWU7XG4gICAgfVxuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKHRoaXMudGFza0NvbXBsZXRpb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuICAgIGlmICh0aGlzLmV4cGxhbk1haW4hLnBsYW4uc3RhdHVzLnN0YWdlID09PSAndW5zdGFydGVkJykge1xuICAgICAgcmV0dXJuIGh0bWxgYDtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLnRhc2tDb21wbGV0aW9uLnN0YWdlKSB7XG4gICAgICBjYXNlICd1bnN0YXJ0ZWQnOlxuICAgICAgICByZXR1cm4gaHRtbGA8ZGl2PlxuICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBAY2hhbmdlPSR7KCkgPT4gdGhpcy5zdGFydCgpfSAvPlxuICAgICAgICAgICAgU3RhcnRlZFxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PmA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzdGFydGVkJzpcbiAgICAgICAgcmV0dXJuIGh0bWxgPGRpdj5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZCBAY2hhbmdlPSR7KCkgPT4gdGhpcy51bnN0YXJ0KCl9IC8+XG4gICAgICAgICAgICBTdGFydGVkXG4gICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgIDxkYXRlLXBpY2tlclxuICAgICAgICAgICAgLnZhbHVlPSR7e1xuICAgICAgICAgICAgICB1bml0OiB0aGlzLmV4cGxhbk1haW4hLnBsYW4hLmR1cmF0aW9uVW5pdHMsXG4gICAgICAgICAgICAgIGRhdGVPZmZzZXQ6IHRoaXMudGFza0NvbXBsZXRpb24uc3RhcnQsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgQGRhdGUtcGlja2VyLWlucHV0PSR7KGU6IEN1c3RvbUV2ZW50PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlQ2hhbmdlZChlKX1cbiAgICAgICAgICA+PC9kYXRlLXBpY2tlcj5cblxuICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBAY2hhbmdlPSR7KCkgPT4gdGhpcy5maW5pc2goKX0gLz5cbiAgICAgICAgICAgIEZpbmlzaGVkXG4gICAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgbWluPVwiMVwiXG4gICAgICAgICAgICAgIG1heD1cIjk5XCJcbiAgICAgICAgICAgICAgc3RlcD1cIjFcIlxuICAgICAgICAgICAgICAudmFsdWU9JHtsaXZlKHRoaXMudGFza0NvbXBsZXRpb24ucGVyY2VudENvbXBsZXRlKX1cbiAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBJbnB1dEV2ZW50KSA9PiB0aGlzLnBlcmNlbnRDaGFuZ2UoZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgJSBDb21wbGV0ZVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PmA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmaW5pc2hlZCc6XG4gICAgICAgIHJldHVybiBodG1sYDxkaXY+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNoZWNrZWQgQGNoYW5nZT0keygpID0+IHRoaXMudW5zdGFydCgpfSAvPlxuICAgICAgICAgICAgU3RhcnRlZFxuICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICA8ZGF0ZS1waWNrZXJcbiAgICAgICAgICAgIC52YWx1ZT0ke3tcbiAgICAgICAgICAgICAgdW5pdDogdGhpcy5leHBsYW5NYWluIS5wbGFuIS5kdXJhdGlvblVuaXRzLFxuICAgICAgICAgICAgICBkYXRlT2Zmc2V0OiB0aGlzLnRhc2tDb21wbGV0aW9uLnNwYW4uc3RhcnQsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgQGRhdGUtcGlja2VyLWlucHV0PSR7KGU6IEN1c3RvbUV2ZW50PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlQ2hhbmdlZChlKX1cbiAgICAgICAgICA+PC9kYXRlLXBpY2tlcj5cblxuICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkIEBjaGFuZ2U9JHsoKSA9PiB0aGlzLnVuZmluaXNoKCl9IC8+XG4gICAgICAgICAgICBGaW5pc2hlZFxuICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICA8ZGF0ZS1waWNrZXJcbiAgICAgICAgICAgIC52YWx1ZT0ke3tcbiAgICAgICAgICAgICAgdW5pdDogdGhpcy5leHBsYW5NYWluIS5wbGFuIS5kdXJhdGlvblVuaXRzLFxuICAgICAgICAgICAgICBkYXRlT2Zmc2V0OiB0aGlzLnRhc2tDb21wbGV0aW9uLnNwYW4uZmluaXNoLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIEBkYXRlLXBpY2tlci1pbnB1dD0keyhlOiBDdXN0b21FdmVudDxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICB0aGlzLmZpbmlzaERhdGVDaGFuZ2VkKGUpfVxuICAgICAgICAgID48L2RhdGUtcGlja2VyPlxuICAgICAgICA8L2Rpdj5gO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gQ29uZmlybSB3ZSd2ZSBjb3ZlcmVkIGFsbCBzd2l0Y2ggc3RhdGVtZW50IHBvc3NpYmlsaXRlcy5cbiAgICAgICAgdGhpcy50YXNrQ29tcGxldGlvbiBzYXRpc2ZpZXMgbmV2ZXI7XG4gICAgICAgIHJldHVybiBodG1sYGA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdGFza0NvbXBsZXRpb25DaGFuZ2VkKHQ6IFRhc2tDb21wbGV0aW9uKSB7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZU9wKFxuICAgICAgU2V0VGFza0NvbXBsZXRpb25PcCh0aGlzLnRhc2tJbmRleCwgdCksXG4gICAgICAncGxhbkRlZmluaXRpb25DaGFuZ2VkJyxcbiAgICAgIHRydWUsXG4gICAgICB0aGlzLmV4cGxhbk1haW4hXG4gICAgKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgdGhpcy51cGRhdGVPbklucHV0KCk7XG4gICAgICByZXBvcnRFcnJvck1zZyhyZXQuZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc3RhcnQoKSB7XG4gICAgdGhpcy50YXNrQ29tcGxldGlvbkNoYW5nZWQoe1xuICAgICAgc3RhZ2U6ICdzdGFydGVkJyxcbiAgICAgIHN0YXJ0OiB0aGlzLnNwYW4hLnN0YXJ0LFxuICAgICAgcGVyY2VudENvbXBsZXRlOiAxMCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdW5zdGFydCgpIHtcbiAgICB0aGlzLnRhc2tDb21wbGV0aW9uQ2hhbmdlZCh7XG4gICAgICBzdGFnZTogJ3Vuc3RhcnRlZCcsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZpbmlzaCgpIHtcbiAgICBpZiAodGhpcy50YXNrQ29tcGxldGlvbiEuc3RhZ2UgPT09ICdzdGFydGVkJykge1xuICAgICAgdGhpcy50YXNrQ29tcGxldGlvbkNoYW5nZWQoe1xuICAgICAgICBzdGFnZTogJ2ZpbmlzaGVkJyxcbiAgICAgICAgLy8gVE9ETyBNYWtlIHN1cmUgZmluaXNoID4gc3RhcnQuXG4gICAgICAgIC8vIFRPRE8gTWFrZSBmaW5pc2ggZGVmYXVsdCB0byBcInRvZGF5XCI/XG4gICAgICAgIHNwYW46IG5ldyBTcGFuKHRoaXMudGFza0NvbXBsZXRpb24hLnN0YXJ0LCB0aGlzLnNwYW4hLmZpbmlzaCksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVuZmluaXNoKCkge1xuICAgIGlmICh0aGlzLnRhc2tDb21wbGV0aW9uIS5zdGFnZSA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgdGhpcy50YXNrQ29tcGxldGlvbkNoYW5nZWQoe1xuICAgICAgICBzdGFnZTogJ3N0YXJ0ZWQnLFxuICAgICAgICAvLyBUT0RPIE1ha2Ugc3VyZSBmaW5pc2ggPiBzdGFydC5cbiAgICAgICAgLy8gVE9ETyBNYWtlIGZpbmlzaCBkZWZhdWx0IHRvIFwidG9kYXlcIj9cbiAgICAgICAgcGVyY2VudENvbXBsZXRlOiA5MCxcbiAgICAgICAgc3RhcnQ6IHRoaXMudGFza0NvbXBsZXRpb24hLnNwYW4uc3RhcnQsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHBlcmNlbnRDaGFuZ2UoZTogSW5wdXRFdmVudCkge1xuICAgIGNvbnN0IGR1cCA9IGZyb21KU09OKHRvSlNPTih0aGlzLnRhc2tDb21wbGV0aW9uISkpO1xuICAgIGlmIChkdXAuc3RhZ2UgPT09ICdzdGFydGVkJykge1xuICAgICAgZHVwLnBlcmNlbnRDb21wbGV0ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZUFzTnVtYmVyO1xuICAgICAgdGhpcy50YXNrQ29tcGxldGlvbkNoYW5nZWQoZHVwKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0RGF0ZUNoYW5nZWQoZTogQ3VzdG9tRXZlbnQ8bnVtYmVyPikge1xuICAgIGNvbnN0IGR1cCA9IGZyb21KU09OKHRvSlNPTih0aGlzLnRhc2tDb21wbGV0aW9uISkpO1xuICAgIGlmIChkdXAuc3RhZ2UgPT09ICdmaW5pc2hlZCcpIHtcbiAgICAgIGR1cC5zcGFuLnN0YXJ0ID0gZS5kZXRhaWw7XG4gICAgfSBlbHNlIGlmIChkdXAuc3RhZ2UgPT09ICdzdGFydGVkJykge1xuICAgICAgZHVwLnN0YXJ0ID0gZS5kZXRhaWw7XG4gICAgfVxuICAgIHRoaXMudGFza0NvbXBsZXRpb25DaGFuZ2VkKGR1cCk7XG4gIH1cblxuICBwcml2YXRlIGZpbmlzaERhdGVDaGFuZ2VkKGU6IEN1c3RvbUV2ZW50PG51bWJlcj4pIHtcbiAgICBjb25zdCBkdXAgPSBmcm9tSlNPTih0b0pTT04odGhpcy50YXNrQ29tcGxldGlvbiEpKTtcbiAgICBpZiAoZHVwLnN0YWdlID09PSAnZmluaXNoZWQnKSB7XG4gICAgICBkdXAuc3Bhbi5maW5pc2ggPSBlLmRldGFpbDtcbiAgICB9XG4gICAgdGhpcy50YXNrQ29tcGxldGlvbkNoYW5nZWQoZHVwKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2stY29tcGxldGlvbi1wYW5lbCcsIFRhc2tDb21wbGV0aW9uUGFuZWwpO1xuIiwgIi8vIEVhY2ggUmVzb3Vyc2UgaGFzIGEga2V5LCB3aGljaCBpcyB0aGUgbmFtZSwgYW5kIGEgbGlzdCBvZiBhY2NlcHRhYmxlIHZhbHVlcy5cbi8vIFRoZSBsaXN0IG9mIHZhbHVlcyBjYW4gbmV2ZXIgYmUgZW1wdHksIGFuZCB0aGUgZmlyc3QgdmFsdWUgaW4gYHZhbHVlc2AgaXMgdGhlXG4vLyBkZWZhdWx0IHZhbHVlIGZvciBhIFJlc291cmNlLlxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVNPVVJDRV9WQUxVRSA9IFwiXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VEZWZpbml0aW9uU2VyaWFsaXplZCB7XG4gIHZhbHVlczogc3RyaW5nW107XG4gIHN0YXRpYzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlc291cmNlRGVmaW5pdGlvbiB7XG4gIHZhbHVlczogc3RyaW5nW107XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgUmVzb3VyY2UgaXMgYnVpbHQgaW4gYW5kIGNhbid0IGJlIGVkaXRlZCBvciBkZWxldGVkLlxuICBpc1N0YXRpYzogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICB2YWx1ZXM6IHN0cmluZ1tdID0gW0RFRkFVTFRfUkVTT1VSQ0VfVkFMVUVdLFxuICAgIGlzU3RhdGljOiBib29sZWFuID0gZmFsc2UsXG4gICkge1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBpc1N0YXRpYztcbiAgfVxuXG4gIHRvSlNPTigpOiBSZXNvdXJjZURlZmluaXRpb25TZXJpYWxpemVkIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWVzOiB0aGlzLnZhbHVlcyxcbiAgICAgIHN0YXRpYzogdGhpcy5pc1N0YXRpYyxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKHM6IFJlc291cmNlRGVmaW5pdGlvblNlcmlhbGl6ZWQpOiBSZXNvdXJjZURlZmluaXRpb24ge1xuICAgIHJldHVybiBuZXcgUmVzb3VyY2VEZWZpbml0aW9uKHMudmFsdWVzLCBzLnN0YXRpYyk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VEZWZpbml0aW9ucyA9IHsgW2tleTogc3RyaW5nXTogUmVzb3VyY2VEZWZpbml0aW9uIH07XG5leHBvcnQgdHlwZSBSZXNvdXJjZURlZmluaXRpb25zU2VyaWFsaXplZCA9IHtcbiAgW2tleTogc3RyaW5nXTogUmVzb3VyY2VEZWZpbml0aW9uU2VyaWFsaXplZDtcbn07XG4iLCAiaW1wb3J0IHsgUmVzdWx0LCBvaywgZXJyb3IgfSBmcm9tICcuLi9yZXN1bHQudHMnO1xuaW1wb3J0IHsgUGxhbiB9IGZyb20gJy4uL3BsYW4vcGxhbi50cyc7XG5pbXBvcnQgeyBPcCwgU3ViT3AsIFN1Yk9wUmVzdWx0IH0gZnJvbSAnLi9vcHMudHMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9SRVNPVVJDRV9WQUxVRSxcbiAgUmVzb3VyY2VEZWZpbml0aW9uLFxufSBmcm9tICcuLi9yZXNvdXJjZXMvcmVzb3VyY2VzLnRzJztcbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi9jaGFydC9jaGFydC50cyc7XG5cbmV4cG9ydCBjbGFzcyBBZGRSZXNvdXJjZVN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBrZXk6IHN0cmluZztcblxuICBkZWxldGVSZXNvdXJjZVVuZG9TdGF0ZTogZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUgfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBkZWxldGVSZXNvdXJjZVVuZG9TdGF0ZTogZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUgfCBudWxsID0gbnVsbFxuICApIHtcbiAgICB0aGlzLmtleSA9IG5hbWU7XG4gICAgdGhpcy5kZWxldGVSZXNvdXJjZVVuZG9TdGF0ZSA9IGRlbGV0ZVJlc291cmNlVW5kb1N0YXRlO1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgY29uc3QgZm91bmRNYXRjaCA9IHBsYW4uZ2V0UmVzb3VyY2VEZWZpbml0aW9uKHRoaXMua2V5KTtcbiAgICBpZiAoZm91bmRNYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5rZXl9IGFscmVhZHkgZXhpc3RzIGFzIGEgUmVzb3VyY2VgKTtcbiAgICB9XG5cbiAgICBwbGFuLnNldFJlc291cmNlRGVmaW5pdGlvbihcbiAgICAgIHRoaXMua2V5LFxuICAgICAgKHRoaXMuZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUgJiZcbiAgICAgICAgdGhpcy5kZWxldGVSZXNvdXJjZVVuZG9TdGF0ZS5yZXNvdXJjZURlZmluaXRpb24pIHx8XG4gICAgICAgIG5ldyBSZXNvdXJjZURlZmluaXRpb24oKVxuICAgICk7XG5cbiAgICAvLyBOb3cgbG9vcCBvdmVyIGV2ZXJ5IHRhc2sgYW5kIGFkZCB0aGlzIGtleSBhbmQgc2V0IGl0IHRvIHRoZSBkZWZhdWx0LCB1bmxlc3NcbiAgICAvLyB0aGVyZSBpcyBtYXRjaGluZyBlbnRyeSBpbiB0YXNrUmVzb3VyY2VWYWx1ZXMsIGluIHdoaWNoIGNhc2Ugd2Ugd2lsbCB1c2UgdGhhdCB2YWx1ZS5cbiAgICBwbGFuLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2ssIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHRhc2suc2V0UmVzb3VyY2UoXG4gICAgICAgIHRoaXMua2V5LFxuICAgICAgICAodGhpcy5kZWxldGVSZXNvdXJjZVVuZG9TdGF0ZSAmJlxuICAgICAgICAgIHRoaXMuZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUudGFza0luZGV4VG9EZWxldGVkUmVzb3VyY2VWYWx1ZS5nZXQoXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICkpIHx8XG4gICAgICAgICAgREVGQVVMVF9SRVNPVVJDRV9WQUxVRVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvayh7IHBsYW46IHBsYW4sIGludmVyc2U6IHRoaXMuaW52ZXJzZSgpIH0pO1xuICB9XG5cbiAgaW52ZXJzZSgpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBEZWxldGVSZXNvdXJjZVN1cE9wKHRoaXMua2V5KTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUge1xuICByZXNvdXJjZURlZmluaXRpb246IFJlc291cmNlRGVmaW5pdGlvbjtcbiAgdGFza0luZGV4VG9EZWxldGVkUmVzb3VyY2VWYWx1ZTogTWFwPG51bWJlciwgc3RyaW5nPjtcbn1cblxuZXhwb3J0IGNsYXNzIERlbGV0ZVJlc291cmNlU3VwT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMua2V5ID0gbmFtZTtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IHJlc291cmNlRGVmaW5pdGlvbiA9IHBsYW4uZ2V0UmVzb3VyY2VEZWZpbml0aW9uKHRoaXMua2V5KTtcbiAgICBpZiAocmVzb3VyY2VEZWZpbml0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgYFRoZSByZXNvdXJjZSB3aXRoIG5hbWUgJHt0aGlzLmtleX0gZG9lcyBub3QgZXhpc3QgYW5kIGNhbid0IGJlIGRlbGV0ZWQuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZnJvbSByZXNvdXJjZSBkZWZpbml0aW9ucy5cbiAgICBwbGFuLmRlbGV0ZVJlc291cmNlRGVmaW5pdGlvbih0aGlzLmtleSk7XG5cbiAgICBjb25zdCB0YXNrSW5kZXhUb0RlbGV0ZWRSZXNvdXJjZVZhbHVlOiBNYXA8bnVtYmVyLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gTm93IGxvb2sgYXQgYWxsIFRhc2tzIGFuZCByZW1vdmUgYHRoaXMua2V5YCBmcm9tIHRoZSByZXNvdXJjZXMgd2hpbGUgYWxzb1xuICAgIC8vIGJ1aWxkaW5nIHVwIHRoZSBpbmZvIG5lZWRlZCBmb3IgYSByZXZlcnQuXG4gICAgcGxhbi5jaGFydC5WZXJ0aWNlcy5mb3JFYWNoKCh0YXNrOiBUYXNrLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRhc2suZ2V0UmVzb3VyY2UodGhpcy5rZXkpIHx8IERFRkFVTFRfUkVTT1VSQ0VfVkFMVUU7XG4gICAgICB0YXNrSW5kZXhUb0RlbGV0ZWRSZXNvdXJjZVZhbHVlLnNldChpbmRleCwgdmFsdWUpO1xuICAgICAgdGFzay5kZWxldGVSZXNvdXJjZSh0aGlzLmtleSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZWxldGVSZXNvdXJjZVVuZG9TdGF0ZTogZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUgPSB7XG4gICAgICByZXNvdXJjZURlZmluaXRpb246IHJlc291cmNlRGVmaW5pdGlvbixcbiAgICAgIHRhc2tJbmRleFRvRGVsZXRlZFJlc291cmNlVmFsdWU6IHRhc2tJbmRleFRvRGVsZXRlZFJlc291cmNlVmFsdWUsXG4gICAgfTtcblxuICAgIHJldHVybiBvayh7XG4gICAgICBwbGFuOiBwbGFuLFxuICAgICAgaW52ZXJzZTogdGhpcy5pbnZlcnNlKGRlbGV0ZVJlc291cmNlVW5kb1N0YXRlKSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaW52ZXJzZShkZWxldGVSZXNvdXJjZVVuZG9TdGF0ZTogZGVsZXRlUmVzb3VyY2VVbmRvU3RhdGUpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBBZGRSZXNvdXJjZVN1Yk9wKHRoaXMua2V5LCBkZWxldGVSZXNvdXJjZVVuZG9TdGF0ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkZFJlc291cmNlT3B0aW9uU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGtleTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBpbmRpY2VzT2ZUYXNrc1RvQ2hhbmdlOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgaW5kaWNlc09mVGFza3NUb0NoYW5nZTogbnVtYmVyW10gPSBbXSAvLyBUaGlzIHNob3VsZCBvbmx5IGJlIHN1cHBsaWVkIHdoZW4gYmVpbmcgY29uc3RydWN0ZWQgYXMgYSBpbnZlcnNlIG9wZXJhdGlvbi5cbiAgKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuaW5kaWNlc09mVGFza3NUb0NoYW5nZSA9IGluZGljZXNPZlRhc2tzVG9DaGFuZ2U7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gcGxhbi5nZXRSZXNvdXJjZURlZmluaXRpb24odGhpcy5rZXkpO1xuICAgIGlmIChkZWZpbml0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihgJHt0aGlzLmtleX0gZG9lc24ndCBleGlzdCBhcyBhIFJlc291cmNlYCk7XG4gICAgfVxuICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSBkZWZpbml0aW9uLnZhbHVlcy5maW5kSW5kZXgoXG4gICAgICAodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgPT09IHRoaXMudmFsdWVcbiAgICApO1xuICAgIGlmIChleGlzdGluZ0luZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGVycm9yKFxuICAgICAgICBgJHt0aGlzLnZhbHVlfSBhbHJlYWR5IGV4aXN0cyBhcyBhIHZhbHVlIGluIHRoZSBSZXNvdXJjZSAke3RoaXMua2V5fS5gXG4gICAgICApO1xuICAgIH1cbiAgICBkZWZpbml0aW9uLnZhbHVlcy5wdXNoKHRoaXMudmFsdWUpO1xuXG4gICAgLy8gTm93IGxvb2sgYXQgYWxsIFRhc2tzIGFuZCBzZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4ga2V5IGZvciBhbGwgdGhlXG4gICAgLy8gdGFza3MgbGlzdGVkIGluIGBpbmRpY2VzT2ZUYXNrc1RvQ2hhbmdlYC5cbiAgICB0aGlzLmluZGljZXNPZlRhc2tzVG9DaGFuZ2UuZm9yRWFjaCgodGFza0luZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHBsYW4uY2hhcnQuVmVydGljZXNbdGFza0luZGV4XS5zZXRSZXNvdXJjZSh0aGlzLmtleSwgdGhpcy52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2soeyBwbGFuOiBwbGFuLCBpbnZlcnNlOiB0aGlzLmludmVyc2UoKSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaW52ZXJzZSgpOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBEZWxldGVSZXNvdXJjZU9wdGlvblN1Yk9wKFxuICAgICAgdGhpcy5rZXksXG4gICAgICB0aGlzLnZhbHVlLFxuICAgICAgdGhpcy5pbmRpY2VzT2ZUYXNrc1RvQ2hhbmdlXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVsZXRlUmVzb3VyY2VPcHRpb25TdWJPcCBpbXBsZW1lbnRzIFN1Yk9wIHtcbiAga2V5OiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGluZGljZXNPZlRhc2tzVG9DaGFuZ2U6IG51bWJlcltdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgaW5kaWNlc09mVGFza3NUb0NoYW5nZTogbnVtYmVyW10gPSBbXVxuICApIHtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5pbmRpY2VzT2ZUYXNrc1RvQ2hhbmdlID0gaW5kaWNlc09mVGFza3NUb0NoYW5nZTtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBwbGFuLmdldFJlc291cmNlRGVmaW5pdGlvbih0aGlzLmtleSk7XG4gICAgaWYgKGRlZmluaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGVycm9yKGAke3RoaXMua2V5fSBkb2Vzbid0IGV4aXN0IGFzIGEgUmVzb3VyY2VgKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVJbmRleCA9IGRlZmluaXRpb24udmFsdWVzLmZpbmRJbmRleChcbiAgICAgICh2YWx1ZTogc3RyaW5nKSA9PiB2YWx1ZSA9PT0gdGhpcy52YWx1ZVxuICAgICk7XG4gICAgaWYgKHZhbHVlSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgIGAke3RoaXMudmFsdWV9IGRvZXMgbm90IGV4aXN0IGFzIGEgdmFsdWUgaW4gdGhlIFJlc291cmNlICR7dGhpcy5rZXl9LmBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChkZWZpbml0aW9uLnZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgYFJlc291cmNlcyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIHZhbHVlLiAke3RoaXMudmFsdWV9IG9ubHkgaGFzIG9uZSB2YWx1ZSwgc28gaXQgY2FuJ3QgYmUgZGVsZXRlZC4gYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBkZWZpbml0aW9uLnZhbHVlcy5zcGxpY2UodmFsdWVJbmRleCwgMSk7XG5cbiAgICAvLyBOb3cgaXRlcmF0ZSB0aG91Z2ggYWxsIHRoZSB0YXNrcyBhbmQgY2hhbmdlIGFsbCB0YXNrcyB0aGF0IGhhdmVcbiAgICAvLyBcImtleTp2YWx1ZVwiIHRvIGluc3RlYWQgYmUgXCJrZXk6ZGVmYXVsdFwiLiBSZWNvcmQgd2hpY2ggdGFza3MgZ290IGNoYW5nZWRcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiB1c2UgdGhhdCBpbmZvcm1hdGlvbiB3aGVuIHdlIGNyZWF0ZSB0aGUgaW52ZXJ0IG9wZXJhdGlvbi5cblxuICAgIGNvbnN0IGluZGljZXNPZlRhc2tzV2l0aE1hdGNoaW5nUmVzb3VyY2VWYWx1ZXM6IG51bWJlcltdID0gW107XG5cbiAgICBwbGFuLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2ssIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHJlc291cmNlVmFsdWUgPSB0YXNrLmdldFJlc291cmNlKHRoaXMua2V5KTtcbiAgICAgIGlmIChyZXNvdXJjZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHJlc291cmNlVmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTaW5jZSB0aGUgdmFsdWUgaXMgbm8gbG9uZ2VyIHZhbGlkIHdlIGNoYW5nZSBpdCBiYWNrIHRvIHRoZSBkZWZhdWx0LlxuICAgICAgdGFzay5zZXRSZXNvdXJjZSh0aGlzLmtleSwgZGVmaW5pdGlvbi52YWx1ZXNbMF0pO1xuXG4gICAgICAvLyBSZWNvcmQgd2hpY2ggdGFzayB3ZSBqdXN0IGNoYW5nZWQuXG4gICAgICBpbmRpY2VzT2ZUYXNrc1dpdGhNYXRjaGluZ1Jlc291cmNlVmFsdWVzLnB1c2goaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9rKHtcbiAgICAgIHBsYW46IHBsYW4sXG4gICAgICBpbnZlcnNlOiB0aGlzLmludmVyc2UoaW5kaWNlc09mVGFza3NXaXRoTWF0Y2hpbmdSZXNvdXJjZVZhbHVlcyksXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGludmVyc2UoaW5kaWNlc09mVGFza3NUb0NoYW5nZTogbnVtYmVyW10pOiBTdWJPcCB7XG4gICAgcmV0dXJuIG5ldyBBZGRSZXNvdXJjZU9wdGlvblN1Yk9wKFxuICAgICAgdGhpcy5rZXksXG4gICAgICB0aGlzLnZhbHVlLFxuICAgICAgaW5kaWNlc09mVGFza3NUb0NoYW5nZVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbmFtZVJlc291cmNlU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIG9sZEtleTogc3RyaW5nO1xuICBuZXdLZXk6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihvbGRLZXk6IHN0cmluZywgbmV3S2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLm9sZEtleSA9IG9sZEtleTtcbiAgICB0aGlzLm5ld0tleSA9IG5ld0tleTtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IG9sZERlZmluaXRpb24gPSBwbGFuLmdldFJlc291cmNlRGVmaW5pdGlvbih0aGlzLm9sZEtleSk7XG4gICAgaWYgKG9sZERlZmluaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGVycm9yKGAke3RoaXMub2xkS2V5fSBkb2VzIG5vdCBleGlzdCBhcyBhIFJlc291cmNlYCk7XG4gICAgfVxuXG4gICAgLy8gQ29uZmlybSB0aGUgbmV3S2V5IGlzIG5vdCBhbHJlYWR5IHVzZWQuXG4gICAgY29uc3QgbmV3S2V5RGVmaW5pdGlvbiA9IHBsYW4uZ2V0UmVzb3VyY2VEZWZpbml0aW9uKHRoaXMubmV3S2V5KTtcbiAgICBpZiAobmV3S2V5RGVmaW5pdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5uZXdLZXl9IGFscmVhZHkgZXhpc3RzIGFzIGEgcmVzb3VyY2UgbmFtZS5gKTtcbiAgICB9XG5cbiAgICBwbGFuLmRlbGV0ZVJlc291cmNlRGVmaW5pdGlvbih0aGlzLm9sZEtleSk7XG4gICAgcGxhbi5zZXRSZXNvdXJjZURlZmluaXRpb24odGhpcy5uZXdLZXksIG9sZERlZmluaXRpb24pO1xuXG4gICAgLy8gTm93IGxvb3Agb3ZlciBldmVyeSB0YXNrIGFuZCBjaGFuZ2Ugb2xkS2V5IC0+IG5ld2tleSBmb3IgdGhlIGdpdmVuIHJlc291cmNlIGtleS5cbiAgICBwbGFuLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2spID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9XG4gICAgICAgIHRhc2suZ2V0UmVzb3VyY2UodGhpcy5vbGRLZXkpIHx8IERFRkFVTFRfUkVTT1VSQ0VfVkFMVUU7XG4gICAgICB0YXNrLnNldFJlc291cmNlKHRoaXMubmV3S2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgdGFzay5kZWxldGVSZXNvdXJjZSh0aGlzLm9sZEtleSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2soeyBwbGFuOiBwbGFuLCBpbnZlcnNlOiB0aGlzLmludmVyc2UoKSB9KTtcbiAgfVxuXG4gIGludmVyc2UoKTogU3ViT3Age1xuICAgIHJldHVybiBuZXcgUmVuYW1lUmVzb3VyY2VTdWJPcCh0aGlzLm5ld0tleSwgdGhpcy5vbGRLZXkpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW5hbWVSZXNvdXJjZU9wdGlvblN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBrZXk6IHN0cmluZztcbiAgb2xkVmFsdWU6IHN0cmluZztcbiAgbmV3VmFsdWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub2xkVmFsdWUgPSBvbGRWYWx1ZTtcbiAgICB0aGlzLm5ld1ZhbHVlID0gbmV3VmFsdWU7XG4gIH1cblxuICBhcHBseVRvKHBsYW46IFBsYW4pOiBSZXN1bHQ8U3ViT3BSZXN1bHQ+IHtcbiAgICBjb25zdCBmb3VuZE1hdGNoID0gcGxhbi5nZXRSZXNvdXJjZURlZmluaXRpb24odGhpcy5rZXkpO1xuICAgIGlmIChmb3VuZE1hdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihgJHt0aGlzLmtleX0gZG9lcyBub3QgZXhpc3QgYXMgYSBSZXNvdXJjZWApO1xuICAgIH1cblxuICAgIC8vIENvbmZpcm0gdGhlIG9sZFZhbHVlIGlzIGluIHRoZXJlLlxuICAgIGNvbnN0IG9sZFZhbHVlSW5kZXggPSBmb3VuZE1hdGNoLnZhbHVlcy5pbmRleE9mKHRoaXMub2xkVmFsdWUpO1xuXG4gICAgaWYgKG9sZFZhbHVlSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5rZXl9IGRvZXMgbm90IGEgdmFsdWUgJHt0aGlzLm9sZFZhbHVlfWApO1xuICAgIH1cblxuICAgIC8vIENvbmZpcm0gdGhlIG5ld1ZhbHVlIGlzIG5vdCBpbiB0aGVyZS5cbiAgICBjb25zdCBuZXdWYWx1ZUluZGV4ID0gZm91bmRNYXRjaC52YWx1ZXMuaW5kZXhPZih0aGlzLm5ld1ZhbHVlKTtcbiAgICBpZiAobmV3VmFsdWVJbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBlcnJvcihgJHt0aGlzLmtleX0gYWxyZWFkeSBoYXMgYSB2YWx1ZSAke3RoaXMubmV3VmFsdWV9YCk7XG4gICAgfVxuXG4gICAgLy8gU3dhcCB0aGUgdmFsdWVzLlxuICAgIGZvdW5kTWF0Y2gudmFsdWVzLnNwbGljZShvbGRWYWx1ZUluZGV4LCAxLCB0aGlzLm5ld1ZhbHVlKTtcblxuICAgIC8vIE5vdyBsb29wIG92ZXIgZXZlcnkgdGFzayBhbmQgY2hhbmdlIG9sZFZhbHVlIC0+IG5ld1ZhbHVlIGZvciB0aGUgZ2l2ZW4gcmVzb3VyY2Uga2V5LlxuICAgIHBsYW4uY2hhcnQuVmVydGljZXMuZm9yRWFjaCgodGFzazogVGFzaykgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGFzay5nZXRSZXNvdXJjZSh0aGlzLmtleSk7XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09PSB0aGlzLm9sZFZhbHVlKSB7XG4gICAgICAgIHRhc2suc2V0UmVzb3VyY2UodGhpcy5rZXksIHRoaXMubmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKCkgfSk7XG4gIH1cblxuICBpbnZlcnNlKCk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IFJlbmFtZVJlc291cmNlT3B0aW9uU3ViT3AoXG4gICAgICB0aGlzLmtleSxcbiAgICAgIHRoaXMubmV3VmFsdWUsXG4gICAgICB0aGlzLm9sZFZhbHVlXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW92ZVJlc291cmNlT3B0aW9uU3ViT3AgaW1wbGVtZW50cyBTdWJPcCB7XG4gIGtleTogc3RyaW5nO1xuICBvbGRJbmRleDogbnVtYmVyO1xuICBuZXdJbmRleDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGtleTogc3RyaW5nLCBvbGRWYWx1ZTogbnVtYmVyLCBuZXdWYWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vbGRJbmRleCA9IG9sZFZhbHVlO1xuICAgIHRoaXMubmV3SW5kZXggPSBuZXdWYWx1ZTtcbiAgfVxuXG4gIGFwcGx5VG8ocGxhbjogUGxhbik6IFJlc3VsdDxTdWJPcFJlc3VsdD4ge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBwbGFuLmdldFJlc291cmNlRGVmaW5pdGlvbih0aGlzLmtleSk7XG4gICAgaWYgKGRlZmluaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGVycm9yKGAke3RoaXMua2V5fSBkb2VzIG5vdCBleGlzdCBhcyBhIFJlc291cmNlYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmV3SW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5uZXdJbmRleH0gaXMgbm90IGEgdmFsaWQgdGFyZ2V0IHZhbHVlLmApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9sZEluZGV4ID4gZGVmaW5pdGlvbi52YWx1ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGVycm9yKFxuICAgICAgICBgJHt0aGlzLmtleX0gZG9lcyBub3QgaGF2ZSBhIHZhbHVlIGF0IGluZGV4ICR7dGhpcy5vbGRJbmRleH1gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZXdJbmRleCA+IGRlZmluaXRpb24udmFsdWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgYCR7dGhpcy5rZXl9IGRvZXMgbm90IGhhdmUgYSB2YWx1ZSBhdCBpbmRleCAke3RoaXMubmV3SW5kZXh9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBTd2FwIHRoZSB2YWx1ZXMuXG4gICAgY29uc3QgdG1wID0gZGVmaW5pdGlvbi52YWx1ZXNbdGhpcy5vbGRJbmRleF07XG4gICAgZGVmaW5pdGlvbi52YWx1ZXNbdGhpcy5vbGRJbmRleF0gPSBkZWZpbml0aW9uLnZhbHVlc1t0aGlzLm5ld0luZGV4XTtcbiAgICBkZWZpbml0aW9uLnZhbHVlc1t0aGlzLm5ld0luZGV4XSA9IHRtcDtcblxuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgd2l0aCBUYXNrcyBiZWNhdXNlIHRoZSBpbmRleCBvZiBhIHZhbHVlIGlzXG4gICAgLy8gaXJyZWxldmFudCBzaW5jZSB3ZSBzdG9yZSB0aGUgdmFsdWUgaXRzZWxmLCBub3QgdGhlIGluZGV4LlxuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKCkgfSk7XG4gIH1cblxuICBpbnZlcnNlKCk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IE1vdmVSZXNvdXJjZU9wdGlvblN1Yk9wKHRoaXMua2V5LCB0aGlzLm5ld0luZGV4LCB0aGlzLm9sZEluZGV4KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2V0UmVzb3VyY2VWYWx1ZVN1Yk9wIGltcGxlbWVudHMgU3ViT3Age1xuICBrZXk6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgdGFza0luZGV4OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHRhc2tJbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudGFza0luZGV4ID0gdGFza0luZGV4O1xuICB9XG5cbiAgYXBwbHlUbyhwbGFuOiBQbGFuKTogUmVzdWx0PFN1Yk9wUmVzdWx0PiB7XG4gICAgY29uc3QgZm91bmRNYXRjaCA9IHBsYW4uZ2V0UmVzb3VyY2VEZWZpbml0aW9uKHRoaXMua2V5KTtcbiAgICBpZiAoZm91bmRNYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IoYCR7dGhpcy5rZXl9IGRvZXMgbm90IGV4aXN0IGFzIGEgUmVzb3VyY2VgKTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3VuZFZhbHVlTWF0Y2ggPSBmb3VuZE1hdGNoLnZhbHVlcy5maW5kSW5kZXgoKHY6IHN0cmluZykgPT4ge1xuICAgICAgcmV0dXJuIHYgPT09IHRoaXMudmFsdWU7XG4gICAgfSk7XG4gICAgaWYgKGZvdW5kVmFsdWVNYXRjaCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBlcnJvcihgJHt0aGlzLmtleX0gZG9lcyBub3QgaGF2ZSBhIHZhbHVlIG9mICR7dGhpcy52YWx1ZX1gKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGFza0luZGV4IDwgMCB8fCB0aGlzLnRhc2tJbmRleCA+PSBwbGFuLmNoYXJ0LlZlcnRpY2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGVycm9yKGBUaGVyZSBpcyBubyBUYXNrIGF0IGluZGV4ICR7dGhpcy50YXNrSW5kZXh9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IHBsYW4uY2hhcnQuVmVydGljZXNbdGhpcy50YXNrSW5kZXhdO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFzay5nZXRSZXNvdXJjZSh0aGlzLmtleSkhO1xuICAgIHRhc2suc2V0UmVzb3VyY2UodGhpcy5rZXksIHRoaXMudmFsdWUpO1xuXG4gICAgcmV0dXJuIG9rKHsgcGxhbjogcGxhbiwgaW52ZXJzZTogdGhpcy5pbnZlcnNlKG9sZFZhbHVlKSB9KTtcbiAgfVxuXG4gIGludmVyc2Uob2xkVmFsdWU6IHN0cmluZyk6IFN1Yk9wIHtcbiAgICByZXR1cm4gbmV3IFNldFJlc291cmNlVmFsdWVTdWJPcCh0aGlzLmtleSwgb2xkVmFsdWUsIHRoaXMudGFza0luZGV4KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkUmVzb3VyY2VPcChuYW1lOiBzdHJpbmcpOiBPcCB7XG4gIHJldHVybiBuZXcgT3AoW25ldyBBZGRSZXNvdXJjZVN1Yk9wKG5hbWUpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEZWxldGVSZXNvdXJjZU9wKG5hbWU6IHN0cmluZyk6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IERlbGV0ZVJlc291cmNlU3VwT3AobmFtZSldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFkZFJlc291cmNlT3B0aW9uT3Aoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBPcCB7XG4gIHJldHVybiBuZXcgT3AoW25ldyBBZGRSZXNvdXJjZU9wdGlvblN1Yk9wKGtleSwgdmFsdWUpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEZWxldGVSZXNvdXJjZU9wdGlvbk9wKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgRGVsZXRlUmVzb3VyY2VPcHRpb25TdWJPcChrZXksIHZhbHVlKV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVuYW1lUmVzb3VyY2VPcHRpb25PcChcbiAga2V5OiBzdHJpbmcsXG4gIG9sZFZhbHVlOiBzdHJpbmcsXG4gIG5ld1ZhbHVlOiBzdHJpbmdcbik6IE9wIHtcbiAgcmV0dXJuIG5ldyBPcChbbmV3IFJlbmFtZVJlc291cmNlT3B0aW9uU3ViT3Aoa2V5LCBvbGRWYWx1ZSwgbmV3VmFsdWUpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZW5hbWVSZXNvdXJjZU9wKG9sZFZhbHVlOiBzdHJpbmcsIG5ld1ZhbHVlOiBzdHJpbmcpOiBPcCB7XG4gIHJldHVybiBuZXcgT3AoW25ldyBSZW5hbWVSZXNvdXJjZVN1Yk9wKG9sZFZhbHVlLCBuZXdWYWx1ZSldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vdmVSZXNvdXJjZU9wdGlvbk9wKFxuICBrZXk6IHN0cmluZyxcbiAgb2xkSW5kZXg6IG51bWJlcixcbiAgbmV3SW5kZXg6IG51bWJlclxuKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgTW92ZVJlc291cmNlT3B0aW9uU3ViT3Aoa2V5LCBvbGRJbmRleCwgbmV3SW5kZXgpXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXRSZXNvdXJjZVZhbHVlT3AoXG4gIGtleTogc3RyaW5nLFxuICB2YWx1ZTogc3RyaW5nLFxuICB0YXNrSW5kZXg6IG51bWJlclxuKTogT3Age1xuICByZXR1cm4gbmV3IE9wKFtuZXcgU2V0UmVzb3VyY2VWYWx1ZVN1Yk9wKGtleSwgdmFsdWUsIHRhc2tJbmRleCldKTtcbn1cbiIsICJpbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgcmVuZGVyIH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHsgUmVzb3VyY2VEZWZpbml0aW9uIH0gZnJvbSAnLi4vcmVzb3VyY2VzL3Jlc291cmNlcyc7XG5pbXBvcnQgeyBFeHBsYW5NYWluIH0gZnJvbSAnLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluJztcbmltcG9ydCB7IGljb24gfSBmcm9tICcuLi9pY29ucy9pY29ucyc7XG5pbXBvcnQgeyBleGVjdXRlT3AgfSBmcm9tICcuLi9hY3Rpb24vZXhlY3V0ZSc7XG5pbXBvcnQge1xuICBBZGRSZXNvdXJjZU9wdGlvbk9wLFxuICBEZWxldGVSZXNvdXJjZU9wdGlvbk9wLFxuICBNb3ZlUmVzb3VyY2VPcHRpb25PcCxcbiAgUmVuYW1lUmVzb3VyY2VPcCxcbiAgUmVuYW1lUmVzb3VyY2VPcHRpb25PcCxcbn0gZnJvbSAnLi4vb3BzL3Jlc291cmNlcyc7XG5pbXBvcnQgeyBPcCB9IGZyb20gJy4uL29wcy9vcHMnO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi4vcmVzdWx0JztcbmltcG9ydCB7IGxpdmUgfSBmcm9tICdsaXQtaHRtbC9kaXJlY3RpdmVzL2xpdmUuanMnO1xuXG5leHBvcnQgY2xhc3MgRWRpdFJlc291cmNlRGVmaW5pdGlvbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgZXhwbGFuTWFpbjogRXhwbGFuTWFpbiB8IG51bGwgPSBudWxsO1xuICByZXNvdXJjZURlZmluaXRpb246IFJlc291cmNlRGVmaW5pdGlvbiA9IG5ldyBSZXNvdXJjZURlZmluaXRpb24oKTtcbiAgbmFtZTogc3RyaW5nID0gJyc7XG4gIHBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrOiAoKSA9PiB2b2lkO1xuICBuZXdWYWx1ZUNvdW50ZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAncGxhbi1kZWZpbml0aW9uLWNoYW5nZWQnLFxuICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgJ3BsYW4tZGVmaW5pdGlvbi1jaGFuZ2VkJyxcbiAgICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgc2hvd01vZGFsKFxuICAgIGV4cGxhbk1haW46IEV4cGxhbk1haW4sXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHJlc291cmNlRGVmaW5pdGlvbjogUmVzb3VyY2VEZWZpbml0aW9uXG4gICkge1xuICAgIHRoaXMuZXhwbGFuTWFpbiA9IGV4cGxhbk1haW47XG4gICAgdGhpcy5yZXNvdXJjZURlZmluaXRpb24gPSByZXNvdXJjZURlZmluaXRpb247XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MRGlhbG9nRWxlbWVudD4oJ2RpYWxvZycpIS5zaG93TW9kYWwoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYW5jZWwoKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxEaWFsb2dFbGVtZW50PignZGlhbG9nJykhLmNsb3NlKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVPcChvcDogT3ApOiBQcm9taXNlPFJlc3VsdDxudWxsPj4ge1xuICAgIGNvbnN0IHJldCA9IGF3YWl0IGV4ZWN1dGVPcChcbiAgICAgIG9wLFxuICAgICAgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5leHBsYW5NYWluIVxuICAgICk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHdpbmRvdy5hbGVydChyZXQuZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjaGFuZ2VSZXNvdXJjZU5hbWUoZTogRXZlbnQsIG5ld05hbWU6IHN0cmluZywgb2xkTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgdGhpcy5leGVjdXRlT3AoUmVuYW1lUmVzb3VyY2VPcChvbGROYW1lLCBuZXdOYW1lKSk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHdpbmRvdy5hbGVydChyZXQuZXJyb3IpO1xuICAgICAgdGhpcy5uYW1lID0gb2xkTmFtZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHRoaXMubmFtZSA9IG5ld05hbWU7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNoYW5nZVJlc291cmNlVmFsdWVOYW1lKFxuICAgIGU6IEV2ZW50LFxuICAgIG5ld1ZhbHVlOiBzdHJpbmcsXG4gICAgb2xkVmFsdWU6IHN0cmluZ1xuICApIHtcbiAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVPcChcbiAgICAgIFJlbmFtZVJlc291cmNlT3B0aW9uT3AodGhpcy5uYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpXG4gICAgKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgd2luZG93LmFsZXJ0KHJldC5lcnJvcik7XG4gICAgICAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgPSBvbGRWYWx1ZTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQcm9wb3NlZFJlc291cmNlTmFtZSgpOiBzdHJpbmcge1xuICAgIHRoaXMubmV3VmFsdWVDb3VudGVyKys7XG4gICAgcmV0dXJuIGBOZXcgVmFsdWUgJHt0aGlzLm5ld1ZhbHVlQ291bnRlcn1gO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBuZXdSZXNvdXJjZVZhbHVlKCkge1xuICAgIHRoaXMubmV3VmFsdWVDb3VudGVyID0gMDtcbiAgICAvLyBDb21lIHVwIHdpdGggYSB1bmlxdWUgbmFtZSB0byBhZGQsIHNpbmNlIGFsbCByZXNvdXJjZSB2YWx1ZXMgbXVzdCBiZVxuICAgIC8vIHVuaXF1ZSBmb3IgYSBnaXZlbiByZXNvdXJjZSBuYW1lLlxuICAgIGxldCBuZXdSZXNvdXJjZU5hbWUgPSB0aGlzLmdldFByb3Bvc2VkUmVzb3VyY2VOYW1lKCk7XG4gICAgd2hpbGUgKFxuICAgICAgdGhpcy5leHBsYW5NYWluIS5wbGFuLnJlc291cmNlRGVmaW5pdGlvbnNbdGhpcy5uYW1lXS52YWx1ZXMuZmluZEluZGV4KFxuICAgICAgICAodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgPT09IG5ld1Jlc291cmNlTmFtZVxuICAgICAgKSAhPSAtMVxuICAgICkge1xuICAgICAgbmV3UmVzb3VyY2VOYW1lID0gdGhpcy5nZXRQcm9wb3NlZFJlc291cmNlTmFtZSgpO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZU9wKEFkZFJlc291cmNlT3B0aW9uT3AodGhpcy5uYW1lLCBuZXdSZXNvdXJjZU5hbWUpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbW92ZVVwKHZhbHVlOiBzdHJpbmcsIHZhbHVlSW5kZXg6IG51bWJlcikge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZU9wKFxuICAgICAgTW92ZVJlc291cmNlT3B0aW9uT3AodGhpcy5uYW1lLCB2YWx1ZUluZGV4LCB2YWx1ZUluZGV4IC0gMSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtb3ZlRG93bih2YWx1ZTogc3RyaW5nLCB2YWx1ZUluZGV4OiBudW1iZXIpIHtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVPcChcbiAgICAgIE1vdmVSZXNvdXJjZU9wdGlvbk9wKHRoaXMubmFtZSwgdmFsdWVJbmRleCwgdmFsdWVJbmRleCArIDEpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbW92ZVRvVG9wKHZhbHVlOiBzdHJpbmcsIHZhbHVlSW5kZXg6IG51bWJlcikge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZU9wKE1vdmVSZXNvdXJjZU9wdGlvbk9wKHRoaXMubmFtZSwgdmFsdWVJbmRleCwgMCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtb3ZlVG9Cb3R0b20odmFsdWU6IHN0cmluZywgdmFsdWVJbmRleDogbnVtYmVyKSB7XG4gICAgYXdhaXQgdGhpcy5leGVjdXRlT3AoXG4gICAgICBNb3ZlUmVzb3VyY2VPcHRpb25PcChcbiAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICB2YWx1ZUluZGV4LFxuICAgICAgICB0aGlzLmV4cGxhbk1haW4hLnBsYW4ucmVzb3VyY2VEZWZpbml0aW9uc1t0aGlzLm5hbWVdIS52YWx1ZXMubGVuZ3RoIC0gMVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIHByaXZhdGUgYXN5bmMgZGVsZXRlUmVzb3VyY2VWYWx1ZSh2YWx1ZTogc3RyaW5nLCBfdmFsdWVJbmRleDogbnVtYmVyKSB7XG4gICAgYXdhaXQgdGhpcy5leGVjdXRlT3AoRGVsZXRlUmVzb3VyY2VPcHRpb25PcCh0aGlzLm5hbWUsIHZhbHVlKSk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxkaWFsb2c+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBOYW1lOlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgLnZhbHVlPSR7bGl2ZSh0aGlzLm5hbWUpfVxuICAgICAgICAgICAgZGF0YS1vbGQtbmFtZT0ke3RoaXMubmFtZX1cbiAgICAgICAgICAgIEBjaGFuZ2U9JHsoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZWxlID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VSZXNvdXJjZU5hbWUoZSwgZWxlLnZhbHVlLCBlbGUuZGF0YXNldC5vbGROYW1lIHx8ICcnKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICR7dGhpcy5yZXNvdXJjZURlZmluaXRpb24udmFsdWVzLm1hcChcbiAgICAgICAgICAgICh2YWx1ZTogc3RyaW5nLCB2YWx1ZUluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGh0bWxgPHRyPlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICBkYXRhLW9sZC12YWx1ZT0ke3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSR7KGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVJlc291cmNlVmFsdWVOYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5kYXRhc2V0Lm9sZFZhbHVlIHx8ICcnXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLnZhbHVlPSR7bGl2ZSh2YWx1ZSl9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMubW92ZVVwKHZhbHVlLCB2YWx1ZUluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIC5kaXNhYmxlZD0ke3ZhbHVlSW5kZXggPT09IDB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICR7aWNvbigna2V5Ym9hcmQtdXAtaWNvbicpfVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5kaXNhYmxlZD0ke3ZhbHVlSW5kZXggPT09XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb3VyY2VEZWZpbml0aW9uLnZhbHVlcy5sZW5ndGggLSAxfVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb24tYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5tb3ZlRG93bih2YWx1ZSwgdmFsdWVJbmRleCl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICR7aWNvbigna2V5Ym9hcmQtZG93bi1pY29uJyl9XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLmRpc2FibGVkPSR7dmFsdWVJbmRleCA9PT1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvdXJjZURlZmluaXRpb24udmFsdWVzLmxlbmd0aCAtIDF9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB0aGlzLm1vdmVUb0JvdHRvbSh2YWx1ZSwgdmFsdWVJbmRleCl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICR7aWNvbigna2V5Ym9hcmQtZG91YmxlLWRvd24taWNvbicpfVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5kaXNhYmxlZD0ke3ZhbHVlSW5kZXggPT09IDB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB0aGlzLm1vdmVUb1RvcCh2YWx1ZSwgdmFsdWVJbmRleCl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICR7aWNvbigna2V5Ym9hcmQtZG91YmxlLXVwLWljb24nKX1cbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAuZGlzYWJsZWQ9JHt0aGlzLnJlc291cmNlRGVmaW5pdGlvbi52YWx1ZXMubGVuZ3RoID09PSAxfVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb24tYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5kZWxldGVSZXNvdXJjZVZhbHVlKHZhbHVlLCB2YWx1ZUluZGV4KX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgJHtpY29uKCdkZWxldGUtaWNvbicpfVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPC90cj5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICl9XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPjwvdGQ+XG4gICAgICAgICAgICA8dGQ+PC90ZD5cbiAgICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICAgICAgPHRkPjwvdGQ+XG4gICAgICAgICAgICA8dGQ+PC90ZD5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMubmV3UmVzb3VyY2VWYWx1ZSgpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBOZXdcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaWFsb2ctZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9JHsoKSA9PiB0aGlzLmNhbmNlbCgpfT5DbG9zZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGlhbG9nPlxuICAgIGA7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdlZGl0LXJlc291cmNlLWRlZmluaXRpb24nLCBFZGl0UmVzb3VyY2VEZWZpbml0aW9uKTtcbiIsICIvLyBVdGlsaXRpZXMgZm9yIGRlYWxpbmcgd2l0aCBhIHJhbmdlIG9mIG51bWJlcnMuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0cmljUmFuZ2VTZXJpYWxpemVkIHtcbiAgbWluOiBudW1iZXI7XG4gIG1heDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZGlzcGxheVZhbHVlID0gKHg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGlmICh4ID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgcmV0dXJuIFwiKG1heCBmbG9hdClcIjtcbiAgfSBlbHNlIGlmICh4ID09PSAtTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgIHJldHVybiBcIihtaW4gZmxvYXQpXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHgudG9TdHJpbmcoKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNsYW1wID0gKHg6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgaWYgKHggPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIGlmICh4IDwgbWluKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuICByZXR1cm4geDtcbn07XG5cbi8vIFJhbmdlIGRlZmluZXMgYSByYW5nZSBvZiBudW1iZXJzLCBmcm9tIFttaW4sIG1heF0gaW5jbHVzaXZlLlxuZXhwb3J0IGNsYXNzIE1ldHJpY1JhbmdlIHtcbiAgcHJpdmF0ZSBfbWluOiBudW1iZXIgPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgcHJpdmF0ZSBfbWF4OiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gIGNvbnN0cnVjdG9yKG1pbjogbnVtYmVyID0gLU51bWJlci5NQVhfVkFMVUUsIG1heDogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgIGlmIChtYXggPCBtaW4pIHtcbiAgICAgIFttaW4sIG1heF0gPSBbbWF4LCBtaW5dO1xuICAgIH1cbiAgICB0aGlzLl9taW4gPSBtaW47XG4gICAgdGhpcy5fbWF4ID0gbWF4O1xuICB9XG5cbiAgY2xhbXAodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGNsYW1wKHZhbHVlLCB0aGlzLl9taW4sIHRoaXMuX21heCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1pbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9taW47XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXg7XG4gIH1cblxuICB0b0pTT04oKTogTWV0cmljUmFuZ2VTZXJpYWxpemVkIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWluOiB0aGlzLl9taW4sXG4gICAgICBtYXg6IHRoaXMuX21heCxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZyb21KU09OKHM6IE1ldHJpY1JhbmdlU2VyaWFsaXplZCB8IHVuZGVmaW5lZCk6IE1ldHJpY1JhbmdlIHtcbiAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmV3IE1ldHJpY1JhbmdlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWV0cmljUmFuZ2Uocy5taW4sIHMubWF4KTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFJvdW5kZXIgfSBmcm9tIFwiLi4vdHlwZXMvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQcmVjaXNpb25TZXJpYWxpemVkIHtcbiAgcHJlY2lzaW9uOiBudW1iZXI7XG59XG5leHBvcnQgY2xhc3MgUHJlY2lzaW9uIHtcbiAgcHJpdmF0ZSBfcHJlY2lzaW9uOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJlY2lzaW9uOiBudW1iZXIgPSAwKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUocHJlY2lzaW9uKSkge1xuICAgICAgcHJlY2lzaW9uID0gMDtcbiAgICB9XG4gICAgdGhpcy5fcHJlY2lzaW9uID0gTWF0aC5hYnMoTWF0aC50cnVuYyhwcmVjaXNpb24pKTtcbiAgfVxuXG4gIHJvdW5kKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuICt4LnRvRml4ZWQodGhpcy5fcHJlY2lzaW9uKTtcbiAgfVxuXG4gIHJvdW5kZXIoKTogUm91bmRlciB7XG4gICAgcmV0dXJuICh4OiBudW1iZXIpOiBudW1iZXIgPT4gdGhpcy5yb3VuZCh4KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcHJlY2lzaW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWNpc2lvbjtcbiAgfVxuXG4gIHRvSlNPTigpOiBQcmVjaXNpb25TZXJpYWxpemVkIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlY2lzaW9uOiB0aGlzLl9wcmVjaXNpb24sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSlNPTihzOiBQcmVjaXNpb25TZXJpYWxpemVkIHwgdW5kZWZpbmVkKTogUHJlY2lzaW9uIHtcbiAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmV3IFByZWNpc2lvbigpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByZWNpc2lvbihzLnByZWNpc2lvbik7XG4gIH1cbn1cbiIsICIvLyBNZXRyaWNzIGRlZmluZSBmbG9hdGluZyBwb2ludCB2YWx1ZXMgdGhhdCBhcmUgdHJhY2tlZCBwZXIgVGFzay5cblxuaW1wb3J0IHsgUHJlY2lzaW9uLCBQcmVjaXNpb25TZXJpYWxpemVkIH0gZnJvbSAnLi4vcHJlY2lzaW9uL3ByZWNpc2lvbi50cyc7XG5pbXBvcnQgeyBNZXRyaWNSYW5nZSwgTWV0cmljUmFuZ2VTZXJpYWxpemVkIH0gZnJvbSAnLi9yYW5nZS50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0cmljRGVmaW5pdGlvblNlcmlhbGl6ZWQge1xuICByYW5nZTogTWV0cmljUmFuZ2VTZXJpYWxpemVkO1xuICBkZWZhdWx0OiBudW1iZXI7XG4gIHByZWNpc2lvbjogUHJlY2lzaW9uU2VyaWFsaXplZDtcbn1cblxuZXhwb3J0IGNsYXNzIE1ldHJpY0RlZmluaXRpb24ge1xuICByYW5nZTogTWV0cmljUmFuZ2U7XG4gIGRlZmF1bHQ6IG51bWJlcjtcbiAgaXNTdGF0aWM6IGJvb2xlYW47XG4gIHByZWNpc2lvbjogUHJlY2lzaW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIHJhbmdlOiBNZXRyaWNSYW5nZSA9IG5ldyBNZXRyaWNSYW5nZSgpLFxuICAgIGlzU3RhdGljOiBib29sZWFuID0gZmFsc2UsXG4gICAgcHJlY2lzaW9uOiBQcmVjaXNpb24gPSBuZXcgUHJlY2lzaW9uKDEpXG4gICkge1xuICAgIHRoaXMucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcbiAgICB0aGlzLmRlZmF1bHQgPSBkZWZhdWx0VmFsdWU7XG4gICAgdGhpcy5pc1N0YXRpYyA9IGlzU3RhdGljO1xuICAgIHRoaXMucmF0aW9uYWxpemUoKTtcbiAgfVxuXG4gIHJhdGlvbmFsaXplKCkge1xuICAgIC8vIG1pbiBhbmQgbWF4IHNob3VsZCBiZSByb3VuZGVkIHRvIHByZWNpc2lvbiBmaXJzdC4gYW5kIHRoZW4gY2xhbXAgYW5kXG4gICAgLy8gcHJlY2lzaW9uIGFwcGxpZWQgdG8gdGhlIGRlZmF1bHQuXG4gICAgdGhpcy5yYW5nZSA9IG5ldyBNZXRyaWNSYW5nZShcbiAgICAgIHRoaXMucHJlY2lzaW9uLnJvdW5kKHRoaXMucmFuZ2UubWluKSxcbiAgICAgIHRoaXMucHJlY2lzaW9uLnJvdW5kKHRoaXMucmFuZ2UubWF4KVxuICAgICk7XG4gICAgLy8gbWluIGFuZCBtYXggc2hvdWxkIGJlIHJvdW5kZWQgdG8gcHJlY2lzaW9uIGZpcnN0LiBhbmQgdGhlbiBjbGFtcCBhbmRcbiAgICAvLyBwcmVjaXNpb24gYXBwbGllZCB0byB0aGUgZGVmYXVsdC5cbiAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmNsYW1wQW5kUm91bmQodGhpcy5kZWZhdWx0KTtcbiAgfVxuXG4gIGNsYW1wQW5kUm91bmQoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wcmVjaXNpb24ucm91bmQodGhpcy5yYW5nZS5jbGFtcCh4KSk7XG4gIH1cblxuICB0b0pTT04oKTogTWV0cmljRGVmaW5pdGlvblNlcmlhbGl6ZWQge1xuICAgIHJldHVybiB7XG4gICAgICByYW5nZTogdGhpcy5yYW5nZS50b0pTT04oKSxcbiAgICAgIGRlZmF1bHQ6IHRoaXMuZGVmYXVsdCxcbiAgICAgIHByZWNpc2lvbjogdGhpcy5wcmVjaXNpb24udG9KU09OKCksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSlNPTihzOiBNZXRyaWNEZWZpbml0aW9uU2VyaWFsaXplZCB8IHVuZGVmaW5lZCk6IE1ldHJpY0RlZmluaXRpb24ge1xuICAgIGlmIChzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuZXcgTWV0cmljRGVmaW5pdGlvbigwKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNZXRyaWNEZWZpbml0aW9uKFxuICAgICAgcy5kZWZhdWx0IHx8IDAsXG4gICAgICBNZXRyaWNSYW5nZS5mcm9tSlNPTihzLnJhbmdlKSxcbiAgICAgIGZhbHNlLFxuICAgICAgUHJlY2lzaW9uLmZyb21KU09OKHMucHJlY2lzaW9uKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgTWV0cmljRGVmaW5pdGlvbnMgPSB7IFtrZXk6IHN0cmluZ106IE1ldHJpY0RlZmluaXRpb24gfTtcblxuZXhwb3J0IHR5cGUgTWV0cmljRGVmaW5pdGlvbnNTZXJpYWxpemVkID0ge1xuICBba2V5OiBzdHJpbmddOiBNZXRyaWNEZWZpbml0aW9uU2VyaWFsaXplZDtcbn07XG5cbmV4cG9ydCB0eXBlIE1ldHJpY1ZhbHVlcyA9IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tICcuLi9leHBsYW5NYWluL2V4cGxhbk1haW4nO1xuaW1wb3J0IHsgaWNvbiB9IGZyb20gJy4uL2ljb25zL2ljb25zJztcbmltcG9ydCB7IGRpc3BsYXlWYWx1ZSB9IGZyb20gJy4uL21ldHJpY3MvcmFuZ2UnO1xuaW1wb3J0IHsgZXhlY3V0ZU9wIH0gZnJvbSAnLi4vYWN0aW9uL2V4ZWN1dGUnO1xuaW1wb3J0IHsgQWRkTWV0cmljT3AsIERlbGV0ZU1ldHJpY09wIH0gZnJvbSAnLi4vb3BzL21ldHJpY3MnO1xuaW1wb3J0IHsgTWV0cmljRGVmaW5pdGlvbiB9IGZyb20gJy4uL21ldHJpY3MvbWV0cmljcyc7XG5pbXBvcnQgeyBFZGl0TWV0cmljRGVmaW5pdGlvbiB9IGZyb20gJy4uL2VkaXQtbWV0cmljLWRlZmluaXRpb24vZWRpdC1tZXRyaWMtZGVmaW5pdGlvbic7XG5pbXBvcnQgeyByZXBvcnRFcnJvck1zZywgcmVwb3J0SWZFcnJvciB9IGZyb20gJy4uL3JlcG9ydC1lcnJvci9yZXBvcnQtZXJyb3InO1xuaW1wb3J0IHsgUHJvbXB0RGlhbG9nIH0gZnJvbSAnLi4vcHJvbXB0LWRpYWxvZy9wcm9tcHQtZGlhbG9nJztcblxuZXhwb3J0IGNsYXNzIEVkaXRNZXRyaWNzUGFuZWwgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGV4cGxhbk1haW46IEV4cGxhbk1haW4gfCBudWxsID0gbnVsbDtcbiAgcGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZXhwbGFuTWFpbiAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ3BsYW4tZGVmaW5pdGlvbi1jaGFuZ2VkJyxcbiAgICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcsXG4gICAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgc2V0Q29uZmlnKGV4cGxhbk1haW46IEV4cGxhbk1haW4pIHtcbiAgICB0aGlzLmV4cGxhbk1haW4gPSBleHBsYW5NYWluO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCBtZCA9IHRoaXMuZXhwbGFuTWFpbiEucGxhbi5tZXRyaWNEZWZpbml0aW9ucztcbiAgICBjb25zdCBhbGxLZXlzU29ydGVkID0gT2JqZWN0LmtleXMobWQpLnNvcnQoXG4gICAgICAoa2V5QTogc3RyaW5nLCBrZXlCOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgICAgICBjb25zdCBhID0gbWRba2V5QV07XG4gICAgICAgIGNvbnN0IGIgPSBtZFtrZXlCXTtcbiAgICAgICAgaWYgKGEuaXNTdGF0aWMgPT09IGIuaXNTdGF0aWMpIHtcbiAgICAgICAgICByZXR1cm4ga2V5QS5sb2NhbGVDb21wYXJlKGtleUIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLmlzU3RhdGljKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGh0bWxgIDxoMz5NZXRyaWNzPC9oMz5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICA8dGg+TWluPC90aD5cbiAgICAgICAgICA8dGg+TWF4PC90aD5cbiAgICAgICAgICA8dGg+RGVmYXVsdDwvdGg+XG4gICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgIDwvdHI+XG5cbiAgICAgICAgJHthbGxLZXlzU29ydGVkLm1hcCgobWV0cmljTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWV0cmljRGVmbiA9XG4gICAgICAgICAgICB0aGlzLmV4cGxhbk1haW4hLnBsYW4ubWV0cmljRGVmaW5pdGlvbnNbbWV0cmljTmFtZV07XG4gICAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD4ke21ldHJpY05hbWV9PC90ZD5cbiAgICAgICAgICAgICAgPHRkPiR7ZGlzcGxheVZhbHVlKG1ldHJpY0RlZm4ucmFuZ2UubWluKX08L3RkPlxuICAgICAgICAgICAgICA8dGQ+JHtkaXNwbGF5VmFsdWUobWV0cmljRGVmbi5yYW5nZS5tYXgpfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD4ke21ldHJpY0RlZm4uZGVmYXVsdH08L3RkPlxuICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgJHt0aGlzLmRlbEJ1dHRvbklmTm90U3RhdGljKG1ldHJpY05hbWUsIG1ldHJpY0RlZm4uaXNTdGF0aWMpfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgJHt0aGlzLmVkaXRCdXR0b25JZk5vdFN0YXRpYyhtZXRyaWNOYW1lLCBtZXRyaWNEZWZuLmlzU3RhdGljKX1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgYDtcbiAgICAgICAgfSl9XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQ+PC90ZD5cbiAgICAgICAgICA8dGQ+PC90ZD5cbiAgICAgICAgICA8dGQ+PC90ZD5cbiAgICAgICAgICA8dGQ+PC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICAgICAgICB0aXRsZT1cIkFkZCBhIG5ldyBSZXNvdXJjZS5cIlxuICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXdNZXRyaWMoKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgJHtpY29uKCdhZGQtaWNvbicpfVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+YDtcbiAgfVxuXG4gIHByaXZhdGUgZGVsQnV0dG9uSWZOb3RTdGF0aWMoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGlzU3RhdGljOiBib29sZWFuXG4gICk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBpZiAoaXNTdGF0aWMpIHtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuICAgIHJldHVybiBodG1sYDxidXR0b25cbiAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgdGl0bGU9XCJEZWxldGUgdGhpcyBtZXRyaWMuXCJcbiAgICAgIEBjbGljaz0keygpID0+IHRoaXMuZGVsZXRlTWV0cmljKG5hbWUpfVxuICAgID5cbiAgICAgICR7aWNvbignZGVsZXRlLWljb24nKX1cbiAgICA8L2J1dHRvbj5gO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBkZWxldGVNZXRyaWMobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZU9wKFxuICAgICAgRGVsZXRlTWV0cmljT3AobmFtZSksXG4gICAgICAncGxhbkRlZmluaXRpb25DaGFuZ2VkJyxcbiAgICAgIHRydWUsXG4gICAgICB0aGlzLmV4cGxhbk1haW4hXG4gICAgKTtcbiAgICByZXBvcnRJZkVycm9yKHJldCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgZWRpdEJ1dHRvbklmTm90U3RhdGljKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBpc1N0YXRpYzogYm9vbGVhblxuICApOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKGlzU3RhdGljKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbGA8YnV0dG9uXG4gICAgICBjbGFzcz1cImljb24tYnV0dG9uXCJcbiAgICAgIHRpdGxlPVwiRWRpdCB0aGUgcmVzb3VyY2UgZGVmaW5pdGlvbi5cIlxuICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5lZGl0TWV0cmljKG5hbWUpfVxuICAgID5cbiAgICAgICR7aWNvbignZWRpdC1pY29uJyl9XG4gICAgPC9idXR0b24+YDtcbiAgfVxuXG4gIHByaXZhdGUgZWRpdE1ldHJpYyhuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmV4cGxhbk1haW4hLnF1ZXJ5U2VsZWN0b3I8RWRpdE1ldHJpY0RlZmluaXRpb24+KFxuICAgICAgJ2VkaXQtbWV0cmljLWRlZmluaXRpb24nXG4gICAgKSEuc2hvd01vZGFsKHRoaXMuZXhwbGFuTWFpbiEsIG5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBuZXdNZXRyaWMoKSB7XG4gICAgbGV0IG5hbWUgPSBhd2FpdCBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3I8UHJvbXB0RGlhbG9nPigncHJvbXB0LWRpYWxvZycpIVxuICAgICAgLnByb21wdCgnTWV0cmljIE5hbWUnKTtcbiAgICBpZiAobmFtZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuYW1lID0gbmFtZS50cmltKCk7XG4gICAgaWYgKG5hbWUgPT09ICcnKSB7XG4gICAgICByZXBvcnRFcnJvck1zZyhcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICdNZXRyaWMgbmFtZXMgY2Fubm90IGJlIGVtcHR5IGFuZCBtdXN0IGNvbnRhaW4gbW9yZSB0aGFuIHdoaXRlc3BhY2UgY2hhcmFjdGVycy4nXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZU9wKFxuICAgICAgQWRkTWV0cmljT3AobmFtZSwgbmV3IE1ldHJpY0RlZmluaXRpb24oMCkpLFxuICAgICAgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5leHBsYW5NYWluIVxuICAgICk7XG4gICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdlZGl0LW1ldHJpY3MtcGFuZWwnLCBFZGl0TWV0cmljc1BhbmVsKTtcbiIsICJpbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgcmVuZGVyIH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gJy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpbic7XG5pbXBvcnQgeyBsaXZlIH0gZnJvbSAnbGl0LWh0bWwvZGlyZWN0aXZlcy9saXZlLmpzJztcbmltcG9ydCB7IE1ldHJpY1JhbmdlLCBkaXNwbGF5VmFsdWUgfSBmcm9tICcuLi9tZXRyaWNzL3JhbmdlJztcbmltcG9ydCB7IFJlbmFtZU1ldHJpY09wLCBVcGRhdGVNZXRyaWNPcCB9IGZyb20gJy4uL29wcy9tZXRyaWNzJztcbmltcG9ydCB7IE1ldHJpY0RlZmluaXRpb24gfSBmcm9tICcuLi9tZXRyaWNzL21ldHJpY3MnO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi4vcmVzdWx0JztcbmltcG9ydCB7IE9wIH0gZnJvbSAnLi4vb3BzL29wcyc7XG5pbXBvcnQgeyBleGVjdXRlT3AgfSBmcm9tICcuLi9hY3Rpb24vZXhlY3V0ZSc7XG5pbXBvcnQgeyByZXBvcnRFcnJvck1zZyB9IGZyb20gJy4uL3JlcG9ydC1lcnJvci9yZXBvcnQtZXJyb3InO1xuaW1wb3J0IHsgUHJlY2lzaW9uIH0gZnJvbSAnLi4vcHJlY2lzaW9uL3ByZWNpc2lvbic7XG5cbmV4cG9ydCBjbGFzcyBFZGl0TWV0cmljRGVmaW5pdGlvbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgZXhwbGFuTWFpbjogRXhwbGFuTWFpbiB8IG51bGwgPSBudWxsO1xuICBtZXRyaWNOYW1lOiBzdHJpbmcgPSAnJztcbiAgcGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcsXG4gICAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAncGxhbi1kZWZpbml0aW9uLWNoYW5nZWQnLFxuICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlcigpIHtcbiAgICByZW5kZXIodGhpcy50ZW1wbGF0ZSgpLCB0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgdGVtcGxhdGUoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0IGRlZm4gPSB0aGlzLmV4cGxhbk1haW4/LnBsYW4ubWV0cmljRGVmaW5pdGlvbnNbdGhpcy5tZXRyaWNOYW1lXTtcbiAgICBpZiAoIWRlZm4pIHtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuICAgIHJldHVybiBodG1sYDxkaWFsb2c+XG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIC52YWx1ZT0ke2xpdmUodGhpcy5tZXRyaWNOYW1lKX1cbiAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBFdmVudCkgPT4gdGhpcy5uYW1lQ2hhbmdlKGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPk1pbjwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIC52YWx1ZT0ke2xpdmUoZGlzcGxheVZhbHVlKGRlZm4ucmFuZ2UubWluKSl9XG4gICAgICAgICAgICAgID9kaXNhYmxlZD0ke2RlZm4ucmFuZ2UubWluID09PSAtTnVtYmVyLk1BWF9WQUxVRX1cbiAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBFdmVudCkgPT4gdGhpcy5taW5DaGFuZ2UoZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgID9jaGVja2VkPSR7ZGVmbi5yYW5nZS5taW4gIT09IC1OdW1iZXIuTUFYX1ZBTFVFfVxuICAgICAgICAgICAgICAgIEBjaGFuZ2U9JHsoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMubWluTGltaXRDaGFuZ2UoZSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgTGltaXQ8L2xhYmVsXG4gICAgICAgICAgICA+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5NYXg8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAudmFsdWU9JHtsaXZlKGRpc3BsYXlWYWx1ZShkZWZuLnJhbmdlLm1heCkpfVxuICAgICAgICAgICAgICA/ZGlzYWJsZWQ9JHtkZWZuLnJhbmdlLm1heCA9PT0gTnVtYmVyLk1BWF9WQUxVRX1cbiAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBFdmVudCkgPT4gdGhpcy5tYXhDaGFuZ2UoZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgID9jaGVja2VkPSR7ZGVmbi5yYW5nZS5tYXggIT09IE51bWJlci5NQVhfVkFMVUV9XG4gICAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5tYXhMaW1pdENoYW5nZShlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICBMaW1pdDwvbGFiZWxcbiAgICAgICAgICAgID5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPlByZWNpc2lvbjwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIC52YWx1ZT0ke2xpdmUoZGVmbi5wcmVjaXNpb24ucHJlY2lzaW9uKX1cbiAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlY2lzaW9uQ2hhbmdlKGUpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPkRlZmF1bHQ8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAudmFsdWU9JHtsaXZlKGRlZm4uZGVmYXVsdCl9XG4gICAgICAgICAgICAgIEBjaGFuZ2U9JHsoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRDaGFuZ2UoZSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkPjwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3RhYmxlPlxuICAgICAgPGRpdiBjbGFzcz1cImRpYWxvZy1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiBAY2xpY2s9JHsoKSA9PiB0aGlzLmNhbmNlbCgpfT5DbG9zZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaWFsb2c+YDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZXhlY3V0ZU9wKG9wOiBPcCk6IFByb21pc2U8UmVzdWx0PG51bGw+PiB7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgZXhlY3V0ZU9wKFxuICAgICAgb3AsXG4gICAgICAncGxhbkRlZmluaXRpb25DaGFuZ2VkJyxcbiAgICAgIHRydWUsXG4gICAgICB0aGlzLmV4cGxhbk1haW4hXG4gICAgKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgd2luZG93LmFsZXJ0KHJldC5lcnJvcik7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG1pbkxpbWl0Q2hhbmdlKGU6IEV2ZW50KSB7XG4gICAgY29uc3QgZWxlID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBkZWZuID0gdGhpcy5nZXREZWZpbml0aW9uQ29weSgpO1xuICAgIGlmIChlbGUuY2hlY2tlZCkge1xuICAgICAgY29uc3QgbmV3TWluID0gMCA8IGRlZm4ucmFuZ2UubWF4ID8gMCA6IGRlZm4ucmFuZ2UubWF4IC0gMTtcbiAgICAgIGRlZm4ucmFuZ2UgPSBuZXcgTWV0cmljUmFuZ2UobmV3TWluLCBkZWZuLnJhbmdlLm1heCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZm4ucmFuZ2UgPSBuZXcgTWV0cmljUmFuZ2UoLU51bWJlci5NQVhfVkFMVUUsIGRlZm4ucmFuZ2UubWF4KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVNZXRyaWNEZWZpbml0aW9uKGRlZm4pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYXhMaW1pdENoYW5nZShlOiBFdmVudCkge1xuICAgIGNvbnN0IGVsZSA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgZGVmbiA9IHRoaXMuZ2V0RGVmaW5pdGlvbkNvcHkoKTtcbiAgICBpZiAoZWxlLmNoZWNrZWQpIHtcbiAgICAgIGNvbnN0IG5ld01heCA9IDEwMCA+IGRlZm4ucmFuZ2UubWluID8gMTAwIDogZGVmbi5yYW5nZS5taW4gKyAxO1xuICAgICAgZGVmbi5yYW5nZSA9IG5ldyBNZXRyaWNSYW5nZShkZWZuLnJhbmdlLm1pbiwgbmV3TWF4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmbi5yYW5nZSA9IG5ldyBNZXRyaWNSYW5nZShkZWZuLnJhbmdlLm1pbiwgTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlTWV0cmljRGVmaW5pdGlvbihkZWZuKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbmFtZUNoYW5nZShlOiBFdmVudCkge1xuICAgIGNvbnN0IGVsZSA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3Qgb2xkTmFtZSA9IHRoaXMubWV0cmljTmFtZTtcbiAgICBjb25zdCBuZXdOYW1lID0gZWxlLnZhbHVlO1xuICAgIHRoaXMubWV0cmljTmFtZSA9IG5ld05hbWU7XG4gICAgY29uc3QgcmV0ID0gYXdhaXQgdGhpcy5leGVjdXRlT3AoUmVuYW1lTWV0cmljT3Aob2xkTmFtZSwgbmV3TmFtZSkpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICB0aGlzLm1ldHJpY05hbWUgPSBvbGROYW1lO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBkZWZhdWx0Q2hhbmdlKGU6IEV2ZW50KSB7XG4gICAgY29uc3QgZWxlID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBkZWZuID0gdGhpcy5nZXREZWZpbml0aW9uQ29weSgpO1xuICAgIGRlZm4uZGVmYXVsdCA9ICtlbGUudmFsdWU7XG4gICAgdGhpcy51cGRhdGVNZXRyaWNEZWZpbml0aW9uKGRlZm4pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwcmVjaXNpb25DaGFuZ2UoZTogRXZlbnQpIHtcbiAgICBjb25zdCBlbGUgPSBlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNvbnN0IGRlZm4gPSB0aGlzLmdldERlZmluaXRpb25Db3B5KCk7XG4gICAgZGVmbi5wcmVjaXNpb24gPSBuZXcgUHJlY2lzaW9uKCtlbGUudmFsdWUpO1xuICAgIHRoaXMudXBkYXRlTWV0cmljRGVmaW5pdGlvbihkZWZuKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbWluQ2hhbmdlKGU6IEV2ZW50KSB7XG4gICAgY29uc3QgZWxlID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBuZXdWYWx1ZSA9ICtlbGUudmFsdWU7XG4gICAgY29uc3QgZGVmaW5pdGlvbkNvcHkgPSB0aGlzLmdldERlZmluaXRpb25Db3B5KCk7XG4gICAgZGVmaW5pdGlvbkNvcHkucmFuZ2UgPSBuZXcgTWV0cmljUmFuZ2UobmV3VmFsdWUsIGRlZmluaXRpb25Db3B5IS5yYW5nZS5tYXgpO1xuICAgIHRoaXMudXBkYXRlTWV0cmljRGVmaW5pdGlvbihkZWZpbml0aW9uQ29weSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG1heENoYW5nZShlOiBFdmVudCkge1xuICAgIGNvbnN0IGVsZSA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgbmV3VmFsdWUgPSArZWxlLnZhbHVlO1xuICAgIGNvbnN0IGRlZmluaXRpb25Db3B5ID0gdGhpcy5nZXREZWZpbml0aW9uQ29weSgpO1xuICAgIGRlZmluaXRpb25Db3B5LnJhbmdlID0gbmV3IE1ldHJpY1JhbmdlKGRlZmluaXRpb25Db3B5IS5yYW5nZS5taW4sIG5ld1ZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZU1ldHJpY0RlZmluaXRpb24oZGVmaW5pdGlvbkNvcHkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1cGRhdGVNZXRyaWNEZWZpbml0aW9uKG5ld0RlZjogTWV0cmljRGVmaW5pdGlvbikge1xuICAgIG5ld0RlZi5yYXRpb25hbGl6ZSgpO1xuICAgIGNvbnN0IHJldCA9IGF3YWl0IHRoaXMuZXhlY3V0ZU9wKFVwZGF0ZU1ldHJpY09wKHRoaXMubWV0cmljTmFtZSwgbmV3RGVmKSk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJlcG9ydEVycm9yTXNnKHJldC5lcnJvcik7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIGdldERlZmluaXRpb25Db3B5KCk6IE1ldHJpY0RlZmluaXRpb24ge1xuICAgIGNvbnN0IGRlZm4gPSB0aGlzLmV4cGxhbk1haW4/LnBsYW4ubWV0cmljRGVmaW5pdGlvbnNbdGhpcy5tZXRyaWNOYW1lXTtcbiAgICByZXR1cm4gTWV0cmljRGVmaW5pdGlvbi5mcm9tSlNPTihkZWZuPy50b0pTT04oKSk7XG4gIH1cblxuICBwcml2YXRlIGNhbmNlbCgpIHtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTERpYWxvZ0VsZW1lbnQ+KCdkaWFsb2cnKSEuY2xvc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93TW9kYWwoZXhwbGFuTWFpbjogRXhwbGFuTWFpbiwgbWV0cmljTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5leHBsYW5NYWluID0gZXhwbGFuTWFpbjtcbiAgICB0aGlzLm1ldHJpY05hbWUgPSBtZXRyaWNOYW1lO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxEaWFsb2dFbGVtZW50PignZGlhbG9nJykhLnNob3dNb2RhbCgpO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZWRpdC1tZXRyaWMtZGVmaW5pdGlvbicsIEVkaXRNZXRyaWNEZWZpbml0aW9uKTtcbiIsICJpbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCwgaHRtbCwgcmVuZGVyIH0gZnJvbSBcImxpdC1odG1sXCI7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSBcIi4uL2NoYXJ0L2NoYXJ0LnRzXCI7XG5pbXBvcnQgeyBpY29uIH0gZnJvbSBcIi4uL2ljb25zL2ljb25zLnRzXCI7XG5cbmV4cG9ydCB0eXBlIERlcFR5cGUgPSBcInByZWRcIiB8IFwic3VjY1wiO1xuXG5leHBvcnQgY29uc3QgZGVwRGlzcGxheU5hbWU6IFJlY29yZDxEZXBUeXBlLCBzdHJpbmc+ID0ge1xuICBwcmVkOiBcIlByZWRlY2Vzc29yc1wiLFxuICBzdWNjOiBcIlN1Y2Nlc3NvcnNcIixcbn07XG5cbmludGVyZmFjZSBEZXBlbmVuY3lFdmVudCB7XG4gIHRhc2tJbmRleDogbnVtYmVyO1xuICBkZXBUeXBlOiBEZXBUeXBlO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAge1xuICAgIFwiZGVsZXRlLWRlcGVuZGVuY3lcIjogQ3VzdG9tRXZlbnQ8RGVwZW5lbmN5RXZlbnQ+O1xuICAgIFwiYWRkLWRlcGVuZGVuY3lcIjogQ3VzdG9tRXZlbnQ8RGVwZW5lbmN5RXZlbnQ+O1xuICB9XG59XG5cbmNvbnN0IGtpbmRUZW1wbGF0ZSA9IChcbiAgZGVwZW5kZW5jaWVzQ29udHJvbDogRGVwZW5kZW5jaWVzUGFuZWwsXG4gIGRlcFR5cGU6IERlcFR5cGUsXG4gIGluZGV4ZXM6IG51bWJlcltdLFxuKTogVGVtcGxhdGVSZXN1bHQgPT4gaHRtbGBcbiAgPHRyPlxuICAgIDx0aD4ke2RlcERpc3BsYXlOYW1lW2RlcFR5cGVdfTwvdGg+XG4gICAgPHRoPjwvdGg+XG4gIDwvdHI+XG4gICR7aW5kZXhlcy5tYXAoKHRhc2tJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgdGFzayA9IGRlcGVuZGVuY2llc0NvbnRyb2wudGFza3NbdGFza0luZGV4XTtcbiAgICByZXR1cm4gaHRtbGA8dHI+XG4gICAgICA8dGQ+JHt0YXNrLm5hbWV9PC90ZD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICAgIHRpdGxlPVwiRGVsZXRlIHRoZSBkZXBlbmRlbmN5IG9uICR7dGFzay5uYW1lfVwiXG4gICAgICAgICAgQGNsaWNrPSR7KCkgPT4gZGVwZW5kZW5jaWVzQ29udHJvbC5kZWxldGVEZXAodGFza0luZGV4LCBkZXBUeXBlKX1cbiAgICAgICAgPlxuICAgICAgICAgICR7aWNvbihcImRlbGV0ZS1pY29uXCIpfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5gO1xuICB9KX1cbiAgPHRyPlxuICAgIDx0ZD48L3RkPlxuICAgIDx0ZD5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3M9XCJpY29uLWJ1dHRvblwiXG4gICAgICAgIEBjbGljaz0keygpID0+IGRlcGVuZGVuY2llc0NvbnRyb2wuYWRkRGVwKGRlcFR5cGUpfVxuICAgICAgICB0aXRsZT1cIkFkZCBkZXBlbmRlbmN5LlwiXG4gICAgICA+XG4gICAgICAgICR7aWNvbihcImFkZC1pY29uXCIpfVxuICAgICAgPC9idXR0b24+XG4gICAgPC90ZD5cbiAgPC90cj5cbmA7XG5cbmNvbnN0IHRlbXBsYXRlID0gKFxuICBkZXBlbmRlbmNpZXNDb250cm9sOiBEZXBlbmRlbmNpZXNQYW5lbCxcbik6IFRlbXBsYXRlUmVzdWx0ID0+IGh0bWxgXG4gIDx0YWJsZT5cbiAgICAke2tpbmRUZW1wbGF0ZShcbiAgICAgIGRlcGVuZGVuY2llc0NvbnRyb2wsXG4gICAgICBcInByZWRcIixcbiAgICAgIGRlcGVuZGVuY2llc0NvbnRyb2wucHJlZEluZGV4ZXMsXG4gICAgKX1cbiAgICAke2tpbmRUZW1wbGF0ZShcbiAgICAgIGRlcGVuZGVuY2llc0NvbnRyb2wsXG4gICAgICBcInN1Y2NcIixcbiAgICAgIGRlcGVuZGVuY2llc0NvbnRyb2wuc3VjY0luZGV4ZXMsXG4gICAgKX1cbiAgPC90YWJsZT5cbmA7XG5cbmV4cG9ydCBjbGFzcyBEZXBlbmRlbmNpZXNQYW5lbCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgdGFza3M6IFRhc2tbXSA9IFtdO1xuICBwcmVkSW5kZXhlczogbnVtYmVyW10gPSBbXTtcbiAgc3VjY0luZGV4ZXM6IG51bWJlcltdID0gW107XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgcmVuZGVyKHRlbXBsYXRlKHRoaXMpLCB0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRUYXNrc0FuZEluZGljZXMoXG4gICAgdGFza3M6IFRhc2tbXSxcbiAgICBwcmVkSW5kZXhlczogbnVtYmVyW10sXG4gICAgc3VjY0luZGV4ZXM6IG51bWJlcltdLFxuICApIHtcbiAgICB0aGlzLnRhc2tzID0gdGFza3M7XG4gICAgdGhpcy5wcmVkSW5kZXhlcyA9IHByZWRJbmRleGVzO1xuICAgIHRoaXMuc3VjY0luZGV4ZXMgPSBzdWNjSW5kZXhlcztcbiAgICByZW5kZXIodGVtcGxhdGUodGhpcyksIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZURlcCh0YXNrSW5kZXg6IG51bWJlciwgZGVwVHlwZTogRGVwVHlwZSkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudChcImRlbGV0ZS1kZXBlbmRlbmN5XCIsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdGFza0luZGV4OiB0YXNrSW5kZXgsXG4gICAgICAgICAgZGVwVHlwZTogZGVwVHlwZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYWRkRGVwKGRlcFR5cGU6IERlcFR5cGUpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJhZGQtZGVwZW5kZW5jeVwiLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIHRhc2tJbmRleDogLTEsXG4gICAgICAgICAgZGVwVHlwZTogZGVwVHlwZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZGVwZW5kZW5jaWVzLXBhbmVsXCIsIERlcGVuZGVuY2llc1BhbmVsKTtcbiIsICJpbXBvcnQge1xuICBWZXJ0ZXgsXG4gIFZlcnRleEluZGljZXMsXG4gIERpcmVjdGVkRWRnZSxcbiAgRGlyZWN0ZWRHcmFwaCxcbiAgZWRnZXNCeVNyY1RvTWFwLFxuICBlZGdlc0J5RHN0VG9NYXAsXG59IGZyb20gXCIuLi9kYWdcIjtcblxuLyoqIEEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgYXBwbGllZCB0byBhIFZlcnRleCwgdXNlZCBpbiBsYXRlciBmdW5jdGlvbnMgbGlrZVxuRGVwdGggRmlyc3QgU2VhcmNoIHRvIGRvIHdvcmsgb24gZXZlcnkgVmVydGV4IGluIGEgRGlyZWN0ZWRHcmFwaC5cbiAqL1xuZXhwb3J0IHR5cGUgdmVydGV4RnVuY3Rpb24gPSAodjogVmVydGV4LCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuO1xuXG4vKiogUmV0dXJucyB0aGUgaW5kZXggb2YgYWxsIFZlcnRpY2VzIHRoYXQgaGF2ZSBubyBpbmNvbWluZyBlZGdlLlxuICovXG5leHBvcnQgY29uc3Qgc2V0T2ZWZXJ0aWNlc1dpdGhOb0luY29taW5nRWRnZSA9IChcbiAgZzogRGlyZWN0ZWRHcmFwaCxcbik6IFZlcnRleEluZGljZXMgPT4ge1xuICBjb25zdCBub2Rlc1dpdGhJbmNvbWluZ0VkZ2VzID0gZWRnZXNCeURzdFRvTWFwKGcuRWRnZXMpO1xuICBjb25zdCByZXQ6IFZlcnRleEluZGljZXMgPSBbXTtcbiAgZy5WZXJ0aWNlcy5mb3JFYWNoKChfOiBWZXJ0ZXgsIGk6IG51bWJlcikgPT4ge1xuICAgIGlmICghbm9kZXNXaXRoSW5jb21pbmdFZGdlcy5oYXMoaSkpIHtcbiAgICAgIHJldC5wdXNoKGkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59O1xuXG4vKiogRGVzY2VuZHMgdGhlIGdyYXBoIGluIERlcHRoIEZpcnN0IFNlYXJjaCBhbmQgYXBwbGllcyB0aGUgZnVuY3Rpb24gYGZgIHRvXG5lYWNoIG5vZGUuXG4gKi9cbmV4cG9ydCBjb25zdCBkZXB0aEZpcnN0U2VhcmNoID0gKGc6IERpcmVjdGVkR3JhcGgsIGY6IHZlcnRleEZ1bmN0aW9uKSA9PiB7XG4gIHNldE9mVmVydGljZXNXaXRoTm9JbmNvbWluZ0VkZ2UoZykuZm9yRWFjaCgodmVydGV4SW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGRlcHRoRmlyc3RTZWFyY2hGcm9tSW5kZXgoZywgdmVydGV4SW5kZXgsIGYpO1xuICB9KTtcbn07XG5cbi8qKiBEZXB0aCBGaXJzdCBTZWFyY2ggc3RhcnRpbmcgYXQgVmVydGV4IGBzdGFydF9pbmRleGAuICovXG5leHBvcnQgY29uc3QgZGVwdGhGaXJzdFNlYXJjaEZyb21JbmRleCA9IChcbiAgZzogRGlyZWN0ZWRHcmFwaCxcbiAgc3RhcnRfaW5kZXg6IG51bWJlcixcbiAgZjogdmVydGV4RnVuY3Rpb24sXG4pID0+IHtcbiAgY29uc3QgZWRnZXNCeVNyYyA9IGVkZ2VzQnlTcmNUb01hcChnLkVkZ2VzKTtcblxuICBjb25zdCB2aXNpdCA9ICh2ZXJ0ZXhJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKGYoZy5WZXJ0aWNlc1t2ZXJ0ZXhJbmRleF0sIHZlcnRleEluZGV4KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IGVkZ2VzQnlTcmMuZ2V0KHZlcnRleEluZGV4KTtcbiAgICBpZiAobmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQuZm9yRWFjaCgoZTogRGlyZWN0ZWRFZGdlKSA9PiB7XG4gICAgICB2aXNpdChlLmopO1xuICAgIH0pO1xuICB9O1xuXG4gIHZpc2l0KHN0YXJ0X2luZGV4KTtcbn07XG4iLCAiaW1wb3J0IHtcbiAgRGlyZWN0ZWRFZGdlLFxuICBEaXJlY3RlZEdyYXBoLFxuICBlZGdlc0J5RHN0VG9NYXAsXG4gIGVkZ2VzQnlTcmNUb01hcCxcbn0gZnJvbSAnLi4vZGFnJztcbmltcG9ydCB7IGRlcHRoRmlyc3RTZWFyY2hGcm9tSW5kZXggfSBmcm9tICcuL2Rmcyc7XG5cbi8qKiBSZXR1cm5zIHRoZSBpbmRpY2VzIG9mIGFsbCB0aGUgc3VjY2Vzc29ycyBvZiB0aGUgdGFzayBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gKiAgTm90ZSB0aGF0IGluY2x1ZGVzIHRoZSBnaXZlbiBpbmRleCBpdHNlbGYuXG4gKi9cbmV4cG9ydCBjb25zdCBhbGxTdWNjZXNzb3JzID0gKFxuICB0YXNrSW5kZXg6IG51bWJlcixcbiAgZGlyZWN0ZWRHcmFwaDogRGlyZWN0ZWRHcmFwaFxuKTogbnVtYmVyW10gPT4ge1xuICBpZiAodGFza0luZGV4ID49IGRpcmVjdGVkR3JhcGguVmVydGljZXMubGVuZ3RoIC0gMSB8fCB0YXNrSW5kZXggPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBhbGxDaGlsZHJlbjogU2V0PG51bWJlcj4gPSBuZXcgU2V0KCk7XG4gIGRlcHRoRmlyc3RTZWFyY2hGcm9tSW5kZXgoXG4gICAgZGlyZWN0ZWRHcmFwaCxcbiAgICB0YXNrSW5kZXgsXG4gICAgKF86IHVua25vd24sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGFsbENoaWxkcmVuLmFkZChpbmRleCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICk7XG4gIGFsbENoaWxkcmVuLmRlbGV0ZShkaXJlY3RlZEdyYXBoLlZlcnRpY2VzLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gWy4uLmFsbENoaWxkcmVuLnZhbHVlcygpXTtcbn07XG5cbmV4cG9ydCBjb25zdCBhbGxQcmVkZWNlc3NvcnMgPSAoXG4gIHRhc2tJbmRleDogbnVtYmVyLFxuICBkaXJlY3RlZEdyYXBoOiBEaXJlY3RlZEdyYXBoXG4pOiBudW1iZXJbXSA9PiB7XG4gIGlmICh0YXNrSW5kZXggPj0gZGlyZWN0ZWRHcmFwaC5WZXJ0aWNlcy5sZW5ndGggLSAxIHx8IHRhc2tJbmRleCA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IHByZWRlY2Vzc29yc1RvQ2hlY2sgPSBbdGFza0luZGV4XTtcbiAgY29uc3QgcmV0OiBTZXQ8bnVtYmVyPiA9IG5ldyBTZXQoKTtcbiAgY29uc3QgYnlEZXN0ID0gZWRnZXNCeURzdFRvTWFwKGRpcmVjdGVkR3JhcGguRWRnZXMpO1xuICB3aGlsZSAocHJlZGVjZXNzb3JzVG9DaGVjay5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBub2RlID0gcHJlZGVjZXNzb3JzVG9DaGVjay5wb3AoKSE7XG4gICAgcmV0LmFkZChub2RlKTtcbiAgICBjb25zdCBwcmVkZWNlc3NvcnMgPSBieURlc3QuZ2V0KG5vZGUpO1xuICAgIGlmIChwcmVkZWNlc3NvcnMpIHtcbiAgICAgIHByZWRlY2Vzc29yc1RvQ2hlY2sucHVzaCguLi5wcmVkZWNlc3NvcnMubWFwKChlOiBEaXJlY3RlZEVkZ2UpID0+IGUuaSkpO1xuICAgIH1cbiAgfVxuICByZXQuZGVsZXRlKDApO1xuICByZXR1cm4gWy4uLnJldC52YWx1ZXMoKV07XG59O1xuXG4vKiogUmV0dXJucyB0aGUgaW5kaWNlcyBvZiBhbGwgdGhlIHRhc2tzIGluIHRoZSBncmFwaCwgZXhwZWN0IHRoZSBmaXJzdCBhbmQgdGhlXG4gKiAgbGFzdC4gKi9cbmV4cG9ydCBjb25zdCBhbGxUYXNrcyA9IChkaXJlY3RlZEdyYXBoOiBEaXJlY3RlZEdyYXBoKTogbnVtYmVyW10gPT4ge1xuICBjb25zdCByZXQgPSBbXTtcbiAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IGRpcmVjdGVkR3JhcGguVmVydGljZXMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgIHJldC5wdXNoKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuZXhwb3J0IGNvbnN0IGRpZmZlcmVuY2UgPSAoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyW10gPT4ge1xuICBjb25zdCBiU2V0ID0gbmV3IFNldChiKTtcbiAgcmV0dXJuIGEuZmlsdGVyKChpOiBudW1iZXIpID0+IGJTZXQuaGFzKGkpID09PSBmYWxzZSk7XG59O1xuXG5leHBvcnQgY29uc3QgYWxsUG90ZW50aWFsU3VjY2Vzc29ycyA9IChcbiAgdGFza0luZGV4OiBudW1iZXIsXG4gIGRpcmVjdGVkR3JhcGg6IERpcmVjdGVkR3JhcGhcbik6IG51bWJlcltdID0+IHtcbiAgLy8gUmVtb3ZlIGFsbCBkaXJlY3Qgc3VjY2Vzc29ycyBhbHNvLlxuICBjb25zdCBieVNyYyA9IGVkZ2VzQnlTcmNUb01hcChkaXJlY3RlZEdyYXBoLkVkZ2VzKTtcbiAgY29uc3QgZGlyZWN0U3VjYyA9IGJ5U3JjLmdldCh0YXNrSW5kZXgpIHx8IFtdO1xuICBjb25zdCBkaXJlY3RTdWNjQXJyYXkgPSBkaXJlY3RTdWNjLm1hcCgoZTogRGlyZWN0ZWRFZGdlKSA9PiBlLmopO1xuXG4gIHJldHVybiBkaWZmZXJlbmNlKGFsbFRhc2tzKGRpcmVjdGVkR3JhcGgpLCBbXG4gICAgLi4uYWxsUHJlZGVjZXNzb3JzKHRhc2tJbmRleCwgZGlyZWN0ZWRHcmFwaCksXG4gICAgLi4uZGlyZWN0U3VjY0FycmF5LFxuICBdKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhbGxQb3RlbnRpYWxQcmVkZWNlc3NvcnMgPSAoXG4gIHRhc2tJbmRleDogbnVtYmVyLFxuICBkaXJlY3RlZEdyYXBoOiBEaXJlY3RlZEdyYXBoXG4pOiBudW1iZXJbXSA9PiB7XG4gIC8vIFJlbW92ZSBhbGwgZGlyZWN0IHByZWRlY2Vzc29ycyBhbHNvLlxuICBjb25zdCBieURlc3QgPSBlZGdlc0J5RHN0VG9NYXAoZGlyZWN0ZWRHcmFwaC5FZGdlcyk7XG4gIGNvbnN0IGRpcmVjdFByZWQgPSBieURlc3QuZ2V0KHRhc2tJbmRleCkgfHwgW107XG4gIGNvbnN0IGRpcmVjdFByZWRBcnJheSA9IGRpcmVjdFByZWQubWFwKChlOiBEaXJlY3RlZEVkZ2UpID0+IGUuaSk7XG4gIGNvbnN0IGFsbFN1Y2MgPSBhbGxTdWNjZXNzb3JzKHRhc2tJbmRleCwgZGlyZWN0ZWRHcmFwaCk7XG4gIGNvbnN0IGFsbCA9IGFsbFRhc2tzKGRpcmVjdGVkR3JhcGgpO1xuICBjb25zdCB0b0JlU3VidHJhY3RlZCA9IFsuLi5hbGxTdWNjLCAuLi5kaXJlY3RQcmVkQXJyYXldO1xuICByZXR1cm4gZGlmZmVyZW5jZShhbGwsIHRvQmVTdWJ0cmFjdGVkKTtcbn07XG4iLCAiaW1wb3J0IHsgVGFza1NlYXJjaENvbnRyb2wgfSBmcm9tICcuLi9zZWFyY2gvdGFzay1zZWFyY2gtY29udHJvbHMnO1xuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tICcuLi9jaGFydC9jaGFydCc7XG5pbXBvcnQgeyBEZXBUeXBlLCBkZXBEaXNwbGF5TmFtZSB9IGZyb20gJy4uL2RlcGVuZGVuY2llcy9kZXBlbmRlbmNpZXMtcGFuZWwnO1xuaW1wb3J0IHtcbiAgYWxsUG90ZW50aWFsU3VjY2Vzc29ycyxcbiAgYWxsUG90ZW50aWFsUHJlZGVjZXNzb3JzLFxufSBmcm9tICcuLi9kYWcvYWxnb3JpdGhtcy9jaXJjdWxhcic7XG5cbmV4cG9ydCBjbGFzcyBBZGREZXBlbmRlbmN5RGlhbG9nIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBwcml2YXRlIHRpdGxlRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSB0YXNrU2VhcmNoQ29udHJvbDogVGFza1NlYXJjaENvbnRyb2wgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkaWFsb2c6IEhUTUxEaWFsb2dFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgcmVzb2x2ZTogKHZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICB0aGlzLnRpdGxlRWxlbWVudCA9IHRoaXMucXVlcnlTZWxlY3RvcignaDInKSE7XG4gICAgdGhpcy50YXNrU2VhcmNoQ29udHJvbCA9IHRoaXMucXVlcnlTZWxlY3RvcigndGFzay1zZWFyY2gtY29udHJvbCcpITtcbiAgICB0aGlzLmRpYWxvZyA9IHRoaXMucXVlcnlTZWxlY3RvcignZGlhbG9nJykhO1xuICAgIHRoaXMuZGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbmNlbCcsICgpID0+IHRoaXMucmVzb2x2ZSh1bmRlZmluZWQpKTtcbiAgICB0aGlzLnRhc2tTZWFyY2hDb250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ3Rhc2stY2hhbmdlJywgKGUpID0+IHtcbiAgICAgIHRoaXMuZGlhbG9nIS5jbG9zZSgpO1xuICAgICAgdGhpcy5yZXNvbHZlKGUuZGV0YWlsLnRhc2tJbmRleCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogUG9wdWxhdGVzIHRoZSBkaWFsb2cgYW5kIHNob3dzIGl0IGFzIGEgTW9kYWwgZGlhbG9nIGFuZCByZXR1cm5zIGEgUHJvbWlzZVxuICAgKiAgdGhhdCByZXNvbHZlcyBvbiBzdWNjZXNzIHRvIGEgdGFza0luZGV4LCBvciB1bmRlZmluZWQgaWYgdGhlIHVzZXJcbiAgICogIGNhbmNlbGxlZCBvdXQgb2YgdGhlIGZsb3cuXG4gICAqL1xuICBwdWJsaWMgc2VsZWN0RGVwZW5kZW5jeShcbiAgICBjaGFydDogQ2hhcnQsXG4gICAgdGFza0luZGV4OiBudW1iZXIsXG4gICAgZGVwVHlwZTogRGVwVHlwZVxuICApOiBQcm9taXNlPG51bWJlciB8IHVuZGVmaW5lZD4ge1xuICAgIHRoaXMudGl0bGVFbGVtZW50IS50ZXh0Q29udGVudCA9IGRlcERpc3BsYXlOYW1lW2RlcFR5cGVdO1xuXG4gICAgbGV0IGluY2x1ZGVkSW5kZXhlcyA9IFtdO1xuICAgIGlmIChkZXBUeXBlID09PSAncHJlZCcpIHtcbiAgICAgIGluY2x1ZGVkSW5kZXhlcyA9IGFsbFBvdGVudGlhbFByZWRlY2Vzc29ycyh0YXNrSW5kZXgsIGNoYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5jbHVkZWRJbmRleGVzID0gYWxsUG90ZW50aWFsU3VjY2Vzc29ycyh0YXNrSW5kZXgsIGNoYXJ0KTtcbiAgICB9XG4gICAgdGhpcy50YXNrU2VhcmNoQ29udHJvbCEudGFza3MgPSBjaGFydC5WZXJ0aWNlcztcbiAgICB0aGlzLnRhc2tTZWFyY2hDb250cm9sIS5pbmNsdWRlZEluZGV4ZXMgPSBpbmNsdWRlZEluZGV4ZXM7XG5cbiAgICAvLyBUT0RPIC0gQWxsb3cgYm90aCB0eXBlcyBvZiBzZWFyY2ggaW4gdGhlIGRlcGVuZGVuY3kgZGlhbG9nLlxuICAgIHRoaXMudGFza1NlYXJjaENvbnRyb2whLnNldEtleWJvYXJkRm9jdXNUb0lucHV0KCduYW1lLW9ubHknKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgY29uc3QgcmV0ID0gbmV3IFByb21pc2U8bnVtYmVyIHwgdW5kZWZpbmVkPigocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHRoaXMuZGlhbG9nIS5zaG93TW9kYWwoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYWRkLWRlcGVuZGVuY3ktZGlhbG9nJywgQWRkRGVwZW5kZW5jeURpYWxvZyk7XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7IEFkZFJlc291cmNlT3AsIERlbGV0ZVJlc291cmNlT3AgfSBmcm9tICcuLi9vcHMvcmVzb3VyY2VzJztcbmltcG9ydCB7IGV4ZWN1dGVPcCB9IGZyb20gJy4uL2FjdGlvbi9leGVjdXRlJztcbmltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tICcuLi9leHBsYW5NYWluL2V4cGxhbk1haW4nO1xuaW1wb3J0IHsgRWRpdFJlc291cmNlRGVmaW5pdGlvbiB9IGZyb20gJy4uL2VkaXQtcmVzb3VyY2UtZGVmaW5pdGlvbi9lZGl0LXJlc291cmNlLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgaWNvbiB9IGZyb20gJy4uL2ljb25zL2ljb25zJztcbmltcG9ydCB7IHJlcG9ydEVycm9yTXNnLCByZXBvcnRJZkVycm9yIH0gZnJvbSAnLi4vcmVwb3J0LWVycm9yL3JlcG9ydC1lcnJvcic7XG5pbXBvcnQgeyBQcm9tcHREaWFsb2cgfSBmcm9tICcuLi9wcm9tcHQtZGlhbG9nL3Byb21wdC1kaWFsb2cnO1xuXG4vLyBMb25nZXN0IHJlcHJlc2VudGF0aW9uIHdlJ2xsIHNob3cgZm9yIGFsbCB0aGUgb3B0aW9ucyBvZiBhIFJlc291cmNlLlxuY29uc3QgTUFYX1NIT1JUX1NUUklORyA9IDgwO1xuXG5leHBvcnQgY2xhc3MgRWRpdFJlc291cmNlc1BhbmVsIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBleHBsYW5NYWluOiBFeHBsYW5NYWluIHwgbnVsbCA9IG51bGw7XG4gIHBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrOiAoKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmV4cGxhbk1haW4gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcsXG4gICAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAncGxhbi1kZWZpbml0aW9uLWNoYW5nZWQnLFxuICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBzZXRDb25maWcoZXhwbGFuTWFpbjogRXhwbGFuTWFpbikge1xuICAgIHRoaXMuZXhwbGFuTWFpbiA9IGV4cGxhbk1haW47XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWx1ZXNUb1Nob3J0U3RyaW5nKHZhbHVlczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGxldCByZXQgPSB2YWx1ZXMuam9pbignLCAnKTtcbiAgICBpZiAocmV0Lmxlbmd0aCA+IE1BWF9TSE9SVF9TVFJJTkcpIHtcbiAgICAgIHJldCA9IHJldC5zbGljZSgwLCBNQVhfU0hPUlRfU1RSSU5HKSArICcgLi4uJztcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHByaXZhdGUgZGVsQnV0dG9uSWZOb3RTdGF0aWMoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGlzU3RhdGljOiBib29sZWFuXG4gICk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBpZiAoaXNTdGF0aWMpIHtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuICAgIHJldHVybiBodG1sYDxidXR0b25cbiAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgdGl0bGU9XCJEZWxldGUgdGhpcyByZXNvdXJjZS5cIlxuICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5kZWxldGVSZXNvdXJjZShuYW1lKX1cbiAgICA+XG4gICAgICAke2ljb24oJ2RlbGV0ZS1pY29uJyl9XG4gICAgPC9idXR0b24+YDtcbiAgfVxuXG4gIHByaXZhdGUgZWRpdEJ1dHRvbklmTm90U3RhdGljKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBpc1N0YXRpYzogYm9vbGVhblxuICApOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKGlzU3RhdGljKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbGA8YnV0dG9uXG4gICAgICBjbGFzcz1cImljb24tYnV0dG9uXCJcbiAgICAgIHRpdGxlPVwiRWRpdCB0aGUgcmVzb3VyY2UgZGVmaW5pdGlvbi5cIlxuICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5lZGl0UmVzb3VyY2UobmFtZSl9XG4gICAgPlxuICAgICAgJHtpY29uKCdlZGl0LWljb24nKX1cbiAgICA8L2J1dHRvbj5gO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBkZWxldGVSZXNvdXJjZShuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXQgPSBhd2FpdCBleGVjdXRlT3AoXG4gICAgICBEZWxldGVSZXNvdXJjZU9wKG5hbWUpLFxuICAgICAgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5leHBsYW5NYWluIVxuICAgICk7XG4gICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIGVkaXRSZXNvdXJjZShuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmV4cGxhbk1haW4hLnF1ZXJ5U2VsZWN0b3I8RWRpdFJlc291cmNlRGVmaW5pdGlvbj4oXG4gICAgICAnZWRpdC1yZXNvdXJjZS1kZWZpbml0aW9uJ1xuICAgICkhLnNob3dNb2RhbChcbiAgICAgIHRoaXMuZXhwbGFuTWFpbiEsXG4gICAgICBuYW1lLFxuICAgICAgdGhpcy5leHBsYW5NYWluIS5wbGFuLnJlc291cmNlRGVmaW5pdGlvbnNbbmFtZV1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBuZXdSZXNvdXJjZSgpIHtcbiAgICBsZXQgbmFtZSA9IGF3YWl0IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcjxQcm9tcHREaWFsb2c+KCdwcm9tcHQtZGlhbG9nJykhXG4gICAgICAucHJvbXB0KCdNZXRyaWMgTmFtZScpO1xuICAgIGlmIChuYW1lID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lLnRyaW0oKTtcbiAgICBpZiAobmFtZSA9PT0gJycpIHtcbiAgICAgIHJlcG9ydEVycm9yTXNnKFxuICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1Jlc291cmNlIG5hbWVzIGNhbm5vdCBiZSBlbXB0eSBhbmQgbXVzdCBjb250YWluIG1vcmUgdGhhbiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMuJ1xuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBhd2FpdCBleGVjdXRlT3AoXG4gICAgICBBZGRSZXNvdXJjZU9wKG5hbWUpLFxuICAgICAgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsXG4gICAgICB0cnVlLFxuICAgICAgdGhpcy5leHBsYW5NYWluIVxuICAgICk7XG4gICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCByZCA9IHRoaXMuZXhwbGFuTWFpbiEucGxhbi5yZXNvdXJjZURlZmluaXRpb25zO1xuICAgIGNvbnN0IGFsbEtleXNTb3J0ZWQgPSBPYmplY3Qua2V5cyhyZCkuc29ydChcbiAgICAgIChrZXlBOiBzdHJpbmcsIGtleUI6IHN0cmluZyk6IG51bWJlciA9PiB7XG4gICAgICAgIGNvbnN0IGEgPSByZFtrZXlBXTtcbiAgICAgICAgY29uc3QgYiA9IHJkW2tleUJdO1xuICAgICAgICBpZiAoYS5pc1N0YXRpYyA9PT0gYi5pc1N0YXRpYykge1xuICAgICAgICAgIHJldHVybiBrZXlBLmxvY2FsZUNvbXBhcmUoa2V5Qik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEuaXNTdGF0aWMpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGgzPlJlc291cmNlczwvaDM+XG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgPHRoPlZhbHVlczwvdGg+XG4gICAgICAgICAgPHRoPkRlbGV0ZTwvdGg+XG4gICAgICAgICAgPHRoPkVkaXQ8L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgICAke2FsbEtleXNTb3J0ZWQubWFwKChuYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVmbiA9IHJkW25hbWVdO1xuICAgICAgICAgIHJldHVybiBodG1sYDx0cj5cbiAgICAgICAgICAgIDx0ZD4ke25hbWV9PC90ZD5cbiAgICAgICAgICAgIDx0ZD4ke3RoaXMudmFsdWVzVG9TaG9ydFN0cmluZyhkZWZuLnZhbHVlcyl9PC90ZD5cbiAgICAgICAgICAgIDx0ZD4ke3RoaXMuZGVsQnV0dG9uSWZOb3RTdGF0aWMobmFtZSwgZGVmbi5pc1N0YXRpYyl9PC90ZD5cbiAgICAgICAgICAgIDx0ZD4ke3RoaXMuZWRpdEJ1dHRvbklmTm90U3RhdGljKG5hbWUsIGRlZm4uaXNTdGF0aWMpfTwvdGQ+XG4gICAgICAgICAgPC90cj5gO1xuICAgICAgICB9KX1cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3M9XCJpY29uLWJ1dHRvblwiXG4gICAgICAgICAgICAgIHRpdGxlPVwiQWRkIGEgbmV3IFJlc291cmNlLlwiXG4gICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5ld1Jlc291cmNlKCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICR7aWNvbignYWRkLWljb24nKX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3RhYmxlPlxuICAgIGA7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdlZGl0LXJlc291cmNlcy1wYW5lbCcsIEVkaXRSZXNvdXJjZXNQYW5lbCk7XG4iLCAiLyoqXG4gKiBUcmlhbmd1bGFyIGlzIHRoZSBpbnZlcnNlIEN1bXVsYXRpdmUgRGVuc2l0eSBGdW5jdGlvbiAoQ0RGKSBmb3IgdGhlXG4gKiB0cmlhbmd1bGFyIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ucmlhbmd1bGFyX2Rpc3RyaWJ1dGlvbiNHZW5lcmF0aW5nX3JhbmRvbV92YXJpYXRlc1xuICpcbiAqIFRoZSBpbnZlcnNlIG9mIHRoZSBDREYgaXMgdXNlZnVsIGZvciBnZW5lcmF0aW5nIHNhbXBsZXMgZnJvbSB0aGVcbiAqIGRpc3RyaWJ1dGlvbiwgaS5lLiBwYXNzaW5nIGluIHZhbHVlcyBmcm9tIHRoZSB1bmlmb3JtIGRpc3RyaWJ1dGlvbiBbMCwgMV1cbiAqIHdpbGwgcHJvZHVjZSBzYW1wbGUgdGhhdCBsb29rIGxpa2UgdGhleSBjb21lIGZyb20gdGhlIHRyaWFuZ3VsYXJcbiAqIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKlxuICovXG5cbmV4cG9ydCBjbGFzcyBUcmlhbmd1bGFyIHtcbiAgcHJpdmF0ZSBhOiBudW1iZXI7XG4gIHByaXZhdGUgYjogbnVtYmVyO1xuICBwcml2YXRlIGM6IG51bWJlcjtcbiAgcHJpdmF0ZSBGX2M6IG51bWJlcjtcblxuICAvKiogIFRoZSB0cmlhbmd1bGFyIGRpc3RyaWJ1dGlvbiBpcyBhIGNvbnRpbnVvdXMgcHJvYmFiaWxpdHkgZGlzdHJpYnV0aW9uIHdpdGhcbiAgbG93ZXIgbGltaXQgYGFgLCB1cHBlciBsaW1pdCBgYmAsIGFuZCBtb2RlIGBjYCwgd2hlcmUgYSA8IGIgYW5kIGEgXHUyMjY0IGMgXHUyMjY0IGIuICovXG4gIGNvbnN0cnVjdG9yKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIpIHtcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5jID0gYztcblxuICAgIC8vIEZfYyBpcyB0aGUgY3V0b2ZmIGluIHRoZSBkb21haW4gd2hlcmUgd2Ugc3dpdGNoIGJldHdlZW4gdGhlIHR3byBoYWx2ZXMgb2ZcbiAgICAvLyB0aGUgdHJpYW5nbGUuXG4gICAgdGhpcy5GX2MgPSAoYyAtIGEpIC8gKGIgLSBhKTtcbiAgfVxuXG4gIC8qKiAgUHJvZHVjZSBhIHNhbXBsZSBmcm9tIHRoZSB0cmlhbmd1bGFyIGRpc3RyaWJ1dGlvbi4gVGhlIHZhbHVlIG9mICdwJ1xuICAgc2hvdWxkIGJlIGluIFswLCAxLjBdLiAqL1xuICBzYW1wbGUocDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAocCA8IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAocCA+IDEuMCkge1xuICAgICAgcmV0dXJuIDEuMDtcbiAgICB9IGVsc2UgaWYgKHAgPCB0aGlzLkZfYykge1xuICAgICAgcmV0dXJuIHRoaXMuYSArIE1hdGguc3FydChwICogKHRoaXMuYiAtIHRoaXMuYSkgKiAodGhpcy5jIC0gdGhpcy5hKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuYiAtIE1hdGguc3FydCgoMSAtIHApICogKHRoaXMuYiAtIHRoaXMuYSkgKiAodGhpcy5iIC0gdGhpcy5jKSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgVHJpYW5ndWxhciB9IGZyb20gXCIuL3RyaWFuZ3VsYXIudHNcIjtcblxuZXhwb3J0IHR5cGUgVW5jZXJ0YWludHkgPSBcImxvd1wiIHwgXCJtb2RlcmF0ZVwiIHwgXCJoaWdoXCIgfCBcImV4dHJlbWVcIjtcblxuZXhwb3J0IGNvbnN0IFVuY2VydGFpbnR5VG9OdW06IFJlY29yZDxVbmNlcnRhaW50eSwgbnVtYmVyPiA9IHtcbiAgbG93OiAxLjEsXG4gIG1vZGVyYXRlOiAxLjUsXG4gIGhpZ2g6IDIsXG4gIGV4dHJlbWU6IDUsXG59O1xuXG5leHBvcnQgY2xhc3MgSmFjb2JpYW4ge1xuICBwcml2YXRlIHRyaWFuZ3VsYXI6IFRyaWFuZ3VsYXI7XG4gIGNvbnN0cnVjdG9yKGV4cGVjdGVkOiBudW1iZXIsIHVuY2VydGFpbnR5OiBVbmNlcnRhaW50eSkge1xuICAgIGNvbnN0IG11bCA9IFVuY2VydGFpbnR5VG9OdW1bdW5jZXJ0YWludHldO1xuICAgIHRoaXMudHJpYW5ndWxhciA9IG5ldyBUcmlhbmd1bGFyKGV4cGVjdGVkIC8gbXVsLCBleHBlY3RlZCAqIG11bCwgZXhwZWN0ZWQpO1xuICB9XG5cbiAgc2FtcGxlKHA6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudHJpYW5ndWxhci5zYW1wbGUocCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBDaGFydCwgQ2hhcnRTZXJpYWxpemVkLCBDaGFydFZhbGlkYXRlLCBUYXNrIH0gZnJvbSAnLi4vY2hhcnQvY2hhcnQudHMnO1xuaW1wb3J0IHtcbiAgTWV0cmljRGVmaW5pdGlvbixcbiAgTWV0cmljRGVmaW5pdGlvbnMsXG4gIE1ldHJpY0RlZmluaXRpb25zU2VyaWFsaXplZCxcbn0gZnJvbSAnLi4vbWV0cmljcy9tZXRyaWNzLnRzJztcbmltcG9ydCB7IE1ldHJpY1JhbmdlIH0gZnJvbSAnLi4vbWV0cmljcy9yYW5nZS50cyc7XG5pbXBvcnQgeyBSYXRpb25hbGl6ZUVkZ2VzT3AgfSBmcm9tICcuLi9vcHMvY2hhcnQudHMnO1xuaW1wb3J0IHtcbiAgUGxhblN0YXR1cyxcbiAgUGxhblN0YXR1c1NlcmlhbGl6ZWQsXG4gIHRvSlNPTiBhcyBzdGF0dXNUb0pTT04sXG4gIGZyb21KU09OIGFzIHN0YXR1c0Zyb21KU09OLFxuICBzdGF0dXNUb0RhdGUsXG59IGZyb20gJy4uL3BsYW5fc3RhdHVzL3BsYW5fc3RhdHVzLnRzJztcbmltcG9ydCB7XG4gIFJlc291cmNlRGVmaW5pdGlvbixcbiAgUmVzb3VyY2VEZWZpbml0aW9ucyxcbiAgUmVzb3VyY2VEZWZpbml0aW9uc1NlcmlhbGl6ZWQsXG59IGZyb20gJy4uL3Jlc291cmNlcy9yZXNvdXJjZXMudHMnO1xuaW1wb3J0IHsgUmVzdWx0LCBlcnJvciwgb2sgfSBmcm9tICcuLi9yZXN1bHQudHMnO1xuaW1wb3J0IHsgVW5jZXJ0YWludHlUb051bSB9IGZyb20gJy4uL3N0YXRzL2NkZi90cmlhbmd1bGFyL2phY29iaWFuLnRzJztcbmltcG9ydCB7XG4gIFRhc2tDb21wbGV0aW9ucyxcbiAgVGFza0NvbXBsZXRpb25zU2VyaWFsaXplZCxcbiAgdGFza0NvbXBsZXRpb25zVG9KU09OLFxuICB0YXNrQ29tcGxldGlvbnNGcm9tSlNPTixcbiAgVGFza0NvbXBsZXRpb24sXG59IGZyb20gJy4uL3Rhc2tfY29tcGxldGlvbi90YXNrX2NvbXBsZXRpb24udHMnO1xuaW1wb3J0IHtcbiAgRGF5cyxcbiAgVW5pdEJhc2UsXG4gIFVuaXRCdWlsZGVycyxcbiAgVW5pdFNlcmlhbGl6ZWQsXG4gIFVuaXRUeXBlcyxcbn0gZnJvbSAnLi4vdW5pdHMvdW5pdC50cyc7XG5pbXBvcnQgeyBQcmVjaXNpb24gfSBmcm9tICcuLi9wcmVjaXNpb24vcHJlY2lzaW9uLnRzJztcblxuZXhwb3J0IHR5cGUgU3RhdGljTWV0cmljS2V5cyA9ICdEdXJhdGlvbic7XG5cbmV4cG9ydCBjb25zdCBTdGF0aWNNZXRyaWNEZWZpbml0aW9uczogUmVjb3JkPFxuICBTdGF0aWNNZXRyaWNLZXlzLFxuICBNZXRyaWNEZWZpbml0aW9uXG4+ID0ge1xuICAvLyBIb3cgbG9uZyBhIHRhc2sgd2lsbCB0YWtlLCBpbiBkYXlzLlxuICBEdXJhdGlvbjogbmV3IE1ldHJpY0RlZmluaXRpb24oMCwgbmV3IE1ldHJpY1JhbmdlKDApLCB0cnVlLCBuZXcgUHJlY2lzaW9uKDApKSxcbn07XG5cbmV4cG9ydCB0eXBlIFN0YXRpY1Jlc291cmNlS2V5cyA9ICdVbmNlcnRhaW50eSc7XG5cbmV4cG9ydCBjb25zdCBTdGF0aWNSZXNvdXJjZURlZmluaXRpb25zOiBSZWNvcmQ8XG4gIFN0YXRpY1Jlc291cmNlS2V5cyxcbiAgUmVzb3VyY2VEZWZpbml0aW9uXG4+ID0ge1xuICBVbmNlcnRhaW50eTogbmV3IFJlc291cmNlRGVmaW5pdGlvbihPYmplY3Qua2V5cyhVbmNlcnRhaW50eVRvTnVtKSwgdHJ1ZSksXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYW5TZXJpYWxpemVkIHtcbiAgc3RhdHVzOiBQbGFuU3RhdHVzU2VyaWFsaXplZDtcbiAgdGFza0NvbXBsZXRpb246IFRhc2tDb21wbGV0aW9uc1NlcmlhbGl6ZWQ7XG4gIF9kdXJhdGlvblVuaXRzOiBVbml0U2VyaWFsaXplZDtcbiAgY2hhcnQ6IENoYXJ0U2VyaWFsaXplZDtcbiAgcmVzb3VyY2VEZWZpbml0aW9uczogUmVzb3VyY2VEZWZpbml0aW9uc1NlcmlhbGl6ZWQ7XG4gIG1ldHJpY0RlZmluaXRpb25zOiBNZXRyaWNEZWZpbml0aW9uc1NlcmlhbGl6ZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBQbGFuIHtcbiAgY2hhcnQ6IENoYXJ0O1xuXG4gIC8vIENvbnRyb2xzIGhvdyB0aW1lIGlzIGRpc3BsYXllZC5cbiAgX2R1cmF0aW9uVW5pdHM6IFVuaXRCYXNlO1xuXG4gIF9zdGF0dXM6IFBsYW5TdGF0dXMgPSB7IHN0YWdlOiAndW5zdGFydGVkJywgc3RhcnQ6IDAgfTtcblxuICB0YXNrQ29tcGxldGlvbjogVGFza0NvbXBsZXRpb25zID0ge307XG5cbiAgcmVzb3VyY2VEZWZpbml0aW9uczogUmVzb3VyY2VEZWZpbml0aW9ucztcblxuICBtZXRyaWNEZWZpbml0aW9uczogTWV0cmljRGVmaW5pdGlvbnM7XG5cbiAgcHVibGljIGdldCBzdGF0dXMoKTogUGxhblN0YXR1cyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZHVyYXRpb25Vbml0cygpOiBVbml0QmFzZSB7XG4gICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uVW5pdHM7XG4gIH1cblxuICBwdWJsaWMgc2V0IHN0YXR1cyh2YWx1ZTogUGxhblN0YXR1cykge1xuICAgIHRoaXMuX3N0YXR1cyA9IHZhbHVlO1xuICAgIHRoaXMuX2R1cmF0aW9uVW5pdHMgPSBuZXcgRGF5cyhcbiAgICAgIG5ldyBEYXRlKHN0YXR1c1RvRGF0ZSh0aGlzLnN0YXR1cykpLFxuICAgICAgdGhpcy5nZXRTdGF0aWNNZXRyaWNEZWZpbml0aW9uKCdEdXJhdGlvbicpXG4gICAgKTtcbiAgfVxuXG4gIHNldFRhc2tDb21wbGV0aW9uKGluZGV4OiBudW1iZXIsIHZhbHVlOiBUYXNrQ29tcGxldGlvbik6IFJlc3VsdDxudWxsPiB7XG4gICAgY29uc3QgdGFzayA9IHRoaXMuY2hhcnQuVmVydGljZXNbaW5kZXhdO1xuICAgIGlmICh0YXNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihuZXcgRXJyb3IoYCR7aW5kZXh9IGlzIG5vdCBhIHZhbGlkIFRhc2sgaW5kZXguYCkpO1xuICAgIH1cbiAgICB0aGlzLnRhc2tDb21wbGV0aW9uW3Rhc2suaWRdID0gdmFsdWU7XG4gICAgcmV0dXJuIG9rKG51bGwpO1xuICB9XG5cbiAgZ2V0VGFza0NvbXBsZXRpb24oaW5kZXg6IG51bWJlcik6IFJlc3VsdDxUYXNrQ29tcGxldGlvbj4ge1xuICAgIGNvbnN0IHRhc2sgPSB0aGlzLmNoYXJ0LlZlcnRpY2VzW2luZGV4XTtcbiAgICBpZiAodGFzayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXJyb3IobmV3IEVycm9yKGAke2luZGV4fSBpcyBub3QgYSB2YWxpZCBUYXNrIGluZGV4LmApKTtcbiAgICB9XG4gICAgcmV0dXJuIG9rKHRoaXMudGFza0NvbXBsZXRpb25bdGFzay5pZF0gfHwgeyBzdGFnZTogJ3Vuc3RhcnRlZCcgfSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNoYXJ0ID0gbmV3IENoYXJ0KCk7XG4gICAgdGhpcy5yZXNvdXJjZURlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgU3RhdGljUmVzb3VyY2VEZWZpbml0aW9ucyk7XG4gICAgdGhpcy5tZXRyaWNEZWZpbml0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIFN0YXRpY01ldHJpY0RlZmluaXRpb25zKTtcbiAgICB0aGlzLl9kdXJhdGlvblVuaXRzID0gbmV3IERheXMoXG4gICAgICBuZXcgRGF0ZShzdGF0dXNUb0RhdGUodGhpcy5zdGF0dXMpKSxcbiAgICAgIHRoaXMuZ2V0U3RhdGljTWV0cmljRGVmaW5pdGlvbignRHVyYXRpb24nKVxuICAgICk7XG5cbiAgICB0aGlzLmFwcGx5TWV0cmljc0FuZFJlc291cmNlc1RvVmVydGljZXMoKTtcbiAgfVxuXG4gIHNldER1cmF0aW9uVW5pdHModW5pdFR5cGU6IFVuaXRUeXBlcykge1xuICAgIHRoaXMuX2R1cmF0aW9uVW5pdHMgPSBVbml0QnVpbGRlcnNbdW5pdFR5cGVdKFxuICAgICAgbmV3IERhdGUoc3RhdHVzVG9EYXRlKHRoaXMuc3RhdHVzKSksXG4gICAgICB0aGlzLmdldFN0YXRpY01ldHJpY0RlZmluaXRpb24oJ0R1cmF0aW9uJylcbiAgICApO1xuICB9XG5cbiAgZ2V0U3RhdGljTWV0cmljRGVmaW5pdGlvbihuYW1lOiBTdGF0aWNNZXRyaWNLZXlzKTogTWV0cmljRGVmaW5pdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRGVmaW5pdGlvbnNbbmFtZV07XG4gIH1cblxuICBnZXRTdGF0aWNSZXNvdXJjZURlZmluaXRpb24obmFtZTogU3RhdGljUmVzb3VyY2VLZXlzKTogUmVzb3VyY2VEZWZpbml0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5yZXNvdXJjZURlZmluaXRpb25zW25hbWVdO1xuICB9XG5cbiAgYXBwbHlNZXRyaWNzQW5kUmVzb3VyY2VzVG9WZXJ0aWNlcygpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLm1ldHJpY0RlZmluaXRpb25zKS5mb3JFYWNoKChtZXRyaWNOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IG1kID0gdGhpcy5tZXRyaWNEZWZpbml0aW9uc1ttZXRyaWNOYW1lXSE7XG4gICAgICB0aGlzLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2spID0+IHtcbiAgICAgICAgdGFzay5zZXRNZXRyaWMobWV0cmljTmFtZSwgbWQuZGVmYXVsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLnJlc291cmNlRGVmaW5pdGlvbnMpLmZvckVhY2goXG4gICAgICAoW2tleSwgcmVzb3VyY2VEZWZpbml0aW9uXSkgPT4ge1xuICAgICAgICB0aGlzLmNoYXJ0LlZlcnRpY2VzLmZvckVhY2goKHRhc2s6IFRhc2spID0+IHtcbiAgICAgICAgICB0YXNrLnNldFJlc291cmNlKGtleSwgcmVzb3VyY2VEZWZpbml0aW9uLnZhbHVlc1swXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBnZXRNZXRyaWNEZWZpbml0aW9uKGtleTogc3RyaW5nKTogTWV0cmljRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRGVmaW5pdGlvbnNba2V5XTtcbiAgfVxuXG4gIHNldE1ldHJpY0RlZmluaXRpb24oa2V5OiBzdHJpbmcsIG1ldHJpY0RlZmluaXRpb246IE1ldHJpY0RlZmluaXRpb24pIHtcbiAgICB0aGlzLm1ldHJpY0RlZmluaXRpb25zW2tleV0gPSBtZXRyaWNEZWZpbml0aW9uO1xuICB9XG5cbiAgZGVsZXRlTWV0cmljRGVmaW5pdGlvbihrZXk6IHN0cmluZykge1xuICAgIGRlbGV0ZSB0aGlzLm1ldHJpY0RlZmluaXRpb25zW2tleV07XG4gIH1cblxuICBnZXRSZXNvdXJjZURlZmluaXRpb24oa2V5OiBzdHJpbmcpOiBSZXNvdXJjZURlZmluaXRpb24gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlc291cmNlRGVmaW5pdGlvbnNba2V5XTtcbiAgfVxuXG4gIHNldFJlc291cmNlRGVmaW5pdGlvbihrZXk6IHN0cmluZywgdmFsdWU6IFJlc291cmNlRGVmaW5pdGlvbikge1xuICAgIHRoaXMucmVzb3VyY2VEZWZpbml0aW9uc1trZXldID0gdmFsdWU7XG4gIH1cblxuICBkZWxldGVSZXNvdXJjZURlZmluaXRpb24oa2V5OiBzdHJpbmcpIHtcbiAgICBkZWxldGUgdGhpcy5yZXNvdXJjZURlZmluaXRpb25zW2tleV07XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgbmV3IFRhc2sgd2l0aCBkZWZhdWx0cyBmb3IgYWxsIG1ldHJpY3MgYW5kIHJlc291cmNlcy5cbiAgbmV3VGFzaygpOiBUYXNrIHtcbiAgICBjb25zdCByZXQgPSBuZXcgVGFzaygpO1xuICAgIE9iamVjdC5rZXlzKHRoaXMubWV0cmljRGVmaW5pdGlvbnMpLmZvckVhY2goKG1ldHJpY05hbWU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgbWQgPSB0aGlzLmdldE1ldHJpY0RlZmluaXRpb24obWV0cmljTmFtZSkhO1xuICAgICAgcmV0LnNldE1ldHJpYyhtZXRyaWNOYW1lLCBtZC5kZWZhdWx0KTtcbiAgICB9KTtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLnJlc291cmNlRGVmaW5pdGlvbnMpLmZvckVhY2goXG4gICAgICAoW2tleSwgcmVzb3VyY2VEZWZpbml0aW9uXSkgPT4ge1xuICAgICAgICByZXQuc2V0UmVzb3VyY2Uoa2V5LCByZXNvdXJjZURlZmluaXRpb24udmFsdWVzWzBdKTtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICB0b0pTT04oKTogUGxhblNlcmlhbGl6ZWQge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IHN0YXR1c1RvSlNPTih0aGlzLnN0YXR1cyksXG4gICAgICB0YXNrQ29tcGxldGlvbjogdGFza0NvbXBsZXRpb25zVG9KU09OKHRoaXMudGFza0NvbXBsZXRpb24pLFxuICAgICAgX2R1cmF0aW9uVW5pdHM6IHRoaXMuX2R1cmF0aW9uVW5pdHMudG9KU09OKCksXG4gICAgICBjaGFydDogdGhpcy5jaGFydC50b0pTT04oKSxcbiAgICAgIHJlc291cmNlRGVmaW5pdGlvbnM6IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5yZXNvdXJjZURlZmluaXRpb25zKVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICAuZmlsdGVyKChbXywgcmVzb3VyY2VEZWZpbml0aW9uXSkgPT4gIXJlc291cmNlRGVmaW5pdGlvbi5pc1N0YXRpYylcbiAgICAgICAgICAubWFwKChba2V5LCByZXNvdXJjZURlZmluaXRpb25dKSA9PiBbXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICByZXNvdXJjZURlZmluaXRpb24udG9KU09OKCksXG4gICAgICAgICAgXSlcbiAgICAgICksXG4gICAgICBtZXRyaWNEZWZpbml0aW9uczogT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLm1ldHJpY0RlZmluaXRpb25zKVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICAuZmlsdGVyKChbXywgbWV0cmljRGVmaW5pdGlvbl0pID0+ICFtZXRyaWNEZWZpbml0aW9uLmlzU3RhdGljKVxuICAgICAgICAgIC5tYXAoKFtrZXksIG1ldHJpY0RlZmluaXRpb25dKSA9PiBba2V5LCBtZXRyaWNEZWZpbml0aW9uLnRvSlNPTigpXSlcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSlNPTihwbGFuU2VyaWFsaXplZDogUGxhblNlcmlhbGl6ZWQpOiBQbGFuIHtcbiAgICBjb25zdCByZXQgPSBuZXcgUGxhbigpO1xuICAgIHJldC5jaGFydCA9IENoYXJ0LmZyb21KU09OKHBsYW5TZXJpYWxpemVkLmNoYXJ0KTtcbiAgICByZXQuc3RhdHVzID0gc3RhdHVzRnJvbUpTT04ocGxhblNlcmlhbGl6ZWQuc3RhdHVzKTtcbiAgICByZXQudGFza0NvbXBsZXRpb24gPSB0YXNrQ29tcGxldGlvbnNGcm9tSlNPTihwbGFuU2VyaWFsaXplZC50YXNrQ29tcGxldGlvbik7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkTWV0cmljRGVmaW5pdGlvbnMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICBPYmplY3QuZW50cmllcyhwbGFuU2VyaWFsaXplZC5tZXRyaWNEZWZpbml0aW9ucykubWFwKFxuICAgICAgICAoW2tleSwgc2VyaWFsaXplZE1ldHJpY0RlZmluaXRpb25dKSA9PiBbXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIE1ldHJpY0RlZmluaXRpb24uZnJvbUpTT04oc2VyaWFsaXplZE1ldHJpY0RlZmluaXRpb24pLFxuICAgICAgICBdXG4gICAgICApXG4gICAgKTtcbiAgICByZXQubWV0cmljRGVmaW5pdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICBTdGF0aWNNZXRyaWNEZWZpbml0aW9ucyxcbiAgICAgIGRlc2VyaWFsaXplZE1ldHJpY0RlZmluaXRpb25zXG4gICAgKTtcblxuICAgIGNvbnN0IGRlc2VyaWFsaXplZFJlc291cmNlRGVmaW5pdGlvbnMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICBPYmplY3QuZW50cmllcyhwbGFuU2VyaWFsaXplZC5yZXNvdXJjZURlZmluaXRpb25zKS5tYXAoXG4gICAgICAgIChba2V5LCBzZXJpYWxpemVkUmVzb3VyY2VEZWZpbml0aW9uXSkgPT4gW1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBSZXNvdXJjZURlZmluaXRpb24uZnJvbUpTT04oc2VyaWFsaXplZFJlc291cmNlRGVmaW5pdGlvbiksXG4gICAgICAgIF1cbiAgICAgIClcbiAgICApO1xuICAgIHJldC5yZXNvdXJjZURlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgU3RhdGljUmVzb3VyY2VEZWZpbml0aW9ucyxcbiAgICAgIGRlc2VyaWFsaXplZFJlc291cmNlRGVmaW5pdGlvbnNcbiAgICApO1xuXG4gICAgcmV0Ll9kdXJhdGlvblVuaXRzID0gVW5pdEJhc2UuZnJvbUpTT04oXG4gICAgICBwbGFuU2VyaWFsaXplZC5fZHVyYXRpb25Vbml0cyxcbiAgICAgIG5ldyBEYXRlKHN0YXR1c1RvRGF0ZShyZXQuc3RhdHVzKSksXG4gICAgICByZXQuZ2V0U3RhdGljTWV0cmljRGVmaW5pdGlvbignRHVyYXRpb24nKVxuICAgICk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIEZyb21KU09OVGV4dCA9ICh0ZXh0OiBzdHJpbmcpOiBSZXN1bHQ8UGxhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwbGFuU2VyaWFsaXplZDogUGxhblNlcmlhbGl6ZWQgPSBKU09OLnBhcnNlKHRleHQpO1xuICAgICAgY29uc3QgcGxhbiA9IFBsYW4uZnJvbUpTT04ocGxhblNlcmlhbGl6ZWQpO1xuXG4gICAgICBjb25zdCByZXQgPSBSYXRpb25hbGl6ZUVkZ2VzT3AoKS5hcHBseVRvKHBsYW4pO1xuICAgICAgaWYgKCFyZXQub2spIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmV0VmFsID0gQ2hhcnRWYWxpZGF0ZShwbGFuLmNoYXJ0KTtcbiAgICAgIGlmICghcmV0VmFsLm9rKSB7XG4gICAgICAgIHJldHVybiByZXRWYWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2socGxhbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGVycm9yKGUgYXMgdW5rbm93biBhcyBFcnJvcik7XG4gICAgfVxuICB9O1xufVxuIiwgImltcG9ydCB7IFRlbXBsYXRlUmVzdWx0LCBodG1sLCByZW5kZXIgfSBmcm9tIFwibGl0LWh0bWxcIjtcbmltcG9ydCB7IFBsYW4gfSBmcm9tIFwiLi4vcGxhbi9wbGFuXCI7XG5pbXBvcnQgeyBsaXZlIH0gZnJvbSBcImxpdC1odG1sL2RpcmVjdGl2ZXMvbGl2ZS5qc1wiO1xuaW1wb3J0IHsgaWNvbiB9IGZyb20gXCIuLi9pY29ucy9pY29uc1wiO1xuaW1wb3J0IHsgZXhlY3V0ZUJ5TmFtZSB9IGZyb20gXCIuLi9hY3Rpb24vZXhlY3V0ZVwiO1xuaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gXCIuLi9leHBsYW5NYWluL2V4cGxhbk1haW5cIjtcblxuZXhwb3J0IGludGVyZmFjZSBUYXNrTmFtZUNoYW5nZURldGFpbHMge1xuICBuYW1lOiBzdHJpbmc7XG4gIHRhc2tJbmRleDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhc2tSZXNvdXJjZVZhbHVlQ2hhbmdlRGV0YWlscyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgdGFza0luZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFza01ldHJpY1ZhbHVlQ2hhbmdlRGV0YWlscyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFsdWU6IG51bWJlcjtcbiAgdGFza0luZGV4OiBudW1iZXI7XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcCB7XG4gICAgXCJ0YXNrLW5hbWUtY2hhbmdlXCI6IEN1c3RvbUV2ZW50PFRhc2tOYW1lQ2hhbmdlRGV0YWlscz47XG4gICAgXCJ0YXNrLXJlc291cmNlLXZhbHVlLWNoYW5nZVwiOiBDdXN0b21FdmVudDxUYXNrUmVzb3VyY2VWYWx1ZUNoYW5nZURldGFpbHM+O1xuICAgIFwidGFzay1tZXRyaWMtdmFsdWUtY2hhbmdlXCI6IEN1c3RvbUV2ZW50PFRhc2tNZXRyaWNWYWx1ZUNoYW5nZURldGFpbHM+O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RlZFRhc2tQYW5lbCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgZXhwbGFuTWFpbjogRXhwbGFuTWFpbiB8IG51bGwgPSBudWxsO1xuICBwbGFuOiBQbGFuID0gbmV3IFBsYW4oKTtcbiAgdGFza0luZGV4OiBudW1iZXIgPSAtMTtcbiAgcGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBsYW5EZWZpbml0aW9uQ2hhbmdlZENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJwbGFuLWRlZmluaXRpb24tY2hhbmdlZFwiLFxuICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkNoYW5nZWRDYWxsYmFjayxcbiAgICApO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwicGxhbi1kZWZpbml0aW9uLWNoYW5nZWRcIixcbiAgICAgIHRoaXMucGxhbkRlZmluaXRpb25DaGFuZ2VkQ2FsbGJhY2ssXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZVNlbGVjdGVkVGFza1BhbmVsKGV4cGxhaW5NYWluOiBFeHBsYW5NYWluLCB0YXNrSW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuZXhwbGFuTWFpbiA9IGV4cGxhaW5NYWluO1xuICAgIHRoaXMucGxhbiA9IGV4cGxhaW5NYWluLnBsYW47XG4gICAgdGhpcy50YXNrSW5kZXggPSB0YXNrSW5kZXg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICAvKlxuICAgIFRPRE8gLSBEbyB0aGUgZm9sbG93aW5nIHdoZW4gc2VsZWN0aW5nIGEgbmV3IHRhc2suXG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0ID1cbiAgICAgICAgICBzZWxlY3RlZFRhc2tQYW5lbC5xdWVyeVNlbGVjdG9yPEhUTUxJbnB1dEVsZW1lbnQ+KFwiI3Rhc2stbmFtZVwiKSE7XG4gICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgIGlucHV0LnNlbGVjdCgpO1xuICAgICAgfSwgMCk7XG4gICAgICAqL1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJlbmRlcih0aGlzLnRlbXBsYXRlKCksIHRoaXMpO1xuICB9XG5cbiAgdGVtcGxhdGUoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0IHRhc2tJbmRleCA9IHRoaXMudGFza0luZGV4O1xuICAgIGlmICh0YXNrSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICAgIEBjbGljaz0ke2FzeW5jICgpID0+XG4gICAgICAgICAgICBhd2FpdCBleGVjdXRlQnlOYW1lKFwiTmV3VGFza0FjdGlvblwiLCB0aGlzLmV4cGxhbk1haW4hKX1cbiAgICAgICAgICB0aXRsZT1cIkFkZCBUYXNrXCJcbiAgICAgICAgPlxuICAgICAgICAgICR7aWNvbihcImFkZC1pY29uXCIpfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGRpdj5ObyB0YXNrIHNlbGVjdGVkLjwvZGl2PlxuICAgICAgYDtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXhwbGFuTWFpbiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGh0bWxgYDtcbiAgICB9XG4gICAgY29uc3QgdGFzayA9IHRoaXMucGxhbi5jaGFydC5WZXJ0aWNlc1t0YXNrSW5kZXhdO1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzcz1cImljb24tYnV0dG9uXCJcbiAgICAgICAgQGNsaWNrPSR7YXN5bmMgKCkgPT5cbiAgICAgICAgICBhd2FpdCBleGVjdXRlQnlOYW1lKFwiTmV3VGFza0FjdGlvblwiLCB0aGlzLmV4cGxhbk1haW4hKX1cbiAgICAgICAgdGl0bGU9XCJBZGQgVGFza1wiXG4gICAgICA+XG4gICAgICAgICR7aWNvbihcImFkZC1pY29uXCIpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICBAY2xpY2s9JHthc3luYyAoKSA9PlxuICAgICAgICAgIGF3YWl0IGV4ZWN1dGVCeU5hbWUoXCJEdXBUYXNrQWN0aW9uXCIsIHRoaXMuZXhwbGFuTWFpbiEpfVxuICAgICAgICB0aXRsZT1cIkR1cGxpY2F0ZSBUYXNrXCJcbiAgICAgID5cbiAgICAgICAgJHtpY29uKFwiZHVwXCIpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICBAY2xpY2s9JHthc3luYyAoKSA9PlxuICAgICAgICAgIGF3YWl0IGV4ZWN1dGVCeU5hbWUoXCJTcGxpdFRhc2tBY3Rpb25cIiwgdGhpcy5leHBsYW5NYWluISl9XG4gICAgICAgIHRpdGxlPVwiU3BsaXQgVGFza1wiXG4gICAgICA+XG4gICAgICAgICR7aWNvbihcInNwbGl0XCIpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwiaWNvbi1idXR0b25cIlxuICAgICAgICBAY2xpY2s9JHthc3luYyAoKSA9PlxuICAgICAgICAgIGV4ZWN1dGVCeU5hbWUoXCJEZWxldGVUYXNrQWN0aW9uXCIsIHRoaXMuZXhwbGFuTWFpbiEpfVxuICAgICAgICB0aXRsZT1cIkRlbGV0ZSBUYXNrXCJcbiAgICAgID5cbiAgICAgICAgJHtpY29uKFwiZGVsZXRlLWljb25cIil9XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cInVuZGVybGluZS1maXJzdC1jaGFyXCI+TmFtZTwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgaWQ9XCJ0YXNrLW5hbWVcIlxuICAgICAgICAgICAgICBhY2Nlc3NrZXk9XCJuXCJcbiAgICAgICAgICAgICAgLnZhbHVlPVwiJHtsaXZlKHRhc2submFtZSl9XCJcbiAgICAgICAgICAgICAgQGNoYW5nZT0keyhlOiBFdmVudCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgICBuZXcgQ3VzdG9tRXZlbnQ8VGFza05hbWVDaGFuZ2VEZXRhaWxzPihcInRhc2stbmFtZS1jaGFuZ2VcIiwge1xuICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0YXNrSW5kZXg6IHRhc2tJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICAke09iamVjdC5lbnRyaWVzKHRoaXMucGxhbi5yZXNvdXJjZURlZmluaXRpb25zKS5tYXAoXG4gICAgICAgICAgKFtyZXNvdXJjZUtleSwgZGVmbl0pID0+XG4gICAgICAgICAgICBodG1sYCA8dHI+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiJHtyZXNvdXJjZUtleX1cIj4ke3Jlc291cmNlS2V5fTwvbGFiZWw+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgICBpZD1cIiR7cmVzb3VyY2VLZXl9XCJcbiAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9JHthc3luYyAoZTogRXZlbnQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJ0YXNrLXJlc291cmNlLXZhbHVlLWNoYW5nZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tJbmRleDogdGFza0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZXNvdXJjZUtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgJHtkZWZuLnZhbHVlcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChyZXNvdXJjZVZhbHVlOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgICAgaHRtbGA8b3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSR7cmVzb3VyY2VWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3RlZD0ke3Rhc2sucmVzb3VyY2VzW3Jlc291cmNlS2V5XSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlVmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgJHtyZXNvdXJjZVZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPmAsXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5gLFxuICAgICAgICApfVxuICAgICAgICAke09iamVjdC5rZXlzKHRoaXMucGxhbi5tZXRyaWNEZWZpbml0aW9ucykubWFwKFxuICAgICAgICAgIChrZXk6IHN0cmluZykgPT5cbiAgICAgICAgICAgIGh0bWxgIDx0cj5cbiAgICAgICAgICAgICAgPHRkPjxsYWJlbCBmb3I9XCIke2tleX1cIj4ke2tleX08L2xhYmVsPjwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIGlkPVwiJHtrZXl9XCJcbiAgICAgICAgICAgICAgICAgIC52YWx1ZT0ke2xpdmUodGFzay5tZXRyaWNzW2tleV0pfVxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICBAY2hhbmdlPSR7YXN5bmMgKGU6IEV2ZW50KSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwidGFzay1tZXRyaWMtdmFsdWUtY2hhbmdlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0luZGV4OiB0YXNrSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiArKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPmAsXG4gICAgICAgICl9XG4gICAgICA8L3RhYmxlPlxuICAgIGA7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwic2VsZWN0ZWQtdGFzay1wYW5lbFwiLCBTZWxlY3RlZFRhc2tQYW5lbCk7XG4iLCAiaW1wb3J0IHsgQ2hhcnQsIFRhc2sgfSBmcm9tICcuLi9jaGFydC9jaGFydCc7XG5pbXBvcnQgeyBQcmVjaXNpb24gfSBmcm9tICcuLi9wcmVjaXNpb24vcHJlY2lzaW9uJztcbmltcG9ydCB7IENvbXB1dGVTbGFjaywgQ3JpdGljYWxQYXRoIH0gZnJvbSAnLi4vc2xhY2svc2xhY2snO1xuaW1wb3J0IHsgSmFjb2JpYW4sIFVuY2VydGFpbnR5IH0gZnJvbSAnLi4vc3RhdHMvY2RmL3RyaWFuZ3VsYXIvamFjb2JpYW4nO1xuXG5jb25zdCBNQVhfUkFORE9NID0gMTAwMDtcblxuY29uc3QgcHJlY2lzaW9uID0gbmV3IFByZWNpc2lvbigyKTtcblxuY29uc3Qgcm5kSW50ID0gKG46IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuKTtcbn07XG5cbi8vIFRoZSByZXN1bHRzIG9mIG9uZSBzdGVwIG9mIHRoZSBzaW11bGF0aW9uIHdpbGwgcHJvZHVjZSBhIGNyaXRpY2FsIHBhdGguIFRoaXNcbi8vIGludGVyZmFjZSBpcyB1c2VkIHRvIHN0b3JlIHRoZSBudW1iZXIgb2YgdGltZXMgYSBjcml0aWNhbCBwYXRoIGFwcGVhcmVkLiBhbmRcbi8vIGEgc2FtcGxlIG9mIHRhc2sgZHVyYXRpb25zIHRoYXQgY2F1c2VkIHRoZSBjcml0aWNhbCBwYXRoIHRvIGFwcGVhci5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JpdGljYWxQYXRoRW50cnkge1xuICBjb3VudDogbnVtYmVyO1xuICBjcml0aWNhbFBhdGg6IG51bWJlcltdO1xuICBkdXJhdGlvbnM6IG51bWJlcltdO1xufVxuXG4vLyBGb3IgZWFjaCB0YXNrIHJlY29yZCBob3cgbWFueSB0aW1lcyBpdCBhcHBlYXJlZCBvbiBhIGNyaXRpY2FsIHBhdGguXG5leHBvcnQgaW50ZXJmYWNlIENyaXRpY2FsUGF0aFRhc2tFbnRyeSB7XG4gIHRhc2tJbmRleDogbnVtYmVyO1xuICBkdXJhdGlvbjogbnVtYmVyO1xuICBudW1UaW1lc0FwcGVhcmVkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltdWxhdGlvblJlc3VsdHMge1xuICAvLyBNYXBzIGNyaXRpY2FsIHBhdGggdG8gdGhlIGVudHJ5IGRlc2NyaWJpbmcgaXQuXG4gIHBhdGhzOiBNYXA8c3RyaW5nLCBDcml0aWNhbFBhdGhFbnRyeT47XG5cbiAgLy8gSW5mb3JtYXRpb24gYWJvdXQgZWFjaCB0YXNrIGFuZCBob3cgb2Z0ZW4gaXQgYXBwZWFyZWQgb24gYSBjcml0aWNhbCBwYXRoLlxuICB0YXNrczogQ3JpdGljYWxQYXRoVGFza0VudHJ5W107XG59XG5cbi8qKlxuICogU2ltdWxhdGUgdGhlIHVuY2VydGFpbnR5IGluIHRoZSBwbGFuIGFuZCBnZW5lcmF0ZSBwb3NzaWJsZSBhbHRlcm5hdGUgY3JpdGljYWxcbiAqIHBhdGhzLlxuICovXG5leHBvcnQgY29uc3Qgc2ltdWxhdGlvbiA9IChcbiAgY2hhcnQ6IENoYXJ0LFxuICBudW1TaW11bGF0aW9uTG9vcHM6IG51bWJlcixcbiAgb3JpZ2luYWxDcml0aWNhbFBhdGg6IG51bWJlcltdLFxuICBmaW5pc2hlZFRhc2tzOiBTZXQ8bnVtYmVyPlxuKTogU2ltdWxhdGlvblJlc3VsdHMgPT4ge1xuICBjb25zdCBhbGxDcml0aWNhbFBhdGhzID0gbmV3IE1hcDxzdHJpbmcsIENyaXRpY2FsUGF0aEVudHJ5PigpO1xuICBhbGxDcml0aWNhbFBhdGhzLnNldChgJHtvcmlnaW5hbENyaXRpY2FsUGF0aH1gLCB7XG4gICAgY291bnQ6IDAsXG4gICAgY3JpdGljYWxQYXRoOiBvcmlnaW5hbENyaXRpY2FsUGF0aC5zbGljZSgpLFxuICAgIGR1cmF0aW9uczogY2hhcnQuVmVydGljZXMubWFwKCh0YXNrOiBUYXNrKSA9PiB0YXNrLmR1cmF0aW9uKSxcbiAgfSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TaW11bGF0aW9uTG9vcHM7IGkrKykge1xuICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBkdXJhdGlvbnMgYmFzZWQgb24gZWFjaCBUYXNrcyB1bmNlcnRhaW50eS5cbiAgICBjb25zdCBkdXJhdGlvbnMgPSBjaGFydC5WZXJ0aWNlcy5tYXAoKHQ6IFRhc2ssIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChmaW5pc2hlZFRhc2tzLmhhcyhpbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHQuZHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJhd0R1cmF0aW9uID0gbmV3IEphY29iaWFuKFxuICAgICAgICB0LmR1cmF0aW9uLCAvLyBBY2NlcHRhYmxlIGRpcmVjdCBhY2Nlc3MgdG8gZHVyYXRpb24uXG4gICAgICAgIHQuZ2V0UmVzb3VyY2UoJ1VuY2VydGFpbnR5JykgYXMgVW5jZXJ0YWludHlcbiAgICAgICkuc2FtcGxlKHJuZEludChNQVhfUkFORE9NKSAvIE1BWF9SQU5ET00pO1xuICAgICAgcmV0dXJuIHByZWNpc2lvbi5yb3VuZChyYXdEdXJhdGlvbik7XG4gICAgfSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzbGFjayBiYXNlZCBvbiB0aG9zZSByYW5kb20gZHVyYXRpb25zLlxuICAgIGNvbnN0IHNsYWNrc1JldCA9IENvbXB1dGVTbGFjayhcbiAgICAgIGNoYXJ0LFxuICAgICAgKHRhc2tJbmRleDogbnVtYmVyKSA9PiBkdXJhdGlvbnNbdGFza0luZGV4XSxcbiAgICAgIHByZWNpc2lvbi5yb3VuZGVyKClcbiAgICApO1xuICAgIGlmICghc2xhY2tzUmV0Lm9rKSB7XG4gICAgICB0aHJvdyBzbGFja3NSZXQuZXJyb3I7XG4gICAgfVxuXG4gICAgY29uc3QgY3JpdGljYWxQYXRoID0gQ3JpdGljYWxQYXRoKHNsYWNrc1JldC52YWx1ZSwgcHJlY2lzaW9uLnJvdW5kZXIoKSk7XG4gICAgY29uc3QgY3JpdGljYWxQYXRoQXNTdHJpbmcgPSBgJHtjcml0aWNhbFBhdGh9YDtcbiAgICBsZXQgcGF0aEVudHJ5ID0gYWxsQ3JpdGljYWxQYXRocy5nZXQoY3JpdGljYWxQYXRoQXNTdHJpbmcpO1xuICAgIGlmIChwYXRoRW50cnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGF0aEVudHJ5ID0ge1xuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgY3JpdGljYWxQYXRoOiBjcml0aWNhbFBhdGgsXG4gICAgICAgIGR1cmF0aW9uczogZHVyYXRpb25zLFxuICAgICAgfTtcbiAgICAgIGFsbENyaXRpY2FsUGF0aHMuc2V0KGNyaXRpY2FsUGF0aEFzU3RyaW5nLCBwYXRoRW50cnkpO1xuICAgIH1cbiAgICBwYXRoRW50cnkuY291bnQrKztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aHM6IGFsbENyaXRpY2FsUGF0aHMsXG4gICAgdGFza3M6IGNyaXRpY2FsVGFza0ZyZXF1ZW5jaWVzKGFsbENyaXRpY2FsUGF0aHMsIGNoYXJ0KSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcml0aWNhbFRhc2tGcmVxdWVuY2llcyA9IChcbiAgYWxsQ3JpdGljYWxQYXRoczogTWFwPHN0cmluZywgQ3JpdGljYWxQYXRoRW50cnk+LFxuICBjaGFydDogQ2hhcnRcbik6IENyaXRpY2FsUGF0aFRhc2tFbnRyeVtdID0+IHtcbiAgY29uc3QgY3JpdGlhbFRhc2tzOiBNYXA8bnVtYmVyLCBDcml0aWNhbFBhdGhUYXNrRW50cnk+ID0gbmV3IE1hcCgpO1xuXG4gIGFsbENyaXRpY2FsUGF0aHMuZm9yRWFjaCgodmFsdWU6IENyaXRpY2FsUGF0aEVudHJ5KSA9PiB7XG4gICAgdmFsdWUuY3JpdGljYWxQYXRoLmZvckVhY2goKHRhc2tJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBsZXQgdGFza0VudHJ5ID0gY3JpdGlhbFRhc2tzLmdldCh0YXNrSW5kZXgpO1xuICAgICAgaWYgKHRhc2tFbnRyeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhc2tFbnRyeSA9IHtcbiAgICAgICAgICB0YXNrSW5kZXg6IHRhc2tJbmRleCxcbiAgICAgICAgICBkdXJhdGlvbjogY2hhcnQuVmVydGljZXNbdGFza0luZGV4XS5kdXJhdGlvbixcbiAgICAgICAgICBudW1UaW1lc0FwcGVhcmVkOiAwLFxuICAgICAgICB9O1xuICAgICAgICBjcml0aWFsVGFza3Muc2V0KHRhc2tJbmRleCwgdGFza0VudHJ5KTtcbiAgICAgIH1cbiAgICAgIHRhc2tFbnRyeS5udW1UaW1lc0FwcGVhcmVkICs9IHZhbHVlLmNvdW50O1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gWy4uLmNyaXRpYWxUYXNrcy52YWx1ZXMoKV0uc29ydChcbiAgICAoYTogQ3JpdGljYWxQYXRoVGFza0VudHJ5LCBiOiBDcml0aWNhbFBhdGhUYXNrRW50cnkpOiBudW1iZXIgPT4ge1xuICAgICAgcmV0dXJuIGIuZHVyYXRpb24gLSBhLmR1cmF0aW9uO1xuICAgIH1cbiAgKTtcbn07XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCB7XG4gIENyaXRpY2FsUGF0aFRhc2tFbnRyeSxcbiAgU2ltdWxhdGlvblJlc3VsdHMsXG4gIHNpbXVsYXRpb24sXG59IGZyb20gJy4uL3NpbXVsYXRpb24vc2ltdWxhdGlvbic7XG5pbXBvcnQgeyBDaGFydCB9IGZyb20gJy4uL2NoYXJ0L2NoYXJ0JztcbmltcG9ydCB7IGRpZmZlcmVuY2UgfSBmcm9tICcuLi9kYWcvYWxnb3JpdGhtcy9jaXJjdWxhcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltdWxhdGlvblNlbGVjdERldGFpbHMge1xuICBkdXJhdGlvbnM6IG51bWJlcltdIHwgbnVsbDtcbiAgY3JpdGljYWxQYXRoOiBudW1iZXJbXTtcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgR2xvYmFsRXZlbnRIYW5kbGVyc0V2ZW50TWFwIHtcbiAgICAnc2ltdWxhdGlvbi1zZWxlY3QnOiBDdXN0b21FdmVudDxTaW11bGF0aW9uU2VsZWN0RGV0YWlscz47XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNpbXVsYXRpb25QYW5lbCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgcmVzdWx0czogU2ltdWxhdGlvblJlc3VsdHMgPSB7XG4gICAgcGF0aHM6IG5ldyBNYXAoKSxcbiAgICB0YXNrczogW10sXG4gIH07XG4gIGNoYXJ0OiBDaGFydCB8IG51bGwgPSBudWxsO1xuICBudW1TaW11bGF0aW9uTG9vcHM6IG51bWJlciA9IDA7XG4gIG9yaWdpbmFsQ3JpdGljYWxQYXRoOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBzaW11bGF0ZShcbiAgICBjaGFydDogQ2hhcnQsXG4gICAgbnVtU2ltdWxhdGlvbkxvb3BzOiBudW1iZXIsXG4gICAgb3JpZ2luYWxDcml0aWNhbFBhdGg6IG51bWJlcltdLFxuICAgIGZpbmlzaGVkVGFza3M6IFNldDxudW1iZXI+XG4gICk6IG51bWJlcltdIHtcbiAgICB0aGlzLnJlc3VsdHMgPSBzaW11bGF0aW9uKFxuICAgICAgY2hhcnQsXG4gICAgICBudW1TaW11bGF0aW9uTG9vcHMsXG4gICAgICBvcmlnaW5hbENyaXRpY2FsUGF0aCxcbiAgICAgIGZpbmlzaGVkVGFza3NcbiAgICApO1xuICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICB0aGlzLm51bVNpbXVsYXRpb25Mb29wcyA9IG51bVNpbXVsYXRpb25Mb29wcztcbiAgICB0aGlzLm9yaWdpbmFsQ3JpdGljYWxQYXRoID0gb3JpZ2luYWxDcml0aWNhbFBhdGg7XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHJldHVybiB0aGlzLnJlc3VsdHMudGFza3MubWFwKFxuICAgICAgKHRhc2tFbnRyeTogQ3JpdGljYWxQYXRoVGFza0VudHJ5KSA9PiB0YXNrRW50cnkudGFza0luZGV4XG4gICAgKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMucmVzdWx0cyA9IHtcbiAgICAgIHBhdGhzOiBuZXcgTWFwKCksXG4gICAgICB0YXNrczogW10sXG4gICAgfTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQ8U2ltdWxhdGlvblNlbGVjdERldGFpbHM+KCdzaW11bGF0aW9uLXNlbGVjdCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgZHVyYXRpb25zOiBudWxsLFxuICAgICAgICAgIGNyaXRpY2FsUGF0aDogW10sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHBhdGhDbGlja2VkKGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50PFNpbXVsYXRpb25TZWxlY3REZXRhaWxzPignc2ltdWxhdGlvbi1zZWxlY3QnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGR1cmF0aW9uczogdGhpcy5yZXN1bHRzLnBhdGhzLmdldChrZXkpIS5kdXJhdGlvbnMsXG4gICAgICAgICAgY3JpdGljYWxQYXRoOiB0aGlzLnJlc3VsdHMucGF0aHMuZ2V0KGtleSkhLmNyaXRpY2FsUGF0aCxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZW5kZXIodGhpcy50ZW1wbGF0ZSgpLCB0aGlzKTtcbiAgfVxuXG4gIGRpc3BsYXlDcml0aWNhbFBhdGhEaWZmZXJlbmNlcyhjcml0aWNhbFBhdGg6IG51bWJlcltdKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0IHJlbW92ZWQgPSBkaWZmZXJlbmNlKHRoaXMub3JpZ2luYWxDcml0aWNhbFBhdGgsIGNyaXRpY2FsUGF0aCk7XG4gICAgY29uc3QgYWRkZWQgPSBkaWZmZXJlbmNlKGNyaXRpY2FsUGF0aCwgdGhpcy5vcmlnaW5hbENyaXRpY2FsUGF0aCk7XG4gICAgaWYgKHJlbW92ZWQubGVuZ3RoID09PSAwICYmIGFkZGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGh0bWxgT3JpZ2luYWwgQ3JpdGljYWwgUGF0aGA7XG4gICAgfVxuICAgIHJldHVybiBodG1sYFxuICAgICAgJHthZGRlZC5tYXAoXG4gICAgICAgICh0YXNrSW5kZXg6IG51bWJlcikgPT4gaHRtbGBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImFkZGVkXCI+KyR7dGhpcy5jaGFydCEuVmVydGljZXNbdGFza0luZGV4XS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgYFxuICAgICAgKX1cbiAgICAgICR7cmVtb3ZlZC5tYXAoXG4gICAgICAgICh0YXNrSW5kZXg6IG51bWJlcikgPT4gaHRtbGBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlbW92ZWRcIj4tJHt0aGlzLmNoYXJ0IS5WZXJ0aWNlc1t0YXNrSW5kZXhdLm5hbWV9PC9zcGFuPlxuICAgICAgICBgXG4gICAgICApfVxuICAgIGA7XG4gIH1cblxuICB0ZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKHRoaXMucmVzdWx0cy5wYXRocy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cbiAgICBjb25zdCBwYXRoS2V5cyA9IFsuLi50aGlzLnJlc3VsdHMucGF0aHMua2V5cygpXTtcbiAgICBjb25zdCBzb3J0ZWRQYXRoS2V5cyA9IHBhdGhLZXlzLnNvcnQoKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnJlc3VsdHMucGF0aHMuZ2V0KGIpIS5jb3VudCAtIHRoaXMucmVzdWx0cy5wYXRocy5nZXQoYSkhLmNvdW50XG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGJ1dHRvblxuICAgICAgICBAY2xpY2s9JHsoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICBDbGVhclxuICAgICAgPC9idXR0b24+XG5cbiAgICAgIDx0YWJsZSBjbGFzcz1cInBhdGhzXCI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+Q291bnQ8L3RoPlxuICAgICAgICAgIDx0aD5Dcml0aWNhbCBQYXRoPC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgJHtzb3J0ZWRQYXRoS2V5cy5tYXAoXG4gICAgICAgICAgKGtleTogc3RyaW5nKSA9PlxuICAgICAgICAgICAgaHRtbGA8dHIgQGNsaWNrPSR7KCkgPT4gdGhpcy5wYXRoQ2xpY2tlZChrZXkpfT5cbiAgICAgICAgICAgICAgPHRkPiR7dGhpcy5yZXN1bHRzLnBhdGhzLmdldChrZXkpIS5jb3VudH08L3RkPlxuICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgJHt0aGlzLmRpc3BsYXlDcml0aWNhbFBhdGhEaWZmZXJlbmNlcyhcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0cy5wYXRocy5nZXQoa2V5KSEuY3JpdGljYWxQYXRoXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+YFxuICAgICAgICApfVxuICAgICAgPC90YWJsZT5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICA8dGg+RHVyYXRpb248L3RoPlxuICAgICAgICAgIDx0aD5GcmVxdWVuY3kgKCUpPC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgJHt0aGlzLnJlc3VsdHMudGFza3MubWFwKFxuICAgICAgICAgICh0YXNrRW50cnk6IENyaXRpY2FsUGF0aFRhc2tFbnRyeSkgPT5cbiAgICAgICAgICAgIGh0bWxgPHRyPlxuICAgICAgICAgICAgICA8dGQ+JHt0aGlzLmNoYXJ0IS5WZXJ0aWNlc1t0YXNrRW50cnkudGFza0luZGV4XS5uYW1lfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD4ke3Rhc2tFbnRyeS5kdXJhdGlvbn08L3RkPlxuICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgJHtNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgKDEwMCAqIHRhc2tFbnRyeS5udW1UaW1lc0FwcGVhcmVkKSAvIHRoaXMubnVtU2ltdWxhdGlvbkxvb3BzXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+YFxuICAgICAgICApfVxuICAgICAgPC90YWJsZT5cbiAgICBgO1xuICB9XG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc2ltdWxhdGlvbi1wYW5lbCcsIFNpbXVsYXRpb25QYW5lbCk7XG4iLCAiaW1wb3J0IHsgRXhwbGFuTWFpbiB9IGZyb20gJy4uL2V4cGxhbk1haW4vZXhwbGFuTWFpbi50cyc7XG5pbXBvcnQgeyBTZWFyY2hUeXBlLCBUYXNrU2VhcmNoQ29udHJvbCB9IGZyb20gJy4vdGFzay1zZWFyY2gtY29udHJvbHMudHMnO1xuXG4vKiogVXNlcyBhIHRhc2stc2VhcmNoLWNvbnRyb2wgdG8gc2VhcmNoIHRocm91Z2ggYWxsIFRhc2tzLiAqL1xuZXhwb3J0IGNsYXNzIFNlYXJjaFRhc2tQYW5lbCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgZXhwbGFuTWFpbjogRXhwbGFuTWFpbiB8IG51bGwgPSBudWxsO1xuICB0YXNrU2VhcmNoQ29udHJvbDogVGFza1NlYXJjaENvbnRyb2wgfCBudWxsID0gbnVsbDtcblxuICBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICB0aGlzLmV4cGxhbk1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdleHBsYW4tbWFpbicpO1xuICAgIGlmICghdGhpcy5leHBsYW5NYWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGFza1NlYXJjaENvbnRyb2wgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3Rhc2stc2VhcmNoLWNvbnRyb2wnKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3Rhc2stY2hhbmdlJywgKGUpID0+IHtcbiAgICAgIHRoaXMuZXhwbGFuTWFpbiEuc2V0U2VsZWN0aW9uKGUuZGV0YWlsLnRhc2tJbmRleCwgZS5kZXRhaWwuZm9jdXMsIHRydWUpO1xuICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9KTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3Rhc2stZm9jdXMnLCAoKSA9PlxuICAgICAgdGhpcy5zZXRLZXlib2FyZEZvY3VzVG9JbnB1dCgnZnVsbC1pbmZvJylcbiAgICApO1xuICB9XG5cbiAgc2V0S2V5Ym9hcmRGb2N1c1RvSW5wdXQoc2VhcmNoVHlwZTogU2VhcmNoVHlwZSkge1xuICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgdGhpcy50YXNrU2VhcmNoQ29udHJvbCEudGFza3MgPSB0aGlzLmV4cGxhbk1haW4hLnBsYW4uY2hhcnQuVmVydGljZXM7XG4gICAgdGhpcy50YXNrU2VhcmNoQ29udHJvbCEuaW5jbHVkZWRJbmRleGVzID1cbiAgICAgIHRoaXMuZXhwbGFuTWFpbiEucGxhbi5jaGFydC5WZXJ0aWNlcy5tYXAoXG4gICAgICAgIChfLCBpbmRleDogbnVtYmVyKSA9PiBpbmRleFxuICAgICAgKS5zbGljZSgxLCAtMSk7XG4gICAgdGhpcy50YXNrU2VhcmNoQ29udHJvbCEuc2V0S2V5Ym9hcmRGb2N1c1RvSW5wdXQoc2VhcmNoVHlwZSk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdzZWFyY2gtdGFzay1wYW5lbCcsIFNlYXJjaFRhc2tQYW5lbCk7XG4iLCAiaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQsIGh0bWwsIHJlbmRlciB9IGZyb20gJ2xpdC1odG1sJztcbmltcG9ydCBmdXp6eXNvcnQgZnJvbSAnZnV6enlzb3J0JztcbmltcG9ydCB7IFRhc2sgfSBmcm9tICcuLi9jaGFydC9jaGFydC50cyc7XG5cbmludGVyZmFjZSBUYXNrQ2hhbmdlRGV0YWlsIHtcbiAgdGFza0luZGV4OiBudW1iZXI7XG4gIGZvY3VzOiBib29sZWFuO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAge1xuICAgICd0YXNrLWNoYW5nZSc6IEN1c3RvbUV2ZW50PFRhc2tDaGFuZ2VEZXRhaWw+O1xuICAgICd0YXNrLWZvY3VzJzogQ3VzdG9tRXZlbnQ8bnVsbD47XG4gIH1cbn1cblxuLyoqIFRoZSBpbmRleGVzIHJldHVybmVkIGJ5IGZ1enp5c29ydCBpcyBqdXN0IGEgbGlzdCBvZiB0aGUgaW5kZXhlcyBvZiB0aGUgdGhlXG4gKiAgaW5kaXZpZHVhbCBjaGFycyB0aGF0IGhhdmUgYmVlbiBtYXRjaGVkLiBXZSBuZWVkIHRvIHR1cm4gdGhhdCBpbnRvIHBhaXJzIG9mXG4gKiAgbnVtYmVycyB3ZSBjYW4gcGFzcyB0byBTdHJpbmcucHJvdG90eXBlLnNsaWNlKCkuXG4gKlxuICogIFRoZSBvYnNlcnZhdGlvbiBoZXJlIGlzIHRoYXQgaWYgdGhlIHRhcmdldCBzdHJpbmcgaXMgXCJIZWxsb1wiIGFuZCB0aGUgaW5kaWNlc1xuICogIGFyZSBbMiwzXSB0aGVuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHdlIG1hcmt1cCB0aGUgaGlnaGxpZ2h0ZWQgdGFyZ2V0IGFzXG4gKiAgXCJIZTxiPmxsPC9iPm9cIiBvciBcIkhlPGI+bDwvYj48Yj5sPC9iPm9cIi4gVGhhdCBpcywgd2UgY2FuIHNpbXBsaWZ5IGlmIHdlXG4gKiAgYWx3YXlzIHNsaWNlIG91dCBlYWNoIGNoYXJhY3RlciBpbiB0aGUgdGFyZ2V0IHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlXG4gKiAgaGlnaGxpZ2h0ZWQuXG4gKlxuICogIFNvIGluZGV4ZXNUb1JhbmdlcyByZXR1cm5zIGFuIGFycmF5IG9mIGluZGV4ZXMsIHRoYXQgaWYgdGFrZW4gaW4gcGFpcnMsIHdpbGxcbiAqICBhbHRlcm5hdGVseSBzbGljZSBvZmYgcGFydHMgb2YgdGFyZ2V0IHRoYXQgbmVlZCB0byBiZSBlbXBoYXNpemVkLlxuICpcbiAqICBJbiB0aGUgYWJvdmUgZXhhbXBsZSB0YXJnZXQgPSBcIkhlbGxvXCIgYW5kIGluZGV4ZXMgPSBbMiwzXSwgdGhlblxuICogIGluZGV4ZXNUb1JhbmdlcyB3aWxsIHJldHVyblwiXG4gKlxuICogICAgIFswLDIsMywzLDQsNV1cbiAqXG4gKiAgd2hpY2ggd2lsbCBnZW5lcmF0ZSB0aGUgZm9sbG93aW5nIHBhaXJzIGFzIGFyZ3MgdG8gc2xpY2U6XG4gKlxuICogICAgIFswLDJdIEhlXG4gKiAgICAgWzIsM10gbCAgICNcbiAqICAgICBbMywzXVxuICogICAgIFszLDRdIGwgICAjXG4gKiAgICAgWzQsNV0gb1xuICpcbiAqIE5vdGUgdGhhdCBpZiB3ZSBhbHRlcm5hdGUgYm9sZGluZyB0aGVuIG9ubHkgdGhlIHR3byAnbCdzIGdldCBlbXBoYXNpemVkLFxuICogd2hpY2ggaXMgd2hhdCB3ZSB3YW50IChEZW5vdGVkIGJ5ICMgYWJvdmUpLlxuICovXG5jb25zdCBpbmRleGVzVG9SYW5nZXMgPSAoXG4gIGluZGV4ZXM6IFJlYWRvbmx5PG51bWJlcltdPixcbiAgbGVuOiBudW1iZXJcbik6IG51bWJlcltdID0+IHtcbiAgLy8gQ29udmVydCBlYWNoIGluZGV4IG9mIGEgaGlnaGxpZ2h0ZWQgY2hhciBpbnRvIGEgcGFpciBvZiBudW1iZXJzIHdlIGNhbiBwYXNzXG4gIC8vIHRvIHNsaWNlLCBhbmQgdGhlbiBmbGF0dGVuLlxuICBjb25zdCByYW5nZXMgPSBpbmRleGVzLm1hcCgoeDogbnVtYmVyKSA9PiBbeCwgeCArIDFdKS5mbGF0KCk7XG5cbiAgLy8gTm93IHByZXBlbmQgd2l0aCAwIGFuZCBhcHBlbmQgJ2xlbicgc28gdGhhdCB3ZSBoYXZlIHBhaXJzIHRoYXQgd2lsbCBzbGljZVxuICAvLyB0YXJnZXQgZnVsbHkgaW50byBzdWJzdHJpbmdzLiBSZW1lbWJlciB0aGF0IHNsaWNlIHJldHVybnMgY2hhcnMgaW4gW2EsIGIpLFxuICAvLyBpLmUuIFN0cmluZy5zbGljZShhLGIpIHdoZXJlIGIgaXMgb25lIGJleW9uZCB0aGUgbGFzdCBjaGFyIGluIHRoZSBzdHJpbmcgd2VcbiAgLy8gd2FudCB0byBpbmNsdWRlLlxuICByZXR1cm4gWzAsIC4uLnJhbmdlcywgbGVuXTtcbn07XG5cbi8qKiBSZXR1cm5zIHRoZSB0YXJnZXQgc3RyaW5nIGhpZ2hsaWdodGVkIGFyb3VuZCB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGluZGV4ZXMgaW5cbiAqICB0aGUgcmFuZ2VzIGFycmF5LlxuICpcbiAqICBXZSBkb24ndCB1c2UgdGhlIGhpZ2hsaWdodGluZyBmcm9tIGZ1enp5c29ydC5cbiAqL1xuY29uc3QgaGlnaGxpZ2h0ID0gKHJhbmdlczogbnVtYmVyW10sIHRhcmdldDogc3RyaW5nKTogVGVtcGxhdGVSZXN1bHRbXSA9PiB7XG4gIGNvbnN0IHJldDogVGVtcGxhdGVSZXN1bHRbXSA9IFtdO1xuICBsZXQgaW5IaWdobGlnaHQgPSBmYWxzZTtcblxuICAvLyBSdW4gZG93biByYW5nZXMgd2l0aCBhIHNsaWRpbmcgd2luZG93IG9mIGxlbmd0aCAyIGFuZCB1c2UgdGhhdCBhcyB0aGVcbiAgLy8gYXJndW1lbnRzIHRvIHNsaWNlLiBBbHRlcm5hdGUgaGlnaGxpZ2h0aW5nIGVhY2ggc2VnbWVudC5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgY29uc3Qgc3ViID0gdGFyZ2V0LnNsaWNlKHJhbmdlc1tpXSwgcmFuZ2VzW2kgKyAxXSk7XG4gICAgaWYgKGluSGlnaGxpZ2h0KSB7XG4gICAgICByZXQucHVzaChodG1sYDxiPiR7c3VifTwvYj5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0LnB1c2goaHRtbGAke3N1Yn1gKTtcbiAgICB9XG4gICAgaW5IaWdobGlnaHQgPSAhaW5IaWdobGlnaHQ7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbi8qKiBSZXR1cm5zIHRoZSB0YXJnZXQgc3RyaW5nIGhpZ2hsaWdodGVkIGFyb3VuZCB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGluZGV4ZXMuXG4gKiAgTm90ZSB0aGF0IHdlIGRvbid0IHVzZSBmdXp6eXNvcnQncyBoaWdobGlnaHQgYmVjYXVzZSB3ZSBoYXZlbid0IHNhbml0aXplZFxuICogIHRoZSBuYW1lcy5cbiAqL1xuY29uc3QgaGlnaGxpZ2h0ZWRUYXJnZXQgPSAoXG4gIGluZGV4ZXM6IFJlYWRvbmx5PG51bWJlcltdPixcbiAgdGFyZ2V0OiBzdHJpbmdcbik6IFRlbXBsYXRlUmVzdWx0W10gPT4ge1xuICByZXR1cm4gaGlnaGxpZ2h0KGluZGV4ZXNUb1JhbmdlcyhpbmRleGVzLCB0YXJnZXQubGVuZ3RoKSwgdGFyZ2V0KTtcbn07XG5cbmNvbnN0IHNlYXJjaFJlc3VsdHMgPSAoc2VhcmNoVGFza1BhbmVsOiBUYXNrU2VhcmNoQ29udHJvbCk6IFRlbXBsYXRlUmVzdWx0W10gPT5cbiAgc2VhcmNoVGFza1BhbmVsLnNlYXJjaFJlc3VsdHMubWFwKFxuICAgICh0YXNrOiBTZWFyY2hSZXN1bHQsIGluZGV4OiBudW1iZXIpID0+XG4gICAgICBodG1sYCA8bGlcbiAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgQGNsaWNrPVwiJHsoKSA9PiBzZWFyY2hUYXNrUGFuZWwuc2VsZWN0U2VhcmNoUmVzdWx0KGluZGV4LCBmYWxzZSl9XCJcbiAgICAgICAgP2RhdGEtZm9jdXM9JHtpbmRleCA9PT0gc2VhcmNoVGFza1BhbmVsLmZvY3VzSW5kZXh9XG4gICAgICAgIGRhdGEtaW5kZXg9JHtpbmRleH1cbiAgICAgID5cbiAgICAgICAgJHtoaWdobGlnaHRlZFRhcmdldCh0YXNrLmluZGV4ZXMsIHRhc2sudGFyZ2V0KX1cbiAgICAgIDwvbGk+YFxuICApO1xuXG5jb25zdCB0ZW1wbGF0ZSA9IChzZWFyY2hUYXNrUGFuZWw6IFRhc2tTZWFyY2hDb250cm9sKTogVGVtcGxhdGVSZXN1bHQgPT4gaHRtbGBcbiAgPGlucHV0XG4gICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICBuYW1lPVwidGFza19zZWFyY2hcIlxuICAgIGlkPVwic2VhcmNoX2lucHV0XCJcbiAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaFwiXG4gICAgdHlwZT1cInRleHRcIlxuICAgIEBpbnB1dD1cIiR7KGU6IElucHV0RXZlbnQpID0+XG4gICAgICBzZWFyY2hUYXNrUGFuZWwub25JbnB1dCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpfVwiXG4gICAgQGtleWRvd249XCIkeyhlOiBLZXlib2FyZEV2ZW50KSA9PiBzZWFyY2hUYXNrUGFuZWwub25LZXlEb3duKGUpfVwiXG4gICAgQGZvY3VzPVwiJHsoKSA9PiBzZWFyY2hUYXNrUGFuZWwuc2VhcmNoSW5wdXRSZWNlaXZlZEZvY3VzKCl9XCJcbiAgLz5cbiAgPHVsPlxuICAgICR7c2VhcmNoUmVzdWx0cyhzZWFyY2hUYXNrUGFuZWwpfVxuICA8L3VsPlxuYDtcblxuZXhwb3J0IHR5cGUgU2VhcmNoVHlwZSA9ICduYW1lLW9ubHknIHwgJ2Z1bGwtaW5mbyc7XG5cbmNvbnN0IHNlYXJjaFN0cmluZ0Zyb21UYXNrQnVpbGRlciA9IChcbiAgZnVsbFRhc2tMaXN0OiBUYXNrW10sXG4gIHNlYXJjaFR5cGU6IFNlYXJjaFR5cGUsXG4gIGluY2x1ZGVkSW5kZXhlczogU2V0PG51bWJlcj4sXG4gIG1heE5hbWVMZW5ndGg6IG51bWJlclxuKTogKCh0YXNrOiBUYXNrKSA9PiBzdHJpbmcpID0+IHtcbiAgaWYgKHNlYXJjaFR5cGUgPT09ICdmdWxsLWluZm8nKSB7XG4gICAgcmV0dXJuICh0YXNrOiBUYXNrKTogc3RyaW5nID0+IHtcbiAgICAgIGlmIChpbmNsdWRlZEluZGV4ZXMuc2l6ZSAhPT0gMCkge1xuICAgICAgICBjb25zdCB0YXNrSW5kZXggPSBmdWxsVGFza0xpc3QuaW5kZXhPZih0YXNrKTtcbiAgICAgICAgaWYgKCFpbmNsdWRlZEluZGV4ZXMuaGFzKHRhc2tJbmRleCkpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHRhc2sucmVzb3VyY2VzKTtcbiAgICAgIHJlc291cmNlS2V5cy5zb3J0KCk7XG4gICAgICByZXR1cm4gYCR7dGFzay5uYW1lfSAkeyctJy5yZXBlYXQobWF4TmFtZUxlbmd0aCAtIHRhc2submFtZS5sZW5ndGggKyAyKX0gJHtyZXNvdXJjZUtleXNcbiAgICAgICAgLm1hcCgoa2V5OiBzdHJpbmcpID0+IHRhc2sucmVzb3VyY2VzW2tleV0pXG4gICAgICAgIC5qb2luKCcgJyl9YDtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAodGFzazogVGFzayk6IHN0cmluZyA9PiB7XG4gICAgICBpZiAoaW5jbHVkZWRJbmRleGVzLnNpemUgIT09IDApIHtcbiAgICAgICAgY29uc3QgdGFza0luZGV4ID0gZnVsbFRhc2tMaXN0LmluZGV4T2YodGFzayk7XG4gICAgICAgIGlmICghaW5jbHVkZWRJbmRleGVzLmhhcyh0YXNrSW5kZXgpKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFzay5uYW1lO1xuICAgIH07XG4gIH1cbn07XG5cbmludGVyZmFjZSBTZWFyY2hSZXN1bHQge1xuICBvYmo6IFRhc2s7XG4gIGluZGV4ZXM6IFJlYWRvbmx5QXJyYXk8bnVtYmVyPjtcbiAgdGFyZ2V0OiBzdHJpbmc7XG59XG5cbmNvbnN0IHRhc2tMaXN0VG9TZWFyY2hSZXN1bHRzID0gKFxuICB0YXNrczogVGFza1tdLFxuICB0YXNrVG9TZWFyY2hTdHJpbmc6ICh0YXNrOiBUYXNrKSA9PiBzdHJpbmcsXG4gIGluY2x1ZGVkSW5kZXhlczogU2V0PG51bWJlcj5cbik6IFNlYXJjaFJlc3VsdFtdID0+IHtcbiAgcmV0dXJuIHRhc2tzXG4gICAgLmZpbHRlcigoX3Rhc2s6IFRhc2ssIGluZGV4OiBudW1iZXIpID0+IGluY2x1ZGVkSW5kZXhlcy5oYXMoaW5kZXgpKVxuICAgIC5tYXAoKHQ6IFRhc2spID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9iajogdCxcbiAgICAgICAgaW5kZXhlczogW10sXG4gICAgICAgIHRhcmdldDogdGFza1RvU2VhcmNoU3RyaW5nKHQpLFxuICAgICAgfTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogQ29udHJvbCBmb3IgdXNpbmcgZnV6enkgc2VhcmNoIG9uIGEgbGlzdCBvZiB0YXNrcy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXNrU2VhcmNoQ29udHJvbCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgX3Rhc2tzOiBUYXNrW10gPSBbXTtcbiAgX2luY2x1ZGVkSW5kZXhlczogU2V0PG51bWJlcj4gPSBuZXcgU2V0KCk7XG4gIGZvY3VzSW5kZXg6IG51bWJlciA9IDA7XG4gIHNlYXJjaFJlc3VsdHM6IFJlYWRvbmx5QXJyYXk8U2VhcmNoUmVzdWx0PiA9IFtdO1xuICBzZWFyY2hUeXBlOiBTZWFyY2hUeXBlID0gJ25hbWUtb25seSc7XG4gIHRhc2tUb1NlYXJjaFN0cmluZzogKHRhc2s6IFRhc2spID0+IHN0cmluZyA9ICgpID0+ICcnO1xuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHJlbmRlcih0ZW1wbGF0ZSh0aGlzKSwgdGhpcyk7XG4gIH1cblxuICBvbklucHV0KGlucHV0U3RyaW5nOiBzdHJpbmcpIHtcbiAgICBpZiAoaW5wdXRTdHJpbmcgPT09ICcnKSB7XG4gICAgICB0aGlzLnNlYXJjaFJlc3VsdHMgPSB0YXNrTGlzdFRvU2VhcmNoUmVzdWx0cyhcbiAgICAgICAgdGhpcy5fdGFza3MsXG4gICAgICAgIHRoaXMudGFza1RvU2VhcmNoU3RyaW5nLFxuICAgICAgICB0aGlzLl9pbmNsdWRlZEluZGV4ZXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cyA9IGZ1enp5c29ydC5nbzxUYXNrPihcbiAgICAgICAgaW5wdXRTdHJpbmcsXG4gICAgICAgIHRoaXMuX3Rhc2tzLnNsaWNlKDEsIC0xKSwgLy8gUmVtb3ZlIFN0YXJ0IGFuZCBGaW5pc2ggZnJvbSBzZWFyY2ggcmFuZ2UuXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IHRoaXMudGFza1RvU2VhcmNoU3RyaW5nLFxuICAgICAgICAgIGxpbWl0OiB0aGlzLl90YXNrcy5sZW5ndGgsXG4gICAgICAgICAgdGhyZXNob2xkOiAwLjIsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuZm9jdXNJbmRleCA9IDA7XG4gICAgcmVuZGVyKHRlbXBsYXRlKHRoaXMpLCB0aGlzKTtcbiAgfVxuXG4gIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc2VhcmNoUmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVE9ETyAtIGV4dHJhY3QgZnJvbSB0aGUgdHdvIHBsYWNlcyB3ZSBkbyB0aGlzLlxuICAgIGNvbnN0IGtleW5hbWUgPSBgJHtlLnNoaWZ0S2V5ID8gJ3NoaWZ0LScgOiAnJ30ke2UuY3RybEtleSA/ICdjdHJsLScgOiAnJ30ke2UubWV0YUtleSA/ICdtZXRhLScgOiAnJ30ke2UuYWx0S2V5ID8gJ2FsdC0nIDogJyd9JHtlLmtleX1gO1xuICAgIHN3aXRjaCAoa2V5bmFtZSkge1xuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgdGhpcy5mb2N1c0luZGV4ID0gKHRoaXMuZm9jdXNJbmRleCArIDEpICUgdGhpcy5zZWFyY2hSZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICB0aGlzLmZvY3VzSW5kZXggPVxuICAgICAgICAgICh0aGlzLmZvY3VzSW5kZXggLSAxICsgdGhpcy5zZWFyY2hSZXN1bHRzLmxlbmd0aCkgJVxuICAgICAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cy5sZW5ndGg7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgIGlmICh0aGlzLnNlYXJjaFJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0U2VhcmNoUmVzdWx0KHRoaXMuZm9jdXNJbmRleCwgZmFsc2UpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY3RybC1FbnRlcic6XG4gICAgICAgIGlmICh0aGlzLnNlYXJjaFJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0U2VhcmNoUmVzdWx0KHRoaXMuZm9jdXNJbmRleCwgdHJ1ZSk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZW5kZXIodGVtcGxhdGUodGhpcyksIHRoaXMpO1xuICB9XG5cbiAgc2VsZWN0U2VhcmNoUmVzdWx0KGluZGV4OiBudW1iZXIsIGZvY3VzOiBib29sZWFuKSB7XG4gICAgY29uc3QgdGFza0luZGV4ID0gdGhpcy5fdGFza3MuaW5kZXhPZih0aGlzLnNlYXJjaFJlc3VsdHNbaW5kZXhdLm9iaik7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50PFRhc2tDaGFuZ2VEZXRhaWw+KCd0YXNrLWNoYW5nZScsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdGFza0luZGV4OiB0YXNrSW5kZXgsXG4gICAgICAgICAgZm9jdXM6IGZvY3VzLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuc2VhcmNoUmVzdWx0cyA9IFtdO1xuICAgIHJlbmRlcih0ZW1wbGF0ZSh0aGlzKSwgdGhpcyk7XG4gIH1cblxuICBzZWFyY2hJbnB1dFJlY2VpdmVkRm9jdXMoKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50PG51bWJlcj4oJ3Rhc2stZm9jdXMnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBzZXRLZXlib2FyZEZvY3VzVG9JbnB1dChzZWFyY2hUeXBlOiBTZWFyY2hUeXBlKSB7XG4gICAgdGhpcy5zZWFyY2hUeXBlID0gc2VhcmNoVHlwZTtcbiAgICBjb25zdCBpbnB1dENvbnRyb2wgPSB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oJ2lucHV0JykhO1xuICAgIGlucHV0Q29udHJvbC5mb2N1cygpO1xuICAgIGlucHV0Q29udHJvbC5zZWxlY3QoKTtcbiAgICB0aGlzLm9uSW5wdXQoaW5wdXRDb250cm9sLnZhbHVlKTtcbiAgICByZW5kZXIodGVtcGxhdGUodGhpcyksIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHNldCB0YXNrcyh0YXNrczogVGFza1tdKSB7XG4gICAgdGhpcy5fdGFza3MgPSB0YXNrcztcbiAgICB0aGlzLmJ1aWxkVGFza1RvU2VhcmNoU3RyaW5nKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0IGluY2x1ZGVkSW5kZXhlcyh2OiBudW1iZXJbXSkge1xuICAgIHRoaXMuX2luY2x1ZGVkSW5kZXhlcyA9IG5ldyBTZXQodik7XG4gICAgdGhpcy5idWlsZFRhc2tUb1NlYXJjaFN0cmluZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFRhc2tUb1NlYXJjaFN0cmluZygpIHtcbiAgICBjb25zdCBtYXhOYW1lTGVuZ3RoID0gdGhpcy5fdGFza3MucmVkdWNlPG51bWJlcj4oXG4gICAgICAocHJldjogbnVtYmVyLCB0YXNrOiBUYXNrKTogbnVtYmVyID0+XG4gICAgICAgIHRhc2submFtZS5sZW5ndGggPiBwcmV2ID8gdGFzay5uYW1lLmxlbmd0aCA6IHByZXYsXG4gICAgICAwXG4gICAgKTtcbiAgICB0aGlzLnRhc2tUb1NlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZ0Zyb21UYXNrQnVpbGRlcihcbiAgICAgIHRoaXMuX3Rhc2tzLFxuICAgICAgdGhpcy5zZWFyY2hUeXBlLFxuICAgICAgdGhpcy5faW5jbHVkZWRJbmRleGVzLFxuICAgICAgbWF4TmFtZUxlbmd0aFxuICAgICk7XG4gICAgdGhpcy5vbklucHV0KCcnKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3Rhc2stc2VhcmNoLWNvbnRyb2wnLCBUYXNrU2VhcmNoQ29udHJvbCk7XG4iLCAiLyoqIEEgY29vcmRpbmF0ZSBwb2ludCBvbiB0aGUgcmVuZGVyaW5nIHN1cmZhY2UuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnQge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IHB0ID0gKHg6IG51bWJlciwgeTogbnVtYmVyKTogUG9pbnQgPT4ge1xuICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG59O1xuXG5leHBvcnQgY29uc3QgcHR0ID0gKHA6IFtudW1iZXIsIG51bWJlcl0pOiBQb2ludCA9PiB7XG4gIGNvbnN0IFt4LCB5XSA9IHA7XG4gIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzdW0gPSAocDE6IFBvaW50LCBwMjogUG9pbnQpOiBQb2ludCA9PiB7XG4gIHJldHVybiB7XG4gICAgeDogcDEueCArIHAyLngsXG4gICAgeTogcDEueSArIHAyLnksXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgYWRkID0gKHAxOiBQb2ludCwgcDI6IFtudW1iZXIsIG51bWJlcl0pOiBQb2ludCA9PiB7XG4gIGNvbnN0IFt4MiwgeTJdID0gcDI7XG4gIHJldHVybiB7XG4gICAgeDogTWF0aC5mbG9vcihwMS54ICsgeDIpLFxuICAgIHk6IE1hdGguZmxvb3IocDEueSArIHkyKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBlcXVhbCA9IChwMTogUG9pbnQsIHAyOiBQb2ludCk6IGJvb2xlYW4gPT5cbiAgcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xuXG5leHBvcnQgY29uc3QgZHVwID0gKHA6IFBvaW50KTogUG9pbnQgPT4ge1xuICByZXR1cm4geyB4OiBwLngsIHk6IHAueSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGRpZmZlcmVuY2UgPSAocDE6IFBvaW50LCBwMjogUG9pbnQpOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgcmV0dXJuIFtwMi54IC0gcDEueCwgcDIueSAtIHAxLnldO1xufTtcbiIsICIvKipcbiAqIEZ1bmN0aW9uYWxpdHkgZm9yIGNyZWF0aW5nIGRyYWdnYWJsZSBkaXZpZGVycyBiZXR3ZWVuIGVsZW1lbnRzIG9uIGEgcGFnZS5cbiAqL1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tIFwiLi4vLi4vbWV0cmljcy9yYW5nZS50c1wiO1xuaW1wb3J0IHsgUG9pbnQsIGR1cCwgZXF1YWwsIHB0IH0gZnJvbSBcIi4uLy4uL3BvaW50L3BvaW50LnRzXCI7XG5cbi8vIFZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcGVyY2VudGFnZXMgYXJvdW5kIHRoZSBjdXJyZW50IG1vdXNlIGxvY2F0aW9uLiBUaGF0XG4vLyBpcywgaWYgd2UgYXJlIGluIFwiY29sdW1uXCIgbW9kZSB0aGVuIGBiZWZvcmVgIHdvdWxkIGVxdWFsIHRoZSBtb3VzZSBwb3NpdGlvblxuLy8gYXMgYSAlIG9mIHRoZSB3aWR0aCBvZiB0aGUgcGFyZW50IGVsZW1lbnQgZnJvbSB0aGUgbGVmdCBoYW5kIHNpZGUgb2YgdGhlXG4vLyBwYXJlbnQgZWxlbWVudC4gVGhlIGBhZnRlcmAgdmFsdWUgaXMganVzdCAxMDAtYmVmb3JlLlxuZXhwb3J0IGludGVyZmFjZSBEaXZpZGVyTW92ZVJlc3VsdCB7XG4gIGJlZm9yZTogbnVtYmVyO1xuICBhZnRlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBEaXZpZGVyVHlwZSA9IFwiY29sdW1uXCIgfCBcInJvd1wiO1xuXG5leHBvcnQgY29uc3QgRElWSURFUl9NT1ZFX0VWRU5UID0gXCJkaXZpZGVyX21vdmVcIjtcblxuZXhwb3J0IGNvbnN0IFJFU0laSU5HX0NMQVNTID0gXCJyZXNpemluZ1wiO1xuXG5pbnRlcmZhY2UgUmVjdCB7XG4gIHRvcDogbnVtYmVyO1xuICBsZWZ0OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufVxuXG4vKiogUmV0dXJucyBhIGJvdW5kaW5nIHJlY3RhbmdsZSBmb3IgYW4gZWxlbWVudCBpbiBQYWdlIGNvb3JkaW5hdGVzLCBhcyBvcHBvc2VkXG4gKiB0byBWaWV3UG9ydCBjb29yZGluYXRlcywgd2hpY2ggaXMgd2hhdCBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSByZXR1cm5zLlxuICovXG5leHBvcnQgY29uc3QgZ2V0UGFnZVJlY3QgPSAoZWxlOiBIVE1MRWxlbWVudCk6IFJlY3QgPT4ge1xuICBjb25zdCB2aWV3cG9ydFJlY3QgPSBlbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgdG9wOiB2aWV3cG9ydFJlY3QudG9wICsgd2luZG93LnNjcm9sbFksXG4gICAgbGVmdDogdmlld3BvcnRSZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICB3aWR0aDogdmlld3BvcnRSZWN0LndpZHRoLFxuICAgIGhlaWdodDogdmlld3BvcnRSZWN0LmhlaWdodCxcbiAgfTtcbn07XG5cbi8qKiBEaXZpZGVyTW92ZSBpcyBjb3JlIGZ1bmN0aW9uYWxpdHkgZm9yIGNyZWF0aW5nIGRyYWdnYWJsZSBkaXZpZGVycyBiZXR3ZWVuXG4gKiBlbGVtZW50cyBvbiBhIHBhZ2UuXG4gKlxuICogQ29uc3RydWN0IGEgRGl2aWRlck1vZGUgd2l0aCBhIHBhcmVudCBlbGVtZW50IGFuZCBhIGRpdmlkZXIgZWxlbWVudCwgd2hlcmVcbiAqIHRoZSBkaXZpZGVyIGVsZW1lbnQgaXMgdGhlIGVsZW1lbnQgYmV0d2VlbiBvdGhlciBwYWdlIGVsZW1lbnRzIHRoYXQgaXNcbiAqIGV4cGVjdGVkIHRvIGJlIGRyYWdnZWQuIEZvciBleGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgI2NvbnRhaW5lclxuICogd291bGQgYmUgdGhlIGBwYXJlbnRgLCBhbmQgI2RpdmlkZXIgd291bGQgYmUgdGhlIGBkaXZpZGVyYCBlbGVtZW50LlxuICpcbiAqICA8ZGl2IGlkPWNvbnRhaW5lcj5cbiAqICAgIDxkaXYgaWQ9bGVmdD48L2Rpdj4gIDxkaXYgaWQ9ZGl2aWRlcj48L2Rpdj4gPGRpdiBpZD1yaWdodD48L2Rpdj9cbiAqICA8L2Rpdj5cbiAqXG4gKiBEaXZpZGVyTW9kZSB3YWl0cyBmb3IgYSBtb3VzZWRvd24gZXZlbnQgb24gdGhlIGBkaXZpZGVyYCBlbGVtZW50IGFuZCB0aGVuXG4gKiB3YXRjaGVzIG1vdXNlIGV2ZW50cyBmb3IgdGhlIGdpdmVuIHBhcmVudCBIVE1MRWxlbWVudCBhbmQgZW1pdHMgZXZlbnRzIGFyb3VuZFxuICogZHJhZ2dpbmcuXG4gKlxuICogVGhlIGVtaXR0ZWQgZXZlbnQgaXMgXCJkaXZpZGVyX21vdmVcIiBhbmQgaXMgYSBDdXN0b21FdmVudDxEaXZpZGVyTW92ZVJlc3VsdD4uXG4gKlxuICogSXQgaXMgdXAgdG8gdGhlIHVzZXIgb2YgRGl2aWRlck1vdmUgdG8gbGlzdGVuIGZvciB0aGUgXCJkaXZpZGVyX21vdmVcIiBldmVudHNcbiAqIGFuZCB1cGRhdGUgdGhlIENTUyBvZiB0aGUgcGFnZSBhcHByb3ByaWF0ZWx5IHRvIHJlZmxlY3QgdGhlIHBvc2l0aW9uIG9mIHRoZVxuICogZGl2aWRlci5cbiAqXG4gKiBPbmNlIHRoZSBtb3VzZSBpcyBkb3duIGFuIGV2ZW50IHdpbGwgYmUgZW1pdHRlZCBwZXJpb2RpY2FsbHkgYXMgdGhlIG1vdXNlXG4gKiBtb3Zlcy5cbiAqXG4gKiBPbmNlIHRoZSBtb3VzZSBpcyByZWxlYXNlZCwgb3IgaWYgdGhlIG1vdXNlIGV4aXRzIHRoZSBwYXJlbnQgSFRNTEVsZW1lbnQsIG9uZVxuICogbGFzdCBldmVudCBpcyBlbWl0dGVkLlxuICpcbiAqIFdoaWxlIGRyYWdnaW5nIHRoZSBkaXZpZGVyLCB0aGUgXCJyZXNpemluZ1wiIGNsYXNzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHBhcmVudFxuICogZWxlbWVudC4gVGhpcyBjYW4gYmUgdXNlZCB0byBzZXQgYSBzdHlsZSwgZS5nLiAndXNlci1zZWxlY3Q6IG5vbmUnLlxuICovXG5leHBvcnQgY2xhc3MgRGl2aWRlck1vdmUge1xuICAvKiogVGhlIHBvaW50IHdoZXJlIGRyYWdnaW5nIHN0YXJ0ZWQsIGluIFBhZ2UgY29vcmRpbmF0ZXMuICovXG4gIGJlZ2luOiBQb2ludCB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBUaGUgZGltZW5zaW9ucyBvZiB0aGUgcGFyZW50IGVsZW1lbnQgaW4gUGFnZSBjb29yZGluYXRlcyBhcyBvZiBtb3VzZWRvd25cbiAgICogb24gdGhlIGRpdmlkZXIuLiAqL1xuICBwYXJlbnRSZWN0OiBSZWN0IHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqIFRoZSBjdXJyZW50IG1vdXNlIHBvc2l0aW9uIGluIFBhZ2UgY29vcmRpbmF0ZXMuICovXG4gIGN1cnJlbnRNb3ZlTG9jYXRpb246IFBvaW50ID0gcHQoMCwgMCk7XG5cbiAgLyoqIFRoZSBsYXN0IG1vdXNlIHBvc2l0aW9uIGluIFBhZ2UgY29vcmRpbmF0ZXMgcmVwb3J0ZWQgdmlhIEN1c3RvbUV2ZW50LiAqL1xuICBsYXN0TW92ZVNlbnQ6IFBvaW50ID0gcHQoMCwgMCk7XG5cbiAgLyoqIFRoZSBwYXJlbnQgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBkaXZpZGVyLiAqL1xuICBwYXJlbnQ6IEhUTUxFbGVtZW50O1xuXG4gIC8qKiBUaGUgZGl2aWRlciBlbGVtZW50IHRvIGJlIGRyYWdnZWQgYWNyb3NzIHRoZSBwYXJlbnQgZWxlbWVudC4gKi9cbiAgZGl2aWRlcjogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqIFRoZSBoYW5kbGUgb2YgdGhlIHdpbmRvdy5zZXRJbnRlcnZhbCgpLiAqL1xuICBpbnRlcm52YWxIYW5kbGU6IG51bWJlciA9IDA7XG5cbiAgLyoqIFRoZSB0eXBlIG9mIGRpdmlkZXIsIGVpdGhlciB2ZXJ0aWNhbCAoXCJjb2x1bW5cIiksIG9yIGhvcml6b250YWwgKFwicm93XCIpLiAqL1xuICBkaXZpZGVyVHlwZTogRGl2aWRlclR5cGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcGFyZW50OiBIVE1MRWxlbWVudCxcbiAgICBkaXZpZGVyOiBIVE1MRWxlbWVudCxcbiAgICBkaXZpZGVyVHlwZTogRGl2aWRlclR5cGUgPSBcImNvbHVtblwiLFxuICApIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmRpdmlkZXIgPSBkaXZpZGVyO1xuICAgIHRoaXMuZGl2aWRlclR5cGUgPSBkaXZpZGVyVHlwZTtcbiAgICB0aGlzLmRpdmlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm1vdXNlZG93bi5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGRldGFjaCgpIHtcbiAgICB0aGlzLnBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW91c2Vtb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZGl2aWRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2Vkb3duLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2V1cC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm1vdXNlbGVhdmUuYmluZCh0aGlzKSk7XG4gICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcm52YWxIYW5kbGUpO1xuICB9XG5cbiAgb25UaW1lb3V0KCkge1xuICAgIGlmICghZXF1YWwodGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uLCB0aGlzLmxhc3RNb3ZlU2VudCkpIHtcbiAgICAgIGxldCBkaWZmUGVyY2VudDogbnVtYmVyID0gMDtcbiAgICAgIGlmICh0aGlzLmRpdmlkZXJUeXBlID09PSBcImNvbHVtblwiKSB7XG4gICAgICAgIGRpZmZQZXJjZW50ID1cbiAgICAgICAgICAoMTAwICogKHRoaXMuY3VycmVudE1vdmVMb2NhdGlvbi54IC0gdGhpcy5wYXJlbnRSZWN0IS5sZWZ0KSkgL1xuICAgICAgICAgIHRoaXMucGFyZW50UmVjdCEud2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWZmUGVyY2VudCA9XG4gICAgICAgICAgKDEwMCAqICh0aGlzLmN1cnJlbnRNb3ZlTG9jYXRpb24ueSAtIHRoaXMucGFyZW50UmVjdCEudG9wKSkgL1xuICAgICAgICAgIHRoaXMucGFyZW50UmVjdCEuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgLy8gVE9ETyAtIFNob3VsZCBjbGFtcCBiZSBzZXR0YWJsZSBpbiB0aGUgY29uc3RydWN0b3I/XG4gICAgICBkaWZmUGVyY2VudCA9IGNsYW1wKGRpZmZQZXJjZW50LCA1LCA5NSk7XG5cbiAgICAgIHRoaXMucGFyZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudDxEaXZpZGVyTW92ZVJlc3VsdD4oRElWSURFUl9NT1ZFX0VWRU5ULCB7XG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBiZWZvcmU6IGRpZmZQZXJjZW50LFxuICAgICAgICAgICAgYWZ0ZXI6IDEwMCAtIGRpZmZQZXJjZW50LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIHRoaXMubGFzdE1vdmVTZW50ID0gZHVwKHRoaXMuY3VycmVudE1vdmVMb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgbW91c2Vtb3ZlKGU6IE1vdXNlRXZlbnQpIHtcbiAgICBpZiAodGhpcy5iZWdpbiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRNb3ZlTG9jYXRpb24ueCA9IGUucGFnZVg7XG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uLnkgPSBlLnBhZ2VZO1xuICB9XG5cbiAgbW91c2Vkb3duKGU6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLmludGVybnZhbEhhbmRsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLm9uVGltZW91dC5iaW5kKHRoaXMpLCAxNik7XG4gICAgdGhpcy5wYXJlbnRSZWN0ID0gZ2V0UGFnZVJlY3QodGhpcy5wYXJlbnQpO1xuXG4gICAgdGhpcy5wYXJlbnQuY2xhc3NMaXN0LmFkZChSRVNJWklOR19DTEFTUyk7XG5cbiAgICB0aGlzLnBhcmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW91c2Vtb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2V1cC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm1vdXNlbGVhdmUuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLmJlZ2luID0gcHQoZS5wYWdlWCwgZS5wYWdlWSk7XG4gIH1cblxuICBtb3VzZXVwKGU6IE1vdXNlRXZlbnQpIHtcbiAgICBpZiAodGhpcy5iZWdpbiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZpbmlzaGVkKHB0KGUucGFnZVgsIGUucGFnZVkpKTtcbiAgfVxuXG4gIG1vdXNlbGVhdmUoZTogTW91c2VFdmVudCkge1xuICAgIGlmICh0aGlzLmJlZ2luID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZmluaXNoZWQocHQoZS5wYWdlWCwgZS5wYWdlWSkpO1xuICB9XG5cbiAgZmluaXNoZWQoZW5kOiBQb2ludCkge1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJudmFsSGFuZGxlKTtcblxuICAgIHRoaXMucGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoUkVTSVpJTkdfQ0xBU1MpO1xuXG4gICAgdGhpcy5wYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm1vdXNldXAuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZWxlYXZlLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uID0gZW5kO1xuICAgIHRoaXMub25UaW1lb3V0KCk7XG4gICAgdGhpcy5iZWdpbiA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uID0gcHQoMCwgMCk7XG4gICAgdGhpcy5sYXN0TW92ZVNlbnQgPSBwdCgwLCAwKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFBvaW50LCBkdXAsIGVxdWFsLCBwdCB9IGZyb20gXCIuLi8uLi9wb2ludC9wb2ludC50c1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyYWdSYW5nZSB7XG4gIGJlZ2luOiBQb2ludDtcbiAgZW5kOiBQb2ludDtcbn1cblxuZXhwb3J0IGNvbnN0IERSQUdfUkFOR0VfRVZFTlQgPSBcImRyYWdyYW5nZVwiO1xuXG4vKiogTW91c2VNb3ZlIHdhdGNoZXMgbW91c2UgZXZlbnRzIGZvciBhIGdpdmVuIEhUTUxFbGVtZW50IGFuZCBlbWl0c1xuICogZXZlbnRzIGFyb3VuZCBkcmFnZ2luZy5cbiAqXG4gKiBUaGUgZW1pdHRlZCBldmVudCBpcyBcImRyYWdyYW5nZVwiIGFuZCBpcyBhIEN1c3RvbUV2ZW50PERyYWdSYW5nZT4uXG4gKlxuICogT25jZSB0aGUgbW91c2UgaXMgcHJlc3NlZCBkb3duIGluIHRoZSBIVE1MRWxlbWVudCBhbiBldmVudCB3aWxsIGJlXG4gKiBlbWl0dGVkIHBlcmlvZGljYWxseSBhcyB0aGUgbW91c2UgbW92ZXMuXG4gKlxuICogT25jZSB0aGUgbW91c2UgaXMgcmVsZWFzZWQsIG9yIGV4aXRzIHRoZSBIVE1MRWxlbWVudCBvbmUgbGFzdCBldmVudFxuICogaXMgZW1pdHRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlRHJhZyB7XG4gIGJlZ2luOiBQb2ludCB8IG51bGwgPSBudWxsO1xuICBjdXJyZW50TW92ZUxvY2F0aW9uOiBQb2ludCA9IHB0KDAsIDApO1xuICBsYXN0TW92ZVNlbnQ6IFBvaW50ID0gcHQoMCwgMCk7XG4gIGVsZTogSFRNTEVsZW1lbnQ7XG4gIGludGVybnZhbEhhbmRsZTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihlbGU6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5lbGUgPSBlbGU7XG4gICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZW1vdmUuYmluZCh0aGlzKSk7XG4gICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5tb3VzZWRvd24uYmluZCh0aGlzKSk7XG4gICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2V1cC5iaW5kKHRoaXMpKTtcbiAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZWxlYXZlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgZGV0YWNoKCkge1xuICAgIHRoaXMuZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZW1vdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm1vdXNlZG93bi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm1vdXNldXAuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZWxlYXZlLmJpbmQodGhpcykpO1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJudmFsSGFuZGxlKTtcbiAgfVxuXG4gIG9uVGltZW91dCgpIHtcbiAgICBpZiAoIWVxdWFsKHRoaXMuY3VycmVudE1vdmVMb2NhdGlvbiwgdGhpcy5sYXN0TW92ZVNlbnQpKSB7XG4gICAgICB0aGlzLmVsZS5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQ8RHJhZ1JhbmdlPihEUkFHX1JBTkdFX0VWRU5ULCB7XG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBiZWdpbjogZHVwKHRoaXMuYmVnaW4hKSxcbiAgICAgICAgICAgIGVuZDogZHVwKHRoaXMuY3VycmVudE1vdmVMb2NhdGlvbiksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgICAgdGhpcy5sYXN0TW92ZVNlbnQgPSBkdXAodGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBtb3VzZW1vdmUoZTogTW91c2VFdmVudCkge1xuICAgIGlmICh0aGlzLmJlZ2luID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY3VycmVudE1vdmVMb2NhdGlvbi54ID0gZS5vZmZzZXRYO1xuICAgIHRoaXMuY3VycmVudE1vdmVMb2NhdGlvbi55ID0gZS5vZmZzZXRZO1xuICB9XG5cbiAgbW91c2Vkb3duKGU6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLmludGVybnZhbEhhbmRsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLm9uVGltZW91dC5iaW5kKHRoaXMpLCAxNik7XG4gICAgdGhpcy5iZWdpbiA9IHB0KGUub2Zmc2V0WCwgZS5vZmZzZXRZKTtcbiAgfVxuXG4gIG1vdXNldXAoZTogTW91c2VFdmVudCkge1xuICAgIHRoaXMuZmluaXNoZWQocHQoZS5vZmZzZXRYLCBlLm9mZnNldFkpKTtcbiAgfVxuXG4gIG1vdXNlbGVhdmUoZTogTW91c2VFdmVudCkge1xuICAgIGlmICh0aGlzLmJlZ2luID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZmluaXNoZWQocHQoZS5vZmZzZXRYLCBlLm9mZnNldFkpKTtcbiAgfVxuXG4gIGZpbmlzaGVkKGVuZDogUG9pbnQpIHtcbiAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmludGVybnZhbEhhbmRsZSk7XG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uID0gZW5kO1xuICAgIHRoaXMub25UaW1lb3V0KCk7XG4gICAgdGhpcy5iZWdpbiA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uID0gcHQoMCwgMCk7XG4gICAgdGhpcy5sYXN0TW92ZVNlbnQgPSBwdCgwLCAwKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFBvaW50LCBkdXAsIGVxdWFsLCBwdCB9IGZyb20gXCIuLi8uLi9wb2ludC9wb2ludC50c1wiO1xuXG4vKiogTW91c2VNb3ZlIHdhdGNoZXMgbW91c2UgZXZlbnRzIGZvciBhIGdpdmVuIEhUTUxFbGVtZW50IGFuZCByZWNvcmRzIHRoZSBtb3N0XG4gKiAgcmVjZW50IGxvY2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgTW91c2VNb3ZlIHtcbiAgY3VycmVudE1vdmVMb2NhdGlvbjogUG9pbnQgPSBwdCgwLCAwKTtcbiAgbGFzdFJlYWRMb2NhdGlvbjogUG9pbnQgPSBwdCgwLCAwKTtcbiAgZWxlOiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihlbGU6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5lbGUgPSBlbGU7XG4gICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZW1vdmUuYmluZCh0aGlzKSk7XG4gIH1cblxuICBkZXRhY2goKSB7XG4gICAgdGhpcy5lbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG1vdXNlbW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uLnggPSBlLm9mZnNldFg7XG4gICAgdGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uLnkgPSBlLm9mZnNldFk7XG4gIH1cblxuICAvKiogUmV0dXJucyBhIFBvaW50IGlmIHRoZSBtb3VzZSBoYWQgbW92ZWQgc2luY2UgdGhlIGxhc3QgcmVhZCwgb3RoZXJ3aXNlXG4gICAqIHJldHVybnMgbnVsbC5cbiAgICovXG4gIHJlYWRMb2NhdGlvbigpOiBQb2ludCB8IG51bGwge1xuICAgIGlmIChlcXVhbCh0aGlzLmN1cnJlbnRNb3ZlTG9jYXRpb24sIHRoaXMubGFzdFJlYWRMb2NhdGlvbikpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0aGlzLmxhc3RSZWFkTG9jYXRpb24gPSBkdXAodGhpcy5jdXJyZW50TW92ZUxvY2F0aW9uKTtcbiAgICByZXR1cm4gZHVwKHRoaXMubGFzdFJlYWRMb2NhdGlvbik7XG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgTUlOX0RJU1BMQVlfUkFOR0UgPSA3O1xuXG4vKiogUmVwcmVzZW50cyBhIHJhbmdlIG9mIGRheXMgb3ZlciB3aGljaCB0byBkaXNwbGF5IGEgem9vbWVkIGluIHZpZXcsIHVzaW5nXG4gKiB0aGUgaGFsZi1vcGVuIGludGVydmFsIFtiZWdpbiwgZW5kKS5cbiAqL1xuZXhwb3J0IGNsYXNzIERpc3BsYXlSYW5nZSB7XG4gIHByaXZhdGUgX2JlZ2luOiBudW1iZXI7XG4gIHByaXZhdGUgX2VuZDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGJlZ2luOiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgdGhpcy5fYmVnaW4gPSBiZWdpbjtcbiAgICB0aGlzLl9lbmQgPSBlbmQ7XG4gICAgaWYgKHRoaXMuX2JlZ2luID4gdGhpcy5fZW5kKSB7XG4gICAgICBbdGhpcy5fZW5kLCB0aGlzLl9iZWdpbl0gPSBbdGhpcy5fYmVnaW4sIHRoaXMuX2VuZF07XG4gICAgfVxuICAgIGlmICh0aGlzLl9lbmQgLSB0aGlzLl9iZWdpbiA8IE1JTl9ESVNQTEFZX1JBTkdFKSB7XG4gICAgICB0aGlzLl9lbmQgPSB0aGlzLl9iZWdpbiArIE1JTl9ESVNQTEFZX1JBTkdFO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpbih4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4geCA+PSB0aGlzLl9iZWdpbiAmJiB4IDw9IHRoaXMuX2VuZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYmVnaW4oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYmVnaW47XG4gIH1cblxuICBwdWJsaWMgZ2V0IGVuZCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9lbmQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJhbmdlSW5EYXlzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZCAtIHRoaXMuX2JlZ2luO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgRGlyZWN0ZWRFZGdlLCBFZGdlcyB9IGZyb20gXCIuLi8uLi9kYWcvZGFnXCI7XG5pbXBvcnQgeyBvaywgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL3Jlc3VsdFwiO1xuaW1wb3J0IHsgU3BhbiB9IGZyb20gXCIuLi8uLi9zbGFjay9zbGFja1wiO1xuaW1wb3J0IHsgQ2hhcnQsIENoYXJ0VmFsaWRhdGUsIFRhc2ssIFRhc2tzIH0gZnJvbSBcIi4uL2NoYXJ0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRMaWtlIHtcbiAgVmVydGljZXM6IFRhc2tzO1xuICBFZGdlczogRWRnZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyUmVzdWx0IHtcbiAgY2hhcnRMaWtlOiBDaGFydExpa2U7XG4gIGRpc3BsYXlPcmRlcjogbnVtYmVyW107XG4gIGVtcGhhc2l6ZWRUYXNrczogbnVtYmVyW107XG4gIHNwYW5zOiBTcGFuW107XG4gIGxhYmVsczogc3RyaW5nW107XG4gIGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4OiBNYXA8bnVtYmVyLCBudW1iZXI+O1xuICBmcm9tT3JpZ2luYWxJbmRleFRvRmlsdGVyZWRJbmRleDogTWFwPG51bWJlciwgbnVtYmVyPjtcbiAgc2VsZWN0ZWRUYXNrSW5kZXg6IG51bWJlcjtcbn1cblxuLyoqIFVzZWQgZm9yIGZpbHRlcmluZyB0YXNrcywgcmV0dXJucyBUcnVlIGlmIHRoZSB0YXNrIGlzIHRvIGJlIGluY2x1ZGVkIGluIHRoZVxuICogZmlsdGVyZWQgcmVzdWx0cy4gKi9cbmV4cG9ydCB0eXBlIEZpbHRlckZ1bmMgPSAodGFzazogVGFzaywgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcblxuLyoqIEZpbHRlcnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBDaGFydCBiYXNlZCBvbiB0aGUgZmlsdGVyRnVuYy5cbiAqXG4gKiBzZWxlY3RlZFRhc2tJbmRleCB3aWxsIGJlIHJldHVybmVkIGFzIC0xIGlmIHRoZSBzZWxlY3RlZCB0YXNrIGdldHMgZmlsdGVyZWRcbiAqIG91dC5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbHRlciA9IChcbiAgY2hhcnQ6IENoYXJ0LFxuICBmaWx0ZXJGdW5jOiBGaWx0ZXJGdW5jIHwgbnVsbCxcbiAgZW1waGFzaXplZFRhc2tzOiBudW1iZXJbXSxcbiAgc3BhbnM6IFNwYW5bXSxcbiAgbGFiZWxzOiBzdHJpbmdbXSxcbiAgc2VsZWN0ZWRUYXNrSW5kZXg6IG51bWJlcixcbik6IFJlc3VsdDxGaWx0ZXJSZXN1bHQ+ID0+IHtcbiAgY29uc3QgdnJldCA9IENoYXJ0VmFsaWRhdGUoY2hhcnQpO1xuICBpZiAoIXZyZXQub2spIHtcbiAgICByZXR1cm4gdnJldDtcbiAgfVxuICBjb25zdCB0b3BvbG9naWNhbE9yZGVyID0gdnJldC52YWx1ZTtcbiAgaWYgKGZpbHRlckZ1bmMgPT09IG51bGwpIHtcbiAgICBjb25zdCBmcm9tRmlsdGVyZWRJbmRleFRvT3JpZ2luYWxJbmRleDogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY2hhcnQuVmVydGljZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBmcm9tRmlsdGVyZWRJbmRleFRvT3JpZ2luYWxJbmRleC5zZXQoaW5kZXgsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIG9rKHtcbiAgICAgIGNoYXJ0TGlrZTogY2hhcnQsXG4gICAgICBkaXNwbGF5T3JkZXI6IHZyZXQudmFsdWUsXG4gICAgICBlbXBoYXNpemVkVGFza3M6IGVtcGhhc2l6ZWRUYXNrcyxcbiAgICAgIHNwYW5zOiBzcGFucyxcbiAgICAgIGxhYmVsczogbGFiZWxzLFxuICAgICAgZnJvbUZpbHRlcmVkSW5kZXhUb09yaWdpbmFsSW5kZXg6IGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LFxuICAgICAgZnJvbU9yaWdpbmFsSW5kZXhUb0ZpbHRlcmVkSW5kZXg6IGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LFxuICAgICAgc2VsZWN0ZWRUYXNrSW5kZXgsXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgdGFza3M6IFRhc2tzID0gW107XG4gIGNvbnN0IGVkZ2VzOiBFZGdlcyA9IFtdO1xuICBjb25zdCBkaXNwbGF5T3JkZXI6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGZpbHRlcmVkU3BhbnM6IFNwYW5bXSA9IFtdO1xuICBjb25zdCBmaWx0ZXJlZExhYmVsczogc3RyaW5nW10gPSBbXTtcbiAgY29uc3QgZnJvbUZpbHRlcmVkSW5kZXhUb09yaWdpbmFsSW5kZXg6IE1hcDxudW1iZXIsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gIGNvbnN0IGZyb21PcmlnaW5hbFRvRmlsdGVyZWRJbmRleDogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICAvLyBGaXJzdCBmaWx0ZXIgdGhlIHRhc2tzLlxuICBjaGFydC5WZXJ0aWNlcy5mb3JFYWNoKCh0YXNrOiBUYXNrLCBvcmlnaW5hbEluZGV4OiBudW1iZXIpID0+IHtcbiAgICBpZiAoZmlsdGVyRnVuYyh0YXNrLCBvcmlnaW5hbEluZGV4KSkge1xuICAgICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICAgIGZpbHRlcmVkU3BhbnMucHVzaChzcGFuc1tvcmlnaW5hbEluZGV4XSk7XG4gICAgICBmaWx0ZXJlZExhYmVscy5wdXNoKGxhYmVsc1tvcmlnaW5hbEluZGV4XSk7XG4gICAgICBjb25zdCBuZXdJbmRleCA9IHRhc2tzLmxlbmd0aCAtIDE7XG4gICAgICBmcm9tT3JpZ2luYWxUb0ZpbHRlcmVkSW5kZXguc2V0KG9yaWdpbmFsSW5kZXgsIG5ld0luZGV4KTtcbiAgICAgIGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LnNldChuZXdJbmRleCwgb3JpZ2luYWxJbmRleCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBOb3cgZmlsdGVyIHRoZSBlZGdlcyB3aGlsZSBhbHNvIHJld3JpdGluZyB0aGVtLlxuICBjaGFydC5FZGdlcy5mb3JFYWNoKChkaXJlY3RlZEVkZ2U6IERpcmVjdGVkRWRnZSkgPT4ge1xuICAgIGlmIChcbiAgICAgICFmcm9tT3JpZ2luYWxUb0ZpbHRlcmVkSW5kZXguaGFzKGRpcmVjdGVkRWRnZS5pKSB8fFxuICAgICAgIWZyb21PcmlnaW5hbFRvRmlsdGVyZWRJbmRleC5oYXMoZGlyZWN0ZWRFZGdlLmopXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVkZ2VzLnB1c2goXG4gICAgICBuZXcgRGlyZWN0ZWRFZGdlKFxuICAgICAgICBmcm9tT3JpZ2luYWxUb0ZpbHRlcmVkSW5kZXguZ2V0KGRpcmVjdGVkRWRnZS5pKSxcbiAgICAgICAgZnJvbU9yaWdpbmFsVG9GaWx0ZXJlZEluZGV4LmdldChkaXJlY3RlZEVkZ2UuaiksXG4gICAgICApLFxuICAgICk7XG4gIH0pO1xuXG4gIC8vIE5vdyBmaWx0ZXIgYW5kIHJlaW5kZXggdGhlIHRvcG9sb2dpY2FsL2Rpc3BsYXkgb3JkZXIuXG4gIHRvcG9sb2dpY2FsT3JkZXIuZm9yRWFjaCgob3JpZ2luYWxUYXNrSW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHRhc2s6IFRhc2sgPSBjaGFydC5WZXJ0aWNlc1tvcmlnaW5hbFRhc2tJbmRleF07XG4gICAgaWYgKCFmaWx0ZXJGdW5jKHRhc2ssIG9yaWdpbmFsVGFza0luZGV4KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXNwbGF5T3JkZXIucHVzaChmcm9tT3JpZ2luYWxUb0ZpbHRlcmVkSW5kZXguZ2V0KG9yaWdpbmFsVGFza0luZGV4KSEpO1xuICB9KTtcblxuICAvLyBSZS1pbmRleCBoaWdobGlnaHRlZCB0YXNrcy5cbiAgY29uc3QgdXBkYXRlZEVtcGhhc2l6ZWRUYXNrcyA9IGVtcGhhc2l6ZWRUYXNrcy5tYXAoXG4gICAgKG9yaWdpbmFsVGFza0luZGV4OiBudW1iZXIpOiBudW1iZXIgPT5cbiAgICAgIGZyb21PcmlnaW5hbFRvRmlsdGVyZWRJbmRleC5nZXQob3JpZ2luYWxUYXNrSW5kZXgpISxcbiAgKTtcblxuICByZXR1cm4gb2soe1xuICAgIGNoYXJ0TGlrZToge1xuICAgICAgRWRnZXM6IGVkZ2VzLFxuICAgICAgVmVydGljZXM6IHRhc2tzLFxuICAgIH0sXG4gICAgZGlzcGxheU9yZGVyOiBkaXNwbGF5T3JkZXIsXG4gICAgZW1waGFzaXplZFRhc2tzOiB1cGRhdGVkRW1waGFzaXplZFRhc2tzLFxuICAgIHNwYW5zOiBmaWx0ZXJlZFNwYW5zLFxuICAgIGxhYmVsczogZmlsdGVyZWRMYWJlbHMsXG4gICAgZnJvbUZpbHRlcmVkSW5kZXhUb09yaWdpbmFsSW5kZXg6IGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LFxuICAgIGZyb21PcmlnaW5hbEluZGV4VG9GaWx0ZXJlZEluZGV4OiBmcm9tT3JpZ2luYWxUb0ZpbHRlcmVkSW5kZXgsXG4gICAgc2VsZWN0ZWRUYXNrSW5kZXg6IGZyb21PcmlnaW5hbFRvRmlsdGVyZWRJbmRleC5nZXQoc2VsZWN0ZWRUYXNrSW5kZXgpIHx8IC0xLFxuICB9KTtcbn07XG4iLCAiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi8uLi9tZXRyaWNzL3JhbmdlLnRzJztcbmltcG9ydCB7IFJlbmRlck9wdGlvbnMgfSBmcm9tICcuLi9yZW5kZXJlci50cyc7XG5pbXBvcnQgeyBQb2ludCwgYWRkLCBwdCB9IGZyb20gJy4uLy4uL3BvaW50L3BvaW50LnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXlSb3cge1xuICBkYXk6IG51bWJlcjtcbiAgcm93OiBudW1iZXI7XG59XG5cbi8qKiBGZWF0dXJlcyBvZiB0aGUgY2hhcnQgd2UgY2FuIGFzayBmb3IgY29vcmRpbmF0ZXMgb2YsIHdoZXJlIHRoZSB2YWx1ZSByZXR1cm5lZCBpc1xuICogdGhlIHRvcCBsZWZ0IGNvb3JkaW5hdGUgb2YgdGhlIGZlYXR1cmUuXG4gKi9cbmV4cG9ydCBjb25zdCBGZWF0dXJlID0ge1xuICB0YXNrTGluZVN0YXJ0OiAndGFza0xpbmVTdGFydCcsXG4gIHRleHRTdGFydDogJ3RleHRTdGFydCcsXG4gIGdyb3VwVGV4dFN0YXJ0OiAnZ3JvdXBUZXh0U3RhcnQnLFxuICBwZXJjZW50U3RhcnQ6ICdwZXJjZW50U3RhcnQnLFxuICB2ZXJ0aWNhbEFycm93RGVzdFRvcDogJ3ZlcnRpY2FsQXJyb3dEZXN0VG9wJyxcbiAgdmVydGljYWxBcnJvd0Rlc3RCb3R0b206ICd2ZXJ0aWNhbEFycm93RGVzdEJvdHRvbScsXG4gIGhvcml6b250YWxBcnJvd0Rlc3Q6ICdob3Jpem9udGFsQXJyb3dEZXN0JyxcbiAgdmVydGljYWxBcnJvd1N0YXJ0OiAndmVydGljYWxBcnJvd1N0YXJ0JyxcbiAgaG9yaXpvbnRhbEFycm93U3RhcnQ6ICdob3Jpem9udGFsQXJyb3dTdGFydCcsXG4gIHZlcnRpY2FsQXJyb3dEZXN0VG9NaWxlc3RvbmVUb3A6ICd2ZXJ0aWNhbEFycm93RGVzdFRvTWlsZXN0b25lVG9wJyxcbiAgdmVydGljYWxBcnJvd0Rlc3RUb01pbGVzdG9uZUJvdHRvbTogJ3ZlcnRpY2FsQXJyb3dEZXN0VG9NaWxlc3RvbmVCb3R0b20nLFxuICBob3Jpem9udGFsQXJyb3dEZXN0VG9NaWxlc3RvbmU6ICdob3Jpem9udGFsQXJyb3dEZXN0VG9NaWxlc3RvbmUnLFxuICB2ZXJ0aWNhbEFycm93U3RhcnRGcm9tTWlsZXN0b25lVG9wOiAndmVydGljYWxBcnJvd1N0YXJ0RnJvbU1pbGVzdG9uZVRvcCcsXG4gIHZlcnRpY2FsQXJyb3dTdGFydEZyb21NaWxlc3RvbmVCb3R0b206XG4gICAgJ3ZlcnRpY2FsQXJyb3dTdGFydEZyb21NaWxlc3RvbmVCb3R0b20nLFxuICBob3Jpem9udGFsQXJyb3dTdGFydEZyb21NaWxlc3RvbmU6ICdob3Jpem9udGFsQXJyb3dTdGFydEZyb21NaWxlc3RvbmUnLFxuICBncm91cEVudmVsb3BlU3RhcnQ6ICdncm91cEVudmVsb3BlU3RhcnQnLFxuICB0YXNrRW52ZWxvcGVUb3A6ICd0YXNrRW52ZWxvcGVUb3AnLFxuICBkaXNwbGF5UmFuZ2VUb3A6ICdkaXNwbGF5UmFuZ2VUb3AnLFxuICB0YXNrUm93Qm90dG9tOiAndGFza1Jvd0JvdHRvbScsXG4gIHRpbWVNYXJrU3RhcnQ6ICd0aW1lTWFya1N0YXJ0JyxcbiAgdGltZU1hcmtFbmQ6ICd0aW1lTWFya0VuZCcsXG4gIHRpbWVUZXh0U3RhcnQ6ICd0aW1lVGV4dFN0YXJ0JyxcbiAgZ3JvdXBUaXRsZVRleHRTdGFydDogJ2dyb3VwVGl0bGVUZXh0U3RhcnQnLFxuICB0YXNrc0NsaXBSZWN0T3JpZ2luOiAndGFza3NDbGlwUmVjdE9yaWdpbicsXG4gIGdyb3VwQnlPcmlnaW46ICdncm91cEJ5T3JpZ2luJyxcbn0gYXMgY29uc3Q7XG5cbi8qKiBTaXplcyBvZiBmZWF0dXJlcyBvZiBhIHJlbmRlcmVkIGNoYXJ0LiAqL1xuZXhwb3J0IGNvbnN0IE1ldHJpYyA9IHtcbiAgdGFza0xpbmVIZWlnaHQ6ICd0YXNrTGluZUhlaWdodCcsXG4gIHBlcmNlbnRIZWlnaHQ6ICdwZXJjZW50SGVpZ2h0JyxcbiAgYXJyb3dIZWFkSGVpZ2h0OiAnYXJyb3dIZWFkSGVpZ2h0JyxcbiAgYXJyb3dIZWFkV2lkdGg6ICdhcnJvd0hlYWRXaWR0aCcsXG4gIG1pbGVzdG9uZURpYW1ldGVyOiAnbWlsZXN0b25lRGlhbWV0ZXInLFxuICBsaW5lRGFzaExpbmU6ICdsaW5lRGFzaExpbmUnLFxuICBsaW5lRGFzaEdhcDogJ2xpbmVEYXNoR2FwJyxcbiAgdGV4dFhPZmZzZXQ6ICd0ZXh0WE9mZnNldCcsXG4gIG1pblRhc2tXaWR0aFB4OiAnbWluVGFza1dpZHRoUHgnLFxuICByb3dIZWlnaHQ6ICdyb3dIZWlnaHQnLFxufSBhcyBjb25zdDtcblxuLyoqIE1ha2VzIGEgbnVtYmVyIG9kZCwgYWRkcyBvbmUgaWYgZXZlbi4gKi9cbmNvbnN0IG1ha2VPZGQgPSAobjogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgaWYgKG4gJSAyID09PSAwKSB7XG4gICAgcmV0dXJuIG4gKyAxO1xuICB9XG4gIHJldHVybiBuO1xufTtcblxuLyoqIFNjYWxlIGNvbnNvbGlkYXRlcyBhbGwgY2FsY3VsYXRpb25zIGFyb3VuZCByZW5kZXJpbmcgYSBjaGFydCBvbnRvIGEgc3VyZmFjZS4gKi9cbmV4cG9ydCBjbGFzcyBTY2FsZSB7XG4gIHByaXZhdGUgZGF5V2lkdGhQeDogbnVtYmVyO1xuICBwcml2YXRlIHJvd0hlaWdodFB4OiBudW1iZXI7XG4gIHByaXZhdGUgYmxvY2tTaXplUHg6IG51bWJlcjtcbiAgcHJpdmF0ZSB0YXNrSGVpZ2h0UHg6IG51bWJlcjtcbiAgcHJpdmF0ZSBsaW5lV2lkdGhQeDogbnVtYmVyO1xuICBwcml2YXRlIG1hcmdpblNpemVQeDogbnVtYmVyO1xuICBwcml2YXRlIHRpbWVsaW5lSGVpZ2h0UHg6IG51bWJlcjtcbiAgcHJpdmF0ZSBvcmlnaW46IFBvaW50O1xuICBwcml2YXRlIHRvdGFsTnVtYmVyT2ZEYXlzOiBudW1iZXI7XG4gIHByaXZhdGUgZ3JvdXBCeUNvbHVtbldpZHRoUHg6IG51bWJlcjtcblxuICBwcml2YXRlIHRpbWVsaW5lT3JpZ2luOiBQb2ludDtcbiAgcHJpdmF0ZSB0YXNrc09yaWdpbjogUG9pbnQ7XG4gIHByaXZhdGUgZ3JvdXBCeU9yaWdpbjogUG9pbnQ7XG4gIHByaXZhdGUgdGFza3NDbGlwUmVjdE9yaWdpbjogUG9pbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgb3B0czogUmVuZGVyT3B0aW9ucyxcbiAgICBjYW52YXNXaWR0aFB4OiBudW1iZXIsXG4gICAgdG90YWxOdW1iZXJPZkRheXM6IG51bWJlcixcbiAgICBtYXhHcm91cE5hbWVMZW5ndGg6IG51bWJlciA9IDBcbiAgKSB7XG4gICAgdGhpcy50b3RhbE51bWJlck9mRGF5cyA9IHRvdGFsTnVtYmVyT2ZEYXlzO1xuICAgIHRoaXMuZ3JvdXBCeUNvbHVtbldpZHRoUHggPSBtYXhHcm91cE5hbWVMZW5ndGggKiBvcHRzLmZvbnRTaXplUHg7XG5cbiAgICB0aGlzLmJsb2NrU2l6ZVB4ID0gTWF0aC5mbG9vcihvcHRzLmZvbnRTaXplUHggLyAzKTtcbiAgICB0aGlzLnRhc2tIZWlnaHRQeCA9IHRoaXMuYmxvY2tTaXplUHg7XG4gICAgdGhpcy5saW5lV2lkdGhQeCA9IG1ha2VPZGQoTWF0aC5mbG9vcih0aGlzLnRhc2tIZWlnaHRQeCAvIDMpKTtcbiAgICBjb25zdCBtaWxlc3RvbmVSYWRpdXMgPSBNYXRoLmNlaWwodGhpcy50YXNrSGVpZ2h0UHggLyAyKSArIHRoaXMubGluZVdpZHRoUHg7XG4gICAgdGhpcy5tYXJnaW5TaXplUHggPSBtaWxlc3RvbmVSYWRpdXM7XG4gICAgdGhpcy50aW1lbGluZUhlaWdodFB4ID0gb3B0cy5oYXNUaW1lbGluZVxuICAgICAgPyBNYXRoLmNlaWwoKG9wdHMuZm9udFNpemVQeCAqIDQpIC8gMylcbiAgICAgIDogMDtcblxuICAgIHRoaXMudGltZWxpbmVPcmlnaW4gPSBwdChtaWxlc3RvbmVSYWRpdXMsIDApO1xuICAgIHRoaXMuZ3JvdXBCeU9yaWdpbiA9IHB0KDAsIG1pbGVzdG9uZVJhZGl1cyArIHRoaXMudGltZWxpbmVIZWlnaHRQeCk7XG5cbiAgICBsZXQgYmVnaW5PZmZzZXQgPSAwO1xuICAgIGlmIChvcHRzLmRpc3BsYXlSYW5nZSA9PT0gbnVsbCB8fCBvcHRzLmRpc3BsYXlSYW5nZVVzYWdlID09PSAnaGlnaGxpZ2h0Jykge1xuICAgICAgLy8gRG8gbm90IGZvcmNlIGRheVdpZHRoUHggdG8gYW4gaW50ZWdlciwgaXQgY291bGQgZ28gdG8gMCBhbmQgY2F1c2UgYWxsXG4gICAgICAvLyB0YXNrcyB0byBiZSByZW5kZXJlZCBhdCAwIHdpZHRoLlxuICAgICAgdGhpcy5kYXlXaWR0aFB4ID1cbiAgICAgICAgKGNhbnZhc1dpZHRoUHggLSB0aGlzLmdyb3VwQnlDb2x1bW5XaWR0aFB4IC0gMiAqIHRoaXMubWFyZ2luU2l6ZVB4KSAvXG4gICAgICAgIHRvdGFsTnVtYmVyT2ZEYXlzO1xuICAgICAgdGhpcy5vcmlnaW4gPSBwdCgwLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2hvdWxkIHdlIHNldCB4LW1hcmdpbnMgdG8gMCBpZiBhIFN1YlJhbmdlIGlzIHJlcXVlc3RlZD9cbiAgICAgIC8vIE9yIHNob3VsZCB3ZSB0b3RhbGx5IGRyb3AgYWxsIG1hcmdpbnMgZnJvbSBoZXJlIGFuZCBqdXN0IHVzZVxuICAgICAgLy8gQ1NTIG1hcmdpbnMgb24gdGhlIGNhbnZhcyBlbGVtZW50P1xuICAgICAgdGhpcy5kYXlXaWR0aFB4ID1cbiAgICAgICAgKGNhbnZhc1dpZHRoUHggLSB0aGlzLmdyb3VwQnlDb2x1bW5XaWR0aFB4IC0gMiAqIHRoaXMubWFyZ2luU2l6ZVB4KSAvXG4gICAgICAgIG9wdHMuZGlzcGxheVJhbmdlLnJhbmdlSW5EYXlzO1xuICAgICAgYmVnaW5PZmZzZXQgPSBNYXRoLmZsb29yKFxuICAgICAgICB0aGlzLmRheVdpZHRoUHggKiBvcHRzLmRpc3BsYXlSYW5nZS5iZWdpbiArIHRoaXMubWFyZ2luU2l6ZVB4XG4gICAgICApO1xuICAgICAgdGhpcy5vcmlnaW4gPSBwdCgtYmVnaW5PZmZzZXQgKyB0aGlzLm1hcmdpblNpemVQeCwgMCk7XG4gICAgfVxuXG4gICAgdGhpcy50YXNrc09yaWdpbiA9IHB0KFxuICAgICAgdGhpcy5ncm91cEJ5Q29sdW1uV2lkdGhQeCAtIGJlZ2luT2Zmc2V0ICsgbWlsZXN0b25lUmFkaXVzLFxuICAgICAgdGhpcy50aW1lbGluZUhlaWdodFB4ICsgbWlsZXN0b25lUmFkaXVzXG4gICAgKTtcblxuICAgIHRoaXMudGFza3NDbGlwUmVjdE9yaWdpbiA9IHB0KFxuICAgICAgdGhpcy5ncm91cEJ5Q29sdW1uV2lkdGhQeCxcbiAgICAgIHRoaXMudGltZWxpbmVIZWlnaHRQeFxuICAgICk7XG5cbiAgICBpZiAob3B0cy5oYXNUZXh0KSB7XG4gICAgICB0aGlzLnJvd0hlaWdodFB4ID0gNiAqIHRoaXMuYmxvY2tTaXplUHg7IC8vIFRoaXMgbWlnaHQgYWxzbyBiZSBgKGNhbnZhc0hlaWdodFB4IC0gMiAqIG9wdHMubWFyZ2luU2l6ZVB4KSAvIG51bWJlclN3aW1MYW5lc2AgaWYgaGVpZ2h0IGlzIHN1cHBsaWVkP1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvd0hlaWdodFB4ID0gMS4xICogdGhpcy5ibG9ja1NpemVQeDtcbiAgICB9XG4gIH1cblxuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgY2hhcnQuIE5vdGUgdGhhdCBpdCdzIG5vdCBjb25zdHJhaW5lZCBieSB0aGUgY2FudmFzLiAqL1xuICBwdWJsaWMgaGVpZ2h0KG1heFJvd3M6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIChcbiAgICAgIG1heFJvd3MgKiB0aGlzLnJvd0hlaWdodFB4ICsgdGhpcy50aW1lbGluZUhlaWdodFB4ICsgMiAqIHRoaXMubWFyZ2luU2l6ZVB4XG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBkYXlSb3dGcm9tUG9pbnQocG9pbnQ6IFBvaW50KTogRGF5Um93IHtcbiAgICAvLyBUaGlzIHNob3VsZCBhbHNvIGNsYW1wIHRoZSByZXR1cm5lZCAneCcgdmFsdWUgdG8gWzAsIG1heFJvd3MpLlxuICAgIHJldHVybiB7XG4gICAgICBkYXk6IGNsYW1wKFxuICAgICAgICBNYXRoLmZsb29yKFxuICAgICAgICAgICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAqIHBvaW50LnggLVxuICAgICAgICAgICAgdGhpcy5vcmlnaW4ueCAtXG4gICAgICAgICAgICB0aGlzLm1hcmdpblNpemVQeCAtXG4gICAgICAgICAgICB0aGlzLmdyb3VwQnlDb2x1bW5XaWR0aFB4KSAvXG4gICAgICAgICAgICB0aGlzLmRheVdpZHRoUHhcbiAgICAgICAgKSxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy50b3RhbE51bWJlck9mRGF5c1xuICAgICAgKSxcbiAgICAgIHJvdzogTWF0aC5mbG9vcihcbiAgICAgICAgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICogcG9pbnQueSAtXG4gICAgICAgICAgdGhpcy5vcmlnaW4ueSAtXG4gICAgICAgICAgdGhpcy5tYXJnaW5TaXplUHggLVxuICAgICAgICAgIHRoaXMudGltZWxpbmVIZWlnaHRQeCkgL1xuICAgICAgICAgIHRoaXMucm93SGVpZ2h0UHhcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBUaGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBib3VuZGluZyBib3ggZm9yIGEgc2luZ2xlIHRhc2suICovXG4gIHByaXZhdGUgdGFza1Jvd0VudmVsb3BlU3RhcnQocm93OiBudW1iZXIsIGRheTogbnVtYmVyKTogUG9pbnQge1xuICAgIHJldHVybiBhZGQodGhpcy5vcmlnaW4sIFtcbiAgICAgIE1hdGguZmxvb3IoXG4gICAgICAgIGRheSAqIHRoaXMuZGF5V2lkdGhQeCArIHRoaXMubWFyZ2luU2l6ZVB4ICsgdGhpcy5ncm91cEJ5Q29sdW1uV2lkdGhQeFxuICAgICAgKSxcbiAgICAgIE1hdGguZmxvb3IoXG4gICAgICAgIHJvdyAqIHRoaXMucm93SGVpZ2h0UHggKyB0aGlzLm1hcmdpblNpemVQeCArIHRoaXMudGltZWxpbmVIZWlnaHRQeFxuICAgICAgKSxcbiAgICBdKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgcHJpdmF0ZSBncm91cFJvd0VudmVsb3BlU3RhcnQocm93OiBudW1iZXIsIGRheTogbnVtYmVyKTogUG9pbnQge1xuICAgIHJldHVybiBhZGQodGhpcy5ncm91cEJ5T3JpZ2luLCBbXG4gICAgICAwLFxuICAgICAgcm93ICogdGhpcy5yb3dIZWlnaHRQeCArIHRoaXMubWFyZ2luU2l6ZVB4ICsgdGhpcy50aW1lbGluZUhlaWdodFB4LFxuICAgIF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBncm91cEhlYWRlclN0YXJ0KCk6IFBvaW50IHtcbiAgICByZXR1cm4gYWRkKHRoaXMub3JpZ2luLCBbdGhpcy5tYXJnaW5TaXplUHgsIHRoaXMubWFyZ2luU2l6ZVB4XSk7XG4gIH1cblxuICBwcml2YXRlIHRpbWVFbnZlbG9wZVN0YXJ0KGRheTogbnVtYmVyKTogUG9pbnQge1xuICAgIHJldHVybiBhZGQodGhpcy5vcmlnaW4sIFtcbiAgICAgIGRheSAqIHRoaXMuZGF5V2lkdGhQeCArIHRoaXMubWFyZ2luU2l6ZVB4ICsgdGhpcy5ncm91cEJ5Q29sdW1uV2lkdGhQeCxcbiAgICAgIDAsXG4gICAgXSk7XG4gIH1cblxuICAvKiogUmV0dXJucyB0aGUgY29vcmRpbmF0ZSBvZiB0aGUgaXRlbSAqL1xuICBmZWF0dXJlKHJvdzogbnVtYmVyLCBkYXk6IG51bWJlciwgY29vcmQ6IGtleW9mIHR5cGVvZiBGZWF0dXJlKTogUG9pbnQge1xuICAgIHN3aXRjaCAoY29vcmQpIHtcbiAgICAgIGNhc2UgRmVhdHVyZS50YXNrTGluZVN0YXJ0OlxuICAgICAgY2FzZSBGZWF0dXJlLnZlcnRpY2FsQXJyb3dEZXN0VG9wOlxuICAgICAgY2FzZSBGZWF0dXJlLnZlcnRpY2FsQXJyb3dTdGFydDpcbiAgICAgICAgcmV0dXJuIGFkZCh0aGlzLnRhc2tSb3dFbnZlbG9wZVN0YXJ0KHJvdywgZGF5KSwgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy5yb3dIZWlnaHRQeCAtIHRoaXMuYmxvY2tTaXplUHgsXG4gICAgICAgIF0pO1xuXG4gICAgICBjYXNlIEZlYXR1cmUudmVydGljYWxBcnJvd0Rlc3RCb3R0b206XG4gICAgICAgIHJldHVybiBhZGQodGhpcy50YXNrUm93RW52ZWxvcGVTdGFydChyb3csIGRheSksIFswLCB0aGlzLnJvd0hlaWdodFB4XSk7XG4gICAgICBjYXNlIEZlYXR1cmUudGV4dFN0YXJ0OlxuICAgICAgICByZXR1cm4gYWRkKHRoaXMudGFza1Jvd0VudmVsb3BlU3RhcnQocm93LCBkYXkpLCBbXG4gICAgICAgICAgdGhpcy5ibG9ja1NpemVQeCxcbiAgICAgICAgICB0aGlzLmJsb2NrU2l6ZVB4LFxuICAgICAgICBdKTtcbiAgICAgIGNhc2UgRmVhdHVyZS5ncm91cFRleHRTdGFydDpcbiAgICAgICAgcmV0dXJuIGFkZCh0aGlzLmdyb3VwUm93RW52ZWxvcGVTdGFydChyb3csIGRheSksIFtcbiAgICAgICAgICB0aGlzLmJsb2NrU2l6ZVB4LFxuICAgICAgICAgIHRoaXMuYmxvY2tTaXplUHgsXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBGZWF0dXJlLnBlcmNlbnRTdGFydDpcbiAgICAgICAgcmV0dXJuIGFkZCh0aGlzLnRhc2tSb3dFbnZlbG9wZVN0YXJ0KHJvdywgZGF5KSwgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy5yb3dIZWlnaHRQeCAtIHRoaXMubGluZVdpZHRoUHgsXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBGZWF0dXJlLmhvcml6b250YWxBcnJvd0Rlc3Q6XG4gICAgICBjYXNlIEZlYXR1cmUuaG9yaXpvbnRhbEFycm93U3RhcnQ6XG4gICAgICAgIHJldHVybiBhZGQodGhpcy50YXNrUm93RW52ZWxvcGVTdGFydChyb3csIGRheSksIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIE1hdGguZmxvb3IodGhpcy5yb3dIZWlnaHRQeCAtIDAuNSAqIHRoaXMuYmxvY2tTaXplUHgpIC0gMSxcbiAgICAgICAgXSk7XG4gICAgICBjYXNlIEZlYXR1cmUudmVydGljYWxBcnJvd0Rlc3RUb01pbGVzdG9uZVRvcDpcbiAgICAgICAgcmV0dXJuIGFkZCh0aGlzLmZlYXR1cmUocm93LCBkYXksIEZlYXR1cmUudmVydGljYWxBcnJvd0Rlc3RUb3ApLCBbXG4gICAgICAgICAgMCxcbiAgICAgICAgICAtMSAqIHRoaXMubWV0cmljKE1ldHJpYy5taWxlc3RvbmVEaWFtZXRlciksXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBGZWF0dXJlLnZlcnRpY2FsQXJyb3dEZXN0VG9NaWxlc3RvbmVCb3R0b206XG4gICAgICAgIHJldHVybiBhZGQodGhpcy5mZWF0dXJlKHJvdywgZGF5LCBGZWF0dXJlLnZlcnRpY2FsQXJyb3dEZXN0VG9wKSwgW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy5tZXRyaWMoTWV0cmljLm1pbGVzdG9uZURpYW1ldGVyKSxcbiAgICAgICAgXSk7XG4gICAgICBjYXNlIEZlYXR1cmUuaG9yaXpvbnRhbEFycm93RGVzdFRvTWlsZXN0b25lOlxuICAgICAgICByZXR1cm4gYWRkKHRoaXMuZmVhdHVyZShyb3csIGRheSwgRmVhdHVyZS5ob3Jpem9udGFsQXJyb3dEZXN0KSwgW1xuICAgICAgICAgIC0xICogdGhpcy5tZXRyaWMoTWV0cmljLm1pbGVzdG9uZURpYW1ldGVyKSxcbiAgICAgICAgICAtMSAqIHRoaXMubWV0cmljKE1ldHJpYy5taWxlc3RvbmVEaWFtZXRlciksXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBGZWF0dXJlLnZlcnRpY2FsQXJyb3dTdGFydEZyb21NaWxlc3RvbmVUb3A6XG4gICAgICAgIHJldHVybiBhZGQodGhpcy5mZWF0dXJlKHJvdywgZGF5LCBGZWF0dXJlLnZlcnRpY2FsQXJyb3dTdGFydCksIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIC0xICogdGhpcy5tZXRyaWMoTWV0cmljLm1pbGVzdG9uZURpYW1ldGVyKSxcbiAgICAgICAgXSk7XG5cbiAgICAgIGNhc2UgRmVhdHVyZS52ZXJ0aWNhbEFycm93U3RhcnRGcm9tTWlsZXN0b25lQm90dG9tOlxuICAgICAgICByZXR1cm4gYWRkKHRoaXMuZmVhdHVyZShyb3csIGRheSwgRmVhdHVyZS52ZXJ0aWNhbEFycm93U3RhcnQpLCBbXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLm1ldHJpYyhNZXRyaWMubWlsZXN0b25lRGlhbWV0ZXIpLFxuICAgICAgICBdKTtcbiAgICAgIGNhc2UgRmVhdHVyZS5ob3Jpem9udGFsQXJyb3dTdGFydEZyb21NaWxlc3RvbmU6XG4gICAgICAgIHJldHVybiBhZGQodGhpcy5mZWF0dXJlKHJvdywgZGF5LCBGZWF0dXJlLmhvcml6b250YWxBcnJvd1N0YXJ0KSwgW1xuICAgICAgICAgIHRoaXMubWV0cmljKE1ldHJpYy5taWxlc3RvbmVEaWFtZXRlciksXG4gICAgICAgICAgMCxcbiAgICAgICAgXSk7XG4gICAgICBjYXNlIEZlYXR1cmUudGFza0VudmVsb3BlVG9wOlxuICAgICAgICByZXR1cm4gdGhpcy50YXNrUm93RW52ZWxvcGVTdGFydChyb3csIGRheSk7XG4gICAgICBjYXNlIEZlYXR1cmUuZ3JvdXBFbnZlbG9wZVN0YXJ0OlxuICAgICAgICByZXR1cm4gdGhpcy5ncm91cFJvd0VudmVsb3BlU3RhcnQocm93LCBkYXkpO1xuICAgICAgY2FzZSBGZWF0dXJlLnRpbWVNYXJrU3RhcnQ6XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVFbnZlbG9wZVN0YXJ0KGRheSk7XG4gICAgICBjYXNlIEZlYXR1cmUudGltZU1hcmtFbmQ6XG4gICAgICAgIHJldHVybiBhZGQodGhpcy50aW1lRW52ZWxvcGVTdGFydChkYXkpLCBbXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLnJvd0hlaWdodFB4ICogKHJvdyArIDEpLFxuICAgICAgICBdKTtcbiAgICAgIGNhc2UgRmVhdHVyZS50aW1lVGV4dFN0YXJ0OlxuICAgICAgICByZXR1cm4gYWRkKHRoaXMudGltZUVudmVsb3BlU3RhcnQoZGF5KSwgW3RoaXMuYmxvY2tTaXplUHgsIDBdKTtcbiAgICAgIGNhc2UgRmVhdHVyZS5ncm91cFRpdGxlVGV4dFN0YXJ0OlxuICAgICAgICByZXR1cm4gYWRkKHRoaXMuZ3JvdXBIZWFkZXJTdGFydCgpLCBbdGhpcy5ibG9ja1NpemVQeCwgMF0pO1xuICAgICAgY2FzZSBGZWF0dXJlLmRpc3BsYXlSYW5nZVRvcDpcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZUVudmVsb3BlU3RhcnQoZGF5KTtcbiAgICAgIGNhc2UgRmVhdHVyZS50YXNrUm93Qm90dG9tOlxuICAgICAgICByZXR1cm4gdGhpcy50YXNrUm93RW52ZWxvcGVTdGFydChyb3cgKyAxLCBkYXkpO1xuICAgICAgY2FzZSBGZWF0dXJlLnRhc2tzQ2xpcFJlY3RPcmlnaW46XG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tzQ2xpcFJlY3RPcmlnaW47XG4gICAgICBjYXNlIEZlYXR1cmUuZ3JvdXBCeU9yaWdpbjpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBCeU9yaWdpbjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIFRoZSBsaW5lIGJlbG93IHdpbGwgbm90IGNvbXBpbGUgaWYgeW91IG1pc3NlZCBhbiBlbnVtIGluIHRoZSBzd2l0Y2ggYWJvdmUuXG4gICAgICAgIGNvb3JkIHNhdGlzZmllcyBuZXZlcjtcbiAgICAgICAgcmV0dXJuIHB0KDAsIDApO1xuICAgIH1cbiAgfVxuXG4gIG1ldHJpYyhmZWF0dXJlOiBrZXlvZiB0eXBlb2YgTWV0cmljKTogbnVtYmVyIHtcbiAgICBzd2l0Y2ggKGZlYXR1cmUpIHtcbiAgICAgIGNhc2UgTWV0cmljLnRhc2tMaW5lSGVpZ2h0OlxuICAgICAgICByZXR1cm4gdGhpcy50YXNrSGVpZ2h0UHg7XG4gICAgICBjYXNlIE1ldHJpYy5wZXJjZW50SGVpZ2h0OlxuICAgICAgICByZXR1cm4gdGhpcy5saW5lV2lkdGhQeDtcbiAgICAgIGNhc2UgTWV0cmljLmFycm93SGVhZEhlaWdodDpcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0hlaWdodFB4ICogMjtcbiAgICAgIGNhc2UgTWV0cmljLmFycm93SGVhZFdpZHRoOlxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMudGFza0hlaWdodFB4KTtcbiAgICAgIGNhc2UgTWV0cmljLm1pbGVzdG9uZURpYW1ldGVyOlxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMudGFza0hlaWdodFB4KTtcbiAgICAgIGNhc2UgTWV0cmljLmxpbmVEYXNoTGluZTpcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTaXplUHg7XG4gICAgICBjYXNlIE1ldHJpYy5saW5lRGFzaEdhcDpcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTaXplUHg7XG4gICAgICBjYXNlIE1ldHJpYy50ZXh0WE9mZnNldDpcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTaXplUHg7XG4gICAgICBjYXNlIE1ldHJpYy5taW5UYXNrV2lkdGhQeDpcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTaXplUHggKiAxMDtcbiAgICAgIGNhc2UgTWV0cmljLnJvd0hlaWdodDpcbiAgICAgICAgcmV0dXJuIHRoaXMucm93SGVpZ2h0UHg7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUaGUgbGluZSBiZWxvdyB3aWxsIG5vdCBjb21waWxlIGlmIHlvdSBtaXNzZWQgYW4gZW51bSBpbiB0aGUgc3dpdGNoIGFib3ZlLlxuICAgICAgICBmZWF0dXJlIHNhdGlzZmllcyBuZXZlcjtcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBQb2ludCB9IGZyb20gXCIuLi9wb2ludC9wb2ludFwiO1xuaW1wb3J0IHsgUmVjdCB9IGZyb20gXCIuLi9yZWN0L3JlY3RcIjtcblxuY29uc3Qgd2l0aGluWSA9ICh5OiBudW1iZXIsIHJlY3Q6IFJlY3QpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHJlY3QudG9wTGVmdC55IDw9IHkgJiYgcmVjdC5ib3R0b21SaWdodC55ID49IHk7XG59O1xuXG5jb25zdCB3aXRoaW5YID0gKHg6IG51bWJlciwgcmVjdDogUmVjdCk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gcmVjdC50b3BMZWZ0LnggPD0geCAmJiByZWN0LmJvdHRvbVJpZ2h0LnggPj0geDtcbn07XG5cbmV4cG9ydCBjbGFzcyBIaXRSZWN0PFIgZXh0ZW5kcyBSZWN0PiB7XG4gIHJlY3RzOiBSW107XG4gIGNvbnN0cnVjdG9yKHJlY3RzOiBSW10pIHtcbiAgICB0aGlzLnJlY3RzID0gcmVjdHMuc29ydCgoYTogUiwgYjogUik6IG51bWJlciA9PiBhLnRvcExlZnQueSAtIGIudG9wTGVmdC55KTtcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgUmVjdCB0aGF0IHAgaXMgaW4sIG90aGVyd2lzZSByZXR1cm5zIC0xLiAqL1xuICBoaXQocDogUG9pbnQpOiBSIHwgbnVsbCB7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gdGhpcy5yZWN0cy5sZW5ndGggLSAxO1xuXG4gICAgd2hpbGUgKHN0YXJ0IDw9IGVuZCkge1xuICAgICAgLy8gRmluZCB0aGUgbWlkIGluZGV4XG4gICAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcblxuICAgICAgLy8gSWYgZWxlbWVudCBpcyBwcmVzZW50IGF0XG4gICAgICAvLyBtaWQsIHJldHVybiBUcnVlXG4gICAgICBpZiAod2l0aGluWShwLnksIHRoaXMucmVjdHNbbWlkXSkpIHtcbiAgICAgICAgaWYgKHdpdGhpblgocC54LCB0aGlzLnJlY3RzW21pZF0pKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVjdHNbbWlkXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIEVsc2UgbG9vayBpbiBsZWZ0IG9yXG4gICAgICAvLyByaWdodCBoYWxmIGFjY29yZGluZ2x5XG4gICAgICBlbHNlIGlmICh0aGlzLnJlY3RzW21pZF0udG9wTGVmdC55IDwgcC55KSB7XG4gICAgICAgIHN0YXJ0ID0gbWlkICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IG1pZCAtIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBDaGFydFZhbGlkYXRlLCBUYXNrIH0gZnJvbSAnLi4vY2hhcnQvY2hhcnQudHMnO1xuaW1wb3J0IHsgQ2hhcnRMaWtlLCBmaWx0ZXIsIEZpbHRlckZ1bmMgfSBmcm9tICcuLi9jaGFydC9maWx0ZXIvZmlsdGVyLnRzJztcbmltcG9ydCB7IERpcmVjdGVkRWRnZSwgVmVydGV4SW5kaWNlcyB9IGZyb20gJy4uL2RhZy9kYWcudHMnO1xuaW1wb3J0IHsgUGxhbiB9IGZyb20gJy4uL3BsYW4vcGxhbi50cyc7XG5pbXBvcnQgeyBSZXNvdXJjZURlZmluaXRpb24gfSBmcm9tICcuLi9yZXNvdXJjZXMvcmVzb3VyY2VzLnRzJztcbmltcG9ydCB7IFJlc3VsdCwgb2sgfSBmcm9tICcuLi9yZXN1bHQudHMnO1xuaW1wb3J0IHsgU3BhbiB9IGZyb20gJy4uL3NsYWNrL3NsYWNrLnRzJztcbmltcG9ydCB7IFRhc2tEdXJhdGlvbiB9IGZyb20gJy4uL3R5cGVzL3R5cGVzLnRzJztcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuLi9yZWN0L3JlY3QudHMnO1xuaW1wb3J0IHsgRGlzcGxheVJhbmdlIH0gZnJvbSAnLi9yYW5nZS9yYW5nZS50cyc7XG5pbXBvcnQgeyBQb2ludCwgZGlmZmVyZW5jZSwgcHQgfSBmcm9tICcuLi9wb2ludC9wb2ludC50cyc7XG5pbXBvcnQgeyBGZWF0dXJlLCBNZXRyaWMsIFNjYWxlIH0gZnJvbSAnLi9zY2FsZS9zY2FsZS50cyc7XG5pbXBvcnQgeyBIaXRSZWN0IH0gZnJvbSAnLi4vaGl0cmVjdC9oaXRyZWN0LnRzJztcbmltcG9ydCB7IFRoZW1lMiB9IGZyb20gJy4uL3N0eWxlL3RoZW1lL3RoZW1lLnRzJztcblxudHlwZSBEaXJlY3Rpb24gPSAndXAnIHwgJ2Rvd24nO1xuXG5leHBvcnQgdHlwZSBUYXNrSW5kZXhUb1JvdyA9IE1hcDxudW1iZXIsIG51bWJlcj47XG5cbi8qKiBGdW5jdGlvbiB1c2UgdG8gcHJvZHVjZSBhIHRleHQgbGFiZWwgZm9yIGEgdGFzayBhbmQgaXRzIHNsYWNrLiAqL1xuZXhwb3J0IHR5cGUgVGFza0xhYmVsID0gKHRhc2tJbmRleDogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbi8qKiBDb250cm9scyBvZiB0aGUgZGlzcGxheVJhbmdlIGluIFJlbmRlck9wdGlvbnMgaXMgdXNlZC5cbiAqXG4gKiAgXCJyZXN0cmljdFwiOiBPbmx5IGRpc3BsYXkgdGhlIHBhcnRzIG9mIHRoZSBjaGFydCB0aGF0IGFwcGVhciBpbiB0aGUgcmFuZ2UuXG4gKlxuICogIFwiaGlnaGxpZ2h0XCI6IERpc3BsYXkgdGhlIGZ1bGwgcmFuZ2Ugb2YgdGhlIGRhdGEsIGJ1dCBoaWdobGlnaHQgdGhlIHJhbmdlLlxuICovXG5leHBvcnQgdHlwZSBEaXNwbGF5UmFuZ2VVc2FnZSA9ICdyZXN0cmljdCcgfCAnaGlnaGxpZ2h0JztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUYXNrTGFiZWw6IFRhc2tMYWJlbCA9ICh0YXNrSW5kZXg6IG51bWJlcik6IHN0cmluZyA9PlxuICB0YXNrSW5kZXgudG9GaXhlZCgwKTtcblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJPcHRpb25zIHtcbiAgLyoqIFRoZSB0ZXh0IGZvbnQgc2l6ZSwgdGhpcyBkcml2ZXMgdGhlIHNpemUgb2YgYWxsIG90aGVyIGNoYXJ0IGZlYXR1cmVzLlxuICAgKiAqL1xuICBmb250U2l6ZVB4OiBudW1iZXI7XG5cbiAgLyoqIERpc3BsYXkgdGV4dCBpZiB0cnVlLiAqL1xuICBoYXNUZXh0OiBib29sZWFuO1xuXG4gIC8qKiBJZiBzdXBwbGllZCB0aGVuIG9ubHkgdGhlIHRhc2tzIGluIHRoZSBnaXZlbiByYW5nZSB3aWxsIGJlIGRpc3BsYXllZC4gKi9cbiAgZGlzcGxheVJhbmdlOiBEaXNwbGF5UmFuZ2UgfCBudWxsO1xuXG4gIC8qKiBDb250cm9scyBob3cgdGhlIGBkaXNwbGF5UmFuZ2VgIGlzIHVzZWQgaWYgc3VwcGxpZWQuICovXG4gIGRpc3BsYXlSYW5nZVVzYWdlOiBEaXNwbGF5UmFuZ2VVc2FnZTtcblxuICAvKiogVGhlIGNvbG9yIHRoZW1lLiAqL1xuICBjb2xvcnM6IFRoZW1lMjtcblxuICAvKiogSWYgdHJ1ZSB0aGVuIGRpc3BsYXkgdGltZXMgYXQgdGhlIHRvcCBvZiB0aGUgY2hhcnQuICovXG4gIGhhc1RpbWVsaW5lOiBib29sZWFuO1xuXG4gIC8qKiBJZiB0cnVlIHRoZW4gZGlzcGxheSB0aGUgdGFzayBiYXJzLiAqL1xuICBoYXNUYXNrczogYm9vbGVhbjtcblxuICAvKiogSWYgdHJ1ZSB0aGVuIGRyYXcgdmVydGljYWwgbGluZXMgZnJvbSB0aGUgdGltZWxpbmUgZG93biB0byB0YXNrIHN0YXJ0IGFuZFxuICAgKiBmaW5pc2ggcG9pbnRzLiAqL1xuICBkcmF3VGltZU1hcmtlcnNPblRhc2tzOiBib29sZWFuO1xuXG4gIC8qKiBEcmF3IGRlcGVuZGVuY3kgZWRnZXMgYmV0d2VlbiB0YXNrcyBpZiB0cnVlLiAqL1xuICBoYXNFZGdlczogYm9vbGVhbjtcblxuICAvKiogRnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBkaXNwbGF5IHRleHQgZm9yIGEgVGFzayBhbmQgaXRzIGFzc29jaWF0ZWQgU2xhY2suICovXG4gIHRhc2tMYWJlbDogVGFza0xhYmVsO1xuXG4gIC8qKiBSZXR1cm5zIHRoZSBkdXJhdGlvbiBmb3IgYSBnaXZlbiB0YXNrLiAqL1xuICB0YXNrRHVyYXRpb246IFRhc2tEdXJhdGlvbjtcblxuICAvKiogVGhlIGluZGljZXMgb2YgdGFza3MgdGhhdCBzaG91bGQgYmUgZW1waGFzaXplZCB3aGVuIGRyYXcsIHR5cGljYWxseSB1c2VkXG4gICAqIHRvIGRlbm90ZSB0aGUgY3JpdGljYWwgcGF0aC4gKi9cbiAgdGFza0VtcGhhc2l6ZTogbnVtYmVyW107XG5cbiAgLyoqIEZpbHRlciB0aGUgVGFza3MgdG8gYmUgZGlzcGxheWVkLiAqL1xuICBmaWx0ZXJGdW5jOiBGaWx0ZXJGdW5jIHwgbnVsbDtcblxuICAvKiogR3JvdXAgdGhlIHRhc2tzIHRvZ2V0aGVyIHZlcnRpY2FsbHkgYmFzZWQgb24gdGhlIGdpdmVuIHJlc291cmNlLiBJZiB0aGVcbiAgICogZW1wdHkgc3RyaW5nIGlzIHN1cHBsaWVkIHRoZW4ganVzdCBkaXNwbGF5IGJ5IHRvcG9sb2dpY2FsIG9yZGVyLlxuICAgKi9cbiAgZ3JvdXBCeVJlc291cmNlOiBzdHJpbmc7XG5cbiAgLyoqIFRhc2sgdG8gaGlnaGxpZ2h0LiAqL1xuICBoaWdobGlnaHRlZFRhc2s6IG51bGwgfCBudW1iZXI7XG5cbiAgLyoqIFRoZSBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgdGFzaywgb3IgLTEgaWYgbm8gdGFzayBpcyBzZWxlY3RlZC4gVGhpcyBpc1xuICAgKiBhbHdheXMgYW4gaW5kZXggaW50byB0aGUgb3JpZ2luYWwgY2hhcnQsIGFuZCBub3QgYW4gaW5kZXggaW50byBhIGZpbHRlcmVkXG4gICAqIGNoYXJ0LlxuICAgKi9cbiAgc2VsZWN0ZWRUYXNrSW5kZXg6IG51bWJlcjtcblxuICAvKiogQ29udmVydHMgdGhlIHRpbWVzIGluIGEgY2hhcnQgaW50byBhIGRpc3BsYXlhYmxlIHN0cmluZy4gKi9cbiAgZHVyYXRpb25EaXNwbGF5OiAoZDogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbiAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdGFzayBoYXMgYmVlbiBzdGFydGVkLiAqL1xuICB0YXNrSXNTdGFydGVkOiAodGFza0luZGV4OiBudW1iZXIpID0+IGJvb2xlYW47XG5cbiAgLyoqIFRoZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHByb2plY3QgdG8gdG9kYXkuICovXG4gIHRvZGF5OiBudW1iZXI7XG59XG5cbmNvbnN0IHZlcnRpY2FsQXJyb3dTdGFydEZlYXR1cmVGcm9tVGFza0R1cmF0aW9uID0gKFxuICB0YXNrOiBUYXNrLFxuICBkaXJlY3Rpb246IERpcmVjdGlvblxuKToga2V5b2YgdHlwZW9mIEZlYXR1cmUgPT4ge1xuICBpZiAodGFzay5kdXJhdGlvbiA9PT0gMCkge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgcmV0dXJuIEZlYXR1cmUudmVydGljYWxBcnJvd1N0YXJ0RnJvbU1pbGVzdG9uZUJvdHRvbTtcbiAgICB9XG4gICAgcmV0dXJuIEZlYXR1cmUudmVydGljYWxBcnJvd1N0YXJ0RnJvbU1pbGVzdG9uZVRvcDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRmVhdHVyZS52ZXJ0aWNhbEFycm93U3RhcnQ7XG4gIH1cbn07XG5cbmNvbnN0IHZlcnRpY2FsQXJyb3dEZXN0RmVhdHVyZUZyb21UYXNrRHVyYXRpb24gPSAoXG4gIHRhc2s6IFRhc2ssXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uXG4pOiBrZXlvZiB0eXBlb2YgRmVhdHVyZSA9PiB7XG4gIGlmICh0YXNrLmR1cmF0aW9uID09PSAwKSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICByZXR1cm4gRmVhdHVyZS52ZXJ0aWNhbEFycm93RGVzdFRvTWlsZXN0b25lVG9wO1xuICAgIH1cbiAgICByZXR1cm4gRmVhdHVyZS52ZXJ0aWNhbEFycm93RGVzdFRvTWlsZXN0b25lQm90dG9tO1xuICB9IGVsc2Uge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgcmV0dXJuIEZlYXR1cmUudmVydGljYWxBcnJvd0Rlc3RUb3A7XG4gICAgfVxuICAgIHJldHVybiBGZWF0dXJlLnZlcnRpY2FsQXJyb3dEZXN0Qm90dG9tO1xuICB9XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5jb25zdCBob3Jpem9udGFsQXJyb3dTdGFydEZlYXR1cmVGcm9tVGFza0R1cmF0aW9uID0gKFxuICB0YXNrOiBUYXNrXG4pOiBrZXlvZiB0eXBlb2YgRmVhdHVyZSA9PiB7XG4gIGlmICh0YXNrLmR1cmF0aW9uID09PSAwKSB7XG4gICAgcmV0dXJuIEZlYXR1cmUuaG9yaXpvbnRhbEFycm93U3RhcnRGcm9tTWlsZXN0b25lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGZWF0dXJlLmhvcml6b250YWxBcnJvd1N0YXJ0O1xuICB9XG59O1xuXG5jb25zdCBob3Jpem9udGFsQXJyb3dEZXN0RmVhdHVyZUZyb21UYXNrRHVyYXRpb24gPSAoXG4gIHRhc2s6IFRhc2tcbik6IGtleW9mIHR5cGVvZiBGZWF0dXJlID0+IHtcbiAgaWYgKHRhc2suZHVyYXRpb24gPT09IDApIHtcbiAgICByZXR1cm4gRmVhdHVyZS5ob3Jpem9udGFsQXJyb3dEZXN0VG9NaWxlc3RvbmU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZlYXR1cmUuaG9yaXpvbnRhbEFycm93RGVzdDtcbiAgfVxufTtcblxuLyoqXG4gKiBDb21wdXRlIHdoYXQgdGhlIGhlaWdodCBvZiB0aGUgY2FudmFzIHNob3VsZCBiZS4gTm90ZSB0aGF0IHRoZSB2YWx1ZSBkb2Vzbid0XG4gKiBrbm93IGFib3V0IGB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb2AsIHNvIGlmIHRoZSBjYW52YXMgaXMgYWxyZWFkeSBzY2FsZWQgYnlcbiAqIGB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb2AgdGhlbiBzbyB3aWxsIHRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1Z2dlc3RlZENhbnZhc0hlaWdodChcbiAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcbiAgc3BhbnM6IFNwYW5bXSxcbiAgb3B0czogUmVuZGVyT3B0aW9ucyxcbiAgbWF4Um93czogbnVtYmVyXG4pOiBudW1iZXIge1xuICBpZiAoIW9wdHMuaGFzVGFza3MpIHtcbiAgICBtYXhSb3dzID0gMDtcbiAgfVxuICByZXR1cm4gbmV3IFNjYWxlKFxuICAgIG9wdHMsXG4gICAgY2FudmFzLndpZHRoLFxuICAgIHNwYW5zW3NwYW5zLmxlbmd0aCAtIDFdLmZpbmlzaCArIDFcbiAgKS5oZWlnaHQobWF4Um93cyk7XG59XG5cbi8vIFRoZSBsb2NhdGlvbiwgaW4gY2FudmFzIHBpeGVsIGNvb3JkaW5hdGVzLCBvZiBlYWNoIHRhc2sgYmFyLiBTaG91bGQgdXNlIHRoZVxuLy8gdGV4dCBvZiB0aGUgdGFzayBsYWJlbCBhcyB0aGUgbG9jYXRpb24sIHNpbmNlIHRoYXQncyBhbHdheXMgZHJhd24gaW4gdGhlIHZpZXdcbi8vIGlmIHBvc3NpYmxlLlxuZXhwb3J0IGludGVyZmFjZSBUYXNrTG9jYXRpb24ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcblxuICAvLyBUaGF0IGluZGV4IG9mIHRoZSB0YXNrIGluIHRoZSB1bmZpbHRlcmVkIENoYXJ0LlxuICBvcmlnaW5hbFRhc2tJbmRleDogbnVtYmVyO1xufVxuXG50eXBlIFVwZGF0ZVR5cGUgPSAnbW91c2Vtb3ZlJyB8ICdtb3VzZWRvd24nO1xuXG4vLyBBIGZ1bmMgdGhhdCB0YWtlcyBhIFBvaW50IGFuZCByZWRyYXdzIHRoZSBoaWdobGlnaHRlZCB0YXNrIGlmIG5lZWRlZCwgcmV0dXJuc1xuLy8gdGhlIGluZGV4IG9mIHRoZSB0YXNrIHRoYXQgaXMgaGlnaGxpZ2h0ZWQuXG5leHBvcnQgdHlwZSBVcGRhdGVIaWdobGlnaHRGcm9tTW91c2VQb3MgPSAoXG4gIHBvaW50OiBQb2ludCxcbiAgdXBkYXRlVHlwZTogVXBkYXRlVHlwZVxuKSA9PiBudW1iZXIgfCBudWxsO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlclJlc3VsdCB7XG4gIHNjYWxlOiBTY2FsZTtcbiAgdXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zOiBVcGRhdGVIaWdobGlnaHRGcm9tTW91c2VQb3MgfCBudWxsO1xuICBzZWxlY3RlZFRhc2tMb2NhdGlvbjogUG9pbnQgfCBudWxsO1xufVxuXG4vLyBBIHNwYW4gb24gdGhlIHgtYXhpcy5cbnR5cGUgeFJhbmdlID0gW251bWJlciwgbnVtYmVyXTtcblxuLy8gVE9ETyAtIFBhc3MgaW4gbWF4IHJvd3MsIGFuZCBhIG1hcHBpbmcgdGhhdCBtYXBzIGZyb20gdGFza0luZGV4IHRvIHJvdyxcbi8vIGJlY2F1c2UgdHdvIGRpZmZlcmVudCB0YXNrcyBtaWdodCBiZSBwbGFjZWQgb24gdGhlIHNhbWUgcm93LiBBbHNvIHdlIHNob3VsZFxuLy8gcGFzcyBpbiBtYXggcm93cz8gT3Igc2hvdWxkIHRoYXQgY29tZSBmcm9tIHRoZSBhYm92ZSBtYXBwaW5nP1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRhc2tzVG9DYW52YXMoXG4gIHBhcmVudDogSFRNTEVsZW1lbnQgfCBudWxsLFxuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgcGxhbjogUGxhbixcbiAgc3BhbnM6IFNwYW5bXSxcbiAgb3B0czogUmVuZGVyT3B0aW9ucyxcbiAgb3ZlcmxheTogSFRNTENhbnZhc0VsZW1lbnQgfCBudWxsID0gbnVsbFxuKTogUmVzdWx0PFJlbmRlclJlc3VsdD4ge1xuICBjb25zdCB2cmV0ID0gQ2hhcnRWYWxpZGF0ZShwbGFuLmNoYXJ0KTtcbiAgaWYgKCF2cmV0Lm9rKSB7XG4gICAgcmV0dXJuIHZyZXQ7XG4gIH1cblxuICBjb25zdCBvcmlnaW5hbExhYmVscyA9IHBsYW4uY2hhcnQuVmVydGljZXMubWFwKFxuICAgICh0YXNrOiBUYXNrLCB0YXNrSW5kZXg6IG51bWJlcikgPT4gb3B0cy50YXNrTGFiZWwodGFza0luZGV4KVxuICApO1xuXG4gIC8vIEFwcGx5IHRoZSBmaWx0ZXIgYW5kIHdvcmsgd2l0aCB0aGUgQ2hhcnRMaWtlIHJldHVybiBmcm9tIHRoaXMgcG9pbnQgb24uXG4gIC8vIEZpdGxlciBhbHNvIG5lZWRzIHRvIGJlIGFwcGxpZWQgdG8gc3BhbnMuXG4gIGNvbnN0IGZyZXQgPSBmaWx0ZXIoXG4gICAgcGxhbi5jaGFydCxcbiAgICBvcHRzLmZpbHRlckZ1bmMsXG4gICAgb3B0cy50YXNrRW1waGFzaXplLFxuICAgIHNwYW5zLFxuICAgIG9yaWdpbmFsTGFiZWxzLFxuICAgIG9wdHMuc2VsZWN0ZWRUYXNrSW5kZXhcbiAgKTtcbiAgaWYgKCFmcmV0Lm9rKSB7XG4gICAgcmV0dXJuIGZyZXQ7XG4gIH1cbiAgY29uc3QgY2hhcnRMaWtlID0gZnJldC52YWx1ZS5jaGFydExpa2U7XG4gIGNvbnN0IGxhYmVscyA9IGZyZXQudmFsdWUubGFiZWxzO1xuICBjb25zdCByZXNvdXJjZURlZmluaXRpb24gPSBwbGFuLmdldFJlc291cmNlRGVmaW5pdGlvbihvcHRzLmdyb3VwQnlSZXNvdXJjZSk7XG4gIGNvbnN0IGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4ID1cbiAgICBmcmV0LnZhbHVlLmZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4O1xuICBjb25zdCBmcm9tT3JpZ2luYWxJbmRleFRvRmlsdGVyZWRJbmRleCA9XG4gICAgZnJldC52YWx1ZS5mcm9tT3JpZ2luYWxJbmRleFRvRmlsdGVyZWRJbmRleDtcblxuICBjb25zdCBmcm9tRmlsdGVyZWRJbmRleFRvUGVyY2VudENvbXBsZXRlID0gKFxuICAgIGZpbHRlcmVkSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIgPT4ge1xuICAgIGNvbnN0IHRhc2tJbmRleCA9IGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LmdldChmaWx0ZXJlZEluZGV4KTtcbiAgICBpZiAodGFza0luZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBwbGFuLmdldFRhc2tDb21wbGV0aW9uKHRhc2tJbmRleCk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCB0YyA9IHJldC52YWx1ZTtcbiAgICBzd2l0Y2ggKHRjLnN0YWdlKSB7XG4gICAgICBjYXNlICd1bnN0YXJ0ZWQnOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgJ3N0YXJ0ZWQnOlxuICAgICAgICByZXR1cm4gdGMucGVyY2VudENvbXBsZXRlO1xuICAgICAgY2FzZSAnZmluaXNoZWQnOlxuICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGMgc2F0aXNmaWVzIG5ldmVyO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgLy8gU2VsZWN0ZWQgdGFzaywgYXMgYW4gaW5kZXggaW50byB0aGUgdW5maWx0ZXJlZCBDaGFydC5cbiAgbGV0IGxhc3RTZWxlY3RlZFRhc2tJbmRleCA9IG9wdHMuc2VsZWN0ZWRUYXNrSW5kZXg7XG5cbiAgLy8gSGlnaGxpZ2h0ZWQgdGFza3MuXG4gIGNvbnN0IGVtcGhhc2l6ZWRUYXNrczogU2V0PG51bWJlcj4gPSBuZXcgU2V0KGZyZXQudmFsdWUuZW1waGFzaXplZFRhc2tzKTtcbiAgc3BhbnMgPSBmcmV0LnZhbHVlLnNwYW5zO1xuXG4gIC8vIENhbGN1bGF0ZSBob3cgd2lkZSB3ZSBuZWVkIHRvIG1ha2UgdGhlIGdyb3VwQnkgY29sdW1uLlxuICBsZXQgbWF4R3JvdXBOYW1lTGVuZ3RoID0gMDtcbiAgaWYgKG9wdHMuZ3JvdXBCeVJlc291cmNlICE9PSAnJyAmJiBvcHRzLmhhc1RleHQpIHtcbiAgICBtYXhHcm91cE5hbWVMZW5ndGggPSBvcHRzLmdyb3VwQnlSZXNvdXJjZS5sZW5ndGg7XG4gICAgaWYgKHJlc291cmNlRGVmaW5pdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNvdXJjZURlZmluaXRpb24udmFsdWVzLmZvckVhY2goKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgbWF4R3JvdXBOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4R3JvdXBOYW1lTGVuZ3RoLCB2YWx1ZS5sZW5ndGgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdG90YWxOdW1iZXJPZlJvd3MgPSBzcGFucy5sZW5ndGg7XG4gIGNvbnN0IHRvdGFsTnVtYmVyT2ZEYXlzID0gc3BhbnNbc3BhbnMubGVuZ3RoIC0gMV0uZmluaXNoO1xuICBjb25zdCBzY2FsZSA9IG5ldyBTY2FsZShcbiAgICBvcHRzLFxuICAgIGNhbnZhcy53aWR0aCxcbiAgICB0b3RhbE51bWJlck9mRGF5cyArIDEsXG4gICAgbWF4R3JvdXBOYW1lTGVuZ3RoXG4gICk7XG5cbiAgY29uc3QgdGFza0xpbmVIZWlnaHQgPSBzY2FsZS5tZXRyaWMoTWV0cmljLnRhc2tMaW5lSGVpZ2h0KTtcbiAgY29uc3QgZGlhbW9uZERpYW1ldGVyID0gc2NhbGUubWV0cmljKE1ldHJpYy5taWxlc3RvbmVEaWFtZXRlcik7XG4gIGNvbnN0IHBlcmNlbnRIZWlnaHQgPSBzY2FsZS5tZXRyaWMoTWV0cmljLnBlcmNlbnRIZWlnaHQpO1xuICBjb25zdCBhcnJvd0hlYWRIZWlnaHQgPSBzY2FsZS5tZXRyaWMoTWV0cmljLmFycm93SGVhZEhlaWdodCk7XG4gIGNvbnN0IGFycm93SGVhZFdpZHRoID0gc2NhbGUubWV0cmljKE1ldHJpYy5hcnJvd0hlYWRXaWR0aCk7XG4gIGNvbnN0IG1pblRhc2tXaWR0aFB4ID0gc2NhbGUubWV0cmljKE1ldHJpYy5taW5UYXNrV2lkdGhQeCk7XG5cbiAgY29uc3QgZGF5c1dpdGhUaW1lTWFya2VyczogU2V0PG51bWJlcj4gPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHRpcmV0ID0gdGFza0luZGV4VG9Sb3dGcm9tR3JvdXBCeShcbiAgICBvcHRzLFxuICAgIHJlc291cmNlRGVmaW5pdGlvbixcbiAgICBjaGFydExpa2UsXG4gICAgZnJldC52YWx1ZS5kaXNwbGF5T3JkZXJcbiAgKTtcbiAgaWYgKCF0aXJldC5vaykge1xuICAgIHJldHVybiB0aXJldDtcbiAgfVxuICBjb25zdCB0YXNrSW5kZXhUb1JvdyA9IHRpcmV0LnZhbHVlLnRhc2tJbmRleFRvUm93O1xuICBjb25zdCByb3dSYW5nZXMgPSB0aXJldC52YWx1ZS5yb3dSYW5nZXM7XG5cbiAgLy8gU2V0IHVwIGNhbnZhcyBiYXNpY3MuXG4gIGNsZWFyQ2FudmFzKGN0eCwgb3B0cywgY2FudmFzKTtcbiAgc2V0Rm9udFNpemUoY3R4LCBvcHRzKTtcblxuICBjb25zdCBjbGlwUmVnaW9uID0gbmV3IFBhdGgyRCgpO1xuICBjb25zdCBjbGlwT3JpZ2luID0gc2NhbGUuZmVhdHVyZSgwLCAwLCBGZWF0dXJlLnRhc2tzQ2xpcFJlY3RPcmlnaW4pO1xuICBjb25zdCBjbGlwV2lkdGggPSBjYW52YXMud2lkdGggLSBjbGlwT3JpZ2luLng7XG4gIGNsaXBSZWdpb24ucmVjdChjbGlwT3JpZ2luLngsIDAsIGNsaXBXaWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgLy8gRHJhdyBiaWcgcmVkIHJlY3Qgb3ZlciB3aGVyZSB0aGUgY2xpcCByZWdpb24gd2lsbCBiZS5cbiAgaWYgKDApIHtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmVkJztcbiAgICBjdHgubGluZVdpZHRoID0gMjtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LnN0cm9rZShjbGlwUmVnaW9uKTtcbiAgfVxuXG4gIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ29uLXN1cmZhY2UnKTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlJyk7XG5cbiAgaWYgKHJvd1JhbmdlcyAhPT0gbnVsbCkge1xuICAgIGlmIChvcHRzLmhhc1Rhc2tzKSB7XG4gICAgICBkcmF3U3dpbUxhbmVIaWdobGlnaHRzKFxuICAgICAgICBjdHgsXG4gICAgICAgIHNjYWxlLFxuICAgICAgICByb3dSYW5nZXMsXG4gICAgICAgIHRvdGFsTnVtYmVyT2ZEYXlzLFxuICAgICAgICBvcHRzLmNvbG9ycy5nZXQoJ2dyb3VwLWNvbG9yJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHJlc291cmNlRGVmaW5pdGlvbiAhPT0gdW5kZWZpbmVkICYmIG9wdHMuaGFzVGV4dCkge1xuICAgICAgZHJhd1N3aW1MYW5lTGFiZWxzKGN0eCwgb3B0cywgcmVzb3VyY2VEZWZpbml0aW9uLCBzY2FsZSwgcm93UmFuZ2VzKTtcbiAgICB9XG4gIH1cblxuICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlJyk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgnb24tc3VyZmFjZScpO1xuXG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5jbGlwKGNsaXBSZWdpb24pO1xuXG4gIGludGVyZmFjZSBSZWN0V2l0aEZpbHRlcmVkVGFza0luZGV4IGV4dGVuZHMgUmVjdCB7XG4gICAgZmlsdGVyZWRUYXNrSW5kZXg6IG51bWJlcjtcbiAgfVxuICBjb25zdCB0YXNrSW5kZXhUb1Rhc2tIaWdobGlnaHRDb3JuZXJzOiBNYXA8XG4gICAgbnVtYmVyLFxuICAgIFJlY3RXaXRoRmlsdGVyZWRUYXNrSW5kZXhcbiAgPiA9IG5ldyBNYXAoKTtcblxuICAvLyBEcmF3IHRoZSBcInRvZGF5XCIgbWFya2VyLlxuICBpZiAob3B0cy50b2RheSAhPT0gLTEpIHtcbiAgICBkcmF3VG9kYXlNYXJrZXIoY3R4LCBvcHRzLnRvZGF5LCBvcHRzLmNvbG9ycywgc2NhbGUpO1xuICB9XG5cbiAgLy8gS2VlcCB0cmFjayBvZiB3aGVyZSB3ZSBkcmF3IHRpbWVsaW5lIGxhYmVscywgdG8gYXZvaWQgb3ZlcmxhcHMuXG4gIGNvbnN0IHRpbWVNYXJrZXJSYW5nZXM6IHhSYW5nZVtdID0gW107XG5cbiAgLy8gRHJhdyB0YXNrcyBpbiB0aGVpciByb3dzLlxuICBjaGFydExpa2UuVmVydGljZXMuZm9yRWFjaCgodGFzazogVGFzaywgdGFza0luZGV4OiBudW1iZXIpID0+IHtcbiAgICBjb25zdCByb3cgPSB0YXNrSW5kZXhUb1Jvdy5nZXQodGFza0luZGV4KSE7XG4gICAgY29uc3Qgc3BhbiA9IHNwYW5zW3Rhc2tJbmRleF07XG4gICAgY29uc3QgdGFza1N0YXJ0ID0gc2NhbGUuZmVhdHVyZShyb3csIHNwYW4uc3RhcnQsIEZlYXR1cmUudGFza0xpbmVTdGFydCk7XG4gICAgY29uc3QgdGFza0VuZCA9IHNjYWxlLmZlYXR1cmUocm93LCBzcGFuLmZpbmlzaCwgRmVhdHVyZS50YXNrTGluZVN0YXJ0KTtcbiAgICBjb25zdCBwZXJjZW50Q29tcGxldGUgPSBmcm9tRmlsdGVyZWRJbmRleFRvUGVyY2VudENvbXBsZXRlKHRhc2tJbmRleCk7XG5cbiAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlLW11dGVkJyk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlLW11dGVkJyk7XG5cbiAgICAvLyBEcmF3IGluIHRpbWUgbWFya2VycyBpZiBkaXNwbGF5ZWQuXG4gICAgLy8gVE9ETyAtIE1ha2Ugc3VyZSB0aGV5IGRvbid0IG92ZXJsYXAuXG4gICAgaWYgKG9wdHMuZHJhd1RpbWVNYXJrZXJzT25UYXNrcykge1xuICAgICAgZHJhd1RpbWVNYXJrZXJBdERheVRvVGFzayhcbiAgICAgICAgY3R4LFxuICAgICAgICByb3csXG4gICAgICAgIHNwYW4uc3RhcnQsXG4gICAgICAgIHRhc2ssXG4gICAgICAgIG9wdHMsXG4gICAgICAgIHNjYWxlLFxuICAgICAgICBkYXlzV2l0aFRpbWVNYXJrZXJzLFxuICAgICAgICB0aW1lTWFya2VyUmFuZ2VzXG4gICAgICApO1xuICAgIH1cblxuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGlmIChlbXBoYXNpemVkVGFza3MuaGFzKHRhc2tJbmRleCkpIHtcbiAgICAgIGlmIChwbGFuLl9zdGF0dXMuc3RhZ2UgPT09ICdzdGFydGVkJyAmJiBwZXJjZW50Q29tcGxldGUgPiAwKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBnZXRQYXR0ZXJuKFxuICAgICAgICAgIGN0eCxcbiAgICAgICAgICBvcHRzLmNvbG9ycy5nZXQoJ3NlY29uZGFyeScpLFxuICAgICAgICAgIG9wdHMuY29sb3JzLmdldCgnc3VyZmFjZScpXG4gICAgICAgICkhO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ3NlY29uZGFyeScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGdldFBhdHRlcm4oXG4gICAgICAgICAgY3R4LFxuICAgICAgICAgIG9wdHMuY29sb3JzLmdldCgncHJpbWFyeScpLFxuICAgICAgICAgIG9wdHMuY29sb3JzLmdldCgnc3VyZmFjZScpXG4gICAgICAgICkhO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ3ByaW1hcnknKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGdldFBhdHRlcm4oXG4gICAgICAgIGN0eCxcbiAgICAgICAgb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlJyksXG4gICAgICAgIG9wdHMuY29sb3JzLmdldCgnc3VyZmFjZScpXG4gICAgICApITtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgnb24tc3VyZmFjZScpO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZ2hsaWdodFRvcExlZnQgPSBzY2FsZS5mZWF0dXJlKFxuICAgICAgcm93LFxuICAgICAgc3Bhbi5zdGFydCxcbiAgICAgIEZlYXR1cmUudGFza0VudmVsb3BlVG9wXG4gICAgKTtcbiAgICBjb25zdCBoaWdobGlnaHRCb3R0b21SaWdodCA9IHNjYWxlLmZlYXR1cmUoXG4gICAgICByb3cgKyAxLFxuICAgICAgc3Bhbi5maW5pc2gsXG4gICAgICBGZWF0dXJlLnRhc2tFbnZlbG9wZVRvcFxuICAgICk7XG5cbiAgICAvLyBQYWQgaGlnaGxpZ2h0Qm90dG9tUmlnaHQgaWYgdG9vIHNtYWxsLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCBbd2lkdGgsIF9dID0gZGlmZmVyZW5jZShoaWdobGlnaHRUb3BMZWZ0LCBoaWdobGlnaHRCb3R0b21SaWdodCk7XG4gICAgaWYgKHdpZHRoIDwgbWluVGFza1dpZHRoUHgpIHtcbiAgICAgIGhpZ2hsaWdodEJvdHRvbVJpZ2h0LnggPSBoaWdobGlnaHRUb3BMZWZ0LnggKyBtaW5UYXNrV2lkdGhQeDtcbiAgICB9XG5cbiAgICB0YXNrSW5kZXhUb1Rhc2tIaWdobGlnaHRDb3JuZXJzLnNldCh0YXNrSW5kZXgsIHtcbiAgICAgIHRvcExlZnQ6IGhpZ2hsaWdodFRvcExlZnQsXG4gICAgICBib3R0b21SaWdodDogaGlnaGxpZ2h0Qm90dG9tUmlnaHQsXG4gICAgICBmaWx0ZXJlZFRhc2tJbmRleDogdGFza0luZGV4LFxuICAgIH0pO1xuICAgIGlmIChvcHRzLmhhc1Rhc2tzKSB7XG4gICAgICBpZiAodGFza1N0YXJ0LnggPT09IHRhc2tFbmQueCkge1xuICAgICAgICBkcmF3TWlsZXN0b25lKGN0eCwgdGFza1N0YXJ0LCBkaWFtb25kRGlhbWV0ZXIsIHBlcmNlbnRIZWlnaHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhd1Rhc2tCYXIoXG4gICAgICAgICAgY3R4LFxuICAgICAgICAgIG9wdHMsXG4gICAgICAgICAgdGFza1N0YXJ0LFxuICAgICAgICAgIHRhc2tFbmQsXG4gICAgICAgICAgdGFza0xpbmVIZWlnaHQsXG4gICAgICAgICAgcGVyY2VudENvbXBsZXRlLFxuICAgICAgICAgIHBsYW4uX3N0YXR1cy5zdGFnZSA9PT0gJ3N0YXJ0ZWQnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgZHJhd2luZyB0aGUgdGV4dCBvZiB0aGUgU3RhcnQgYW5kIEZpbmlzaCB0YXNrcy5cbiAgICAgIGlmICh0YXNrSW5kZXggIT09IDAgJiYgdGFza0luZGV4ICE9PSB0b3RhbE51bWJlck9mUm93cyAtIDEpIHtcbiAgICAgICAgZHJhd1Rhc2tUZXh0KFxuICAgICAgICAgIGN0eCxcbiAgICAgICAgICBvcHRzLFxuICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBzcGFuLFxuICAgICAgICAgIHRhc2ssXG4gICAgICAgICAgdGFza0luZGV4LFxuICAgICAgICAgIGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LmdldCh0YXNrSW5kZXgpISxcbiAgICAgICAgICBjbGlwV2lkdGgsXG4gICAgICAgICAgbGFiZWxzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBjdHgubGluZVdpZHRoID0gMTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlLW11dGVkJyk7XG5cbiAgLy8gTm93IGRyYXcgYWxsIHRoZSBhcnJvd3MsIGkuZS4gZWRnZXMuXG4gIGlmIChvcHRzLmhhc0VkZ2VzICYmIG9wdHMuaGFzVGFza3MpIHtcbiAgICBjb25zdCBoaWdobGlnaHRlZEVkZ2VzOiBEaXJlY3RlZEVkZ2VbXSA9IFtdO1xuICAgIGNvbnN0IG5vcm1hbEVkZ2VzOiBEaXJlY3RlZEVkZ2VbXSA9IFtdO1xuICAgIGNoYXJ0TGlrZS5FZGdlcy5mb3JFYWNoKChlOiBEaXJlY3RlZEVkZ2UpID0+IHtcbiAgICAgIC8vIERvbid0IGRyYXcgZWRnZXMgdG8gYSB0YXNrIGlmIHRoZSB0YXNrIGlzIHVuc3RhcnRlZC5cbiAgICAgIGNvbnN0IG9yaWdUYXNrSW5kZXggPSBmcm9tRmlsdGVyZWRJbmRleFRvT3JpZ2luYWxJbmRleC5nZXQoZS5qKTtcbiAgICAgIGlmIChvcmlnVGFza0luZGV4ICE9PSB1bmRlZmluZWQgJiYgb3B0cy50YXNrSXNTdGFydGVkKG9yaWdUYXNrSW5kZXgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVtcGhhc2l6ZWRUYXNrcy5oYXMoZS5pKSAmJiBlbXBoYXNpemVkVGFza3MuaGFzKGUuaikpIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWRFZGdlcy5wdXNoKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsRWRnZXMucHVzaChlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgnb24tc3VyZmFjZS1tdXRlZCcpO1xuICAgIGRyYXdFZGdlcyhcbiAgICAgIGN0eCxcbiAgICAgIG9wdHMsXG4gICAgICBub3JtYWxFZGdlcyxcbiAgICAgIHNwYW5zLFxuICAgICAgY2hhcnRMaWtlLlZlcnRpY2VzLFxuICAgICAgc2NhbGUsXG4gICAgICB0YXNrSW5kZXhUb1JvdyxcbiAgICAgIGFycm93SGVhZFdpZHRoLFxuICAgICAgYXJyb3dIZWFkSGVpZ2h0LFxuICAgICAgZW1waGFzaXplZFRhc2tzXG4gICAgKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ3ByaW1hcnknKTtcbiAgICBkcmF3RWRnZXMoXG4gICAgICBjdHgsXG4gICAgICBvcHRzLFxuICAgICAgaGlnaGxpZ2h0ZWRFZGdlcyxcbiAgICAgIHNwYW5zLFxuICAgICAgY2hhcnRMaWtlLlZlcnRpY2VzLFxuICAgICAgc2NhbGUsXG4gICAgICB0YXNrSW5kZXhUb1JvdyxcbiAgICAgIGFycm93SGVhZFdpZHRoLFxuICAgICAgYXJyb3dIZWFkSGVpZ2h0LFxuICAgICAgZW1waGFzaXplZFRhc2tzXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSB0aGUgY2xpcCByZWdpb24uXG4gIGN0eC5yZXN0b3JlKCk7XG5cbiAgLy8gTm93IGRyYXcgdGhlIHJhbmdlIGhpZ2hsaWdodHMgaWYgcmVxdWlyZWQuXG4gIGlmIChvcHRzLmRpc3BsYXlSYW5nZSAhPT0gbnVsbCAmJiBvcHRzLmRpc3BsYXlSYW5nZVVzYWdlID09PSAnaGlnaGxpZ2h0Jykge1xuICAgIC8vIERyYXcgYSByZWN0IG92ZXIgZWFjaCBzaWRlIHRoYXQgaXNuJ3QgaW4gdGhlIHJhbmdlLlxuICAgIGlmIChvcHRzLmRpc3BsYXlSYW5nZS5iZWdpbiA+IDApIHtcbiAgICAgIGRyYXdSYW5nZU92ZXJsYXkoXG4gICAgICAgIGN0eCxcbiAgICAgICAgb3B0cyxcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIDAsXG4gICAgICAgIG9wdHMuZGlzcGxheVJhbmdlLmJlZ2luLFxuICAgICAgICB0b3RhbE51bWJlck9mUm93c1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuZGlzcGxheVJhbmdlLmVuZCA8IHRvdGFsTnVtYmVyT2ZEYXlzKSB7XG4gICAgICBkcmF3UmFuZ2VPdmVybGF5KFxuICAgICAgICBjdHgsXG4gICAgICAgIG9wdHMsXG4gICAgICAgIHNjYWxlLFxuICAgICAgICBvcHRzLmRpc3BsYXlSYW5nZS5lbmQsXG4gICAgICAgIHRvdGFsTnVtYmVyT2ZEYXlzICsgMSxcbiAgICAgICAgdG90YWxOdW1iZXJPZlJvd3NcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHVwZGF0ZUhpZ2hsaWdodEZyb21Nb3VzZVBvczogVXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zIHwgbnVsbCA9IG51bGw7XG4gIGxldCBzZWxlY3RlZFRhc2tMb2NhdGlvbjogUG9pbnQgfCBudWxsID0gbnVsbDtcblxuICBpZiAob3ZlcmxheSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IG92ZXJsYXlDdHggPSBvdmVybGF5LmdldENvbnRleHQoJzJkJykhO1xuXG4gICAgY29uc3QgdGFza0xvY2F0aW9uS0RUcmVlID0gbmV3IEhpdFJlY3Q8UmVjdFdpdGhGaWx0ZXJlZFRhc2tJbmRleD4oW1xuICAgICAgLi4udGFza0luZGV4VG9UYXNrSGlnaGxpZ2h0Q29ybmVycy52YWx1ZXMoKSxcbiAgICBdKTtcblxuICAgIC8vIEFsd2F5cyByZWNvcmVkIGluIHRoZSBvcmlnaW5hbCB1bmZpbHRlcmVkIHRhc2sgaW5kZXguXG4gICAgbGV0IGxhc3RIaWdobGlnaHRlZFRhc2tJbmRleCA9IC0xO1xuXG4gICAgdXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zID0gKFxuICAgICAgcG9pbnQ6IFBvaW50LFxuICAgICAgdXBkYXRlVHlwZTogVXBkYXRlVHlwZVxuICAgICk6IG51bWJlciB8IG51bGwgPT4ge1xuICAgICAgLy8gRmlyc3QgY29udmVydCBwb2ludCBpbiBvZmZzZXQgY29vcmRzIGludG8gY2FudmFzIGNvb3Jkcy5cbiAgICAgIHBvaW50LnggPSBwb2ludC54ICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICBwb2ludC55ID0gcG9pbnQueSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgY29uc3QgdGFza0xvY2F0aW9uID0gdGFza0xvY2F0aW9uS0RUcmVlLmhpdChwb2ludCk7XG4gICAgICBjb25zdCBvcmlnaW5hbFRhc2tJbmRleCA9XG4gICAgICAgIHRhc2tMb2NhdGlvbiA9PT0gbnVsbFxuICAgICAgICAgID8gLTFcbiAgICAgICAgICA6IGZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4LmdldChcbiAgICAgICAgICAgICAgdGFza0xvY2F0aW9uIS5maWx0ZXJlZFRhc2tJbmRleFxuICAgICAgICAgICAgKSE7XG5cbiAgICAgIC8vIERvIG5vdCBhbGxvdyBoaWdobGlnaHRpbmcgb3IgY2xpY2tpbmcgdGhlIFN0YXJ0IGFuZCBGaW5pc2ggdGFza3MuXG4gICAgICBpZiAoXG4gICAgICAgIG9yaWdpbmFsVGFza0luZGV4ID09PSAwIHx8XG4gICAgICAgIG9yaWdpbmFsVGFza0luZGV4ID09PSBwbGFuLmNoYXJ0LlZlcnRpY2VzLmxlbmd0aCAtIDFcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh1cGRhdGVUeXBlID09PSAnbW91c2Vtb3ZlJykge1xuICAgICAgICBpZiAob3JpZ2luYWxUYXNrSW5kZXggPT09IGxhc3RIaWdobGlnaHRlZFRhc2tJbmRleCkge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbFRhc2tJbmRleDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9yaWdpbmFsVGFza0luZGV4ID09PSBsYXN0U2VsZWN0ZWRUYXNrSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxUYXNrSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHVwZGF0ZVR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICAgIGxhc3RIaWdobGlnaHRlZFRhc2tJbmRleCA9IG9yaWdpbmFsVGFza0luZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFzdFNlbGVjdGVkVGFza0luZGV4ID0gb3JpZ2luYWxUYXNrSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIG92ZXJsYXlDdHguY2xlYXJSZWN0KDAsIDAsIG92ZXJsYXkud2lkdGgsIG92ZXJsYXkuaGVpZ2h0KTtcblxuICAgICAgLy8gRHJhdyBib3RoIGhpZ2hsaWdodCBhbmQgc2VsZWN0aW9uLlxuXG4gICAgICAvLyBEcmF3IGhpZ2hsaWdodC5cbiAgICAgIGxldCBjb3JuZXJzID0gdGFza0luZGV4VG9UYXNrSGlnaGxpZ2h0Q29ybmVycy5nZXQoXG4gICAgICAgIGZyb21PcmlnaW5hbEluZGV4VG9GaWx0ZXJlZEluZGV4LmdldChsYXN0SGlnaGxpZ2h0ZWRUYXNrSW5kZXgpIVxuICAgICAgKTtcbiAgICAgIGlmIChjb3JuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZHJhd1Rhc2tIaWdobGlnaHQoXG4gICAgICAgICAgb3ZlcmxheUN0eCxcbiAgICAgICAgICBjb3JuZXJzLnRvcExlZnQsXG4gICAgICAgICAgY29ybmVycy5ib3R0b21SaWdodCxcbiAgICAgICAgICBvcHRzLmNvbG9ycy5nZXQoJ3ByaW1hcnktdmFyaWFudCcpLFxuICAgICAgICAgIHRhc2tMaW5lSGVpZ2h0XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIERyYXcgc2VsZWN0aW9uLlxuICAgICAgY29ybmVycyA9IHRhc2tJbmRleFRvVGFza0hpZ2hsaWdodENvcm5lcnMuZ2V0KFxuICAgICAgICBmcm9tT3JpZ2luYWxJbmRleFRvRmlsdGVyZWRJbmRleC5nZXQobGFzdFNlbGVjdGVkVGFza0luZGV4KSFcbiAgICAgICk7XG4gICAgICBpZiAoY29ybmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRyYXdTZWxlY3Rpb25IaWdobGlnaHQoXG4gICAgICAgICAgb3ZlcmxheUN0eCxcbiAgICAgICAgICBjb3JuZXJzLnRvcExlZnQsXG4gICAgICAgICAgY29ybmVycy5ib3R0b21SaWdodCxcbiAgICAgICAgICBvcHRzLmNvbG9ycy5nZXQoJ3ByaW1hcnktdmFyaWFudCcpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcmlnaW5hbFRhc2tJbmRleDtcbiAgICB9O1xuXG4gICAgLy8gRHJhdyBzZWxlY3Rpb24uXG4gICAgY29uc3QgY29ybmVycyA9IHRhc2tJbmRleFRvVGFza0hpZ2hsaWdodENvcm5lcnMuZ2V0KFxuICAgICAgZnJvbU9yaWdpbmFsSW5kZXhUb0ZpbHRlcmVkSW5kZXguZ2V0KGxhc3RTZWxlY3RlZFRhc2tJbmRleCkhXG4gICAgKTtcbiAgICBpZiAoY29ybmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBkcmF3U2VsZWN0aW9uSGlnaGxpZ2h0KFxuICAgICAgICBvdmVybGF5Q3R4LFxuICAgICAgICBjb3JuZXJzLnRvcExlZnQsXG4gICAgICAgIGNvcm5lcnMuYm90dG9tUmlnaHQsXG4gICAgICAgIG9wdHMuY29sb3JzLmdldCgncHJpbWFyeS12YXJpYW50JylcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCB0aGUgaGlnaGVzdCB0YXNrIG9mIGFsbCB0aGUgdGFza3MgZGlzcGxheWVkLlxuICB0YXNrSW5kZXhUb1Rhc2tIaWdobGlnaHRDb3JuZXJzLmZvckVhY2goKHJjOiBSZWN0KSA9PiB7XG4gICAgaWYgKHNlbGVjdGVkVGFza0xvY2F0aW9uID09PSBudWxsKSB7XG4gICAgICBzZWxlY3RlZFRhc2tMb2NhdGlvbiA9IHJjLnRvcExlZnQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyYy50b3BMZWZ0LnkgPCBzZWxlY3RlZFRhc2tMb2NhdGlvbi55KSB7XG4gICAgICBzZWxlY3RlZFRhc2tMb2NhdGlvbiA9IHJjLnRvcExlZnQ7XG4gICAgfVxuICB9KTtcblxuICBpZiAoXG4gICAgb3B0cy5zZWxlY3RlZFRhc2tJbmRleCAhPT0gLTEgJiZcbiAgICBmcm9tT3JpZ2luYWxJbmRleFRvRmlsdGVyZWRJbmRleC5oYXMob3B0cy5zZWxlY3RlZFRhc2tJbmRleClcbiAgKSB7XG4gICAgc2VsZWN0ZWRUYXNrTG9jYXRpb24gPSB0YXNrSW5kZXhUb1Rhc2tIaWdobGlnaHRDb3JuZXJzLmdldChcbiAgICAgIGZyb21PcmlnaW5hbEluZGV4VG9GaWx0ZXJlZEluZGV4LmdldChvcHRzLnNlbGVjdGVkVGFza0luZGV4KSEgLy8gQ29udmVydFxuICAgICkhLnRvcExlZnQ7XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHNlbGVjdGVkIHRhc2sgbG9jYXRpb24gaW4gc2NyZWVuIGNvb3JkaW5hdGVzLCBub3QgaW4gY2FudmFzXG4gIC8vIHVuaXRzLlxuICBsZXQgcmV0dXJuZWRMb2NhdGlvbjogUG9pbnQgfCBudWxsID0gbnVsbDtcbiAgaWYgKHNlbGVjdGVkVGFza0xvY2F0aW9uICE9PSBudWxsKSB7XG4gICAgcmV0dXJuZWRMb2NhdGlvbiA9IHB0KFxuICAgICAgc2VsZWN0ZWRUYXNrTG9jYXRpb24ueCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgc2VsZWN0ZWRUYXNrTG9jYXRpb24ueSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBvayh7XG4gICAgc2NhbGU6IHNjYWxlLFxuICAgIHVwZGF0ZUhpZ2hsaWdodEZyb21Nb3VzZVBvczogdXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zLFxuICAgIHNlbGVjdGVkVGFza0xvY2F0aW9uOiByZXR1cm5lZExvY2F0aW9uLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd0VkZ2VzKFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgb3B0czogUmVuZGVyT3B0aW9ucyxcbiAgZWRnZXM6IERpcmVjdGVkRWRnZVtdLFxuICBzcGFuczogU3BhbltdLFxuICB0YXNrczogVGFza1tdLFxuICBzY2FsZTogU2NhbGUsXG4gIHRhc2tJbmRleFRvUm93OiBUYXNrSW5kZXhUb1JvdyxcbiAgYXJyb3dIZWFkV2lkdGg6IG51bWJlcixcbiAgYXJyb3dIZWFkSGVpZ2h0OiBudW1iZXIsXG4gIHRhc2tIaWdobGlnaHRzOiBTZXQ8bnVtYmVyPlxuKSB7XG4gIGVkZ2VzLmZvckVhY2goKGU6IERpcmVjdGVkRWRnZSkgPT4ge1xuICAgIGNvbnN0IHNyY1NsYWNrOiBTcGFuID0gc3BhbnNbZS5pXTtcbiAgICBjb25zdCBkc3RTbGFjazogU3BhbiA9IHNwYW5zW2Uual07XG4gICAgY29uc3Qgc3JjVGFzazogVGFzayA9IHRhc2tzW2UuaV07XG4gICAgY29uc3QgZHN0VGFzazogVGFzayA9IHRhc2tzW2Uual07XG4gICAgY29uc3Qgc3JjUm93ID0gdGFza0luZGV4VG9Sb3cuZ2V0KGUuaSkhO1xuICAgIGNvbnN0IGRzdFJvdyA9IHRhc2tJbmRleFRvUm93LmdldChlLmopITtcbiAgICBjb25zdCBzcmNEYXkgPSBzcmNTbGFjay5maW5pc2g7XG4gICAgY29uc3QgZHN0RGF5ID0gZHN0U2xhY2suc3RhcnQ7XG5cbiAgICBpZiAodGFza0hpZ2hsaWdodHMuaGFzKGUuaSkgJiYgdGFza0hpZ2hsaWdodHMuaGFzKGUuaikpIHtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgncHJpbWFyeScpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgncHJpbWFyeScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ29uLXN1cmZhY2UtbXV0ZWQnKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ29uLXN1cmZhY2UtbXV0ZWQnKTtcbiAgICB9XG5cbiAgICBkcmF3QXJyb3dCZXR3ZWVuVGFza3MoXG4gICAgICBjdHgsXG4gICAgICBzcmNEYXksXG4gICAgICBkc3REYXksXG4gICAgICBzY2FsZSxcbiAgICAgIHNyY1JvdyxcbiAgICAgIHNyY1Rhc2ssXG4gICAgICBkc3RSb3csXG4gICAgICBkc3RUYXNrLFxuICAgICAgYXJyb3dIZWFkV2lkdGgsXG4gICAgICBhcnJvd0hlYWRIZWlnaHRcbiAgICApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd1JhbmdlT3ZlcmxheShcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIHNjYWxlOiBTY2FsZSxcbiAgYmVnaW5EYXk6IG51bWJlcixcbiAgZW5kRGF5OiBudW1iZXIsXG4gIHRvdGFsTnVtYmVyT2ZSb3dzOiBudW1iZXJcbikge1xuICBjb25zdCB0b3BMZWZ0ID0gc2NhbGUuZmVhdHVyZSgwLCBiZWdpbkRheSwgRmVhdHVyZS5kaXNwbGF5UmFuZ2VUb3ApO1xuICBjb25zdCBib3R0b21SaWdodCA9IHNjYWxlLmZlYXR1cmUoXG4gICAgdG90YWxOdW1iZXJPZlJvd3MsXG4gICAgZW5kRGF5LFxuICAgIEZlYXR1cmUudGFza1Jvd0JvdHRvbVxuICApO1xuICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCd0cmFuc3BhcmVudC1vdmVybGF5Jyk7XG4gIGN0eC5maWxsUmVjdChcbiAgICB0b3BMZWZ0LngsXG4gICAgdG9wTGVmdC55LFxuICAgIGJvdHRvbVJpZ2h0LnggLSB0b3BMZWZ0LngsXG4gICAgYm90dG9tUmlnaHQueSAtIHRvcExlZnQueVxuICApO1xufVxuXG5mdW5jdGlvbiBkcmF3QXJyb3dCZXR3ZWVuVGFza3MoXG4gIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICBzcmNEYXk6IG51bWJlcixcbiAgZHN0RGF5OiBudW1iZXIsXG4gIHNjYWxlOiBTY2FsZSxcbiAgc3JjUm93OiBudW1iZXIsXG4gIHNyY1Rhc2s6IFRhc2ssXG4gIGRzdFJvdzogbnVtYmVyLFxuICBkc3RUYXNrOiBUYXNrLFxuICBhcnJvd0hlYWRXaWR0aDogbnVtYmVyLFxuICBhcnJvd0hlYWRIZWlnaHQ6IG51bWJlclxuKSB7XG4gIGlmIChzcmNEYXkgPT09IGRzdERheSkge1xuICAgIGRyYXdWZXJ0aWNhbEFycm93VG9UYXNrKFxuICAgICAgY3R4LFxuICAgICAgc2NhbGUsXG4gICAgICBzcmNSb3csXG4gICAgICBzcmNEYXksXG4gICAgICBzcmNUYXNrLFxuICAgICAgZHN0Um93LFxuICAgICAgZHN0RGF5LFxuICAgICAgZHN0VGFzayxcbiAgICAgIGFycm93SGVhZFdpZHRoLFxuICAgICAgYXJyb3dIZWFkSGVpZ2h0XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBkcmF3TFNoYXBlZEFycm93VG9UYXNrKFxuICAgICAgY3R4LFxuICAgICAgc2NhbGUsXG4gICAgICBzcmNSb3csXG4gICAgICBzcmNEYXksXG4gICAgICBzcmNUYXNrLFxuICAgICAgZHN0Um93LFxuICAgICAgZHN0VGFzayxcbiAgICAgIGRzdERheSxcbiAgICAgIGFycm93SGVhZEhlaWdodCxcbiAgICAgIGFycm93SGVhZFdpZHRoXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhckNhbnZhcyhcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnRcbikge1xuICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdiYWNrZ3JvdW5kJyk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgnb24tYmFja2dyb3VuZCcpO1xuICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gc2V0Rm9udFNpemUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIG9wdHM6IFJlbmRlck9wdGlvbnMpIHtcbiAgY3R4LmZvbnQgPSBgJHtvcHRzLmZvbnRTaXplUHh9cHggc2VyaWZgO1xufVxuXG4vLyBEcmF3IEwgc2hhcGVkIGFycm93LCBmaXJzdCBnb2luZyBiZXR3ZWVuIHJvd3MsIHRoZW4gZ29pbmcgYmV0d2VlbiBkYXlzLlxuZnVuY3Rpb24gZHJhd0xTaGFwZWRBcnJvd1RvVGFzayhcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIHNjYWxlOiBTY2FsZSxcbiAgc3JjUm93OiBudW1iZXIsXG4gIHNyY0RheTogbnVtYmVyLFxuICBzcmNUYXNrOiBUYXNrLFxuICBkc3RSb3c6IG51bWJlcixcbiAgZHN0VGFzazogVGFzayxcbiAgZHN0RGF5OiBudW1iZXIsXG4gIGFycm93SGVhZEhlaWdodDogbnVtYmVyLFxuICBhcnJvd0hlYWRXaWR0aDogbnVtYmVyXG4pIHtcbiAgLy8gRHJhdyB2ZXJ0aWNhbCBwYXJ0IG9mIHRoZSBcIkxcIi5cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjb25zdCBkaXJlY3Rpb246IERpcmVjdGlvbiA9IHNyY1JvdyA8IGRzdFJvdyA/ICdkb3duJyA6ICd1cCc7XG4gIGNvbnN0IHZlcnRMaW5lU3RhcnQgPSBzY2FsZS5mZWF0dXJlKFxuICAgIHNyY1JvdyxcbiAgICBzcmNEYXksXG4gICAgdmVydGljYWxBcnJvd1N0YXJ0RmVhdHVyZUZyb21UYXNrRHVyYXRpb24oc3JjVGFzaywgZGlyZWN0aW9uKVxuICApO1xuICBjb25zdCB2ZXJ0TGluZUVuZCA9IHNjYWxlLmZlYXR1cmUoXG4gICAgZHN0Um93LFxuICAgIHNyY0RheSxcbiAgICBob3Jpem9udGFsQXJyb3dEZXN0RmVhdHVyZUZyb21UYXNrRHVyYXRpb24oZHN0VGFzaylcbiAgKTtcbiAgY3R4Lm1vdmVUbyh2ZXJ0TGluZVN0YXJ0LnggKyAwLjUsIHZlcnRMaW5lU3RhcnQueSk7XG4gIGN0eC5saW5lVG8odmVydExpbmVTdGFydC54ICsgMC41LCB2ZXJ0TGluZUVuZC55KTtcblxuICAvLyBEcmF3IGhvcml6b250YWwgcGFydCBvZiB0aGUgXCJMXCIuXG4gIGNvbnN0IGhvcnpMaW5lU3RhcnQgPSB2ZXJ0TGluZUVuZDtcbiAgY29uc3QgaG9yekxpbmVFbmQgPSBzY2FsZS5mZWF0dXJlKFxuICAgIGRzdFJvdyxcbiAgICBkc3REYXksXG4gICAgaG9yaXpvbnRhbEFycm93RGVzdEZlYXR1cmVGcm9tVGFza0R1cmF0aW9uKGRzdFRhc2spXG4gICk7XG4gIGN0eC5tb3ZlVG8odmVydExpbmVTdGFydC54ICsgMC41LCBob3J6TGluZVN0YXJ0LnkpO1xuICBjdHgubGluZVRvKGhvcnpMaW5lRW5kLnggKyAwLjUsIGhvcnpMaW5lRW5kLnkpO1xuXG4gIGN0eC5zdHJva2UoKTtcblxuICAvLyBEcmF3IHRoZSBhcnJvd2hlYWQuIFRoaXMgYXJyb3cgaGVhZCB3aWxsIGFsd2F5cyBwb2ludCB0byB0aGUgcmlnaHRcbiAgLy8gc2luY2UgdGhhdCdzIGhvdyB0aW1lIGZsb3dzLlxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8oaG9yekxpbmVFbmQueCArIDAuNSwgaG9yekxpbmVFbmQueSk7XG4gIGN0eC5saW5lVG8oXG4gICAgaG9yekxpbmVFbmQueCAtIGFycm93SGVhZEhlaWdodCArIDAuNSxcbiAgICBob3J6TGluZUVuZC55ICsgYXJyb3dIZWFkV2lkdGhcbiAgKTtcbiAgY3R4LmxpbmVUbyhcbiAgICBob3J6TGluZUVuZC54IC0gYXJyb3dIZWFkSGVpZ2h0ICsgMC41LFxuICAgIGhvcnpMaW5lRW5kLnkgLSBhcnJvd0hlYWRXaWR0aFxuICApO1xuICBjdHguZmlsbCgpO1xufVxuXG5mdW5jdGlvbiBkcmF3VmVydGljYWxBcnJvd1RvVGFzayhcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIHNjYWxlOiBTY2FsZSxcbiAgc3JjUm93OiBudW1iZXIsXG4gIHNyY0RheTogbnVtYmVyLFxuICBzcmNUYXNrOiBUYXNrLFxuICBkc3RSb3c6IG51bWJlcixcbiAgZHN0RGF5OiBudW1iZXIsXG4gIGRzdFRhc2s6IFRhc2ssXG4gIGFycm93SGVhZFdpZHRoOiBudW1iZXIsXG4gIGFycm93SGVhZEhlaWdodDogbnVtYmVyXG4pIHtcbiAgY29uc3QgZGlyZWN0aW9uOiBEaXJlY3Rpb24gPSBzcmNSb3cgPCBkc3RSb3cgPyAnZG93bicgOiAndXAnO1xuICBjb25zdCBhcnJvd1N0YXJ0ID0gc2NhbGUuZmVhdHVyZShcbiAgICBzcmNSb3csXG4gICAgc3JjRGF5LFxuICAgIHZlcnRpY2FsQXJyb3dTdGFydEZlYXR1cmVGcm9tVGFza0R1cmF0aW9uKHNyY1Rhc2ssIGRpcmVjdGlvbilcbiAgKTtcbiAgY29uc3QgYXJyb3dFbmQgPSBzY2FsZS5mZWF0dXJlKFxuICAgIGRzdFJvdyxcbiAgICBkc3REYXksXG4gICAgdmVydGljYWxBcnJvd0Rlc3RGZWF0dXJlRnJvbVRhc2tEdXJhdGlvbihkc3RUYXNrLCBkaXJlY3Rpb24pXG4gICk7XG5cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgubW92ZVRvKGFycm93U3RhcnQueCArIDAuNSwgYXJyb3dTdGFydC55KTtcbiAgY3R4LmxpbmVUbyhhcnJvd0VuZC54ICsgMC41LCBhcnJvd0VuZC55KTtcblxuICBjdHguc3Ryb2tlKCk7XG5cbiAgLy8gRHJhdyB0aGUgYXJyb3doZWFkLlxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGNvbnN0IGRlbHRhWSA9IGRpcmVjdGlvbiA9PT0gJ2Rvd24nID8gLWFycm93SGVhZEhlaWdodCA6IGFycm93SGVhZEhlaWdodDtcbiAgY3R4Lm1vdmVUbyhhcnJvd0VuZC54ICsgMC41LCBhcnJvd0VuZC55KTtcbiAgY3R4LmxpbmVUbyhhcnJvd0VuZC54IC0gYXJyb3dIZWFkV2lkdGggKyAwLjUsIGFycm93RW5kLnkgKyBkZWx0YVkpO1xuICBjdHgubGluZVRvKGFycm93RW5kLnggKyBhcnJvd0hlYWRXaWR0aCArIDAuNSwgYXJyb3dFbmQueSArIGRlbHRhWSk7XG4gIGN0eC5maWxsKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdUYXNrVGV4dChcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIHNjYWxlOiBTY2FsZSxcbiAgcm93OiBudW1iZXIsXG4gIHNwYW46IFNwYW4sXG4gIHRhc2s6IFRhc2ssXG4gIHRhc2tJbmRleDogbnVtYmVyLFxuICBvcmlnaW5hbFRhc2tJbmRleDogbnVtYmVyLFxuICBjbGlwV2lkdGg6IG51bWJlcixcbiAgbGFiZWxzOiBzdHJpbmdbXVxuKSB7XG4gIGlmICghb3B0cy5oYXNUZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxhYmVsID0gbGFiZWxzW3Rhc2tJbmRleF07XG5cbiAgbGV0IHhTdGFydEluVGltZSA9IHNwYW4uc3RhcnQ7XG4gIGxldCB4UGl4ZWxEZWx0YSA9IDA7XG4gIC8vIERldGVybWluZSB3aGVyZSBvbiB0aGUgeC1heGlzIHRvIHN0YXJ0IGRyYXdpbmcgdGhlIHRhc2sgdGV4dC5cbiAgaWYgKG9wdHMuZGlzcGxheVJhbmdlICE9PSBudWxsICYmIG9wdHMuZGlzcGxheVJhbmdlVXNhZ2UgPT09ICdyZXN0cmljdCcpIHtcbiAgICBpZiAob3B0cy5kaXNwbGF5UmFuZ2UuaW4oc3Bhbi5zdGFydCkpIHtcbiAgICAgIHhTdGFydEluVGltZSA9IHNwYW4uc3RhcnQ7XG4gICAgICB4UGl4ZWxEZWx0YSA9IDA7XG4gICAgfSBlbHNlIGlmIChvcHRzLmRpc3BsYXlSYW5nZS5pbihzcGFuLmZpbmlzaCkpIHtcbiAgICAgIHhTdGFydEluVGltZSA9IHNwYW4uZmluaXNoO1xuICAgICAgY29uc3QgbWVhcyA9IGN0eC5tZWFzdXJlVGV4dChsYWJlbCk7XG4gICAgICB4UGl4ZWxEZWx0YSA9IC1tZWFzLndpZHRoIC0gMiAqIHNjYWxlLm1ldHJpYyhNZXRyaWMudGV4dFhPZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzcGFuLnN0YXJ0IDwgb3B0cy5kaXNwbGF5UmFuZ2UuYmVnaW4gJiZcbiAgICAgIHNwYW4uZmluaXNoID4gb3B0cy5kaXNwbGF5UmFuZ2UuZW5kXG4gICAgKSB7XG4gICAgICB4U3RhcnRJblRpbWUgPSBvcHRzLmRpc3BsYXlSYW5nZS5iZWdpbjtcbiAgICAgIHhQaXhlbERlbHRhID0gY2xpcFdpZHRoIC8gMjtcbiAgICB9XG4gIH1cbiAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ29uLXN1cmZhY2UnKTtcbiAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICBjb25zdCB0ZXh0U3RhcnQgPSBzY2FsZS5mZWF0dXJlKHJvdywgeFN0YXJ0SW5UaW1lLCBGZWF0dXJlLnRleHRTdGFydCk7XG4gIGN0eC5maWxsVGV4dChsYWJlbCwgdGV4dFN0YXJ0LnggKyB4UGl4ZWxEZWx0YSwgdGV4dFN0YXJ0LnkpO1xufVxuXG5mdW5jdGlvbiBkcmF3VGFza0JhcihcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIHRhc2tTdGFydDogUG9pbnQsXG4gIHRhc2tFbmQ6IFBvaW50LFxuICB0YXNrTGluZUhlaWdodDogbnVtYmVyLFxuICBwZXJjZW50Q29tcGxldGU6IG51bWJlcixcbiAgcGxhblN0YXJ0ZWQ6IGJvb2xlYW5cbikge1xuICBjdHguZmlsbFJlY3QoXG4gICAgdGFza1N0YXJ0LngsXG4gICAgdGFza1N0YXJ0LnksXG4gICAgdGFza0VuZC54IC0gdGFza1N0YXJ0LngsXG4gICAgdGFza0xpbmVIZWlnaHRcbiAgKTtcbiAgY29uc29sZS5sb2codGFza0VuZC54LCB0YXNrRW5kLnkpO1xuICBjb25zb2xlLmxvZyhjdHgubGluZVdpZHRoKTtcbiAgY3R4LnN0cm9rZVJlY3QoXG4gICAgdGFza1N0YXJ0LngsXG4gICAgdGFza1N0YXJ0LnksXG4gICAgdGFza0VuZC54IC0gdGFza1N0YXJ0LngsXG4gICAgdGFza0xpbmVIZWlnaHRcbiAgKTtcblxuICBpZiAocGxhblN0YXJ0ZWQpIHtcbiAgICBpZiAocGVyY2VudENvbXBsZXRlICE9PSAwKSB7XG4gICAgICBpZiAocGVyY2VudENvbXBsZXRlID09PSAxMDApIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3JzLmdldCgnb24tc3VyZmFjZScpO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ29uLXN1cmZhY2UnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ3NlY29uZGFyeScpO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ3NlY29uZGFyeScpO1xuICAgICAgfVxuXG4gICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIHRhc2tTdGFydC54LFxuICAgICAgICB0YXNrU3RhcnQueSxcbiAgICAgICAgKCh0YXNrRW5kLnggLSB0YXNrU3RhcnQueCkgKiBwZXJjZW50Q29tcGxldGUpIC8gMTAwLFxuICAgICAgICB0YXNrTGluZUhlaWdodFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZHJhd1Rhc2tIaWdobGlnaHQoXG4gIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICBoaWdobGlnaHRTdGFydDogUG9pbnQsXG4gIGhpZ2hsaWdodEVuZDogUG9pbnQsXG4gIGNvbG9yOiBzdHJpbmcsXG4gIGJvcmRlcldpZHRoOiBudW1iZXJcbikge1xuICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICBjdHguc3Ryb2tlUmVjdChcbiAgICBoaWdobGlnaHRTdGFydC54LFxuICAgIGhpZ2hsaWdodFN0YXJ0LnksXG4gICAgaGlnaGxpZ2h0RW5kLnggLSBoaWdobGlnaHRTdGFydC54LFxuICAgIGhpZ2hsaWdodEVuZC55IC0gaGlnaGxpZ2h0U3RhcnQueVxuICApO1xufVxuXG5mdW5jdGlvbiBkcmF3U2VsZWN0aW9uSGlnaGxpZ2h0KFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgaGlnaGxpZ2h0U3RhcnQ6IFBvaW50LFxuICBoaWdobGlnaHRFbmQ6IFBvaW50LFxuICBjb2xvcjogc3RyaW5nXG4pIHtcbiAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICBjdHguZmlsbFJlY3QoXG4gICAgaGlnaGxpZ2h0U3RhcnQueCxcbiAgICBoaWdobGlnaHRTdGFydC55LFxuICAgIGhpZ2hsaWdodEVuZC54IC0gaGlnaGxpZ2h0U3RhcnQueCxcbiAgICBoaWdobGlnaHRFbmQueSAtIGhpZ2hsaWdodFN0YXJ0LnlcbiAgKTtcbn1cblxuZnVuY3Rpb24gZHJhd01pbGVzdG9uZShcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIHRhc2tTdGFydDogUG9pbnQsXG4gIGRpYW1vbmREaWFtZXRlcjogbnVtYmVyLFxuICBwZXJjZW50SGVpZ2h0OiBudW1iZXJcbikge1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5saW5lV2lkdGggPSBwZXJjZW50SGVpZ2h0IC8gMjtcbiAgY3R4Lm1vdmVUbyh0YXNrU3RhcnQueCwgdGFza1N0YXJ0LnkgLSBkaWFtb25kRGlhbWV0ZXIpO1xuICBjdHgubGluZVRvKHRhc2tTdGFydC54ICsgZGlhbW9uZERpYW1ldGVyLCB0YXNrU3RhcnQueSk7XG4gIGN0eC5saW5lVG8odGFza1N0YXJ0LngsIHRhc2tTdGFydC55ICsgZGlhbW9uZERpYW1ldGVyKTtcbiAgY3R4LmxpbmVUbyh0YXNrU3RhcnQueCAtIGRpYW1vbmREaWFtZXRlciwgdGFza1N0YXJ0LnkpO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5zdHJva2UoKTtcbn1cblxuY29uc3QgZHJhd1RvZGF5TWFya2VyID0gKFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgdG9kYXk6IG51bWJlcixcbiAgY29sb3JzOiBUaGVtZTIsXG4gIHNjYWxlOiBTY2FsZVxuKSA9PiB7XG4gIGNvbnN0IHRpbWVNYXJrU3RhcnQgPSBzY2FsZS5mZWF0dXJlKDAsIHRvZGF5LCBGZWF0dXJlLnRpbWVNYXJrU3RhcnQpO1xuICBjb25zdCByb3dIZWlnaHQgPSBzY2FsZS5tZXRyaWMoTWV0cmljLnJvd0hlaWdodCk7XG5cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgubGluZVdpZHRoID0gc2NhbGUubWV0cmljKCdwZXJjZW50SGVpZ2h0JykgKiA0O1xuICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcnMuZ2V0KCdlcnJvcicpO1xuICBjdHgubW92ZVRvKHRpbWVNYXJrU3RhcnQueCwgdGltZU1hcmtTdGFydC55KTtcbiAgY3R4LmxpbmVUbyh0aW1lTWFya1N0YXJ0LngsIHRpbWVNYXJrU3RhcnQueSArIHJvd0hlaWdodCk7XG4gIGN0eC5zdHJva2UoKTtcbn07XG5cbmNvbnN0IGRyYXdUaW1lTWFya2VyQXREYXlUb1Rhc2sgPSAoXG4gIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICByb3c6IG51bWJlcixcbiAgZGF5OiBudW1iZXIsXG4gIHRhc2s6IFRhc2ssXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIHNjYWxlOiBTY2FsZSxcbiAgZGF5c1dpdGhUaW1lTWFya2VyczogU2V0PG51bWJlcj4sXG4gIHRpbWVNYXJrZXJSYW5nZXM6IHhSYW5nZVtdXG4pID0+IHtcbiAgaWYgKGRheXNXaXRoVGltZU1hcmtlcnMuaGFzKGRheSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF5c1dpdGhUaW1lTWFya2Vycy5hZGQoZGF5KTtcbiAgY29uc3QgdGltZU1hcmtTdGFydCA9IHNjYWxlLmZlYXR1cmUocm93LCBkYXksIEZlYXR1cmUudGltZU1hcmtTdGFydCk7XG5cbiAgLy8gRG9uJ3QgYm90aGVyIGRyYXdpbmcgdGhlIGxpbmUgaWYgaXQncyB1bmRlciBhbiBleGlzdGluZyB0aW1lIGxhYmVsLlxuICBpZiAoXG4gICAgdGltZU1hcmtlclJhbmdlcy5maW5kSW5kZXgoXG4gICAgICAoW2JlZ2luLCBlbmRdKSA9PiB0aW1lTWFya1N0YXJ0LnggPj0gYmVnaW4gJiYgdGltZU1hcmtTdGFydC54IDw9IGVuZFxuICAgICkgIT09IC0xXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHRpbWVNYXJrRW5kID0gc2NhbGUuZmVhdHVyZShcbiAgICByb3csXG4gICAgZGF5LFxuICAgIHZlcnRpY2FsQXJyb3dEZXN0RmVhdHVyZUZyb21UYXNrRHVyYXRpb24odGFzaywgJ2Rvd24nKVxuICApO1xuICBjdHgubGluZVdpZHRoID0gMC41O1xuICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ3RyYW5zcGFyZW50LW92ZXJsYXknKTtcblxuICBjdHgubW92ZVRvKHRpbWVNYXJrU3RhcnQueCArIDAuNSwgdGltZU1hcmtTdGFydC55KTtcbiAgY3R4LmxpbmVUbyh0aW1lTWFya1N0YXJ0LnggKyAwLjUsIHRpbWVNYXJrRW5kLnkpO1xuICBjdHguc3Ryb2tlKCk7XG5cbiAgY3R4LnNldExpbmVEYXNoKFtdKTtcblxuICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcnMuZ2V0KCdvbi1zdXJmYWNlJyk7XG4gIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgY29uc3QgdGV4dFN0YXJ0ID0gc2NhbGUuZmVhdHVyZShyb3csIGRheSwgRmVhdHVyZS50aW1lVGV4dFN0YXJ0KTtcbiAgY29uc3QgbGFiZWwgPSBvcHRzLmR1cmF0aW9uRGlzcGxheShkYXkpO1xuICBjb25zdCBtZWFzID0gY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKTtcbiAgY29uc3QgdGV4dEJlZ2luID0gdGltZU1hcmtTdGFydC54O1xuICBjb25zdCB0ZXh0RW5kID0gdGV4dFN0YXJ0LnggKyBtZWFzLndpZHRoO1xuICBpZiAoXG4gICAgb3B0cy5oYXNUZXh0ICYmXG4gICAgb3B0cy5oYXNUaW1lbGluZSAmJlxuICAgIC8vIERvbid0IGRyYXcgdGhlIGxhYmVsIGlmIGl0IG92ZXJsYXBzIGFueSBleGlzdGluZyBsYWJlbHNzLlxuICAgIHRpbWVNYXJrZXJSYW5nZXMuZmluZEluZGV4KChbYmVnaW4sIGVuZF0pID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh0ZXh0QmVnaW4gPD0gYmVnaW4gJiYgdGV4dEVuZCA+PSBiZWdpbikgfHxcbiAgICAgICAgKHRleHRCZWdpbiA8PSBlbmQgJiYgdGV4dEVuZCA+PSBlbmQpXG4gICAgICApO1xuICAgIH0pID09PSAtMVxuICApIHtcbiAgICBjdHguZmlsbFRleHQoYCR7bGFiZWx9YCwgdGV4dFN0YXJ0LngsIHRleHRTdGFydC55KTtcbiAgICB0aW1lTWFya2VyUmFuZ2VzLnB1c2goW3RleHRCZWdpbiwgdGV4dEVuZF0pO1xuICB9XG59O1xuXG4vKiogUmVwcmVzZW50cyBhIGhhbGYtb3BlbiBpbnRlcnZhbCBvZiByb3dzLCBlLmcuIFtzdGFydCwgZmluaXNoKS4gKi9cbmludGVyZmFjZSBSb3dSYW5nZSB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGZpbmlzaDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgVGFza0luZGV4VG9Sb3dSZXR1cm4ge1xuICB0YXNrSW5kZXhUb1JvdzogVGFza0luZGV4VG9Sb3c7XG5cbiAgLyoqIE1hcHMgZWFjaCByZXNvdXJjZSB2YWx1ZSBpbmRleCB0byBhIHJhbmdlIG9mIHJvd3MuICovXG4gIHJvd1JhbmdlczogTWFwPG51bWJlciwgUm93UmFuZ2U+IHwgbnVsbDtcblxuICByZXNvdXJjZURlZmluaXRpb246IFJlc291cmNlRGVmaW5pdGlvbiB8IG51bGw7XG59XG5cbmNvbnN0IHRhc2tJbmRleFRvUm93RnJvbUdyb3VwQnkgPSAoXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIHJlc291cmNlRGVmaW5pdGlvbjogUmVzb3VyY2VEZWZpbml0aW9uIHwgdW5kZWZpbmVkLFxuICBjaGFydExpa2U6IENoYXJ0TGlrZSxcbiAgZGlzcGxheU9yZGVyOiBWZXJ0ZXhJbmRpY2VzXG4pOiBSZXN1bHQ8VGFza0luZGV4VG9Sb3dSZXR1cm4+ID0+IHtcbiAgLy8gZGlzcGxheU9yZGVyIG1hcHMgZnJvbSByb3cgdG8gdGFzayBpbmRleCwgdGhpcyB3aWxsIHByb2R1Y2UgdGhlIGludmVyc2UgbWFwcGluZy5cbiAgY29uc3QgdGFza0luZGV4VG9Sb3cgPSBuZXcgTWFwKFxuICAgIC8vIFRoaXMgbG9va3MgYmFja3dhcmRzLCBidXQgaXQgaXNuJ3QuIFJlbWVtYmVyIHRoYXQgdGhlIG1hcCBjYWxsYmFjayB0YWtlc1xuICAgIC8vICh2YWx1ZSwgaW5kZXgpIGFzIGl0cyBhcmd1bWVudHMuXG4gICAgZGlzcGxheU9yZGVyLm1hcCgodGFza0luZGV4OiBudW1iZXIsIHJvdzogbnVtYmVyKSA9PiBbdGFza0luZGV4LCByb3ddKVxuICApO1xuXG4gIGlmIChyZXNvdXJjZURlZmluaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBvayh7XG4gICAgICB0YXNrSW5kZXhUb1JvdzogdGFza0luZGV4VG9Sb3csXG4gICAgICByb3dSYW5nZXM6IG51bGwsXG4gICAgICByZXNvdXJjZURlZmluaXRpb246IG51bGwsXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBzdGFydFRhc2tJbmRleCA9IDA7XG4gIGNvbnN0IGZpbmlzaFRhc2tJbmRleCA9IGNoYXJ0TGlrZS5WZXJ0aWNlcy5sZW5ndGggLSAxO1xuICBjb25zdCBpZ25vcmFibGUgPSBbc3RhcnRUYXNrSW5kZXgsIGZpbmlzaFRhc2tJbmRleF07XG5cbiAgLy8gR3JvdXAgYWxsIHRhc2tzIGJ5IHRoZWlyIHJlc291cmNlIHZhbHVlLCB3aGlsZSBwcmVzZXJ2aW5nIGRpc3BsYXlPcmRlclxuICAvLyBvcmRlciB3aXRoIHRoZSBncm91cHMuXG4gIGNvbnN0IGdyb3VwcyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXJbXT4oKTtcbiAgZGlzcGxheU9yZGVyLmZvckVhY2goKHRhc2tJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgcmVzb3VyY2VWYWx1ZSA9XG4gICAgICBjaGFydExpa2UuVmVydGljZXNbdGFza0luZGV4XS5nZXRSZXNvdXJjZShvcHRzLmdyb3VwQnlSZXNvdXJjZSkgfHwgJyc7XG4gICAgY29uc3QgZ3JvdXBNZW1iZXJzID0gZ3JvdXBzLmdldChyZXNvdXJjZVZhbHVlKSB8fCBbXTtcbiAgICBncm91cE1lbWJlcnMucHVzaCh0YXNrSW5kZXgpO1xuICAgIGdyb3Vwcy5zZXQocmVzb3VyY2VWYWx1ZSwgZ3JvdXBNZW1iZXJzKTtcbiAgfSk7XG5cbiAgY29uc3QgcmV0ID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcj4oKTtcblxuICAvLyBVZ2gsIFN0YXJ0IGFuZCBGaW5pc2ggVGFza3MgbmVlZCB0byBiZSBtYXBwZWQsIGJ1dCBzaG91bGQgbm90IGJlIGRvbmUgdmlhXG4gIC8vIHJlc291cmNlIHZhbHVlLCBzbyBTdGFydCBzaG91bGQgYWx3YXlzIGJlIGZpcnN0LlxuICByZXQuc2V0KDAsIDApO1xuXG4gIC8vIE5vdyBpbmNyZW1lbnQgdXAgdGhlIHJvd3MgYXMgd2UgbW92ZSB0aHJvdWdoIGFsbCB0aGUgZ3JvdXBzLlxuICBsZXQgcm93ID0gMTtcbiAgLy8gQW5kIHRyYWNrIGhvdyBtYW55IHJvd3MgYXJlIGluIGVhY2ggZ3JvdXAuXG4gIGNvbnN0IHJvd1JhbmdlczogTWFwPG51bWJlciwgUm93UmFuZ2U+ID0gbmV3IE1hcCgpO1xuICByZXNvdXJjZURlZmluaXRpb24udmFsdWVzLmZvckVhY2goXG4gICAgKHJlc291cmNlVmFsdWU6IHN0cmluZywgcmVzb3VyY2VJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBzdGFydE9mUm93ID0gcm93O1xuICAgICAgKGdyb3Vwcy5nZXQocmVzb3VyY2VWYWx1ZSkgfHwgW10pLmZvckVhY2goKHRhc2tJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChpZ25vcmFibGUuaW5jbHVkZXModGFza0luZGV4KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXQuc2V0KHRhc2tJbmRleCwgcm93KTtcbiAgICAgICAgcm93Kys7XG4gICAgICB9KTtcbiAgICAgIHJvd1Jhbmdlcy5zZXQocmVzb3VyY2VJbmRleCwgeyBzdGFydDogc3RhcnRPZlJvdywgZmluaXNoOiByb3cgfSk7XG4gICAgfVxuICApO1xuICByZXQuc2V0KGZpbmlzaFRhc2tJbmRleCwgcm93KTtcblxuICByZXR1cm4gb2soe1xuICAgIHRhc2tJbmRleFRvUm93OiByZXQsXG4gICAgcm93UmFuZ2VzOiByb3dSYW5nZXMsXG4gICAgcmVzb3VyY2VEZWZpbml0aW9uOiByZXNvdXJjZURlZmluaXRpb24sXG4gIH0pO1xufTtcblxuY29uc3QgZHJhd1N3aW1MYW5lSGlnaGxpZ2h0cyA9IChcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIHNjYWxlOiBTY2FsZSxcbiAgcm93UmFuZ2VzOiBNYXA8bnVtYmVyLCBSb3dSYW5nZT4sXG4gIHRvdGFsTnVtYmVyT2ZEYXlzOiBudW1iZXIsXG4gIGdyb3VwQ29sb3I6IHN0cmluZ1xuKSA9PiB7XG4gIGN0eC5maWxsU3R5bGUgPSBncm91cENvbG9yO1xuXG4gIGxldCBncm91cCA9IDA7XG4gIHJvd1Jhbmdlcy5mb3JFYWNoKChyb3dSYW5nZTogUm93UmFuZ2UpID0+IHtcbiAgICBjb25zdCB0b3BMZWZ0ID0gc2NhbGUuZmVhdHVyZShcbiAgICAgIHJvd1JhbmdlLnN0YXJ0LFxuICAgICAgMCxcbiAgICAgIEZlYXR1cmUuZ3JvdXBFbnZlbG9wZVN0YXJ0XG4gICAgKTtcbiAgICBjb25zdCBib3R0b21SaWdodCA9IHNjYWxlLmZlYXR1cmUoXG4gICAgICByb3dSYW5nZS5maW5pc2gsXG4gICAgICB0b3RhbE51bWJlck9mRGF5cyArIDEsXG4gICAgICBGZWF0dXJlLnRhc2tFbnZlbG9wZVRvcFxuICAgICk7XG4gICAgZ3JvdXArKztcbiAgICAvLyBPbmx5IGhpZ2hsaWdodCBldmVyeSBvdGhlciBncm91cCBiYWNrZ3JvdWQgd2l0aCB0aGUgZ3JvdXBDb2xvci5cbiAgICBpZiAoZ3JvdXAgJSAyID09IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LmZpbGxSZWN0KFxuICAgICAgdG9wTGVmdC54LFxuICAgICAgdG9wTGVmdC55LFxuICAgICAgYm90dG9tUmlnaHQueCAtIHRvcExlZnQueCxcbiAgICAgIGJvdHRvbVJpZ2h0LnkgLSB0b3BMZWZ0LnlcbiAgICApO1xuICB9KTtcbn07XG5cbmNvbnN0IGRyYXdTd2ltTGFuZUxhYmVscyA9IChcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gIHJlc291cmNlRGVmaW5pdGlvbjogUmVzb3VyY2VEZWZpbml0aW9uLFxuICBzY2FsZTogU2NhbGUsXG4gIHJvd1JhbmdlczogTWFwPG51bWJlciwgUm93UmFuZ2U+XG4pID0+IHtcbiAgaWYgKHJvd1JhbmdlcykgY3R4LmxpbmVXaWR0aCA9IDE7XG4gIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9ycy5nZXQoJ29uLXN1cmZhY2UnKTtcbiAgY29uc3QgZ3JvdXBCeU9yaWdpbiA9IHNjYWxlLmZlYXR1cmUoMCwgMCwgRmVhdHVyZS5ncm91cEJ5T3JpZ2luKTtcblxuICBpZiAob3B0cy5oYXNUaW1lbGluZSkge1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICBjdHguZmlsbFRleHQob3B0cy5ncm91cEJ5UmVzb3VyY2UsIGdyb3VwQnlPcmlnaW4ueCwgZ3JvdXBCeU9yaWdpbi55KTtcbiAgfVxuXG4gIGlmIChvcHRzLmhhc1Rhc2tzKSB7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgIHJvd1Jhbmdlcy5mb3JFYWNoKChyb3dSYW5nZTogUm93UmFuZ2UsIHJlc291cmNlSW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKHJvd1JhbmdlLnN0YXJ0ID09PSByb3dSYW5nZS5maW5pc2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgdGV4dFN0YXJ0ID0gc2NhbGUuZmVhdHVyZShcbiAgICAgICAgcm93UmFuZ2Uuc3RhcnQsXG4gICAgICAgIDAsXG4gICAgICAgIEZlYXR1cmUuZ3JvdXBUZXh0U3RhcnRcbiAgICAgICk7XG4gICAgICBjdHguZmlsbFRleHQoXG4gICAgICAgIHJlc291cmNlRGVmaW5pdGlvbi52YWx1ZXNbcmVzb3VyY2VJbmRleF0sXG4gICAgICAgIHRleHRTdGFydC54LFxuICAgICAgICB0ZXh0U3RhcnQueVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gS2VlcCBwYXR0ZXJucyBhcm91bmQgZm9yIGJvdGggbGlnaHQgbW9kZSBhbmQgZGFyayBtb2RlLlxuY29uc3QgcGF0dGVybnM6IE1hcDxzdHJpbmcsIENhbnZhc1BhdHRlcm4+ID0gbmV3IE1hcCgpO1xuXG5jb25zdCBnZXRQYXR0ZXJuID0gKFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgY29sb3I6IHN0cmluZyxcbiAgYmFja2dyb3VuZDogc3RyaW5nXG4pOiBDYW52YXNQYXR0ZXJuIHwgbnVsbCA9PiB7XG4gIGNvbnN0IGtleSA9IGAke2NvbG9yfToke2JhY2tncm91bmR9YDtcbiAgbGV0IHJldCA9IHBhdHRlcm5zLmdldChrZXkpO1xuICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IDQ7XG4gIGNhbnZhcy5oZWlnaHQgPSA0O1xuXG4gIGNvbnN0IHBDdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSE7XG5cbiAgcEN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kO1xuICBwQ3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIHBDdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgcEN0eC5saW5lV2lkdGggPSAxO1xuICBwQ3R4Lm1vdmVUbygwLCA0KTtcbiAgcEN0eC5saW5lVG8oNCwgMCk7XG4gIHBDdHguc3Ryb2tlKCk7XG5cbiAgcmV0ID0gY3R4LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCAncmVwZWF0JykhO1xuICBwYXR0ZXJucy5zZXQoa2V5LCByZXQpO1xuICByZXR1cm4gcmV0O1xufTtcbiIsICIvLyBXaGVuIGFkZGluZyBwcm9wZXJ0aWVzIHRvIENvbG9yVGhlbWUgYWxzbyBtYWtlIHN1cmUgdG8gYWRkIGEgY29ycmVzcG9uZGluZ1xuLy8gQ1NTIEBwcm9wZXJ0eSBkZWNsYXJhdGlvbi5cbi8vXG4vLyBOb3RlIHRoYXQgZWFjaCBwcm9wZXJ0eSBhc3N1bWVzIHRoZSBwcmVzZW5jZSBvZiBhIENTUyB2YXJpYWJsZSBvZiB0aGUgc2FtZSBuYW1lXG4vLyB3aXRoIGEgcHJlY2VlZGluZyBgLS1gLlxuXG5jb25zdCBjc3NWYXJpYWJsZU5hbWVzID0gW1xuICAncHJpbWFyeScsXG4gICdvbi1wcmltYXJ5JyxcbiAgJ3ByaW1hcnktdmFyaWFudCcsXG4gICdvbi1wcmltYXJ5LXZhcmlhbnQnLFxuICAnc2Vjb25kYXJ5JyxcbiAgJ29uLXNlY29uZGFyeScsXG4gICdiYWNrZ3JvdW5kJyxcbiAgJ29uLWJhY2tncm91bmQnLFxuICAnc3VyZmFjZScsXG4gICdvbi1zdXJmYWNlJyxcbiAgJ29uLXN1cmZhY2UtbXV0ZWQnLFxuICAnc3VyZmFjZS0xZHAnLFxuICAnc3VyZmFjZS0yZHAnLFxuICAnZGlzYWJsZWQnLFxuICAnb24tZGlzYWJsZWQnLFxuICAnZXJyb3InLFxuICAnb24tZXJyb3InLFxuICAndHJhbnNwYXJlbnQtb3ZlcmxheScsXG4gICdncm91cC1jb2xvcicsXG5dIGFzIGNvbnN0O1xuXG50eXBlIGNzc1ZhcmlhYmxlS2V5cyA9ICh0eXBlb2YgY3NzVmFyaWFibGVOYW1lcylbbnVtYmVyXTtcblxuZXhwb3J0IGNsYXNzIFRoZW1lMiB7XG4gIHZhbHVlczogTWFwPGNzc1ZhcmlhYmxlS2V5cywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcbiAgX2ZvbnRTaXplOiBudW1iZXIgPSAxNDtcblxuICBsb2FkRnJvbUVsZW1lbnQoZWxlOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGUpO1xuICAgIGNzc1ZhcmlhYmxlTmFtZXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICB0aGlzLnZhbHVlcy5zZXQoa2V5LCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGAtLSR7a2V5fWApKTtcbiAgICB9KTtcbiAgICB0aGlzLl9mb250U2l6ZSA9XG4gICAgICArc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1zaXplJykuc3BsaXQoJ3B4JylbMF0gKlxuICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW8gKlxuICAgICAgMS44O1xuICAgIGlmICh0aGlzLl9mb250U2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5fZm9udFNpemUgPSAyNDtcbiAgICB9XG4gIH1cblxuICBmb250U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mb250U2l6ZTtcbiAgfVxuXG4gIGdldChrZXk6IGNzc1ZhcmlhYmxlS2V5cyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzLmdldChrZXkpIHx8ICcnO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgTWV0cmljRGVmaW5pdGlvbiB9IGZyb20gJy4uL21ldHJpY3MvbWV0cmljcyc7XG5pbXBvcnQgeyBNZXRyaWNSYW5nZSB9IGZyb20gJy4uL21ldHJpY3MvcmFuZ2UnO1xuaW1wb3J0IHtcbiAgRHVwVGFza09wLFxuICBJbnNlcnROZXdFbXB0eU1pbGVzdG9uZUFmdGVyT3AsXG4gIFNldFRhc2tOYW1lT3AsXG4gIFNwbGl0VGFza09wLFxufSBmcm9tICcuLi9vcHMvY2hhcnQnO1xuaW1wb3J0IHsgQWRkTWV0cmljT3AsIFNldE1ldHJpY1ZhbHVlT3AgfSBmcm9tICcuLi9vcHMvbWV0cmljcyc7XG5pbXBvcnQgeyBPcCwgYXBwbHlBbGxPcHNUb1BsYW4gfSBmcm9tICcuLi9vcHMvb3BzJztcbmltcG9ydCB7XG4gIEFkZFJlc291cmNlT3AsXG4gIEFkZFJlc291cmNlT3B0aW9uT3AsXG4gIERlbGV0ZVJlc291cmNlT3B0aW9uT3AsXG4gIFNldFJlc291cmNlVmFsdWVPcCxcbn0gZnJvbSAnLi4vb3BzL3Jlc291cmNlcyc7XG5pbXBvcnQgeyBQbGFuIH0gZnJvbSAnLi4vcGxhbi9wbGFuJztcbmltcG9ydCB7IHJlcG9ydElmRXJyb3IgfSBmcm9tICcuLi9yZXBvcnQtZXJyb3IvcmVwb3J0LWVycm9yJztcbmltcG9ydCB7IFVuY2VydGFpbnR5IH0gZnJvbSAnLi4vc3RhdHMvY2RmL3RyaWFuZ3VsYXIvamFjb2JpYW4nO1xuXG5jb25zdCBwZW9wbGU6IHN0cmluZ1tdID0gWydGcmVkJywgJ0Jhcm5leScsICdXaWxtYScsICdCZXR0eSddO1xuY29uc3QgdW5jZXJ0YWludGllczogVW5jZXJ0YWludHlbXSA9IFsnbG93JywgJ21vZGVyYXRlJywgJ2hpZ2gnXTtcblxuY29uc3QgRFVSQVRJT04gPSAxMDtcblxuY29uc3Qgcm5kSW50ID0gKG46IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuKTtcbn07XG5cbmNvbnN0IHJuZER1cmF0aW9uID0gKCk6IG51bWJlciA9PiB7XG4gIHJldHVybiBybmRJbnQoRFVSQVRJT04pO1xufTtcblxuY29uc3Qgcm5kVW5jZXJ0YWludHkgPSAoKTogVW5jZXJ0YWludHkgPT5cbiAgdW5jZXJ0YWludGllc1tybmRJbnQodW5jZXJ0YWludGllcy5sZW5ndGgpXTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlU3RhcnRlclBsYW4gPSAoKTogUGxhbiA9PiB7XG4gIGNvbnN0IHBsYW4gPSBuZXcgUGxhbigpO1xuICBjb25zdCByZXMgPSBhcHBseUFsbE9wc1RvUGxhbihcbiAgICBbXG4gICAgICBJbnNlcnROZXdFbXB0eU1pbGVzdG9uZUFmdGVyT3AoMCksXG4gICAgICBTZXRNZXRyaWNWYWx1ZU9wKCdEdXJhdGlvbicsIDEwLCAxKSxcbiAgICAgIFNldFJlc291cmNlVmFsdWVPcCgnVW5jZXJ0YWludHknLCAnbG93JywgMSksXG4gICAgXSxcbiAgICBwbGFuXG4gICk7XG5cbiAgcmVwb3J0SWZFcnJvcihyZXMpO1xuICByZXR1cm4gcGxhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVJhbmRvbVBsYW4gPSAoKTogUGxhbiA9PiB7XG4gIGNvbnN0IHBsYW4gPSBuZXcgUGxhbigpO1xuXG4gIGNvbnN0IG9wczogT3BbXSA9IFtBZGRSZXNvdXJjZU9wKCdQZXJzb24nKV07XG5cbiAgcGVvcGxlLmZvckVhY2goKHBlcnNvbjogc3RyaW5nKSA9PiB7XG4gICAgb3BzLnB1c2goQWRkUmVzb3VyY2VPcHRpb25PcCgnUGVyc29uJywgcGVyc29uKSk7XG4gIH0pO1xuICBvcHMucHVzaChEZWxldGVSZXNvdXJjZU9wdGlvbk9wKCdQZXJzb24nLCAnJykpO1xuXG4gIG9wcy5wdXNoKFxuICAgIEFkZE1ldHJpY09wKCdDb3N0ICgkL2hyKScsIG5ldyBNZXRyaWNEZWZpbml0aW9uKDE1LCBuZXcgTWV0cmljUmFuZ2UoMCkpKSxcbiAgICBJbnNlcnROZXdFbXB0eU1pbGVzdG9uZUFmdGVyT3AoMCksXG4gICAgU2V0TWV0cmljVmFsdWVPcCgnRHVyYXRpb24nLCBybmREdXJhdGlvbigpLCAxKSxcbiAgICBTZXRUYXNrTmFtZU9wKDEsIHJhbmRvbVRhc2tOYW1lKCkpLFxuICAgIFNldFJlc291cmNlVmFsdWVPcCgnUGVyc29uJywgcGVvcGxlW3JuZEludChwZW9wbGUubGVuZ3RoKV0sIDEpLFxuICAgIFNldFJlc291cmNlVmFsdWVPcCgnVW5jZXJ0YWludHknLCBybmRVbmNlcnRhaW50eSgpLCAxKVxuICApO1xuXG4gIGxldCBudW1UYXNrcyA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7IGkrKykge1xuICAgIGxldCBpbmRleCA9IHJuZEludChudW1UYXNrcykgKyAxO1xuICAgIG9wcy5wdXNoKFxuICAgICAgU3BsaXRUYXNrT3AoaW5kZXgpLFxuICAgICAgU2V0TWV0cmljVmFsdWVPcCgnRHVyYXRpb24nLCBybmREdXJhdGlvbigpLCBpbmRleCArIDEpLFxuICAgICAgU2V0VGFza05hbWVPcChpbmRleCArIDEsIHJhbmRvbVRhc2tOYW1lKCkpLFxuICAgICAgU2V0UmVzb3VyY2VWYWx1ZU9wKCdQZXJzb24nLCBwZW9wbGVbcm5kSW50KHBlb3BsZS5sZW5ndGgpXSwgaW5kZXggKyAxKSxcbiAgICAgIFNldFJlc291cmNlVmFsdWVPcCgnVW5jZXJ0YWludHknLCBybmRVbmNlcnRhaW50eSgpLCBpbmRleCArIDEpXG4gICAgKTtcbiAgICBudW1UYXNrcysrO1xuICAgIGluZGV4ID0gcm5kSW50KG51bVRhc2tzKSArIDE7XG4gICAgb3BzLnB1c2goXG4gICAgICBEdXBUYXNrT3AoaW5kZXgpLFxuICAgICAgU2V0TWV0cmljVmFsdWVPcCgnRHVyYXRpb24nLCBybmREdXJhdGlvbigpLCBpbmRleCArIDEpLFxuICAgICAgU2V0VGFza05hbWVPcChpbmRleCArIDEsIHJhbmRvbVRhc2tOYW1lKCkpLFxuICAgICAgU2V0UmVzb3VyY2VWYWx1ZU9wKCdQZXJzb24nLCBwZW9wbGVbcm5kSW50KHBlb3BsZS5sZW5ndGgpXSwgaW5kZXggKyAxKSxcbiAgICAgIFNldFJlc291cmNlVmFsdWVPcCgnVW5jZXJ0YWludHknLCBybmRVbmNlcnRhaW50eSgpLCBpbmRleCArIDEpXG4gICAgKTtcbiAgICBudW1UYXNrcysrO1xuICB9XG5cbiAgY29uc3QgcmVzID0gYXBwbHlBbGxPcHNUb1BsYW4ob3BzLCBwbGFuKTtcblxuICByZXBvcnRJZkVycm9yKHJlcyk7XG4gIHJldHVybiBwbGFuO1xufTtcblxuY29uc3QgcGFydHMgPSBbXG4gICdsb3JlbScsXG4gICdpcHN1bScsXG4gICdkb2xvcicsXG4gICdzaXQnLFxuICAnYW1ldCcsXG4gICdjb25zZWN0ZXR1cicsXG4gICdhZGlwaXNjaW5nJyxcbiAgJ2VsaXQnLFxuICAnc2VkJyxcbiAgJ2RvJyxcbiAgJ2VpdXNtb2QnLFxuICAndGVtcG9yJyxcbiAgJ2luY2lkaWR1bnQnLFxuICAndXQnLFxuICAnbGFib3JlJyxcbiAgJ2V0JyxcbiAgJ2RvbG9yZScsXG4gICdtYWduYScsXG4gICdhbGlxdWEnLFxuICAndXQnLFxuICAnZW5pbScsXG4gICdhZCcsXG4gICdtaW5pbScsXG4gICd2ZW5pYW0nLFxuICAncXVpcycsXG4gICdub3N0cnVkJyxcbiAgJ2V4ZXJjaXRhdGlvbicsXG4gICd1bGxhbWNvJyxcbiAgJ2xhYm9yaXMnLFxuICAnbmlzaScsXG4gICd1dCcsXG4gICdhbGlxdWlwJyxcbiAgJ2V4JyxcbiAgJ2VhJyxcbiAgJ2NvbW1vZG8nLFxuICAnY29uc2VxdWF0JyxcbiAgJ2V1aXMnLFxuICAnYXV0ZScsXG4gICdpcnVyZScsXG4gICdkb2xvcicsXG4gICdpbicsXG4gICdyZXByZWhlbmRlcml0JyxcbiAgJ2luJyxcbiAgJ3ZvbHVwdGF0ZScsXG4gICd2ZWxpdCcsXG4gICdlc3NlJyxcbiAgJ2NpbGx1bScsXG4gICdkb2xvcmUnLFxuICAnZXUnLFxuICAnZnVnaWF0JyxcbiAgJ251bGxhJyxcbiAgJ3BhcmlhdHVyJyxcbiAgJ2V4Y2VwdGV1cicsXG4gICdzaW50JyxcbiAgJ29jY2FlY2F0JyxcbiAgJ2N1cGlkYXRhdCcsXG4gICdub24nLFxuICAncHJvaWRlbnQnLFxuICAnc3VudCcsXG4gICdpbicsXG4gICdjdWxwYScsXG4gICdxdWknLFxuICAnb2ZmaWNpYScsXG4gICdkZXNlcnVudCcsXG4gICdtb2xsaXQnLFxuICAnYW5pbScsXG4gICdpZCcsXG4gICdlc3QnLFxuICAnbGFib3J1bScsXG5dO1xuXG5jb25zdCBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcblxuY29uc3QgcmFuZG9tVGFza05hbWUgPSAoKTogc3RyaW5nID0+XG4gIGAke3BhcnRzW3JuZEludChwYXJ0c0xlbmd0aCldfSAke3BhcnRzW3JuZEludChwYXJ0c0xlbmd0aCldfWA7XG4iLCAiZXhwb3J0IGNvbnN0IFBOR19TSUcgPSBuZXcgVWludDhBcnJheShbXG4gIDB4ODksIDB4NTAsIDB4NGUsIDB4NDcsIDB4MGQsIDB4MGEsIDB4MWEsIDB4MGEsXG5dKTtcblxuZXhwb3J0IGludGVyZmFjZSBDaHVuayB7XG4gIHNpemU6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xuICBkYXRhOiBVaW50OEFycmF5O1xuICBjcmM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFBuZ01ldGFkYXRhIHtcbiAgcHJpdmF0ZSBzdGF0aWMgdGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgcHJpdmF0ZSBzdGF0aWMgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcblxuICBzdGF0aWMgaXNQTkcoZGF0YTogVWludDhBcnJheSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IG5ldyBVaW50OEFycmF5KGRhdGEuc2xpY2UoMCwgOCkpO1xuICAgIGlmIChzaWduYXR1cmUuYnl0ZUxlbmd0aCA8IDgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHNpZ25hdHVyZS5ldmVyeSgoYnl0ZSwgaW5kZXgpID0+IGJ5dGUgPT09IFBOR19TSUdbaW5kZXhdKTtcbiAgfVxuXG4gIHN0YXRpYyBzcGxpdENodW5rcyhkYXRhOiBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXkpOiBDaHVua1tdIHtcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGRhdGEgOiBkYXRhLmJ1ZmZlcik7XG4gICAgbGV0IG9mZnNldCA9IFBOR19TSUcubGVuZ3RoO1xuICAgIGNvbnN0IGNodW5rczogQ2h1bmtbXSA9IFtdO1xuXG4gICAgd2hpbGUgKG9mZnNldCA8IHZpZXcuYnl0ZUxlbmd0aCkge1xuICAgICAgaWYgKG9mZnNldCArIDggPiB2aWV3LmJ5dGVMZW5ndGgpIGJyZWFrO1xuXG4gICAgICBjb25zdCBzaXplID0gdmlldy5nZXRVaW50MzIob2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSA0O1xuXG4gICAgICBjb25zdCB0eXBlID0gUG5nTWV0YWRhdGEudGV4dERlY29kZXIuZGVjb2RlKFxuICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgNCkpXG4gICAgICApO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG5cbiAgICAgIGlmIChvZmZzZXQgKyBzaXplICsgNCA+IHZpZXcuYnl0ZUxlbmd0aCkgYnJlYWs7XG5cbiAgICAgIGNvbnN0IGNodW5rRGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzaXplKSk7XG4gICAgICBvZmZzZXQgKz0gc2l6ZTtcblxuICAgICAgY29uc3QgY3JjID0gdmlldy5nZXRVaW50MzIob2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSA0O1xuXG4gICAgICBjaHVua3MucHVzaCh7IHNpemUsIHR5cGUsIGRhdGE6IGNodW5rRGF0YSwgY3JjIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaHVua3M7XG4gIH1cblxuICBzdGF0aWMgam9pbkNodW5rcyhjaHVua3M6IENodW5rW10pOiBBcnJheUJ1ZmZlciB7XG4gICAgY29uc3QgdG90YWxTaXplID1cbiAgICAgIFBOR19TSUcubGVuZ3RoICsgY2h1bmtzLnJlZHVjZSgoc3VtLCBjaHVuaykgPT4gc3VtICsgMTIgKyBjaHVuay5zaXplLCAwKTtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIodG90YWxTaXplKTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgY29uc3QgdWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG5cbiAgICB1aW50OEFycmF5LnNldChQTkdfU0lHLCAwKTtcbiAgICBsZXQgb2Zmc2V0ID0gUE5HX1NJRy5sZW5ndGg7XG5cbiAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgICAgdmlldy5zZXRVaW50MzIob2Zmc2V0LCBjaHVuay5zaXplKTtcbiAgICAgIG9mZnNldCArPSA0O1xuXG4gICAgICB1aW50OEFycmF5LnNldChQbmdNZXRhZGF0YS50ZXh0RW5jb2Rlci5lbmNvZGUoY2h1bmsudHlwZSksIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgdWludDhBcnJheS5zZXQoY2h1bmsuZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBjaHVuay5zaXplO1xuXG4gICAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQsIGNodW5rLmNyYyk7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUNodW5rKHR5cGU6IHN0cmluZywgZGF0YTogVWludDhBcnJheSk6IENodW5rIHtcbiAgICBjb25zdCB0eXBlQXJyYXkgPSBQbmdNZXRhZGF0YS50ZXh0RW5jb2Rlci5lbmNvZGUodHlwZSk7XG4gICAgY29uc3QgY3JjID0gUG5nTWV0YWRhdGEuY3JjMzIobmV3IFVpbnQ4QXJyYXkoWy4uLnR5cGVBcnJheSwgLi4uZGF0YV0pKTtcbiAgICByZXR1cm4geyBzaXplOiBkYXRhLmxlbmd0aCwgdHlwZSwgZGF0YSwgY3JjIH07XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmMzMihkYXRhOiBVaW50OEFycmF5KTogbnVtYmVyIHtcbiAgICBsZXQgY3JjID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjcmMgPSAoY3JjID4+PiA4KSBeIFBuZ01ldGFkYXRhLmNyY1RhYmxlWyhjcmMgXiBkYXRhW2ldISkgJiAweGZmXSE7XG4gICAgfVxuICAgIHJldHVybiAoY3JjIF4gLTEpID4+PiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY3JjVGFibGU6IG51bWJlcltdID0gKCgpID0+IHtcbiAgICBjb25zdCB0YWJsZTogbnVtYmVyW10gPSBuZXcgQXJyYXkoMjU2KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICBsZXQgYyA9IGk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgICBjID0gYyAmIDEgPyAweGVkYjg4MzIwIF4gKGMgPj4+IDEpIDogYyA+Pj4gMTtcbiAgICAgIH1cbiAgICAgIHRhYmxlW2ldID0gYztcbiAgICB9XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9KSgpO1xufVxuIiwgImltcG9ydCB7IGVycm9yLCBvaywgUmVzdWx0IH0gZnJvbSAnLi4vcmVzdWx0JztcbmltcG9ydCB7IENodW5rLCBQbmdNZXRhZGF0YSB9IGZyb20gJy4uL3ZlbmRvci9wbmctbWV0YWRhdGEvc3JjL3BuZy1tZXRhZGF0YSc7XG5cbi8vIFRoZSB2YWx1ZSBiZWxvdyBpcyB0aGUgVGV4dEVuY29kZXIgZW5jb2Rpbmcgb2Zcbi8vIFwiYXBwbGljYXRpb24vdm5kLmV4cGxhbi5vcmcranNvblwiIHBsdXMgYSBudWxsLiBUaGUgbnVsbCBpcyBiZWNhdXNlIFBORyB0RVh0XG4vLyBjaHVuayB2YWx1ZXMgYXJlIHByZS1wZW5kZWQgd2l0aCBhIG51bGwgdGVybWluYXRlZCBzdHJpbmcgd2hpY2ggaXMgdGhlXG4vLyBrZXl3b3JkLCB3aGljaCBpcyB1c2VkIHRvIGRpZmZlcmVudGlhdGUgdEVYdCBjaHVua3MuXG5jb25zdCBleHBsYW5KU09OS2V5d29yZEFuZE51bGxUZXJtaW5hdG9yID0gW1xuICA5NywgMTEyLCAxMTIsIDEwOCwgMTA1LCA5OSwgOTcsIDExNiwgMTA1LCAxMTEsIDExMCwgNDcsIDExOCwgMTEwLCAxMDAsIDQ2LFxuICAxMDEsIDEyMCwgMTEyLCAxMDgsIDk3LCAxMTAsIDQ2LCAxMTEsIDExNCwgMTAzLCA0MywgMTA2LCAxMTUsIDExMSwgMTEwLCAwLFxuXTtcblxuZXhwb3J0IGNvbnN0IGFkZEV4cGxhbkpTT05DaHVua1RvUE5HID0gYXN5bmMgKFxuICBqc29uOiBzdHJpbmcsXG4gIGJsb2I6IEJsb2Jcbik6IFByb21pc2U8QmxvYj4gPT4ge1xuICBjb25zdCBiaW4gPSBuZXcgVWludDhBcnJheShhd2FpdCBibG9iLmFycmF5QnVmZmVyKCkpO1xuICBjb25zdCBjaHVua3MgPSBQbmdNZXRhZGF0YS5zcGxpdENodW5rcyhiaW4pO1xuXG4gIGNvbnN0IGNvbnRlbnRFbmNvZGVkID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cjJiNjQoanNvbikpO1xuXG4gIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShcbiAgICBuZXcgQXJyYXlCdWZmZXIoXG4gICAgICBleHBsYW5KU09OS2V5d29yZEFuZE51bGxUZXJtaW5hdG9yLmxlbmd0aCArIGNvbnRlbnRFbmNvZGVkLmxlbmd0aFxuICAgIClcbiAgKTtcbiAgZGF0YS5zZXQoZXhwbGFuSlNPTktleXdvcmRBbmROdWxsVGVybWluYXRvciwgMCk7XG4gIGRhdGEuc2V0KGNvbnRlbnRFbmNvZGVkLCBleHBsYW5KU09OS2V5d29yZEFuZE51bGxUZXJtaW5hdG9yLmxlbmd0aCk7XG5cbiAgY29uc3QgdGV4dENodW5rID0gUG5nTWV0YWRhdGEuY3JlYXRlQ2h1bmsoJ3RFWHQnLCBkYXRhKTtcbiAgY2h1bmtzLnNwbGljZSgtMSwgMCwgdGV4dENodW5rKTtcbiAgcmV0dXJuIG5ldyBCbG9iKFtQbmdNZXRhZGF0YS5qb2luQ2h1bmtzKGNodW5rcyldKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFeHBsYW5KU09OQ2h1bmtGcm9tUE5HID0gYXN5bmMgKFxuICBieXRlczogVWludDhBcnJheVxuKTogUHJvbWlzZTxSZXN1bHQ8c3RyaW5nPj4gPT4ge1xuICBjb25zdCBjaHVua3MgPSBQbmdNZXRhZGF0YS5zcGxpdENodW5rcyhieXRlcyk7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IGNodW5rc1xuICAgIC5maWx0ZXIoKGNodW5rOiBDaHVuaykgPT4gY2h1bmsudHlwZSA9PT0gJ3RFWHQnKVxuICAgIC5maWx0ZXIoKGNodW5rOiBDaHVuaykgPT5cbiAgICAgIGNodW5rLmRhdGFcbiAgICAgICAgLnNsaWNlKDAsIGV4cGxhbkpTT05LZXl3b3JkQW5kTnVsbFRlcm1pbmF0b3IubGVuZ3RoKVxuICAgICAgICAuZXZlcnkoKHg6IG51bWJlciwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIHJldHVybiB4ID09PSBleHBsYW5KU09OS2V5d29yZEFuZE51bGxUZXJtaW5hdG9yW2luZGV4XTtcbiAgICAgICAgfSlcbiAgICApO1xuXG4gIGlmIChtYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlcnJvcihuZXcgRXJyb3IoJ05vIHRFWHQgY2h1bmtzIGZvdW5kLicpKTtcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRFbmNvZGVkID0gbWF0Y2hlc1swXS5kYXRhLnNsaWNlKFxuICAgIGV4cGxhbkpTT05LZXl3b3JkQW5kTnVsbFRlcm1pbmF0b3IubGVuZ3RoXG4gICk7XG4gIHJldHVybiBvayhiNjQyc3RyKG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjb250ZW50RW5jb2RlZCkpKTtcbn07XG5cbi8vIFN0YXJ0aW5nIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzAxMDY0NzYvdXNpbmctamF2YXNjcmlwdHMtYXRvYi10by1kZWNvZGUtYmFzZTY0LWRvZXNudC1wcm9wZXJseS1kZWNvZGUtdXRmLTgtc3RyaW5nc1xuZXhwb3J0IGNvbnN0IHN0cjJiNjQgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgYnRvYShcbiAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC8lKFswLTlBLUZdezJ9KS9nLCAoX21hdGNoLCBwMSkgPT5cbiAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQocDEsIDE2KSlcbiAgICApXG4gICk7XG5cbmV4cG9ydCBjb25zdCBiNjQyc3RyID0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+XG4gIGRlY29kZVVSSUNvbXBvbmVudChcbiAgICBBcnJheS5wcm90b3R5cGUubWFwXG4gICAgICAuY2FsbChhdG9iKHN0ciksIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiAnJScgKyAoJzAwJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgIH0pXG4gICAgICAuam9pbignJylcbiAgKTtcbiIsICJpbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi4vY2hhcnQvY2hhcnQudHMnO1xuaW1wb3J0IHsgRmlsdGVyRnVuYyB9IGZyb20gJy4uL2NoYXJ0L2ZpbHRlci9maWx0ZXIudHMnO1xuaW1wb3J0IHsgRGlyZWN0ZWRFZGdlLCBlZGdlc0J5U3JjQW5kRHN0VG9NYXAgfSBmcm9tICcuLi9kYWcvZGFnLnRzJztcbmltcG9ydCB7IFNldE1ldHJpY1ZhbHVlT3AgfSBmcm9tICcuLi9vcHMvbWV0cmljcy50cyc7XG5pbXBvcnQgeyBTZXRSZXNvdXJjZVZhbHVlT3AgfSBmcm9tICcuLi9vcHMvcmVzb3VyY2VzLnRzJztcbmltcG9ydCB7IFBsYW4gfSBmcm9tICcuLi9wbGFuL3BsYW4udHMnO1xuaW1wb3J0IHtcbiAgRElWSURFUl9NT1ZFX0VWRU5ULFxuICBEaXZpZGVyTW92ZSxcbiAgRGl2aWRlck1vdmVSZXN1bHQsXG59IGZyb20gJy4uL3JlbmRlcmVyL2RpdmlkZXJtb3ZlL2RpdmlkZXJtb3ZlLnRzJztcbmltcG9ydCB7XG4gIERSQUdfUkFOR0VfRVZFTlQsXG4gIERyYWdSYW5nZSxcbiAgTW91c2VEcmFnLFxufSBmcm9tICcuLi9yZW5kZXJlci9tb3VzZWRyYWcvbW91c2VkcmFnLnRzJztcbmltcG9ydCB7IE1vdXNlTW92ZSB9IGZyb20gJy4uL3JlbmRlcmVyL21vdXNlbW92ZS9tb3VzZW1vdmUudHMnO1xuaW1wb3J0IHsgRGlzcGxheVJhbmdlIH0gZnJvbSAnLi4vcmVuZGVyZXIvcmFuZ2UvcmFuZ2UudHMnO1xuaW1wb3J0IHtcbiAgUmVuZGVyT3B0aW9ucyxcbiAgUmVuZGVyUmVzdWx0LFxuICBUYXNrTGFiZWwsXG4gIFVwZGF0ZUhpZ2hsaWdodEZyb21Nb3VzZVBvcyxcbiAgcmVuZGVyVGFza3NUb0NhbnZhcyxcbiAgc3VnZ2VzdGVkQ2FudmFzSGVpZ2h0LFxufSBmcm9tICcuLi9yZW5kZXJlci9yZW5kZXJlci50cyc7XG5pbXBvcnQgeyBwdCB9IGZyb20gJy4uL3BvaW50L3BvaW50LnRzJztcbmltcG9ydCB7IFNjYWxlIH0gZnJvbSAnLi4vcmVuZGVyZXIvc2NhbGUvc2NhbGUudHMnO1xuaW1wb3J0IHsgZXJyb3IsIG9rLCBSZXN1bHQgfSBmcm9tICcuLi9yZXN1bHQudHMnO1xuaW1wb3J0IHsgQ29tcHV0ZVNsYWNrLCBDcml0aWNhbFBhdGgsIFNsYWNrLCBTcGFuIH0gZnJvbSAnLi4vc2xhY2svc2xhY2sudHMnO1xuaW1wb3J0IHsgVGhlbWUyIH0gZnJvbSAnLi4vc3R5bGUvdGhlbWUvdGhlbWUudHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVTdGFydGVyUGxhbiB9IGZyb20gJy4uL2dlbmVyYXRlL2dlbmVyYXRlLnRzJztcbmltcG9ydCB7IGV4ZWN1dGVCeU5hbWUsIGV4ZWN1dGVPcCB9IGZyb20gJy4uL2FjdGlvbi9leGVjdXRlLnRzJztcbmltcG9ydCB7IHVubWFwVW5kb0FuZFJlZG8sIFN0YXJ0S2V5Ym9hcmRIYW5kbGluZyB9IGZyb20gJy4uL2tleW1hcC9rZXltYXAudHMnO1xuaW1wb3J0IHsgUmVtb3ZlRWRnZU9wLCBTZXRUYXNrTmFtZU9wIH0gZnJvbSAnLi4vb3BzL2NoYXJ0LnRzJztcbmltcG9ydCB7IERlcGVuZGVuY2llc1BhbmVsIH0gZnJvbSAnLi4vZGVwZW5kZW5jaWVzL2RlcGVuZGVuY2llcy1wYW5lbC50cyc7XG5pbXBvcnQgeyBBY3Rpb25OYW1lcyB9IGZyb20gJy4uL2FjdGlvbi9yZWdpc3RyeS50cyc7XG5pbXBvcnQge1xuICBTZWxlY3RlZFRhc2tQYW5lbCxcbiAgVGFza01ldHJpY1ZhbHVlQ2hhbmdlRGV0YWlscyxcbiAgVGFza05hbWVDaGFuZ2VEZXRhaWxzLFxuICBUYXNrUmVzb3VyY2VWYWx1ZUNoYW5nZURldGFpbHMsXG59IGZyb20gJy4uL3NlbGVjdGVkLXRhc2stcGFuZWwvc2VsZWN0ZWQtdGFzay1wYW5lbC50cyc7XG5pbXBvcnQge1xuICByZXBvcnRJZkVycm9yLFxuICBzZXRFcnJvck1lc3NhZ2VSZXBvcnRpbmcsXG59IGZyb20gJy4uL3JlcG9ydC1lcnJvci9yZXBvcnQtZXJyb3IudHMnO1xuaW1wb3J0IHsgVGFza0R1cmF0aW9uIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMudHMnO1xuaW1wb3J0IHsgU2ltdWxhdGlvblBhbmVsIH0gZnJvbSAnLi4vc2ltdWxhdGlvbi1wYW5lbC9zaW11bGF0aW9uLXBhbmVsLnRzJztcbmltcG9ydCB7IGFwcGx5U3RvcmVkVGhlbWUgfSBmcm9tICcuLi9zdHlsZS90b2dnbGVyL3RvZ2dsZXIudHMnO1xuaW1wb3J0IHsgRWRpdFJlc291cmNlc1BhbmVsIH0gZnJvbSAnLi4vZWRpdC1yZXNvdXJjZXMtcGFuZWwvZWRpdC1yZXNvdXJjZXMtcGFuZWwudHMnO1xuaW1wb3J0IHsgRWRpdE1ldHJpY3NQYW5lbCB9IGZyb20gJy4uL2VkaXQtbWV0cmljcy1wYW5lbC9lZGl0LW1ldHJpY3MtcGFuZWwudHMnO1xuaW1wb3J0IHsgVGFza0NvbXBsZXRpb25QYW5lbCB9IGZyb20gJy4uL3Rhc2stY29tcGxldGlvbi1wYW5lbC90YXNrLWNvbXBsZXRpb24tcGFuZWwudHMnO1xuaW1wb3J0IHsgUGxhbkNvbmZpZ1BhbmVsIH0gZnJvbSAnLi4vcGxhbi1jb25maWctcGFuZWwvcGxhbi1jb25maWctcGFuZWwudHMnO1xuaW1wb3J0IHsgR3JvdXBCeUNvbnRyb2wgfSBmcm9tICcuLi9ncm91cGJ5LWNvbnRyb2wvZ3JvdXBieS1jb250cm9sLnRzJztcbmltcG9ydCB7XG4gIGFkZEV4cGxhbkpTT05DaHVua1RvUE5HLFxuICBnZXRFeHBsYW5KU09OQ2h1bmtGcm9tUE5HLFxufSBmcm9tICcuLi9pbWFnZS9pbWFnZS50cyc7XG5pbXBvcnQgeyBQbmdNZXRhZGF0YSB9IGZyb20gJy4uL3ZlbmRvci9wbmctbWV0YWRhdGEvc3JjL3BuZy1tZXRhZGF0YS50cyc7XG5pbXBvcnQgeyBJbWFnZUV4cG9ydFBhbmVsIH0gZnJvbSAnLi4vaW1hZ2UtZXhwb3J0LXBhbmVsL2ltYWdlLWV4cG9ydC1wYW5lbC50cyc7XG5cbmNvbnN0IEZPTlRfU0laRV9QWCA9IDMyO1xuXG5jb25zdCBOVU1fU0lNVUxBVElPTl9MT09QUyA9IDEwMDtcblxuY29uc3QgRVhQT1JUX0lNQUdFX0RFRkFVTFRfUFggPSAxMDAwO1xuXG5leHBvcnQgY2xhc3MgRXhwbGFuTWFpbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgLyoqIFRoZSBQbGFuIGJlaW5nIGVkaXRlZC4gKi9cbiAgcGxhbjogUGxhbiA9IG5ldyBQbGFuKCk7XG5cbiAgLyoqIFRoZSBzdGFydCBhbmQgZmluaXNoIHRpbWUgZm9yIGVhY2ggVGFzayBpbiB0aGUgUGxhbi4gKi9cbiAgc3BhbnM6IFNwYW5bXSA9IFtdO1xuXG4gIC8qKiBUaGUgdGFzayBpbmRpY2VzIG9mIHRhc2tzIG9uIHRoZSBjcml0aWNhbCBwYXRoLiAqL1xuICBjcml0aWNhbFBhdGg6IG51bWJlcltdID0gW107XG5cbiAgLyoqIFRoZSBzZWxlY3Rpb24gKGluIHRpbWUpIG9mIHRoZSBQbGFuIGN1cnJlbnRseSBiZWluZyB2aWV3ZWQuICovXG4gIGRpc3BsYXlSYW5nZTogRGlzcGxheVJhbmdlIHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqIFNjYWxlIGZvciB0aGUgcmFkYXIgdmlldywgdXNlZCBmb3IgZHJhZyBzZWxlY3RpbmcgYSBkaXNwbGF5UmFuZ2UuICovXG4gIHJhZGFyU2NhbGU6IFNjYWxlIHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqIFdoaWNoIFJlc291cmNlIHRvIGdyb3VwIGJ5IHdoZW4gZHJhd2luZyB0aGUgY2hhcnQuICovXG4gIGdyb3VwQnlTZWxlY3Rpb246IHN0cmluZyA9ICcnO1xuXG4gIC8qKiBUaGUgY3VycmVudGx5IHNlbGVjdGVkIHRhc2ssIGFzIGFuIGluZGV4LiAqL1xuICBzZWxlY3RlZFRhc2s6IG51bWJlciA9IC0xO1xuXG4gIC8vIFVJIGZlYXR1cmVzIHRoYXQgY2FuIGJlIHRvZ2dsZWQgb24gYW5kIG9mZi5cbiAgdG9wVGltZWxpbmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY3JpdGljYWxQYXRoc09ubHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZm9jdXNPblRhc2s6IGJvb2xlYW4gPSBmYWxzZTtcbiAgbW91c2VNb3ZlOiBNb3VzZU1vdmUgfCBudWxsID0gbnVsbDtcblxuICBkZXBlbmRlbmNpZXNQYW5lbDogRGVwZW5kZW5jaWVzUGFuZWwgfCBudWxsID0gbnVsbDtcblxuICBkb3dubG9hZExpbms6IEhUTUxBbmNob3JFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgc2VsZWN0ZWRUYXNrUGFuZWw6IFNlbGVjdGVkVGFza1BhbmVsIHwgbnVsbCA9IG51bGw7XG5cbiAgdGFza0NvbXBsZXRpb25QYW5lbDogVGFza0NvbXBsZXRpb25QYW5lbCB8IG51bGwgPSBudWxsO1xuXG4gIGFsdGVybmF0ZVRhc2tEdXJhdGlvbnM6IG51bWJlcltdIHwgbnVsbCA9IG51bGw7XG5cbiAgc2ltdWxhdGlvblBhbmVsOiBTaW11bGF0aW9uUGFuZWwgfCBudWxsID0gbnVsbDtcblxuICAvLyBUT0RPIHNob3VsZCBiZSBzYXZlZCBpbiBsb2NhbFN0b3JhZ2UuXG4gIF9pbWFnZUV4cG9ydFdpZHRoUHg6IG51bWJlciA9IEVYUE9SVF9JTUFHRV9ERUZBVUxUX1BYO1xuXG4gIF9pbWFnZUV4cG9ydEJhY2tncm91bmRUcmFuc3BhcmVudDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBDYWxsYmFjayB0byBjYWxsIHdoZW4gYSBtb3VzZSBtb3ZlcyBvdmVyIHRoZSBjaGFydC4gKi9cbiAgdXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zOiBVcGRhdGVIaWdobGlnaHRGcm9tTW91c2VQb3MgfCBudWxsID0gbnVsbDtcblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnNpbXVsYXRpb25QYW5lbCA9XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8U2ltdWxhdGlvblBhbmVsPignc2ltdWxhdGlvbi1wYW5lbCcpO1xuICAgIHRoaXMuc2ltdWxhdGlvblBhbmVsIS5hZGRFdmVudExpc3RlbmVyKCdzaW11bGF0aW9uLXNlbGVjdCcsIChlKSA9PiB7XG4gICAgICB0aGlzLmFsdGVybmF0ZVRhc2tEdXJhdGlvbnMgPSBlLmRldGFpbC5kdXJhdGlvbnM7XG4gICAgICB0aGlzLmNyaXRpY2FsUGF0aCA9IGUuZGV0YWlsLmNyaXRpY2FsUGF0aDtcbiAgICAgIHRoaXMucmVjYWxjdWxhdGVTcGFuc0FuZENyaXRpY2FsUGF0aCgpO1xuICAgICAgdGhpcy5wYWludENoYXJ0KCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmRvd25sb2FkTGluayA9XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTEFuY2hvckVsZW1lbnQ+KCcjZG93bmxvYWQtbGluaycpITtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNkb3dubG9hZC1idXR0b24nKSEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJlcGFyZURvd25sb2FkKCk7XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNkb3dubG9hZC1qc29uJykhLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnY2xpY2snLFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnByZXBhcmVKU09ORG93bmxvYWQoKTtcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzUGFuZWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ2RlcGVuZGVuY2llcy1wYW5lbCcpITtcblxuICAgIHRoaXMuZGVwZW5kZW5jaWVzUGFuZWwhLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZC1kZXBlbmRlbmN5JywgYXN5bmMgKGUpID0+IHtcbiAgICAgIGxldCBhY3Rpb25OYW1lOiBBY3Rpb25OYW1lcyA9ICdBZGRQcmVkZWNlc3NvckFjdGlvbic7XG4gICAgICBpZiAoZS5kZXRhaWwuZGVwVHlwZSA9PT0gJ3N1Y2MnKSB7XG4gICAgICAgIGFjdGlvbk5hbWUgPSAnQWRkU3VjY2Vzc29yQWN0aW9uJztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJldCA9IGF3YWl0IGV4ZWN1dGVCeU5hbWUoYWN0aW9uTmFtZSwgdGhpcyk7XG4gICAgICByZXBvcnRJZkVycm9yKHJldCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmRlcGVuZGVuY2llc1BhbmVsIS5hZGRFdmVudExpc3RlbmVyKCdkZWxldGUtZGVwZW5kZW5jeScsIGFzeW5jIChlKSA9PiB7XG4gICAgICBsZXQgW2ksIGpdID0gW2UuZGV0YWlsLnRhc2tJbmRleCwgdGhpcy5zZWxlY3RlZFRhc2tdO1xuICAgICAgaWYgKGUuZGV0YWlsLmRlcFR5cGUgPT09ICdzdWNjJykge1xuICAgICAgICBbaSwgal0gPSBbaiwgaV07XG4gICAgICB9XG4gICAgICBjb25zdCBvcCA9IFJlbW92ZUVkZ2VPcChpLCBqKTtcbiAgICAgIGNvbnN0IHJldCA9IGF3YWl0IGV4ZWN1dGVPcChvcCwgJ3BsYW5EZWZpbml0aW9uQ2hhbmdlZCcsIHRydWUsIHRoaXMpO1xuICAgICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZWxlY3RlZFRhc2tQYW5lbCA9IHRoaXMucXVlcnlTZWxlY3Rvcignc2VsZWN0ZWQtdGFzay1wYW5lbCcpITtcbiAgICB0aGlzLnNlbGVjdGVkVGFza1BhbmVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAndGFzay1uYW1lLWNoYW5nZScsXG4gICAgICBhc3luYyAoZTogQ3VzdG9tRXZlbnQ8VGFza05hbWVDaGFuZ2VEZXRhaWxzPikgPT4ge1xuICAgICAgICBjb25zdCBvcCA9IFNldFRhc2tOYW1lT3AoZS5kZXRhaWwudGFza0luZGV4LCBlLmRldGFpbC5uYW1lKTtcbiAgICAgICAgcmVwb3J0SWZFcnJvcihhd2FpdCBleGVjdXRlT3Aob3AsICdwbGFuRGVmaW5pdGlvbkNoYW5nZWQnLCB0cnVlLCB0aGlzKSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuc2VsZWN0ZWRUYXNrUGFuZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICd0YXNrLXJlc291cmNlLXZhbHVlLWNoYW5nZScsXG4gICAgICBhc3luYyAoZTogQ3VzdG9tRXZlbnQ8VGFza1Jlc291cmNlVmFsdWVDaGFuZ2VEZXRhaWxzPikgPT4ge1xuICAgICAgICBjb25zdCB7IG5hbWUsIHZhbHVlLCB0YXNrSW5kZXggfSA9IGUuZGV0YWlsO1xuICAgICAgICBjb25zdCBvcCA9IFNldFJlc291cmNlVmFsdWVPcChuYW1lLCB2YWx1ZSwgdGFza0luZGV4KTtcbiAgICAgICAgcmVwb3J0SWZFcnJvcihhd2FpdCBleGVjdXRlT3Aob3AsICdwbGFuRGVmaW5pdGlvbkNoYW5nZWQnLCB0cnVlLCB0aGlzKSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuc2VsZWN0ZWRUYXNrUGFuZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICd0YXNrLW1ldHJpYy12YWx1ZS1jaGFuZ2UnLFxuICAgICAgYXN5bmMgKGU6IEN1c3RvbUV2ZW50PFRhc2tNZXRyaWNWYWx1ZUNoYW5nZURldGFpbHM+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUsIHRhc2tJbmRleCB9ID0gZS5kZXRhaWw7XG4gICAgICAgIGNvbnN0IG9wID0gU2V0TWV0cmljVmFsdWVPcChuYW1lLCB2YWx1ZSwgdGFza0luZGV4KTtcbiAgICAgICAgcmVwb3J0SWZFcnJvcihhd2FpdCBleGVjdXRlT3Aob3AsICdwbGFuRGVmaW5pdGlvbkNoYW5nZWQnLCB0cnVlLCB0aGlzKSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMudGFza0NvbXBsZXRpb25QYW5lbCA9IHRoaXMucXVlcnlTZWxlY3RvcigndGFzay1jb21wbGV0aW9uLXBhbmVsJyk7XG5cbiAgICAvLyBEcmFnZ2luZyBvbiB0aGUgcmFkYXIuXG4gICAgY29uc3QgcmFkYXIgPSB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KCcjcmFkYXInKSE7XG4gICAgbmV3IE1vdXNlRHJhZyhyYWRhcik7XG4gICAgcmFkYXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIERSQUdfUkFOR0VfRVZFTlQsXG4gICAgICB0aGlzLmRyYWdSYW5nZUhhbmRsZXIuYmluZCh0aGlzKSBhcyBFdmVudExpc3RlbmVyXG4gICAgKTtcblxuICAgIC8vIERpdmlkZXIgZHJhZ2dpbmcuXG4gICAgY29uc3QgZGl2aWRlciA9IHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJ3ZlcnRpY2FsLWRpdmlkZXInKSE7XG4gICAgbmV3IERpdmlkZXJNb3ZlKGRvY3VtZW50LmJvZHksIGRpdmlkZXIsICdjb2x1bW4nKTtcblxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihESVZJREVSX01PVkVfRVZFTlQsICgoXG4gICAgICBlOiBDdXN0b21FdmVudDxEaXZpZGVyTW92ZVJlc3VsdD5cbiAgICApID0+IHtcbiAgICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICAgICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnLFxuICAgICAgICBgY2FsYygke2UuZGV0YWlsLmJlZm9yZX0lIC0gMTVweCkgMTBweCBhdXRvYFxuICAgICAgKTtcbiAgICAgIHRoaXMucGFpbnRDaGFydCgpO1xuICAgIH0pIGFzIEV2ZW50TGlzdGVuZXIpO1xuXG4gICAgLy8gQnV0dG9uc1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignI2RhcmstbW9kZS10b2dnbGUnKSEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBleGVjdXRlQnlOYW1lKCdUb2dnbGVEYXJrTW9kZUFjdGlvbicsIHRoaXMpO1xuICAgIH0pO1xuICAgIGFwcGx5U3RvcmVkVGhlbWUoKTtcblxuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PignI3JhZGFyLXRvZ2dsZScpIS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2lucHV0JyxcbiAgICAgIChlOiBFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLnNldFJhZGFyKChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxJbnB1dEVsZW1lbnQ+KFxuICAgICAgJyNjcml0aWNhbC1wYXRocy10b2dnbGUnXG4gICAgKSEuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZTogRXZlbnQpID0+IHtcbiAgICAgIHRoaXMuY3JpdGljYWxQYXRoc09ubHkgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZDtcbiAgICAgIHRoaXMucGFpbnRDaGFydCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb3ZlcmxheUNhbnZhcyA9IHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MQ2FudmFzRWxlbWVudD4oJyNvdmVybGF5JykhO1xuICAgIHRoaXMubW91c2VNb3ZlID0gbmV3IE1vdXNlTW92ZShvdmVybGF5Q2FudmFzKTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKSk7XG5cbiAgICBvdmVybGF5Q2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBwID0gcHQoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgaWYgKHRoaXMudXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKFxuICAgICAgICAgIHRoaXMudXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zKHAsICdtb3VzZWRvd24nKSB8fCAtMSxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgb3ZlcmxheUNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBwID0gcHQoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgaWYgKHRoaXMudXBkYXRlSGlnaGxpZ2h0RnJvbU1vdXNlUG9zICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHRhc2tJbmRleCA9XG4gICAgICAgICAgdGhpcy51cGRhdGVIaWdobGlnaHRGcm9tTW91c2VQb3MocCwgJ21vdXNlZG93bicpIHx8IC0xO1xuICAgICAgICBpZiAodGFza0luZGV4ID09PSAtMSkge1xuICAgICAgICAgIGV4ZWN1dGVCeU5hbWUoJ1Jlc2V0Wm9vbUFjdGlvbicsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKHRhc2tJbmRleCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBSZWFjdCB0byB0aGUgdXBsb2FkIGlucHV0LlxuICAgIGNvbnN0IGZpbGVVcGxvYWQgPVxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PignI2ZpbGUtdXBsb2FkJykhO1xuICAgIGZpbGVVcGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYmxvYiA9IGZpbGVVcGxvYWQuZmlsZXMhWzBdO1xuICAgICAgY29uc3QgYnl0ZXMgPSBhd2FpdCBibG9iLmFycmF5QnVmZmVyKCk7XG4gICAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLmZyb21VaW50OEFycmF5KG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7XG4gICAgICByZXBvcnRJZkVycm9yKHJldCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNzaW11bGF0ZScpIS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMucmVjYWxjdWxhdGVTcGFuc0FuZENyaXRpY2FsUGF0aCgpO1xuXG4gICAgICAvLyBCdWlsZCBhIHNldCBvZiB0YXNrcyB0aGF0IGFyZSBmaW5pc2hlZC5cbiAgICAgIGNvbnN0IGZpbmlzaGVkVGFza3M6IFNldDxudW1iZXI+ID0gbmV3IFNldCgpO1xuICAgICAgdGhpcy5wbGFuLmNoYXJ0LlZlcnRpY2VzLmZpbHRlcigodGFzazogVGFzaywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAodGhpcy5wbGFuLnRhc2tDb21wbGV0aW9uW3Rhc2suaWRdPy5zdGFnZSA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICAgIGZpbmlzaGVkVGFza3MuYWRkKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmNyaXRpY2FsUGF0aCA9IHRoaXMuc2ltdWxhdGlvblBhbmVsIS5zaW11bGF0ZShcbiAgICAgICAgdGhpcy5wbGFuLmNoYXJ0LFxuICAgICAgICBOVU1fU0lNVUxBVElPTl9MT09QUyxcbiAgICAgICAgdGhpcy5jcml0aWNhbFBhdGgsXG4gICAgICAgIGZpbmlzaGVkVGFza3NcbiAgICAgICk7XG4gICAgICB0aGlzLnBhaW50Q2hhcnQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxFZGl0UmVzb3VyY2VzUGFuZWw+KCdlZGl0LXJlc291cmNlcy1wYW5lbCcpIS5zZXRDb25maWcoXG4gICAgICB0aGlzXG4gICAgKTtcblxuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxQbGFuQ29uZmlnUGFuZWw+KCdwbGFuLWNvbmZpZy1wYW5lbCcpIS5zZXRDb25maWcodGhpcyk7XG5cbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8RWRpdE1ldHJpY3NQYW5lbD4oJ2VkaXQtbWV0cmljcy1wYW5lbCcpIS5zZXRDb25maWcodGhpcyk7XG5cbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SW1hZ2VFeHBvcnRQYW5lbD4oJ2ltYWdlLWV4cG9ydC1wYW5lbCcpIS5zZXRDb25maWcodGhpcyk7XG5cbiAgICBjb25zdCBnb3VwQnlDb250cm9sID1cbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvcjxHcm91cEJ5Q29udHJvbD4oJ2dyb3VwYnktY29udHJvbCcpITtcbiAgICBnb3VwQnlDb250cm9sLnNldENvbmZpZyh0aGlzKTtcbiAgICBnb3VwQnlDb250cm9sLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnZ3JvdXAtYnktcmVzb3VyY2UtY2hhbmdlZCcsXG4gICAgICAoZTogQ3VzdG9tRXZlbnQ8c3RyaW5nPikgPT4ge1xuICAgICAgICB0aGlzLmdyb3VwQnlTZWxlY3Rpb24gPSBlLmRldGFpbDtcbiAgICAgICAgdGhpcy5wbGFuRGVmaW5pdGlvbkhhc0JlZW5DaGFuZ2VkKCk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMucGxhbiA9IGdlbmVyYXRlU3RhcnRlclBsYW4oKTtcbiAgICB0aGlzLnVwZGF0ZVRhc2tQYW5lbHModGhpcy5zZWxlY3RlZFRhc2spO1xuICAgIHRoaXMucGxhbkRlZmluaXRpb25IYXNCZWVuQ2hhbmdlZCgpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMucGFpbnRDaGFydCgpKTtcbiAgICBTdGFydEtleWJvYXJkSGFuZGxpbmcodGhpcyk7XG5cbiAgICBjb25zb2xlLmxvZygnRmluaXNoZWQgSW5pdCcpO1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmaW5pc2hlZC1pbml0JykpO1xuICB9XG5cbiAgLyoqIEBwcm9wICB7c3RyaW5nfSAgKi9cbiAgZ2V0IGltYWdlRXhwb3J0V2lkdGhQeCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHdpZHRoQXNTdHJpbmcgPVxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbWFnZUV4cG9ydFdpZHRoUHgnKSB8fCAnJztcbiAgICBpZiAod2lkdGhBc1N0cmluZyA9PT0gJycpIHtcbiAgICAgIHJldHVybiBFWFBPUlRfSU1BR0VfREVGQVVMVF9QWDtcbiAgICB9XG4gICAgcmV0dXJuICt3aWR0aEFzU3RyaW5nO1xuICB9XG5cbiAgc2V0IGltYWdlRXhwb3J0V2lkdGhQeCh2YWw6IG51bWJlcikge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaW1hZ2VFeHBvcnRXaWR0aFB4JywgdmFsLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcHVibGljIGdldCBpbWFnZUV4cG9ydEJhY2tncm91bmRUcmFuc3BhcmVudCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBiQXNTdHJpbmcgPVxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbWFnZUV4cG9ydEJhY2tncm91bmRUcmFuc3BhcmVudCcpIHx8ICcnO1xuICAgIHJldHVybiBiQXNTdHJpbmcgPT09ICd0cnVlJztcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW1hZ2VFeHBvcnRCYWNrZ3JvdW5kVHJhbnNwYXJlbnQodjogYm9vbGVhbikge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICdpbWFnZUV4cG9ydEJhY2tncm91bmRUcmFuc3BhcmVudCcsXG4gICAgICB2LnRvU3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgdG9nZ2xlVG9wVGltZWxpbmUoKSB7XG4gICAgdGhpcy50b3BUaW1lbGluZSA9ICF0aGlzLnRvcFRpbWVsaW5lO1xuICAgIHRoaXMucGFpbnRDaGFydCgpO1xuICB9XG5cbiAgYXN5bmMgcHJlcGFyZURvd25sb2FkKCkge1xuICAgIC8vICBjb25zdCBkb3dubG9hZEJsb2IgPSBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkodGhpcy5wbGFuLCBudWxsLCAnICAnKV0sIHtcbiAgICAvLyAgICB0eXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgLy8gIH0pO1xuICAgIGNvbnN0IHJldCA9IGF3YWl0IHRoaXMudG9QTkcoKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmVwb3J0SWZFcnJvcihyZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb3dubG9hZEJsb2IgPSByZXQudmFsdWU7XG4gICAgdGhpcy5kb3dubG9hZExpbmshLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGRvd25sb2FkQmxvYik7XG4gICAgdGhpcy5kb3dubG9hZExpbmshLmRvd25sb2FkID0gJ3BsYW4ucG5nJztcbiAgICB0aGlzLmRvd25sb2FkTGluayEuY2xpY2soKTtcbiAgfVxuXG4gIGFzeW5jIHByZXBhcmVKU09ORG93bmxvYWQoKSB7XG4gICAgY29uc3QgZG93bmxvYWRCbG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KHRoaXMucGxhbiwgbnVsbCwgJyAgJyldLCB7XG4gICAgICB0eXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSk7XG4gICAgdGhpcy5kb3dubG9hZExpbmshLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGRvd25sb2FkQmxvYik7XG4gICAgdGhpcy5kb3dubG9hZExpbmshLmRvd25sb2FkID0gJ3BsYW4uanNvbic7XG4gICAgdGhpcy5kb3dubG9hZExpbmshLmNsaWNrKCk7XG4gIH1cblxuICBhc3luYyB1bmRvKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGV4ZWN1dGVCeU5hbWUoJ1VuZG9BY3Rpb24nLCB0aGlzKTtcbiAgICByZXBvcnRJZkVycm9yKHJlcyk7XG4gIH1cblxuICBhc3luYyByZWRvKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGV4ZWN1dGVCeU5hbWUoJ1JlZG9BY3Rpb24nLCB0aGlzKTtcbiAgICByZXBvcnRJZkVycm9yKHJlcyk7XG4gIH1cblxuICAvLyBDYWxsIHRoaXMgaWYgZXhwbGFuTWFpbiBpcyBlbWJlZGRlZCBpbiBhbm90aGVyIGNvbnRleHQuXG4gIGVtYmVkZGVkKCk6IHZvaWQge1xuICAgIC8vIERpc2FibGUgdGhlIGtleSBiaW5kaW5ncyBmb3IgdW5kbyBhbmQgcmVkby5cbiAgICB1bm1hcFVuZG9BbmRSZWRvKCk7XG5cbiAgICAvLyBIaWRlIGNvbnRyb2xzIHRoYXQgZG9uJ3QgbWFrZSBzZW5zZSB3aGVuIGVtYmVkZGVkLlxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkb3dubG9hZC1jb250cm9scycpIS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXBsb2FkJykhLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuXG4gICAgLy8gUGFzcyB1cCBlcnJvciBtZXNzYWdlcyB0byBiZSByZXBvcnRlZCBpbnN0ZWFkIG9mIGRpc3BsYXlpbmcgbG9jYWxseS5cbiAgICBzZXRFcnJvck1lc3NhZ2VSZXBvcnRpbmcoJ0RvY3VtZW50RXZlbnQnKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnBsYW4sIG51bGwsICcgICcpO1xuICB9XG5cbiAgZnJvbUpTT04oanNvbjogc3RyaW5nKTogUmVzdWx0PG51bGw+IHtcbiAgICBjb25zdCByZXQgPSBQbGFuLkZyb21KU09OVGV4dChqc29uKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgdGhpcy5wbGFuID0gcmV0LnZhbHVlO1xuICAgIHRoaXMucGxhbkRlZmluaXRpb25IYXNCZWVuQ2hhbmdlZCgpO1xuICAgIHJldHVybiBvayhudWxsKTtcbiAgfVxuXG4gIGFzeW5jIGZyb21VaW50OEFycmF5KGJ5dGVzOiBVaW50OEFycmF5KTogUHJvbWlzZTxSZXN1bHQ8bnVsbD4+IHtcbiAgICBsZXQganNvbjogc3RyaW5nID0gJyc7XG4gICAgaWYgKFBuZ01ldGFkYXRhLmlzUE5HKGJ5dGVzKSkge1xuICAgICAgY29uc3QgcmV0ID0gYXdhaXQgZ2V0RXhwbGFuSlNPTkNodW5rRnJvbVBORyhuZXcgVWludDhBcnJheShieXRlcykpO1xuICAgICAgaWYgKCFyZXQub2spIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICAgIGpzb24gPSByZXQudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGpzb24gPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKGJ5dGVzKTtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gdGhpcy5mcm9tSlNPTihqc29uKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgcmV0dXJuIG9rKG51bGwpO1xuICB9XG5cbiAgYXN5bmMgdG9Vbml0OEFycmF5KGNvbnRlbnRUeXBlOiBzdHJpbmcpOiBQcm9taXNlPFJlc3VsdDxVaW50OEFycmF5Pj4ge1xuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2ltYWdlL3BuZycpIHtcbiAgICAgIGNvbnN0IHJldCA9IGF3YWl0IHRoaXMudG9QTkcoKTtcbiAgICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2sobmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmV0LnZhbHVlLmFycmF5QnVmZmVyKCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG9rKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0aGlzLnRvSlNPTigpKSk7XG4gIH1cblxuICBhc3luYyB0b1BORygpOiBQcm9taXNlPFJlc3VsdDxCbG9iPj4ge1xuICAgIC8vIEZpcnN0IHJlbmRlciB0aGUgY3VycmVudCBwbGFuIHRvIGEgY2FudmFzIHdpdGggdGhlIGdpdmVuIHJlbmRlciBvcHRpb25zLlxuICAgIGNvbnN0IHJldCA9IGF3YWl0IHRoaXMucmVuZGVyQ2hhcnRUb1BORygpO1xuICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBKU09OIHRvIFBORyBhbmQgcmV0dXJuIHVwZGF0ZWQgUE5HIGFzIEJsb2IuXG4gICAgcmV0dXJuIG9rKGF3YWl0IGFkZEV4cGxhbkpTT05DaHVua1RvUE5HKHRoaXMudG9KU09OKCksIHJldC52YWx1ZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZW5kZXJDaGFydFRvUE5HKCk6IFByb21pc2U8UmVzdWx0PEJsb2I+PiB7XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gdGhpcy5pbWFnZUV4cG9ydFdpZHRoUHg7XG5cbiAgICBjb25zdCB0aGVtZTIgPSBuZXcgVGhlbWUyKCk7XG4gICAgdGhlbWUyLmxvYWRGcm9tRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICBpZiAodGhpcy5pbWFnZUV4cG9ydEJhY2tncm91bmRUcmFuc3BhcmVudCkge1xuICAgICAgdGhlbWUyLnZhbHVlcy5zZXQoJ2JhY2tncm91bmQnLCAncmdiYSgwLDAsMCwwKScpO1xuICAgIH1cblxuICAgIGNvbnN0IGR1cmF0aW9uRGlzcGxheSA9ICh0OiBudW1iZXIpID0+XG4gICAgICB0aGlzLnBsYW4uZHVyYXRpb25Vbml0cy5kaXNwbGF5VGltZSh0KTtcblxuICAgIGNvbnN0IHRhc2tJc1N0YXJ0ZWQgPSAodGFza0luZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHJldCA9IHRoaXMucGxhbi5nZXRUYXNrQ29tcGxldGlvbih0YXNrSW5kZXgpO1xuICAgICAgaWYgKCFyZXQub2spIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldC52YWx1ZS5zdGFnZSAhPT0gJ3Vuc3RhcnRlZCc7XG4gICAgfTtcblxuICAgIGNvbnN0IG9wdHM6IFJlbmRlck9wdGlvbnMgPSB7XG4gICAgICBmb250U2l6ZVB4OiAxNixcbiAgICAgIGhhc1RleHQ6IHRydWUsXG4gICAgICBkaXNwbGF5UmFuZ2U6IG51bGwsXG4gICAgICBkaXNwbGF5UmFuZ2VVc2FnZTogJ3Jlc3RyaWN0JyxcbiAgICAgIGNvbG9yczogdGhlbWUyLFxuICAgICAgaGFzVGltZWxpbmU6IHRydWUsXG4gICAgICBoYXNUYXNrczogdHJ1ZSxcbiAgICAgIGhhc0VkZ2VzOiB0cnVlLFxuICAgICAgZHJhd1RpbWVNYXJrZXJzT25UYXNrczogdHJ1ZSxcbiAgICAgIHRhc2tMYWJlbDogdGhpcy5nZXRUYXNrTGFiZWxsZXIoKSxcbiAgICAgIHRhc2tEdXJhdGlvbjogdGhpcy5nZXRUYXNrRHVyYXRpb25GdW5jKCksXG4gICAgICB0YXNrRW1waGFzaXplOiB0aGlzLmNyaXRpY2FsUGF0aCxcbiAgICAgIGZpbHRlckZ1bmM6IG51bGwsXG4gICAgICBncm91cEJ5UmVzb3VyY2U6ICcnLFxuICAgICAgaGlnaGxpZ2h0ZWRUYXNrOiBudWxsLFxuICAgICAgc2VsZWN0ZWRUYXNrSW5kZXg6IC0xLFxuICAgICAgZHVyYXRpb25EaXNwbGF5OiBkdXJhdGlvbkRpc3BsYXksXG4gICAgICB0YXNrSXNTdGFydGVkOiB0YXNrSXNTdGFydGVkLFxuICAgICAgdG9kYXk6IC0xLFxuICAgIH07XG5cbiAgICBjb25zdCBuZXdIZWlnaHQgPSBzdWdnZXN0ZWRDYW52YXNIZWlnaHQoXG4gICAgICBjYW52YXMsXG4gICAgICB0aGlzLnNwYW5zLFxuICAgICAgb3B0cyxcbiAgICAgIHRoaXMucGxhbi5jaGFydC5WZXJ0aWNlcy5sZW5ndGggKyAyIC8vIFRPRE8gLSBXaHkgZG8gd2UgbmVlZCB0aGUgKzIgaGVyZSE/XG4gICAgKTtcbiAgICBjYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcbiAgICBjb25zdCByZXQgPSByZW5kZXJUYXNrc1RvQ2FudmFzKFxuICAgICAgbnVsbCxcbiAgICAgIGNhbnZhcyxcbiAgICAgIGN0eCxcbiAgICAgIHRoaXMucGxhbixcbiAgICAgIHRoaXMuc3BhbnMsXG4gICAgICBvcHRzLFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgaWYgKCFyZXQub2spIHtcbiAgICAgIHJldHVybiBlcnJvcihyZXQuZXJyb3IpO1xuICAgIH1cbiAgICBsZXQgcmVzb2x2ZU91dHNpZGU6ICh2YWx1ZTogQmxvYiB8IFByb21pc2VMaWtlPEJsb2I+KSA9PiB2b2lkO1xuICAgIGxldCByZWplY3RPdXRzaWRlOiAoKSA9PiB2b2lkO1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvbWlzZTxCbG9iPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXNvbHZlT3V0c2lkZSA9IHJlc29sdmU7XG4gICAgICByZWplY3RPdXRzaWRlID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIGNhbnZhcy50b0Jsb2IoKGJsb2I6IEJsb2IgfCBudWxsKSA9PiB7XG4gICAgICBpZiAoYmxvYiA9PT0gbnVsbCkge1xuICAgICAgICByZWplY3RPdXRzaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlT3V0c2lkZShibG9iKTtcbiAgICAgIH1cbiAgICB9LCAnaW1hZ2UvcG5nJyk7XG4gICAgcmV0dXJuIG9rKGF3YWl0IHApO1xuICB9XG5cbiAgdXBkYXRlVGFza1BhbmVscyh0YXNrSW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuc2VsZWN0ZWRUYXNrID0gdGFza0luZGV4O1xuICAgIHRoaXMuc2VsZWN0ZWRUYXNrUGFuZWwhLnVwZGF0ZVNlbGVjdGVkVGFza1BhbmVsKHRoaXMsIHRoaXMuc2VsZWN0ZWRUYXNrKTtcbiAgICB0aGlzLnRhc2tDb21wbGV0aW9uUGFuZWwhLnVwZGF0ZShcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnNlbGVjdGVkVGFzayxcbiAgICAgIHRoaXMuc3BhbnNbdGhpcy5zZWxlY3RlZFRhc2tdXG4gICAgKTtcbiAgICBjb25zdCBlZGdlcyA9IGVkZ2VzQnlTcmNBbmREc3RUb01hcCh0aGlzLnBsYW4uY2hhcnQuRWRnZXMpO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzUGFuZWwhLnNldFRhc2tzQW5kSW5kaWNlcyhcbiAgICAgIHRoaXMucGxhbi5jaGFydC5WZXJ0aWNlcyxcbiAgICAgIChlZGdlcy5ieURzdC5nZXQodGFza0luZGV4KSB8fCBbXSkubWFwKChlOiBEaXJlY3RlZEVkZ2UpID0+IGUuaSksXG4gICAgICAoZWRnZXMuYnlTcmMuZ2V0KHRhc2tJbmRleCkgfHwgW10pLm1hcCgoZTogRGlyZWN0ZWRFZGdlKSA9PiBlLmopXG4gICAgKTtcbiAgICB0aGlzLmRlcGVuZGVuY2llc1BhbmVsIS5jbGFzc0xpc3QudG9nZ2xlKFxuICAgICAgJ2hpZGRlbicsXG4gICAgICB0aGlzLnNlbGVjdGVkVGFzayA9PT0gLTFcbiAgICApO1xuICB9XG5cbiAgc2V0U2VsZWN0aW9uKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgZm9jdXM6IGJvb2xlYW4sXG4gICAgc2Nyb2xsVG9TZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlXG4gICkge1xuICAgIHRoaXMuc2VsZWN0ZWRUYXNrID0gaW5kZXg7XG4gICAgaWYgKGZvY3VzKSB7XG4gICAgICB0aGlzLmZvcmNlRm9jdXNPblRhc2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRUYXNrID09PSAtMSkge1xuICAgICAgdGhpcy5mb2N1c09uVGFzayA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnBhaW50Q2hhcnQoc2Nyb2xsVG9TZWxlY3RlZCk7XG4gICAgdGhpcy51cGRhdGVUYXNrUGFuZWxzKHRoaXMuc2VsZWN0ZWRUYXNrKTtcbiAgfVxuXG4gIC8vIFRPRE8gLSBUdXJuIHRoaXMgb24gYW5kIG9mZiBiYXNlZCBvbiBtb3VzZSBlbnRlcmluZyB0aGUgY2FudmFzIGFyZWEuXG4gIG9uTW91c2VNb3ZlKCkge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5tb3VzZU1vdmUhLnJlYWRMb2NhdGlvbigpO1xuICAgIGlmIChsb2NhdGlvbiAhPT0gbnVsbCAmJiB0aGlzLnVwZGF0ZUhpZ2hsaWdodEZyb21Nb3VzZVBvcyAhPT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVIaWdobGlnaHRGcm9tTW91c2VQb3MobG9jYXRpb24sICdtb3VzZW1vdmUnKTtcbiAgICB9XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcGxhbkRlZmluaXRpb25IYXNCZWVuQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnJhZGFyU2NhbGUgPSBudWxsO1xuICAgIHRoaXMuZGlzcGxheVJhbmdlID0gbnVsbDtcbiAgICB0aGlzLmFsdGVybmF0ZVRhc2tEdXJhdGlvbnMgPSBudWxsO1xuICAgIHRoaXMucmVjYWxjdWxhdGVTcGFuc0FuZENyaXRpY2FsUGF0aCgpO1xuICAgIHRoaXMucGFpbnRDaGFydCgpO1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdwbGFuLWRlZmluaXRpb24tY2hhbmdlZCcpKTtcbiAgfVxuXG4gIGdldFRhc2tEdXJhdGlvbkZ1bmMoKTogVGFza0R1cmF0aW9uIHtcbiAgICBpZiAodGhpcy5hbHRlcm5hdGVUYXNrRHVyYXRpb25zICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gKHRhc2tJbmRleDogbnVtYmVyKSA9PiB0aGlzLmFsdGVybmF0ZVRhc2tEdXJhdGlvbnMhW3Rhc2tJbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAodGFza0luZGV4OiBudW1iZXIpID0+XG4gICAgICAgIHRoaXMucGxhbi5jaGFydC5WZXJ0aWNlc1t0YXNrSW5kZXhdLmR1cmF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHJlY2FsY3VsYXRlU3BhbnNBbmRDcml0aWNhbFBhdGgoKSB7XG4gICAgbGV0IHNsYWNrczogU2xhY2tbXSA9IFtdO1xuXG4gICAgY29uc3Qgcm91bmRlciA9IHRoaXMucGxhblxuICAgICAgLmdldFN0YXRpY01ldHJpY0RlZmluaXRpb24oJ0R1cmF0aW9uJylcbiAgICAgIC5wcmVjaXNpb24ucm91bmRlcigpO1xuXG4gICAgY29uc3QgZWFybHlTdGFydE92ZXJyaWRlID0gKHRhc2tJbmRleDogbnVtYmVyKTogbnVtYmVyIHwgdW5kZWZpbmVkID0+IHtcbiAgICAgIGNvbnN0IHJldCA9IHRoaXMucGxhbi5nZXRUYXNrQ29tcGxldGlvbih0YXNrSW5kZXgpO1xuICAgICAgaWYgKCFyZXQub2spIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSByZXQudmFsdWU7XG4gICAgICBzd2l0Y2ggKGNvbXBsZXRpb24uc3RhZ2UpIHtcbiAgICAgICAgY2FzZSAndW5zdGFydGVkJzpcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzdGFydGVkJzpcbiAgICAgICAgICByZXR1cm4gY29tcGxldGlvbi5zdGFydDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmluaXNoZWQnOlxuICAgICAgICAgIHJldHVybiBjb21wbGV0aW9uLnNwYW4uc3RhcnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29tcGxldGlvbiBzYXRpc2ZpZXMgbmV2ZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGVhcmx5RmluaXNoT3ZlcnJpZGUgPSAodGFza0luZGV4OiBudW1iZXIpOiBudW1iZXIgfCB1bmRlZmluZWQgPT4ge1xuICAgICAgY29uc3QgcmV0ID0gdGhpcy5wbGFuLmdldFRhc2tDb21wbGV0aW9uKHRhc2tJbmRleCk7XG4gICAgICBpZiAoIXJldC5vaykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgY29uc3QgY29tcGxldGlvbiA9IHJldC52YWx1ZTtcbiAgICAgIHN3aXRjaCAoY29tcGxldGlvbi5zdGFnZSkge1xuICAgICAgICBjYXNlICd1bnN0YXJ0ZWQnOlxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0YXJ0ZWQnOlxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ZpbmlzaGVkJzpcbiAgICAgICAgICByZXR1cm4gY29tcGxldGlvbi5zcGFuLmZpbmlzaDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb21wbGV0aW9uIHNhdGlzZmllcyBuZXZlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgc2xhY2tSZXN1bHQgPSBDb21wdXRlU2xhY2soXG4gICAgICB0aGlzLnBsYW4uY2hhcnQsXG4gICAgICB0aGlzLmdldFRhc2tEdXJhdGlvbkZ1bmMoKSxcbiAgICAgIHJvdW5kZXIsXG4gICAgICBlYXJseVN0YXJ0T3ZlcnJpZGUsXG4gICAgICBlYXJseUZpbmlzaE92ZXJyaWRlXG4gICAgKTtcbiAgICBpZiAoIXNsYWNrUmVzdWx0Lm9rKSB7XG4gICAgICBjb25zb2xlLmVycm9yKHNsYWNrUmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xhY2tzID0gc2xhY2tSZXN1bHQudmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5zcGFucyA9IHNsYWNrcy5tYXAoKHZhbHVlOiBTbGFjayk6IFNwYW4gPT4ge1xuICAgICAgcmV0dXJuIHZhbHVlLmVhcmx5O1xuICAgIH0pO1xuICAgIHRoaXMuY3JpdGljYWxQYXRoID0gQ3JpdGljYWxQYXRoKHNsYWNrcywgcm91bmRlcik7XG4gICAgdGhpcy51cGRhdGVUYXNrUGFuZWxzKHRoaXMuc2VsZWN0ZWRUYXNrKTtcbiAgfVxuXG4gIGdldFRhc2tMYWJlbGxlcigpOiBUYXNrTGFiZWwge1xuICAgIHJldHVybiAodGFza0luZGV4OiBudW1iZXIpOiBzdHJpbmcgPT5cbiAgICAgIGAke3RoaXMucGxhbi5jaGFydC5WZXJ0aWNlc1t0YXNrSW5kZXhdLm5hbWV9YDtcbiAgfVxuXG4gIGRyYWdSYW5nZUhhbmRsZXIoZTogQ3VzdG9tRXZlbnQ8RHJhZ1JhbmdlPikge1xuICAgIGlmICh0aGlzLnJhZGFyU2NhbGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYmVnaW4gPSB0aGlzLnJhZGFyU2NhbGUuZGF5Um93RnJvbVBvaW50KGUuZGV0YWlsLmJlZ2luKTtcbiAgICBjb25zdCBlbmQgPSB0aGlzLnJhZGFyU2NhbGUuZGF5Um93RnJvbVBvaW50KGUuZGV0YWlsLmVuZCk7XG4gICAgdGhpcy5kaXNwbGF5UmFuZ2UgPSBuZXcgRGlzcGxheVJhbmdlKGJlZ2luLmRheSwgZW5kLmRheSk7XG4gICAgdGhpcy5wYWludENoYXJ0KCk7XG4gIH1cblxuICB0b2dnbGVSYWRhcigpIHtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3JhZGFyLXBhcmVudCcpIS5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgfVxuXG4gIHNldFJhZGFyKG9uOiBib29sZWFuKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCdyYWRhci1wYXJlbnQnKSEuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJywgIW9uKTtcbiAgfVxuXG4gIHRvZ2dsZUNyaXRpY2FsUGF0aHNPbmx5KCkge1xuICAgIHRoaXMuY3JpdGljYWxQYXRoc09ubHkgPSAhdGhpcy5jcml0aWNhbFBhdGhzT25seTtcbiAgfVxuXG4gIGZvcmNlRm9jdXNPblRhc2soKSB7XG4gICAgdGhpcy5mb2N1c09uVGFzayA9IHRydWU7XG4gIH1cblxuICBwYWludENoYXJ0KHNjcm9sbFRvU2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnNvbGUudGltZSgncGFpbnRDaGFydCcpO1xuXG4gICAgY29uc3QgdGhlbWUyID0gbmV3IFRoZW1lMigpO1xuICAgIHRoZW1lMi5sb2FkRnJvbUVsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG5cbiAgICBsZXQgZmlsdGVyRnVuYzogRmlsdGVyRnVuYyB8IG51bGwgPSBudWxsO1xuICAgIGNvbnN0IHN0YXJ0QW5kRmluaXNoID0gWzAsIHRoaXMucGxhbi5jaGFydC5WZXJ0aWNlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAodGhpcy5jcml0aWNhbFBhdGhzT25seSkge1xuICAgICAgY29uc3QgaGlnaGxpZ2h0U2V0ID0gbmV3IFNldCh0aGlzLmNyaXRpY2FsUGF0aCk7XG4gICAgICBmaWx0ZXJGdW5jID0gKHRhc2s6IFRhc2ssIHRhc2tJbmRleDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIGlmIChzdGFydEFuZEZpbmlzaC5pbmNsdWRlcyh0YXNrSW5kZXgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodFNldC5oYXModGFza0luZGV4KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0aGlzLmZvY3VzT25UYXNrICYmIHRoaXMuc2VsZWN0ZWRUYXNrICE9IC0xKSB7XG4gICAgICAvLyBGaW5kIGFsbCBwcmVkZWNlc3NvciBhbmQgc3VjY2Vzc29ycyBvZiB0aGUgZ2l2ZW4gdGFzay5cbiAgICAgIGNvbnN0IG5laWdoYm9yU2V0ID0gbmV3IFNldCgpO1xuICAgICAgbmVpZ2hib3JTZXQuYWRkKHRoaXMuc2VsZWN0ZWRUYXNrKTtcbiAgICAgIGxldCBlYXJsaWVzdFN0YXJ0ID0gdGhpcy5zcGFuc1t0aGlzLnNlbGVjdGVkVGFza10uc3RhcnQ7XG4gICAgICBsZXQgbGF0ZXN0RmluaXNoID0gdGhpcy5zcGFuc1t0aGlzLnNlbGVjdGVkVGFza10uZmluaXNoO1xuICAgICAgdGhpcy5wbGFuLmNoYXJ0LkVkZ2VzLmZvckVhY2goKGVkZ2U6IERpcmVjdGVkRWRnZSkgPT4ge1xuICAgICAgICBpZiAoZWRnZS5pID09PSB0aGlzLnNlbGVjdGVkVGFzaykge1xuICAgICAgICAgIG5laWdoYm9yU2V0LmFkZChlZGdlLmopO1xuICAgICAgICAgIGlmIChsYXRlc3RGaW5pc2ggPCB0aGlzLnNwYW5zW2VkZ2Uual0uZmluaXNoKSB7XG4gICAgICAgICAgICBsYXRlc3RGaW5pc2ggPSB0aGlzLnNwYW5zW2VkZ2Uual0uZmluaXNoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZWRnZS5qID09PSB0aGlzLnNlbGVjdGVkVGFzaykge1xuICAgICAgICAgIG5laWdoYm9yU2V0LmFkZChlZGdlLmkpO1xuICAgICAgICAgIGlmIChlYXJsaWVzdFN0YXJ0ID4gdGhpcy5zcGFuc1tlZGdlLmldLnN0YXJ0KSB7XG4gICAgICAgICAgICBlYXJsaWVzdFN0YXJ0ID0gdGhpcy5zcGFuc1tlZGdlLmldLnN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBUT0RPIC0gU2luY2Ugd2Ugb3ZlcndyaXRlIGRpc3BsYXlSYW5nZSB0aGF0IG1lYW5zIGRyYWdnaW5nIG9uIHRoZSByYWRhclxuICAgICAgLy8gd2lsbCBub3Qgd29yayB3aGVuIGZvY3VzaW5nIG9uIGEgc2VsZWN0ZWQgdGFzay4gQnVnIG9yIGZlYXR1cmU/XG4gICAgICB0aGlzLmRpc3BsYXlSYW5nZSA9IG5ldyBEaXNwbGF5UmFuZ2UoZWFybGllc3RTdGFydCAtIDEsIGxhdGVzdEZpbmlzaCArIDEpO1xuXG4gICAgICBmaWx0ZXJGdW5jID0gKF90YXNrOiBUYXNrLCB0YXNrSW5kZXg6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgICAgICBpZiAoc3RhcnRBbmRGaW5pc2guaW5jbHVkZXModGFza0luZGV4KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5laWdoYm9yU2V0Lmhhcyh0YXNrSW5kZXgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBkdXJhdGlvbkRpc3BsYXkgPSAodDogbnVtYmVyKSA9PlxuICAgICAgdGhpcy5wbGFuLmR1cmF0aW9uVW5pdHMuZGlzcGxheVRpbWUodCk7XG5cbiAgICBjb25zdCB0YXNrSXNTdGFydGVkID0gKHRhc2tJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLnBsYW4uZ2V0VGFza0NvbXBsZXRpb24odGFza0luZGV4KTtcbiAgICAgIGlmICghcmV0Lm9rKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQudmFsdWUuc3RhZ2UgIT09ICd1bnN0YXJ0ZWQnO1xuICAgIH07XG5cbiAgICBsZXQgdG9kYXk6IG51bWJlciA9IC0xO1xuICAgIGlmIChcbiAgICAgIHRoaXMucGxhbi5zdGF0dXMuc3RhZ2UgPT09ICdzdGFydGVkJyAmJlxuICAgICAgdGhpcy5wbGFuLmR1cmF0aW9uVW5pdHMua2luZCgpICE9PSAnVW5pdGxlc3MnXG4gICAgKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLnBsYW4uZHVyYXRpb25Vbml0cy5wYXJzZShcbiAgICAgICAgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKVxuICAgICAgKTtcbiAgICAgIGlmIChyZXQub2spIHtcbiAgICAgICAgdG9kYXkgPSByZXQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmFkYXJPcHRzOiBSZW5kZXJPcHRpb25zID0ge1xuICAgICAgZm9udFNpemVQeDogNixcbiAgICAgIGhhc1RleHQ6IGZhbHNlLFxuICAgICAgZGlzcGxheVJhbmdlOiB0aGlzLmRpc3BsYXlSYW5nZSxcbiAgICAgIGRpc3BsYXlSYW5nZVVzYWdlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIGNvbG9yczogdGhlbWUyLFxuICAgICAgaGFzVGltZWxpbmU6IGZhbHNlLFxuICAgICAgaGFzVGFza3M6IHRydWUsXG4gICAgICBoYXNFZGdlczogZmFsc2UsXG4gICAgICBkcmF3VGltZU1hcmtlcnNPblRhc2tzOiBmYWxzZSxcbiAgICAgIHRhc2tMYWJlbDogdGhpcy5nZXRUYXNrTGFiZWxsZXIoKSxcbiAgICAgIHRhc2tEdXJhdGlvbjogdGhpcy5nZXRUYXNrRHVyYXRpb25GdW5jKCksXG4gICAgICB0YXNrRW1waGFzaXplOiB0aGlzLmNyaXRpY2FsUGF0aCxcbiAgICAgIGZpbHRlckZ1bmM6IG51bGwsXG4gICAgICBncm91cEJ5UmVzb3VyY2U6IHRoaXMuZ3JvdXBCeVNlbGVjdGlvbixcbiAgICAgIGhpZ2hsaWdodGVkVGFzazogbnVsbCxcbiAgICAgIHNlbGVjdGVkVGFza0luZGV4OiB0aGlzLnNlbGVjdGVkVGFzayxcbiAgICAgIGR1cmF0aW9uRGlzcGxheTogZHVyYXRpb25EaXNwbGF5LFxuICAgICAgdGFza0lzU3RhcnRlZDogdGFza0lzU3RhcnRlZCxcbiAgICAgIHRvZGF5OiB0b2RheSxcbiAgICB9O1xuXG4gICAgY29uc3Qgem9vbU9wdHM6IFJlbmRlck9wdGlvbnMgPSB7XG4gICAgICBmb250U2l6ZVB4OiB0aGVtZTIuZm9udFNpemUoKSxcbiAgICAgIGhhc1RleHQ6IHRydWUsXG4gICAgICBkaXNwbGF5UmFuZ2U6IHRoaXMuZGlzcGxheVJhbmdlLFxuICAgICAgZGlzcGxheVJhbmdlVXNhZ2U6ICdyZXN0cmljdCcsXG4gICAgICBjb2xvcnM6IHRoZW1lMixcbiAgICAgIGhhc1RpbWVsaW5lOiB0aGlzLnRvcFRpbWVsaW5lLFxuICAgICAgaGFzVGFza3M6IHRydWUsXG4gICAgICBoYXNFZGdlczogdHJ1ZSxcbiAgICAgIGRyYXdUaW1lTWFya2Vyc09uVGFza3M6IHRydWUsXG4gICAgICB0YXNrTGFiZWw6IHRoaXMuZ2V0VGFza0xhYmVsbGVyKCksXG4gICAgICB0YXNrRHVyYXRpb246IHRoaXMuZ2V0VGFza0R1cmF0aW9uRnVuYygpLFxuICAgICAgdGFza0VtcGhhc2l6ZTogdGhpcy5jcml0aWNhbFBhdGgsXG4gICAgICBmaWx0ZXJGdW5jOiBmaWx0ZXJGdW5jLFxuICAgICAgZ3JvdXBCeVJlc291cmNlOiB0aGlzLmdyb3VwQnlTZWxlY3Rpb24sXG4gICAgICBoaWdobGlnaHRlZFRhc2s6IDEsXG4gICAgICBzZWxlY3RlZFRhc2tJbmRleDogdGhpcy5zZWxlY3RlZFRhc2ssXG4gICAgICBkdXJhdGlvbkRpc3BsYXk6IGR1cmF0aW9uRGlzcGxheSxcbiAgICAgIHRhc2tJc1N0YXJ0ZWQ6IHRhc2tJc1N0YXJ0ZWQsXG4gICAgICB0b2RheTogdG9kYXksXG4gICAgfTtcblxuICAgIGNvbnN0IHRpbWVsaW5lT3B0czogUmVuZGVyT3B0aW9ucyA9IHtcbiAgICAgIGZvbnRTaXplUHg6IHRoZW1lMi5mb250U2l6ZSgpLFxuICAgICAgaGFzVGV4dDogdHJ1ZSxcbiAgICAgIGRpc3BsYXlSYW5nZTogdGhpcy5kaXNwbGF5UmFuZ2UsXG4gICAgICBkaXNwbGF5UmFuZ2VVc2FnZTogJ3Jlc3RyaWN0JyxcbiAgICAgIGNvbG9yczogdGhlbWUyLFxuICAgICAgaGFzVGltZWxpbmU6IHRydWUsXG4gICAgICBoYXNUYXNrczogZmFsc2UsXG4gICAgICBoYXNFZGdlczogdHJ1ZSxcbiAgICAgIGRyYXdUaW1lTWFya2Vyc09uVGFza3M6IHRydWUsXG4gICAgICB0YXNrTGFiZWw6IHRoaXMuZ2V0VGFza0xhYmVsbGVyKCksXG4gICAgICB0YXNrRHVyYXRpb246IHRoaXMuZ2V0VGFza0R1cmF0aW9uRnVuYygpLFxuICAgICAgdGFza0VtcGhhc2l6ZTogdGhpcy5jcml0aWNhbFBhdGgsXG4gICAgICBmaWx0ZXJGdW5jOiBmaWx0ZXJGdW5jLFxuICAgICAgZ3JvdXBCeVJlc291cmNlOiB0aGlzLmdyb3VwQnlTZWxlY3Rpb24sXG4gICAgICBoaWdobGlnaHRlZFRhc2s6IG51bGwsXG4gICAgICBzZWxlY3RlZFRhc2tJbmRleDogdGhpcy5zZWxlY3RlZFRhc2ssXG4gICAgICBkdXJhdGlvbkRpc3BsYXk6IGR1cmF0aW9uRGlzcGxheSxcbiAgICAgIHRhc2tJc1N0YXJ0ZWQ6IHRhc2tJc1N0YXJ0ZWQsXG4gICAgICB0b2RheTogdG9kYXksXG4gICAgfTtcblxuICAgIGNvbnN0IHJldCA9IHRoaXMucGFpbnRPbmVDaGFydCgnI3JhZGFyJywgcmFkYXJPcHRzKTtcbiAgICBpZiAoIXJldC5vaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJhZGFyU2NhbGUgPSByZXQudmFsdWUuc2NhbGU7XG5cbiAgICB0aGlzLnBhaW50T25lQ2hhcnQoJyN0aW1lbGluZScsIHRpbWVsaW5lT3B0cyk7XG4gICAgY29uc3Qgem9vbVJldCA9IHRoaXMucGFpbnRPbmVDaGFydCgnI3pvb21lZCcsIHpvb21PcHRzLCAnI292ZXJsYXknKTtcbiAgICBpZiAoem9vbVJldC5vaykge1xuICAgICAgdGhpcy51cGRhdGVIaWdobGlnaHRGcm9tTW91c2VQb3MgPVxuICAgICAgICB6b29tUmV0LnZhbHVlLnVwZGF0ZUhpZ2hsaWdodEZyb21Nb3VzZVBvcztcbiAgICAgIGlmICh6b29tUmV0LnZhbHVlLnNlbGVjdGVkVGFza0xvY2F0aW9uICE9PSBudWxsICYmIHNjcm9sbFRvU2VsZWN0ZWQpIHtcbiAgICAgICAgbGV0IHRvcCA9IDA7XG4gICAgICAgIGlmICghdGhpcy5mb2N1c09uVGFzaykge1xuICAgICAgICAgIHRvcCA9IHpvb21SZXQudmFsdWUuc2VsZWN0ZWRUYXNrTG9jYXRpb24ueTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjaGFydC1wYXJlbnQnKSEuc2Nyb2xsVG8oe1xuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLnRpbWVFbmQoJ3BhaW50Q2hhcnQnKTtcbiAgfVxuXG4gIHByZXBhcmVDYW52YXMoXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcbiAgICBjYW52YXNXaWR0aDogbnVtYmVyLFxuICAgIGNhbnZhc0hlaWdodDogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgKTogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHtcbiAgICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcblxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcbiAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICByZXR1cm4gY3R4O1xuICB9XG5cbiAgcGFpbnRPbmVDaGFydChcbiAgICBjYW52YXNJRDogc3RyaW5nLFxuICAgIG9wdHM6IFJlbmRlck9wdGlvbnMsXG4gICAgb3ZlcmxheUlEOiBzdHJpbmcgPSAnJ1xuICApOiBSZXN1bHQ8UmVuZGVyUmVzdWx0PiB7XG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5xdWVyeVNlbGVjdG9yPEhUTUxDYW52YXNFbGVtZW50PihjYW52YXNJRCkhO1xuICAgIGNvbnN0IHBhcmVudCA9IGNhbnZhcyEucGFyZW50RWxlbWVudCE7XG4gICAgY29uc3QgcmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICBjb25zdCB3aWR0aCA9IHBhcmVudC5jbGllbnRXaWR0aCAtIEZPTlRfU0laRV9QWDtcbiAgICBsZXQgaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDtcbiAgICBjb25zdCBjYW52YXNXaWR0aCA9IE1hdGguY2VpbCh3aWR0aCAqIHJhdGlvKTtcbiAgICBsZXQgY2FudmFzSGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAqIHJhdGlvKTtcblxuICAgIGNvbnN0IG5ld0hlaWdodCA9IHN1Z2dlc3RlZENhbnZhc0hlaWdodChcbiAgICAgIGNhbnZhcyxcbiAgICAgIHRoaXMuc3BhbnMsXG4gICAgICBvcHRzLFxuICAgICAgdGhpcy5wbGFuLmNoYXJ0LlZlcnRpY2VzLmxlbmd0aCArIDIgLy8gVE9ETyAtIFdoeSBkbyB3ZSBuZWVkIHRoZSArMiBoZXJlIT9cbiAgICApO1xuICAgIGNhbnZhc0hlaWdodCA9IG5ld0hlaWdodDtcbiAgICBoZWlnaHQgPSBuZXdIZWlnaHQgLyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcblxuICAgIGxldCBvdmVybGF5OiBIVE1MQ2FudmFzRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICAgIGlmIChvdmVybGF5SUQpIHtcbiAgICAgIG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxDYW52YXNFbGVtZW50PihvdmVybGF5SUQpITtcbiAgICAgIHRoaXMucHJlcGFyZUNhbnZhcyhvdmVybGF5LCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgY29uc3QgY3R4ID0gdGhpcy5wcmVwYXJlQ2FudmFzKFxuICAgICAgY2FudmFzLFxuICAgICAgY2FudmFzV2lkdGgsXG4gICAgICBjYW52YXNIZWlnaHQsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgICk7XG5cbiAgICByZXR1cm4gcmVuZGVyVGFza3NUb0NhbnZhcyhcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhbnZhcyxcbiAgICAgIGN0eCxcbiAgICAgIHRoaXMucGxhbixcbiAgICAgIHRoaXMuc3BhbnMsXG4gICAgICBvcHRzLFxuICAgICAgb3ZlcmxheVxuICAgICk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdleHBsYW4tbWFpbicsIEV4cGxhbk1haW4pO1xuIiwgImltcG9ydCB7IFRlbXBsYXRlUmVzdWx0LCBodG1sLCByZW5kZXIgfSBmcm9tIFwibGl0LWh0bWxcIjtcbmltcG9ydCB7IEV4cGxhbk1haW4gfSBmcm9tIFwiLi4vZXhwbGFuTWFpbi9leHBsYW5NYWluXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVJhbmRvbVBsYW4gfSBmcm9tIFwiLi4vZ2VuZXJhdGUvZ2VuZXJhdGVcIjtcblxuZXhwb3J0IGNsYXNzIERldmVsb3BlclBhbmVsRGlhbG9nIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBwcml2YXRlIGV4cGxhbk1haW46IEV4cGxhbk1haW4gfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIHJlbmRlcigpIHtcbiAgICByZW5kZXIodGhpcy50ZW1wbGF0ZSgpLCB0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgdGVtcGxhdGUoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpYWxvZz5cbiAgICAgICAgPGJ1dHRvbiBAY2xpY2s9JHsoKSA9PiB0aGlzLmdlbmVyYXRlUmFuZG9tUGxhbigpfT5HZW5lcmF0ZTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIEBjbGljaz0keygpID0+IHRoaXMuZXhwbGFuTWFpbiEudG9nZ2xlVG9wVGltZWxpbmUoKX0+XG4gICAgICAgICAgVG9nZ2xlIFRvcCBUaW1lbGluZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRpYWxvZy1mb290ZXJcIj5cbiAgICAgICAgICA8YnV0dG9uIEBjbGljaz0keygpID0+IHRoaXMuY2FuY2VsKCl9PkNsb3NlPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaWFsb2c+XG4gICAgYDtcbiAgfVxuXG4gIGdlbmVyYXRlUmFuZG9tUGxhbigpIHtcbiAgICB0aGlzLmV4cGxhbk1haW4hLnBsYW4gPSBnZW5lcmF0ZVJhbmRvbVBsYW4oKTtcbiAgICB0aGlzLmV4cGxhbk1haW4hLnBsYW5EZWZpbml0aW9uSGFzQmVlbkNoYW5nZWQoKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCJkaWFsb2dcIikhLmNsb3NlKCk7XG4gIH1cblxuICBzaG93RGlhbG9nKGV4cGxhbk1haW46IEV4cGxhbk1haW4pIHtcbiAgICB0aGlzLmV4cGxhbk1haW4gPSBleHBsYW5NYWluO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKFwiZGlhbG9nXCIpIS5zaG93TW9kYWwoKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJkZXZlbG9wZXItcGFuZWxcIiwgRGV2ZWxvcGVyUGFuZWxEaWFsb2cpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBR0MsT0FBQyxDQUFDLE1BQU0sUUFBUTtBQUNmLFlBQUcsT0FBTyxXQUFXLGNBQWMsT0FBTyxJQUFLLFFBQU8sQ0FBQyxHQUFHLEdBQUc7QUFBQSxpQkFDckQsT0FBTyxXQUFXLFlBQVksT0FBTyxRQUFTLFFBQU8sVUFBVSxJQUFJO0FBQUEsWUFDdEUsTUFBSyxXQUFXLElBQUksSUFBSTtBQUFBLE1BQy9CLEdBQUcsU0FBTSxDQUFBQSxPQUFLO0FBQ1o7QUFFQSxZQUFJLFNBQVMsQ0FBQyxRQUFRLFdBQVc7QUFDL0IsY0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFRLFFBQU87QUFFOUIsY0FBSSxpQkFBaUIsa0JBQWtCLE1BQU07QUFDN0MsY0FBRyxDQUFDLFdBQVcsTUFBTSxFQUFHLFVBQVMsWUFBWSxNQUFNO0FBRW5ELGNBQUksaUJBQWlCLGVBQWU7QUFDcEMsZUFBSSxpQkFBaUIsT0FBTyxlQUFlLGVBQWdCLFFBQU87QUFFbEUsaUJBQU8sVUFBVSxnQkFBZ0IsTUFBTTtBQUFBLFFBQ3pDO0FBRUEsWUFBSSxLQUFLLENBQUMsUUFBUSxTQUFTLFlBQVk7QUFDckMsY0FBRyxDQUFDLE9BQVEsUUFBTyxTQUFTLE1BQU0sSUFBSSxTQUFTLE9BQU8sSUFBSTtBQUUxRCxjQUFJLGlCQUFpQixrQkFBa0IsTUFBTTtBQUM3QyxjQUFJLGlCQUFpQixlQUFlO0FBQ3BDLGNBQUksZ0JBQWlCLGVBQWU7QUFFcEMsY0FBSSxZQUFZLGlCQUFrQixTQUFTLGFBQWEsQ0FBRTtBQUMxRCxjQUFJLFFBQVksU0FBUyxTQUFTO0FBRWxDLGNBQUksYUFBYTtBQUFHLGNBQUksZUFBZTtBQUN2QyxjQUFJLGFBQWEsUUFBUTtBQUV6QixtQkFBUyxZQUFZQyxTQUFRO0FBQzNCLGdCQUFHLGFBQWEsT0FBTztBQUFFLGdCQUFFLElBQUlBLE9BQU07QUFBRyxnQkFBRTtBQUFBLFlBQVcsT0FDaEQ7QUFDSCxnQkFBRTtBQUNGLGtCQUFHQSxRQUFPLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBUSxHQUFFLFdBQVdBLE9BQU07QUFBQSxZQUN6RDtBQUFBLFVBQ0Y7QUFLQSxjQUFHLFNBQVMsS0FBSztBQUNmLGdCQUFJLE1BQU0sUUFBUTtBQUNsQixxQkFBUUMsS0FBSSxHQUFHQSxLQUFJLFlBQVksRUFBRUEsSUFBRztBQUFFLGtCQUFJLE1BQU0sUUFBUUEsRUFBQztBQUN2RCxrQkFBSSxTQUFTLFNBQVMsS0FBSyxHQUFHO0FBQzlCLGtCQUFHLENBQUMsT0FBUTtBQUNaLGtCQUFHLENBQUMsV0FBVyxNQUFNLEVBQUcsVUFBUyxZQUFZLE1BQU07QUFFbkQsbUJBQUksaUJBQWlCLE9BQU8sZUFBZSxlQUFnQjtBQUMzRCxrQkFBSSxTQUFTLFVBQVUsZ0JBQWdCLE1BQU07QUFDN0Msa0JBQUcsV0FBVyxLQUFNO0FBQ3BCLGtCQUFHLE9BQU8sU0FBUyxVQUFXO0FBRTlCLHFCQUFPLE1BQU07QUFDYiwwQkFBWSxNQUFNO0FBQUEsWUFDcEI7QUFBQSxVQUdGLFdBQVUsU0FBUyxNQUFNO0FBQ3ZCLGdCQUFJLE9BQU8sUUFBUTtBQUNuQixnQkFBSSxVQUFVLEtBQUs7QUFFbkIsa0JBQU8sVUFBUUEsS0FBSSxHQUFHQSxLQUFJLFlBQVksRUFBRUEsSUFBRztBQUFFLGtCQUFJLE1BQU0sUUFBUUEsRUFBQztBQUU5RDtBQUNFLG9CQUFJLGVBQWU7QUFDbkIseUJBQVMsT0FBTyxHQUFHLE9BQU8sU0FBUyxFQUFFLE1BQU07QUFDekMsc0JBQUksTUFBTSxLQUFLLElBQUk7QUFDbkIsc0JBQUksU0FBUyxTQUFTLEtBQUssR0FBRztBQUM5QixzQkFBRyxDQUFDLFFBQVE7QUFBRSwrQkFBVyxJQUFJLElBQUk7QUFBVTtBQUFBLGtCQUFTO0FBQ3BELHNCQUFHLENBQUMsV0FBVyxNQUFNLEVBQUcsVUFBUyxZQUFZLE1BQU07QUFDbkQsNkJBQVcsSUFBSSxJQUFJO0FBRW5CLGtDQUFnQixPQUFPO0FBQUEsZ0JBQ3pCO0FBRUEscUJBQUksaUJBQWlCLGtCQUFrQixlQUFnQjtBQUFBLGNBQ3pEO0FBRUEsa0JBQUcsY0FBZSxVQUFRQSxLQUFFLEdBQUdBLEtBQUUsZUFBZSxjQUFjLFFBQVFBLEtBQUssc0JBQXFCQSxFQUFDLElBQUk7QUFFckcsdUJBQVMsT0FBTyxHQUFHLE9BQU8sU0FBUyxFQUFFLE1BQU07QUFDekMseUJBQVMsV0FBVyxJQUFJO0FBQ3hCLG9CQUFHLFdBQVcsVUFBVTtBQUFFLDZCQUFXLElBQUksSUFBSTtBQUFVO0FBQUEsZ0JBQVM7QUFFaEUsMkJBQVcsSUFBSSxJQUFJO0FBQUEsa0JBQVU7QUFBQSxrQkFBZ0I7QUFBQTtBQUFBLGtCQUF3QjtBQUFBO0FBQUEsa0JBQTZCO0FBQUEsZ0JBQWE7QUFDL0csb0JBQUcsV0FBVyxJQUFJLE1BQU0sTUFBTTtBQUFFLDZCQUFXLElBQUksSUFBSTtBQUFVO0FBQUEsZ0JBQVM7QUFJdEUsb0JBQUcsY0FBZSxVQUFRQSxLQUFFLEdBQUdBLEtBQUUsZUFBZSxjQUFjLFFBQVFBLE1BQUs7QUFDekUsc0JBQUcsd0JBQXdCQSxFQUFDLElBQUksTUFBTztBQUNyQyx3QkFBRyxxQkFBcUJBLEVBQUMsSUFBSSxtQkFBbUI7QUFDOUMsMEJBQUksT0FBTyxxQkFBcUJBLEVBQUMsSUFBSSx3QkFBd0JBLEVBQUMsS0FBSztBQUNuRSwwQkFBRyxNQUFNLHFCQUFxQkEsRUFBQyxFQUFHLHNCQUFxQkEsRUFBQyxJQUFJO0FBQUEsb0JBQzlEO0FBQUEsa0JBQ0Y7QUFDQSxzQkFBRyx3QkFBd0JBLEVBQUMsSUFBSSxxQkFBcUJBLEVBQUMsRUFBRyxzQkFBcUJBLEVBQUMsSUFBSSx3QkFBd0JBLEVBQUM7QUFBQSxnQkFDOUc7QUFBQSxjQUNGO0FBRUEsa0JBQUcsZUFBZTtBQUNoQix5QkFBUUEsS0FBRSxHQUFHQSxLQUFFLGVBQWUsY0FBYyxRQUFRQSxNQUFLO0FBQUUsc0JBQUcscUJBQXFCQSxFQUFDLE1BQU0sa0JBQW1CLFVBQVM7QUFBQSxnQkFBTTtBQUFBLGNBQzlILE9BQU87QUFDTCxvQkFBSSxtQkFBbUI7QUFDdkIseUJBQVFBLEtBQUUsR0FBR0EsS0FBSSxTQUFTQSxNQUFLO0FBQUUsc0JBQUcsV0FBV0EsRUFBQyxFQUFFLFdBQVcsbUJBQW1CO0FBQUUsdUNBQW1CO0FBQU07QUFBQSxrQkFBTTtBQUFBLGdCQUFFO0FBQ25ILG9CQUFHLENBQUMsaUJBQWtCO0FBQUEsY0FDeEI7QUFFQSxrQkFBSSxhQUFhLElBQUksV0FBVyxPQUFPO0FBQ3ZDLHVCQUFRQSxLQUFFLEdBQUdBLEtBQUksU0FBU0EsTUFBSztBQUFFLDJCQUFXQSxFQUFDLElBQUksV0FBV0EsRUFBQztBQUFBLGNBQUU7QUFFL0Qsa0JBQUcsZUFBZTtBQUNoQixvQkFBSSxRQUFRO0FBQ1oseUJBQVFBLEtBQUUsR0FBR0EsS0FBRSxlQUFlLGNBQWMsUUFBUUEsS0FBSyxVQUFTLHFCQUFxQkEsRUFBQztBQUFBLGNBQzFGLE9BQU87QUFHTCxvQkFBSSxRQUFRO0FBQ1oseUJBQVFBLEtBQUUsR0FBR0EsS0FBRSxTQUFTQSxNQUFLO0FBQzNCLHNCQUFJLFNBQVMsV0FBV0EsRUFBQztBQUN6QixzQkFBRyxPQUFPLFNBQVMsTUFBTztBQUN4Qix3QkFBRyxRQUFRLG1CQUFtQjtBQUM1QiwwQkFBSSxPQUFPLFFBQVEsT0FBTyxVQUFVO0FBQ3BDLDBCQUFHLE1BQU0sTUFBTyxTQUFRO0FBQUEsb0JBQzFCO0FBQUEsa0JBQ0Y7QUFDQSxzQkFBRyxPQUFPLFNBQVMsTUFBTyxTQUFRLE9BQU87QUFBQSxnQkFDM0M7QUFBQSxjQUNGO0FBRUEseUJBQVcsTUFBTTtBQUNqQix5QkFBVyxTQUFTO0FBQ3BCLGtCQUFHLFNBQVMsU0FBUztBQUNuQix3QkFBUSxRQUFRLFFBQVEsVUFBVTtBQUNsQyxvQkFBRyxDQUFDLE1BQU87QUFDWCx3QkFBUSxpQkFBaUIsS0FBSztBQUM5QiwyQkFBVyxTQUFTO0FBQUEsY0FDdEI7QUFFQSxrQkFBRyxRQUFRLFVBQVc7QUFDdEIsMEJBQVksVUFBVTtBQUFBLFlBQ3hCO0FBQUEsVUFHRixPQUFPO0FBQ0wscUJBQVFBLEtBQUksR0FBR0EsS0FBSSxZQUFZLEVBQUVBLElBQUc7QUFBRSxrQkFBSSxTQUFTLFFBQVFBLEVBQUM7QUFDMUQsa0JBQUcsQ0FBQyxPQUFRO0FBQ1osa0JBQUcsQ0FBQyxXQUFXLE1BQU0sRUFBRyxVQUFTLFlBQVksTUFBTTtBQUVuRCxtQkFBSSxpQkFBaUIsT0FBTyxlQUFlLGVBQWdCO0FBQzNELGtCQUFJLFNBQVMsVUFBVSxnQkFBZ0IsTUFBTTtBQUM3QyxrQkFBRyxXQUFXLEtBQU07QUFDcEIsa0JBQUcsT0FBTyxTQUFTLFVBQVc7QUFFOUIsMEJBQVksTUFBTTtBQUFBLFlBQ3BCO0FBQUEsVUFDRjtBQUVBLGNBQUcsZUFBZSxFQUFHLFFBQU87QUFDNUIsY0FBSSxVQUFVLElBQUksTUFBTSxVQUFVO0FBQ2xDLG1CQUFRQSxLQUFJLGFBQWEsR0FBR0EsTUFBSyxHQUFHLEVBQUVBLEdBQUcsU0FBUUEsRUFBQyxJQUFJLEVBQUUsS0FBSztBQUM3RCxrQkFBUSxRQUFRLGFBQWE7QUFDN0IsaUJBQU87QUFBQSxRQUNUO0FBS0EsWUFBSUMsYUFBWSxDQUFDLFFBQVEsT0FBSyxPQUFPLFFBQU0sV0FBVztBQUNwRCxjQUFJLFdBQVcsT0FBTyxTQUFTLGFBQWEsT0FBTztBQUVuRCxjQUFJLFNBQWMsT0FBTztBQUN6QixjQUFJLFlBQWMsT0FBTztBQUN6QixjQUFJLFVBQWMsT0FBTztBQUN6QixjQUFJLGNBQWM7QUFDbEIsY0FBSSxTQUFjO0FBQ2xCLGNBQUksV0FBYztBQUNsQixjQUFJLFNBQWM7QUFDbEIsY0FBSUMsU0FBYyxDQUFDO0FBRW5CLG1CQUFRRixLQUFJLEdBQUdBLEtBQUksV0FBVyxFQUFFQSxJQUFHO0FBQUUsZ0JBQUksT0FBTyxPQUFPQSxFQUFDO0FBQ3RELGdCQUFHLFFBQVEsUUFBUSxNQUFNQSxJQUFHO0FBQzFCLGdCQUFFO0FBQ0Ysa0JBQUcsQ0FBQyxRQUFRO0FBQUUseUJBQVM7QUFDckIsb0JBQUcsVUFBVTtBQUNYLGtCQUFBRSxPQUFNLEtBQUssV0FBVztBQUFHLGdDQUFjO0FBQUEsZ0JBQ3pDLE9BQU87QUFDTCxpQ0FBZTtBQUFBLGdCQUNqQjtBQUFBLGNBQ0Y7QUFFQSxrQkFBRyxhQUFhLFFBQVEsUUFBUTtBQUM5QixvQkFBRyxVQUFVO0FBQ1gsaUNBQWU7QUFDZixrQkFBQUEsT0FBTSxLQUFLLFNBQVMsYUFBYSxRQUFRLENBQUM7QUFBRyxnQ0FBYztBQUMzRCxrQkFBQUEsT0FBTSxLQUFLLE9BQU8sT0FBT0YsS0FBRSxDQUFDLENBQUM7QUFBQSxnQkFDL0IsT0FBTztBQUNMLGlDQUFlLE9BQU8sUUFBUSxPQUFPLE9BQU9BLEtBQUUsQ0FBQztBQUFBLGdCQUNqRDtBQUNBO0FBQUEsY0FDRjtBQUFBLFlBQ0YsT0FBTztBQUNMLGtCQUFHLFFBQVE7QUFBRSx5QkFBUztBQUNwQixvQkFBRyxVQUFVO0FBQ1gsa0JBQUFFLE9BQU0sS0FBSyxTQUFTLGFBQWEsUUFBUSxDQUFDO0FBQUcsZ0NBQWM7QUFBQSxnQkFDN0QsT0FBTztBQUNMLGlDQUFlO0FBQUEsZ0JBQ2pCO0FBQUEsY0FDRjtBQUFBLFlBQ0Y7QUFDQSwyQkFBZTtBQUFBLFVBQ2pCO0FBRUEsaUJBQU8sV0FBV0EsU0FBUTtBQUFBLFFBQzVCO0FBR0EsWUFBSSxVQUFVLENBQUMsV0FBVztBQUN4QixjQUFHLE9BQU8sV0FBVyxTQUFVLFVBQVMsS0FBRztBQUFBLG1CQUNuQyxPQUFPLFdBQVcsU0FBVSxVQUFTO0FBQzdDLGNBQUksT0FBTyxpQkFBaUIsTUFBTTtBQUNsQyxpQkFBTyxXQUFXLFFBQVEsRUFBQyxjQUFhLEtBQUssUUFBUSxtQkFBa0IsS0FBSyxZQUFZLFdBQVUsS0FBSyxTQUFRLENBQUM7QUFBQSxRQUNsSDtBQUVBLFlBQUksVUFBVSxNQUFNO0FBQUUsd0JBQWMsTUFBTTtBQUFHLDhCQUFvQixNQUFNO0FBQUEsUUFBRTtBQUFBLFFBU3pFLE1BQU1DLFNBQU87QUFBQSxVQUNYLEtBQUssU0FBUyxJQUFJO0FBQUUsbUJBQU8sS0FBSyxTQUFTLE1BQU0sR0FBRyxLQUFLLFNBQVMsR0FBRyxFQUFFLEtBQUssQ0FBQ0MsSUFBRUMsT0FBSUQsS0FBRUMsRUFBQztBQUFBLFVBQUU7QUFBQSxVQUN0RixLQUFLLFNBQVMsRUFBRSxTQUFTO0FBQUUsbUJBQU8sS0FBSyxXQUFXO0FBQUEsVUFBUTtBQUFBLFVBQzFELENBQUMsV0FBVyxFQUFFLE1BQU0sT0FBTztBQUFFLG1CQUFPSixXQUFVLE1BQU0sTUFBTSxLQUFLO0FBQUEsVUFBRTtBQUFBLFVBQ2pFLEtBQUssT0FBTyxJQUFJO0FBQUUsbUJBQU8sZUFBZSxLQUFLLE1BQU07QUFBQSxVQUFFO0FBQUEsVUFDckQsS0FBSyxPQUFPLEVBQUUsT0FBTztBQUFFLGlCQUFLLFNBQVMsaUJBQWlCLEtBQUs7QUFBQSxVQUFFO0FBQUEsUUFDL0Q7QUFBQSxRQUVBLE1BQU0sbUJBQW1CLE1BQU07QUFBQSxVQUM3QixLQUFLLE9BQU8sSUFBSTtBQUFFLG1CQUFPLGVBQWUsS0FBSyxNQUFNO0FBQUEsVUFBRTtBQUFBLFVBQ3JELEtBQUssT0FBTyxFQUFFLE9BQU87QUFBRSxpQkFBSyxTQUFTLGlCQUFpQixLQUFLO0FBQUEsVUFBRTtBQUFBLFFBQy9EO0FBRUEsWUFBSSxhQUFhLENBQUMsUUFBUSxZQUFZO0FBQ3BDLGdCQUFNLFNBQVMsSUFBSUUsU0FBTztBQUMxQixpQkFBTyxRQUFRLElBQWdCO0FBQy9CLGlCQUFPLEtBQUssSUFBbUIsUUFBUSxPQUF5QjtBQUNoRSxpQkFBTyxTQUF3QixRQUFRLFVBQXlCO0FBQ2hFLGlCQUFPLFdBQXdCLFFBQVEsWUFBeUIsQ0FBQztBQUNqRSxpQkFBTyxlQUF3QixRQUFRLGdCQUF5QjtBQUNoRSxpQkFBTyxvQkFBd0IsUUFBUSxxQkFBeUI7QUFDaEUsaUJBQU8sd0JBQXdCLFFBQVEseUJBQXlCO0FBQ2hFLGlCQUFPLFlBQXdCLFFBQVEsYUFBeUI7QUFDaEUsaUJBQU87QUFBQSxRQUNUO0FBR0EsWUFBSSxpQkFBaUIsV0FBUztBQUM1QixjQUFHLFVBQVUsa0JBQW1CLFFBQU87QUFDdkMsY0FBRyxRQUFRLEVBQUcsUUFBTztBQUNyQixpQkFBTyxLQUFLLFFBQVMsQ0FBQyxRQUFRLE1BQUksVUFBUyxLQUFLO0FBQUEsUUFDbEQ7QUFDQSxZQUFJLG1CQUFtQixxQkFBbUI7QUFDeEMsY0FBRyxvQkFBb0IsRUFBRyxRQUFPO0FBQ2pDLGNBQUcsa0JBQWtCLEVBQUcsUUFBTztBQUMvQixpQkFBTyxJQUFJLEtBQUssSUFBSyxLQUFLLElBQUksZUFBZSxJQUFJLEtBQUssR0FBSSxJQUFJLE9BQU87QUFBQSxRQUN2RTtBQUdBLFlBQUksZ0JBQWdCLENBQUMsV0FBVztBQUM5QixjQUFHLE9BQU8sV0FBVyxTQUFVLFVBQVMsS0FBRztBQUFBLG1CQUNuQyxPQUFPLFdBQVcsU0FBVSxVQUFTO0FBQzdDLG1CQUFTLE9BQU8sS0FBSztBQUNyQixjQUFJLE9BQU8saUJBQWlCLE1BQU07QUFFbEMsY0FBSSxnQkFBZ0IsQ0FBQztBQUNyQixjQUFHLEtBQUssZUFBZTtBQUNyQixnQkFBSSxXQUFXLE9BQU8sTUFBTSxLQUFLO0FBQ2pDLHVCQUFXLENBQUMsR0FBRyxJQUFJLElBQUksUUFBUSxDQUFDO0FBQ2hDLHFCQUFRSCxLQUFFLEdBQUdBLEtBQUUsU0FBUyxRQUFRQSxNQUFLO0FBQ25DLGtCQUFHLFNBQVNBLEVBQUMsTUFBTSxHQUFJO0FBQ3ZCLGtCQUFJLFFBQVEsaUJBQWlCLFNBQVNBLEVBQUMsQ0FBQztBQUN4Qyw0QkFBYyxLQUFLLEVBQUMsWUFBVyxNQUFNLFlBQVksUUFBTyxTQUFTQSxFQUFDLEVBQUUsWUFBWSxHQUFHLGVBQWMsTUFBSyxDQUFDO0FBQUEsWUFDekc7QUFBQSxVQUNGO0FBRUEsaUJBQU8sRUFBQyxZQUFZLEtBQUssWUFBWSxRQUFRLEtBQUssUUFBUSxlQUFlLEtBQUssZUFBZSxVQUFVLEtBQUssVUFBVSxjQUE0QjtBQUFBLFFBQ3BKO0FBSUEsWUFBSSxjQUFjLENBQUMsV0FBVztBQUM1QixjQUFHLE9BQU8sU0FBUyxJQUFLLFFBQU8sUUFBUSxNQUFNO0FBQzdDLGNBQUksaUJBQWlCLGNBQWMsSUFBSSxNQUFNO0FBQzdDLGNBQUcsbUJBQW1CLE9BQVcsUUFBTztBQUN4QywyQkFBaUIsUUFBUSxNQUFNO0FBQy9CLHdCQUFjLElBQUksUUFBUSxjQUFjO0FBQ3hDLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksb0JBQW9CLENBQUMsV0FBVztBQUNsQyxjQUFHLE9BQU8sU0FBUyxJQUFLLFFBQU8sY0FBYyxNQUFNO0FBQ25ELGNBQUksaUJBQWlCLG9CQUFvQixJQUFJLE1BQU07QUFDbkQsY0FBRyxtQkFBbUIsT0FBVyxRQUFPO0FBQ3hDLDJCQUFpQixjQUFjLE1BQU07QUFDckMsOEJBQW9CLElBQUksUUFBUSxjQUFjO0FBQzlDLGlCQUFPO0FBQUEsUUFDVDtBQUdBLFlBQUksTUFBTSxDQUFDLFNBQVMsWUFBWTtBQUM5QixjQUFJLFVBQVUsQ0FBQztBQUFHLGtCQUFRLFFBQVEsUUFBUTtBQUUxQyxjQUFJLFFBQVEsU0FBUyxTQUFTO0FBRTlCLGNBQUcsU0FBUyxLQUFLO0FBQ2YscUJBQVFBLEtBQUUsR0FBRUEsS0FBRSxRQUFRLFFBQU9BLE1BQUs7QUFBRSxrQkFBSSxNQUFNLFFBQVFBLEVBQUM7QUFDckQsa0JBQUksU0FBUyxTQUFTLEtBQUssUUFBUSxHQUFHO0FBQ3RDLGtCQUFHLFVBQVUsS0FBTTtBQUNuQixrQkFBRyxDQUFDLFdBQVcsTUFBTSxFQUFHLFVBQVMsWUFBWSxNQUFNO0FBQ25ELGtCQUFJLFNBQVMsV0FBVyxPQUFPLFFBQVEsRUFBQyxRQUFRLE9BQU8sUUFBUSxJQUFRLENBQUM7QUFDeEUsc0JBQVEsS0FBSyxNQUFNO0FBQUcsa0JBQUcsUUFBUSxVQUFVLE1BQU8sUUFBTztBQUFBLFlBQzNEO0FBQUEsVUFDRixXQUFVLFNBQVMsTUFBTTtBQUN2QixxQkFBUUEsS0FBRSxHQUFFQSxLQUFFLFFBQVEsUUFBT0EsTUFBSztBQUFFLGtCQUFJLE1BQU0sUUFBUUEsRUFBQztBQUNyRCxrQkFBSSxhQUFhLElBQUksV0FBVyxRQUFRLEtBQUssTUFBTTtBQUNuRCx1QkFBUyxPQUFPLFFBQVEsS0FBSyxTQUFTLEdBQUcsUUFBUSxHQUFHLEVBQUUsTUFBTTtBQUMxRCxvQkFBSSxTQUFTLFNBQVMsS0FBSyxRQUFRLEtBQUssSUFBSSxDQUFDO0FBQzdDLG9CQUFHLENBQUMsUUFBUTtBQUFFLDZCQUFXLElBQUksSUFBSTtBQUFVO0FBQUEsZ0JBQVM7QUFDcEQsb0JBQUcsQ0FBQyxXQUFXLE1BQU0sRUFBRyxVQUFTLFlBQVksTUFBTTtBQUNuRCx1QkFBTyxTQUFTO0FBQ2hCLHVCQUFPLFNBQVMsTUFBTTtBQUN0QiwyQkFBVyxJQUFJLElBQUk7QUFBQSxjQUNyQjtBQUNBLHlCQUFXLE1BQU07QUFDakIseUJBQVcsU0FBUztBQUNwQixzQkFBUSxLQUFLLFVBQVU7QUFBRyxrQkFBRyxRQUFRLFVBQVUsTUFBTyxRQUFPO0FBQUEsWUFDL0Q7QUFBQSxVQUNGLE9BQU87QUFDTCxxQkFBUUEsS0FBRSxHQUFFQSxLQUFFLFFBQVEsUUFBT0EsTUFBSztBQUFFLGtCQUFJLFNBQVMsUUFBUUEsRUFBQztBQUN4RCxrQkFBRyxVQUFVLEtBQU07QUFDbkIsa0JBQUcsQ0FBQyxXQUFXLE1BQU0sRUFBRyxVQUFTLFlBQVksTUFBTTtBQUNuRCxxQkFBTyxTQUFTO0FBQ2hCLHFCQUFPLFNBQVMsTUFBTTtBQUN0QixzQkFBUSxLQUFLLE1BQU07QUFBRyxrQkFBRyxRQUFRLFVBQVUsTUFBTyxRQUFPO0FBQUEsWUFDM0Q7QUFBQSxVQUNGO0FBRUEsaUJBQU87QUFBQSxRQUNUO0FBR0EsWUFBSSxZQUFZLENBQUMsZ0JBQWdCLFVBQVUsY0FBWSxPQUFPLG9CQUFrQixVQUFVO0FBQ3hGLGNBQUcsZ0JBQWMsU0FBUyxlQUFlLGNBQWUsUUFBTyxnQkFBZ0IsZ0JBQWdCLFVBQVUsaUJBQWlCO0FBRTFILGNBQUksY0FBbUIsZUFBZTtBQUN0QyxjQUFJLG1CQUFtQixlQUFlO0FBQ3RDLGNBQUksa0JBQW1CLGlCQUFpQixDQUFDO0FBQ3pDLGNBQUksbUJBQW1CLFNBQVM7QUFDaEMsY0FBSSxZQUFtQixpQkFBaUI7QUFDeEMsY0FBSSxZQUFtQixpQkFBaUI7QUFDeEMsY0FBSSxVQUFtQjtBQUN2QixjQUFJLFVBQW1CO0FBQ3ZCLGNBQUksbUJBQW1CO0FBS3ZCLHFCQUFRO0FBQ04sZ0JBQUksVUFBVSxvQkFBb0IsaUJBQWlCLE9BQU87QUFDMUQsZ0JBQUcsU0FBUztBQUNWLDRCQUFjLGtCQUFrQixJQUFJO0FBQ3BDLGdCQUFFO0FBQVMsa0JBQUcsWUFBWSxVQUFXO0FBQ3JDLGdDQUFrQixpQkFBaUIsT0FBTztBQUFBLFlBQzVDO0FBQ0EsY0FBRTtBQUFTLGdCQUFHLFdBQVcsVUFBVyxRQUFPO0FBQUEsVUFDN0M7QUFFQSxjQUFJLFVBQVU7QUFDZCxjQUFJLGdCQUFnQjtBQUNwQixjQUFJLG1CQUFtQjtBQUV2QixjQUFJLHVCQUF1QixTQUFTO0FBQ3BDLGNBQUcseUJBQXlCLEtBQU0sd0JBQXVCLFNBQVMsd0JBQXdCLDRCQUE0QixTQUFTLE1BQU07QUFDckksb0JBQVUsY0FBYyxDQUFDLE1BQUksSUFBSSxJQUFJLHFCQUFxQixjQUFjLENBQUMsSUFBRSxDQUFDO0FBSzVFLGNBQUksaUJBQWlCO0FBQ3JCLGNBQUcsWUFBWSxVQUFXLFlBQVE7QUFDaEMsZ0JBQUcsV0FBVyxXQUFXO0FBRXZCLGtCQUFHLFdBQVcsRUFBRztBQUVqQixnQkFBRTtBQUFnQixrQkFBRyxpQkFBaUIsSUFBSztBQUUzQyxnQkFBRTtBQUNGLGtCQUFJLFlBQVksY0FBYyxFQUFFLGdCQUFnQjtBQUNoRCx3QkFBVSxxQkFBcUIsU0FBUztBQUFBLFlBRTFDLE9BQU87QUFDTCxrQkFBSSxVQUFVLGlCQUFpQixPQUFPLE1BQU0saUJBQWlCLE9BQU87QUFDcEUsa0JBQUcsU0FBUztBQUNWLDhCQUFjLGtCQUFrQixJQUFJO0FBQ3BDLGtCQUFFO0FBQVMsb0JBQUcsWUFBWSxXQUFXO0FBQUUsa0NBQWdCO0FBQU07QUFBQSxnQkFBTTtBQUNuRSxrQkFBRTtBQUFBLGNBQ0osT0FBTztBQUNMLDBCQUFVLHFCQUFxQixPQUFPO0FBQUEsY0FDeEM7QUFBQSxZQUNGO0FBQUEsVUFDRjtBQUdBLGNBQUksaUJBQWlCLGFBQWEsSUFBSSxLQUFLLFNBQVMsYUFBYSxRQUFRLGFBQWEsY0FBYyxDQUFDLENBQUM7QUFDdEcsY0FBSSxjQUFjLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLGNBQUksdUJBQXVCLENBQUMsY0FBYyxRQUFRLG1CQUFpQixLQUFLLFNBQVMsc0JBQXNCLGlCQUFlLENBQUMsTUFBTTtBQUc3SCxjQUFHLGVBQWUsQ0FBQyxzQkFBc0I7QUFDdkMscUJBQVFBLEtBQUUsR0FBR0EsS0FBRSxxQkFBcUIsUUFBUUEsS0FBRSxxQkFBcUJBLEVBQUMsR0FBRztBQUNyRSxrQkFBR0EsTUFBSyxlQUFnQjtBQUV4Qix1QkFBUU0sS0FBRSxHQUFHQSxLQUFFLFdBQVdBLEtBQUssS0FBRyxpQkFBaUJBLEVBQUMsTUFBTSxTQUFTLGtCQUFrQk4sS0FBRU0sRUFBQyxFQUFHO0FBQzNGLGtCQUFHQSxPQUFNLFdBQVc7QUFBRSxpQ0FBaUJOO0FBQUcsdUNBQXVCO0FBQU07QUFBQSxjQUFNO0FBQUEsWUFDL0U7QUFBQSxVQUNGO0FBTUEsY0FBSSxpQkFBaUIsYUFBVztBQUM5QixnQkFBSU8sU0FBUTtBQUVaLGdCQUFJLHVCQUF1QjtBQUMzQixxQkFBUVAsS0FBSSxHQUFHQSxLQUFJLFdBQVcsRUFBRUEsSUFBRztBQUNqQyxrQkFBRyxRQUFRQSxFQUFDLElBQUksUUFBUUEsS0FBRSxDQUFDLE1BQU0sR0FBRztBQUFDLGdCQUFBTyxVQUFTLFFBQVFQLEVBQUM7QUFBRyxrQkFBRTtBQUFBLGNBQW9CO0FBQUEsWUFDbEY7QUFDQSxnQkFBSSxvQkFBb0IsUUFBUSxZQUFVLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxZQUFVO0FBRXZFLFlBQUFPLFdBQVUsS0FBRyxxQkFBcUI7QUFFbEMsZ0JBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRyxDQUFBQSxVQUFTLFFBQVEsQ0FBQyxJQUFFLFFBQVEsQ0FBQyxJQUFFO0FBRXBELGdCQUFHLENBQUMsZUFBZTtBQUNqQixjQUFBQSxVQUFTO0FBQUEsWUFDWCxPQUFPO0FBRUwsa0JBQUkseUJBQXlCO0FBQzdCLHVCQUFRUCxLQUFJLHFCQUFxQixDQUFDLEdBQUdBLEtBQUksV0FBV0EsS0FBRSxxQkFBcUJBLEVBQUMsRUFBRyxHQUFFO0FBRWpGLGtCQUFHLHlCQUF5QixHQUFJLENBQUFPLFdBQVUseUJBQXVCLE1BQUk7QUFBQSxZQUN2RTtBQUVBLFlBQUFBLFdBQVUsWUFBWSxhQUFXO0FBRWpDLGdCQUFHLFlBQXNCLENBQUFBLFVBQVMsSUFBRSxZQUFVLFlBQVU7QUFDeEQsZ0JBQUcscUJBQXNCLENBQUFBLFVBQVMsSUFBRSxZQUFVLFlBQVU7QUFFeEQsWUFBQUEsV0FBVSxZQUFZLGFBQVc7QUFFakMsbUJBQU9BO0FBQUEsVUFDVDtBQUVBLGNBQUcsQ0FBQyxlQUFlO0FBQ2pCLGdCQUFHLFlBQWEsVUFBUVAsS0FBRSxHQUFHQSxLQUFFLFdBQVcsRUFBRUEsR0FBRyxlQUFjQSxFQUFDLElBQUksaUJBQWVBO0FBQ2pGLGdCQUFJLGNBQWM7QUFDbEIsZ0JBQUksUUFBUSxlQUFlLFdBQVc7QUFBQSxVQUN4QyxPQUFPO0FBQ0wsZ0JBQUcsc0JBQXNCO0FBQ3ZCLHVCQUFRQSxLQUFFLEdBQUdBLEtBQUUsV0FBVyxFQUFFQSxHQUFHLGVBQWNBLEVBQUMsSUFBSSxpQkFBZUE7QUFDakUsa0JBQUksY0FBYztBQUNsQixrQkFBSSxRQUFRLGVBQWUsYUFBYTtBQUFBLFlBQzFDLE9BQU87QUFDTCxrQkFBSSxjQUFjO0FBQ2xCLGtCQUFJLFFBQVEsZUFBZSxhQUFhO0FBQUEsWUFDMUM7QUFBQSxVQUNGO0FBRUEsbUJBQVMsU0FBUztBQUVsQixtQkFBUUEsS0FBSSxHQUFHQSxLQUFJLFdBQVcsRUFBRUEsR0FBRyxVQUFTLFNBQVNBLEVBQUMsSUFBSSxZQUFZQSxFQUFDO0FBQ3ZFLG1CQUFTLFNBQVMsTUFBTTtBQUV4QixnQkFBTSxTQUFZLElBQUlHLFNBQU87QUFDN0IsaUJBQU8sU0FBVyxTQUFTO0FBQzNCLGlCQUFPLFNBQVcsU0FBUztBQUMzQixpQkFBTyxXQUFXLFNBQVM7QUFDM0IsaUJBQU87QUFBQSxRQUNUO0FBQ0EsWUFBSSxrQkFBa0IsQ0FBQyxnQkFBZ0IsUUFBUSxzQkFBc0I7QUFDbkUsY0FBSSxlQUFlLG9CQUFJLElBQUk7QUFDM0IsY0FBSSxRQUFRO0FBQ1osY0FBSSxTQUFTO0FBRWIsY0FBSSwrQkFBK0I7QUFDbkMsY0FBSSxXQUFXLGVBQWU7QUFDOUIsY0FBSSxjQUFjLFNBQVM7QUFDM0IsY0FBSSxhQUFhO0FBR2pCLGNBQUksNEJBQTRCLE1BQU07QUFDcEMscUJBQVFILEtBQUUsYUFBVyxHQUFHQSxNQUFHLEdBQUdBLEtBQUssUUFBTyxzQkFBc0IsNEJBQTRCQSxLQUFFLElBQUksQ0FBQyxDQUFDLElBQUksNEJBQTRCQSxLQUFFLElBQUksQ0FBQztBQUFBLFVBQzdJO0FBRUEsY0FBSSxtQkFBbUI7QUFDdkIsbUJBQVFBLEtBQUUsR0FBR0EsS0FBRSxhQUFhLEVBQUVBLElBQUc7QUFDL0Isb0NBQXdCQSxFQUFDLElBQUk7QUFDN0IsZ0JBQUksU0FBUyxTQUFTQSxFQUFDO0FBRXZCLHFCQUFTLFVBQVUsUUFBUSxNQUFNO0FBQ2pDLGdCQUFHLG1CQUFtQjtBQUNwQixrQkFBRyxXQUFXLEtBQU07QUFDcEIsaUNBQW1CO0FBQUEsWUFDckIsT0FBTztBQUNMLGtCQUFHLFdBQVcsTUFBTTtBQUFDLDBDQUEwQjtBQUFHLHVCQUFPO0FBQUEsY0FBSTtBQUFBLFlBQy9EO0FBR0EsZ0JBQUksa0JBQWtCQSxPQUFNLGNBQWM7QUFDMUMsZ0JBQUcsQ0FBQyxpQkFBaUI7QUFDbkIsa0JBQUksVUFBVSxPQUFPO0FBRXJCLGtCQUFJLGdDQUFnQztBQUNwQyx1QkFBUUEsS0FBRSxHQUFHQSxLQUFFLFFBQVEsTUFBSSxHQUFHQSxNQUFLO0FBQ2pDLG9CQUFHLFFBQVFBLEtBQUUsQ0FBQyxJQUFJLFFBQVFBLEVBQUMsTUFBTSxHQUFHO0FBQ2xDLGtEQUFnQztBQUFPO0FBQUEsZ0JBQ3pDO0FBQUEsY0FDRjtBQUVBLGtCQUFHLCtCQUErQjtBQUNoQyxvQkFBSSxvQkFBb0IsUUFBUSxRQUFRLE1BQUksQ0FBQyxJQUFJO0FBQ2pELG9CQUFJLFlBQVksT0FBTyxzQkFBc0Isb0JBQWtCLENBQUM7QUFDaEUseUJBQVFBLEtBQUUsb0JBQWtCLEdBQUdBLE1BQUcsR0FBR0EsTUFBSztBQUN4QyxzQkFBRyxjQUFjLE9BQU8sc0JBQXNCQSxFQUFDLEVBQUc7QUFDbEQseUJBQU8sc0JBQXNCQSxFQUFDLElBQUk7QUFDbEMsOENBQTRCLGFBQVcsSUFBSSxDQUFDLElBQUlBO0FBQ2hELDhDQUE0QixhQUFXLElBQUksQ0FBQyxJQUFJO0FBQ2hEO0FBQUEsZ0JBQ0Y7QUFBQSxjQUNGO0FBQUEsWUFDRjtBQUVBLHFCQUFTLE9BQU8sU0FBUztBQUN6QixvQ0FBd0JBLEVBQUMsSUFBSSxPQUFPLFNBQVM7QUFHN0MsZ0JBQUcsT0FBTyxTQUFTLENBQUMsSUFBSSw4QkFBOEI7QUFDcEQsd0JBQVUsK0JBQStCLE9BQU8sU0FBUyxDQUFDLEtBQUs7QUFBQSxZQUNqRTtBQUNBLDJDQUErQixPQUFPLFNBQVMsQ0FBQztBQUVoRCxxQkFBUVEsS0FBRSxHQUFHQSxLQUFFLE9BQU8sU0FBUyxLQUFLLEVBQUVBLEdBQUcsY0FBYSxJQUFJLE9BQU8sU0FBU0EsRUFBQyxDQUFDO0FBQUEsVUFDOUU7QUFFQSxjQUFHLHFCQUFxQixDQUFDLGlCQUFrQixRQUFPO0FBRWxELG9DQUEwQjtBQUcxQixjQUFJLG9CQUFvQjtBQUFBLFlBQVU7QUFBQSxZQUFnQjtBQUFBO0FBQUEsWUFBd0I7QUFBQSxVQUFJO0FBQzlFLGNBQUcsc0JBQXNCLFFBQVEsa0JBQWtCLFNBQVMsT0FBTztBQUNqRSxnQkFBRyxtQkFBbUI7QUFDcEIsdUJBQVFSLEtBQUUsR0FBR0EsS0FBRSxhQUFhLEVBQUVBLElBQUc7QUFDL0Isd0NBQXdCQSxFQUFDLElBQUksa0JBQWtCLFNBQVM7QUFBQSxjQUMxRDtBQUFBLFlBQ0Y7QUFDQSxtQkFBTztBQUFBLFVBQ1Q7QUFFQSxjQUFHLGtCQUFtQixVQUFTO0FBQy9CLGlCQUFPLFNBQVM7QUFFaEIsY0FBSUEsS0FBSTtBQUNSLG1CQUFTLFNBQVMsYUFBYyxRQUFPLFNBQVNBLElBQUcsSUFBSTtBQUN2RCxpQkFBTyxTQUFTLE1BQU1BO0FBRXRCLGlCQUFPO0FBQUEsUUFDVDtBQUdBLFlBQUksaUJBQWlCLENBQUMsUUFBUSxJQUFJLFFBQVEsdUJBQXVCLFdBQVMsTUFBTSxVQUFVLEtBQUssQ0FBQyxFQUFFLFFBQVEsb0JBQW9CLEVBQUU7QUFFaEksWUFBSSxtQkFBbUIsQ0FBQyxRQUFRO0FBQzlCLGdCQUFNLGVBQWUsR0FBRztBQUN4QixjQUFJLFNBQVMsSUFBSTtBQUNqQixjQUFJLFFBQVEsSUFBSSxZQUFZO0FBQzVCLGNBQUksYUFBYSxDQUFDO0FBQ2xCLGNBQUksV0FBVztBQUNmLGNBQUksZ0JBQWdCO0FBRXBCLG1CQUFRQSxLQUFJLEdBQUdBLEtBQUksUUFBUSxFQUFFQSxJQUFHO0FBQzlCLGdCQUFJLFlBQVksV0FBV0EsRUFBQyxJQUFJLE1BQU0sV0FBV0EsRUFBQztBQUVsRCxnQkFBRyxjQUFjLElBQUk7QUFDbkIsOEJBQWdCO0FBQ2hCO0FBQUEsWUFDRjtBQUVBLGdCQUFJLE1BQU0sYUFBVyxNQUFJLGFBQVcsTUFBTSxZQUFVLEtBQzFDLGFBQVcsTUFBSSxhQUFXLEtBQU0sS0FFaEMsYUFBVyxNQUFxQixLQUNBO0FBQzFDLHdCQUFZLEtBQUc7QUFBQSxVQUNqQjtBQUVBLGlCQUFPLEVBQUMsWUFBdUIsVUFBbUIsZUFBNkIsUUFBTyxNQUFLO0FBQUEsUUFDN0Y7QUFDQSxZQUFJLDBCQUEwQixDQUFDLFdBQVc7QUFDeEMsY0FBSSxZQUFZLE9BQU87QUFDdkIsY0FBSSxtQkFBbUIsQ0FBQztBQUFHLGNBQUksc0JBQXNCO0FBQ3JELGNBQUksV0FBVztBQUNmLGNBQUksY0FBYztBQUNsQixtQkFBUUEsS0FBSSxHQUFHQSxLQUFJLFdBQVcsRUFBRUEsSUFBRztBQUNqQyxnQkFBSSxhQUFhLE9BQU8sV0FBV0EsRUFBQztBQUNwQyxnQkFBSSxVQUFVLGNBQVksTUFBSSxjQUFZO0FBQzFDLGdCQUFJLGFBQWEsV0FBVyxjQUFZLE1BQUksY0FBWSxPQUFPLGNBQVksTUFBSSxjQUFZO0FBQzNGLGdCQUFJLGNBQWMsV0FBVyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7QUFDM0QsdUJBQVc7QUFDWCwwQkFBYztBQUNkLGdCQUFHLFlBQWEsa0JBQWlCLHFCQUFxQixJQUFJQTtBQUFBLFVBQzVEO0FBQ0EsaUJBQU87QUFBQSxRQUNUO0FBQ0EsWUFBSSw4QkFBOEIsQ0FBQyxXQUFXO0FBQzVDLG1CQUFTLGVBQWUsTUFBTTtBQUM5QixjQUFJLFlBQVksT0FBTztBQUN2QixjQUFJLG1CQUFtQix3QkFBd0IsTUFBTTtBQUNyRCxjQUFJLHVCQUF1QixDQUFDO0FBQzVCLGNBQUksa0JBQWtCLGlCQUFpQixDQUFDO0FBQ3hDLGNBQUksbUJBQW1CO0FBQ3ZCLG1CQUFRQSxLQUFJLEdBQUdBLEtBQUksV0FBVyxFQUFFQSxJQUFHO0FBQ2pDLGdCQUFHLGtCQUFrQkEsSUFBRztBQUN0QixtQ0FBcUJBLEVBQUMsSUFBSTtBQUFBLFlBQzVCLE9BQU87QUFDTCxnQ0FBa0IsaUJBQWlCLEVBQUUsZ0JBQWdCO0FBQ3JELG1DQUFxQkEsRUFBQyxJQUFJLG9CQUFrQixTQUFZLFlBQVk7QUFBQSxZQUN0RTtBQUFBLFVBQ0Y7QUFDQSxpQkFBTztBQUFBLFFBQ1Q7QUFFQSxZQUFJLGdCQUFzQixvQkFBSSxJQUFJO0FBQ2xDLFlBQUksc0JBQXNCLG9CQUFJLElBQUk7QUFHbEMsWUFBSSxnQkFBZ0IsQ0FBQztBQUFHLFlBQUksZ0JBQWdCLENBQUM7QUFDN0MsWUFBSSw4QkFBOEIsQ0FBQztBQUNuQyxZQUFJLHVCQUF1QixDQUFDO0FBQUcsWUFBSSwwQkFBMEIsQ0FBQztBQUM5RCxZQUFJLGFBQWEsQ0FBQztBQUFHLFlBQUksYUFBYSxDQUFDO0FBTXZDLFlBQUksV0FBVyxDQUFDLEtBQUssU0FBUztBQUM1QixjQUFJLE1BQU0sSUFBSSxJQUFJO0FBQUcsY0FBRyxRQUFRLE9BQVcsUUFBTztBQUNsRCxjQUFHLE9BQU8sU0FBUyxXQUFZLFFBQU8sS0FBSyxHQUFHO0FBQzlDLGNBQUksT0FBTztBQUNYLGNBQUcsQ0FBQyxNQUFNLFFBQVEsSUFBSSxFQUFHLFFBQU8sS0FBSyxNQUFNLEdBQUc7QUFDOUMsY0FBSSxNQUFNLEtBQUs7QUFDZixjQUFJQSxLQUFJO0FBQ1IsaUJBQU8sT0FBUSxFQUFFQSxLQUFJLElBQU0sT0FBTSxJQUFJLEtBQUtBLEVBQUMsQ0FBQztBQUM1QyxpQkFBTztBQUFBLFFBQ1Q7QUFFQSxZQUFJLGFBQWEsQ0FBQ1MsT0FBTTtBQUFFLGlCQUFPLE9BQU9BLE9BQU0sWUFBWSxPQUFPQSxHQUFFLGNBQWM7QUFBQSxRQUFTO0FBQzFGLFlBQUksV0FBVztBQUFVLFlBQUksb0JBQW9CLENBQUM7QUFDbEQsWUFBSSxZQUFZLENBQUM7QUFBRyxrQkFBVSxRQUFRO0FBQ3RDLFlBQUksT0FBTztBQUVYLFlBQUksV0FBVyxRQUFRLEVBQUU7QUFHekIsWUFBSSxvQkFBa0IsQ0FBQUMsT0FBRztBQUFDLGNBQUlDLEtBQUUsQ0FBQyxHQUFFQyxLQUFFLEdBQUVSLEtBQUUsQ0FBQyxHQUFFUyxLQUFFLENBQUFILE9BQUc7QUFBQyxxQkFBUU4sS0FBRSxHQUFFUyxLQUFFRixHQUFFUCxFQUFDLEdBQUVVLEtBQUUsR0FBRUEsS0FBRUYsTUFBRztBQUFDLGtCQUFJTixLQUFFUSxLQUFFO0FBQUUsY0FBQVYsS0FBRVUsSUFBRVIsS0FBRU0sTUFBR0QsR0FBRUwsRUFBQyxFQUFFLFNBQU9LLEdBQUVHLEVBQUMsRUFBRSxXQUFTVixLQUFFRSxLQUFHSyxHQUFFUCxLQUFFLEtBQUcsQ0FBQyxJQUFFTyxHQUFFUCxFQUFDLEdBQUVVLEtBQUUsS0FBR1YsTUFBRztBQUFBLFlBQUU7QUFBQyxxQkFBUVcsS0FBRVgsS0FBRSxLQUFHLEdBQUVBLEtBQUUsS0FBR1MsR0FBRSxTQUFPRixHQUFFSSxFQUFDLEVBQUUsUUFBT0EsTUFBR1gsS0FBRVcsTUFBRyxLQUFHLEVBQUUsQ0FBQUosR0FBRVAsRUFBQyxJQUFFTyxHQUFFSSxFQUFDO0FBQUUsWUFBQUosR0FBRVAsRUFBQyxJQUFFUztBQUFBLFVBQUM7QUFBRSxpQkFBT1QsR0FBRSxNQUFLLENBQUFNLE9BQUc7QUFBQyxnQkFBSU4sS0FBRVE7QUFBRSxZQUFBRCxHQUFFQyxJQUFHLElBQUVGO0FBQUUscUJBQVFHLEtBQUVULEtBQUUsS0FBRyxHQUFFQSxLQUFFLEtBQUdNLEdBQUUsU0FBT0MsR0FBRUUsRUFBQyxFQUFFLFFBQU9BLE1BQUdULEtBQUVTLE1BQUcsS0FBRyxFQUFFLENBQUFGLEdBQUVQLEVBQUMsSUFBRU8sR0FBRUUsRUFBQztBQUFFLFlBQUFGLEdBQUVQLEVBQUMsSUFBRU07QUFBQSxVQUFDLEdBQUdOLEdBQUUsT0FBTSxDQUFBTSxPQUFHO0FBQUMsZ0JBQUcsTUFBSUUsSUFBRTtBQUFDLGtCQUFJUixLQUFFTyxHQUFFLENBQUM7QUFBRSxxQkFBT0EsR0FBRSxDQUFDLElBQUVBLEdBQUUsRUFBRUMsRUFBQyxHQUFFQyxHQUFFLEdBQUVUO0FBQUEsWUFBQztBQUFBLFVBQUMsR0FBR0EsR0FBRSxPQUFNLENBQUFNLE9BQUc7QUFBQyxnQkFBRyxNQUFJRSxHQUFFLFFBQU9ELEdBQUUsQ0FBQztBQUFBLFVBQUMsR0FBR1AsR0FBRSxhQUFZLENBQUFNLE9BQUc7QUFBQyxZQUFBQyxHQUFFLENBQUMsSUFBRUQsSUFBRUcsR0FBRTtBQUFBLFVBQUMsR0FBR1Q7QUFBQSxRQUFDO0FBQ25kLFlBQUksSUFBSSxrQkFBa0I7QUFHMUIsZUFBTyxFQUFDLFVBQVMsUUFBUSxNQUFLLElBQUksV0FBVSxTQUFTLFdBQVUsUUFBTztBQUFBLE1BQ3hFLENBQUM7QUFBQTtBQUFBOzs7QUNqcUJELE1BQU1ZLElBQVNDO0FBQWYsTUFtT01DLElBQWdCRixFQUF5Q0U7QUFuTy9ELE1BNk9NQyxJQUFTRCxJQUNYQSxFQUFhRSxhQUFhLFlBQVksRUFDcENDLFlBQWFDLENBQUFBLE9BQU1BLEdBQUFBLENBQUFBLElBQUFBO0FBL096QixNQTZUTUMsSUFBdUI7QUE3VDdCLE1BbVVNQyxJQUFTLE9BQU9DLEtBQUtDLE9BQUFBLEVBQVNDLFFBQVEsQ0FBQSxFQUFHQyxNQUFNLENBQUEsQ0FBQTtBQW5VckQsTUFzVU1DLElBQWMsTUFBTUw7QUF0VTFCLE1BMFVNTSxJQUFhLElBQUlELENBQUFBO0FBMVV2QixNQTRVTUUsSUFPQUM7QUFuVk4sTUFzVk1DLElBQWUsTUFBTUYsRUFBRUcsY0FBYyxFQUFBO0FBdFYzQyxNQTBWTUMsSUFBZUMsQ0FBQUEsT0FDVCxTQUFWQSxNQUFtQyxZQUFBLE9BQVRBLE1BQXFDLGNBQUEsT0FBVEE7QUEzVnhELE1BNFZNQyxJQUFVQyxNQUFNRDtBQTVWdEIsTUE2Vk1FLElBQWNILENBQUFBLE9BQ2xCQyxFQUFRRCxFQUFBQSxLQUVxQyxjQUFBLE9BQXJDQSxLQUFnQkksT0FBT0MsUUFBQUE7QUFoV2pDLE1Ba1dNQyxJQUFhO0FBbFduQixNQW9YTUMsSUFBZTtBQXBYckIsTUF5WE1DLElBQWtCO0FBelh4QixNQTZYTUMsSUFBbUI7QUE3WHpCLE1BcVpNQyxJQUFrQkMsT0FDdEIsS0FBS0wsQ0FBQUEscUJBQWdDQSxDQUFBQSxLQUFlQSxDQUFBQTsyQkFDcEQsR0FBQTtBQXZaRixNQThaTU0sSUFBMEI7QUE5WmhDLE1BK1pNQyxJQUEwQjtBQS9aaEMsTUFzYU1DLElBQWlCO0FBdGF2QixNQStnQk1DLElBQ21CQyxDQUFBQSxPQUN2QixDQUFDQyxPQUFrQ0MsUUF3QjFCLEVBRUxDLFlBQWdCSCxJQUNoQkMsU0FBQUEsSUFDQUMsUUFBQUEsR0FBQUE7QUE3aUJOLE1BOGpCYUUsSUFBT0wsRUFySkEsQ0FBQTtBQXphcEIsTUF3bEJhTSxJQUFNTixFQTlLQSxDQUFBO0FBMWFuQixNQWtuQmFPLElBQVNQLEVBdk1BLENBQUE7QUEzYXRCLE1Bd25CYVEsSUFBV25CLE9BQU9vQixJQUFJLGNBQUE7QUF4bkJuQyxNQTZvQmFDLElBQVVyQixPQUFPb0IsSUFBSSxhQUFBO0FBN29CbEMsTUFzcEJNRSxJQUFnQixvQkFBSUM7QUF0cEIxQixNQTJyQk1DLElBQVNqQyxFQUFFa0MsaUJBQ2ZsQyxHQUNBLEdBQUE7QUFxQkYsV0FBU21DLEVBQ1BDLElBQ0FDLElBQUFBO0FBT0EsUUFBQSxDQUFLL0IsRUFBUThCLEVBQUFBLEtBQUFBLENBQVNBLEdBQUlFLGVBQWUsS0FBQSxFQWlCdkMsT0FBVUMsTUFoQkksZ0NBQUE7QUFrQmhCLFdBQUEsV0FBT25ELElBQ0hBLEVBQU9FLFdBQVcrQyxFQUFBQSxJQUNqQkE7RUFDUDtBQWNBLE1BQU1HLElBQWtCLENBQ3RCbEIsSUFDQUQsT0FBQUE7QUFRQSxVQUFNb0IsS0FBSW5CLEdBQVFvQixTQUFTLEdBSXJCQyxLQUEyQixDQUFBO0FBQ2pDLFFBTUlDLElBTkFuQixLQXBXYSxNQXFXZkosS0FBc0IsVUFwV0osTUFvV2NBLEtBQXlCLFdBQVcsSUFTbEV3QixLQUFRakM7QUFFWixhQUFTa0MsS0FBSSxHQUFHQSxLQUFJTCxJQUFHSyxNQUFLO0FBQzFCLFlBQU12RCxLQUFJK0IsR0FBUXdCLEVBQUFBO0FBTWxCLFVBQ0lDLElBRUFDLElBSEFDLEtBQUFBLElBRUFDLEtBQVk7QUFLaEIsYUFBT0EsS0FBWTNELEdBQUVtRCxXQUVuQkcsR0FBTUssWUFBWUEsSUFDbEJGLEtBQVFILEdBQU1NLEtBQUs1RCxFQUFBQSxHQUNMLFNBQVZ5RCxNQUdKRSxDQUFBQSxLQUFZTCxHQUFNSyxXQUNkTCxPQUFVakMsSUFDaUIsVUFBekJvQyxHQTViVSxDQUFBLElBNmJaSCxLQUFRaEMsSUFBQUEsV0FDQ21DLEdBOWJHLENBQUEsSUFnY1pILEtBQVEvQixJQUFBQSxXQUNDa0MsR0FoY0YsQ0FBQSxLQWljSDdCLEVBQWVpQyxLQUFLSixHQWpjakIsQ0FBQSxDQUFBLE1Bb2NMSixLQUFzQjVCLE9BQU8sT0FBS2dDLEdBcGM3QixDQUFBLEdBb2NnRCxHQUFBLElBRXZESCxLQUFROUIsS0FBQUEsV0FDQ2lDLEdBdGNNLENBQUEsTUE2Y2ZILEtBQVE5QixLQUVEOEIsT0FBVTlCLElBQ1MsUUFBeEJpQyxHQTlhUyxDQUFBLEtBaWJYSCxLQUFRRCxNQUFtQmhDLEdBRzNCcUMsS0FBQUEsTUFBb0IsV0FDWEQsR0FwYkksQ0FBQSxJQXNiYkMsS0FBQUEsTUFFQUEsS0FBbUJKLEdBQU1LLFlBQVlGLEdBdmJyQixDQUFBLEVBdWI4Q04sUUFDOURLLEtBQVdDLEdBemJFLENBQUEsR0EwYmJILEtBQUFBLFdBQ0VHLEdBemJPLENBQUEsSUEwYkhqQyxJQUNzQixRQUF0QmlDLEdBM2JHLENBQUEsSUE0YkQ5QixJQUNBRCxLQUdWNEIsT0FBVTNCLEtBQ1YyQixPQUFVNUIsSUFFVjRCLEtBQVE5QixJQUNDOEIsT0FBVWhDLEtBQW1CZ0MsT0FBVS9CLElBQ2hEK0IsS0FBUWpDLEtBSVJpQyxLQUFROUIsR0FDUjZCLEtBQUFBO0FBOEJKLFlBQU1TLEtBQ0pSLE9BQVU5QixLQUFlTyxHQUFRd0IsS0FBSSxDQUFBLEVBQUdRLFdBQVcsSUFBQSxJQUFRLE1BQU07QUFDbkU3QixNQUFBQSxNQUNFb0IsT0FBVWpDLElBQ05yQixLQUFJUSxJQUNKa0QsTUFBb0IsS0FDakJOLEdBQVVZLEtBQUtSLEVBQUFBLEdBQ2hCeEQsR0FBRU0sTUFBTSxHQUFHb0QsRUFBQUEsSUFDVHpELElBQ0FELEdBQUVNLE1BQU1vRCxFQUFBQSxJQUNWeEQsSUFDQTRELE1BQ0E5RCxLQUFJRSxLQUFBQSxPQUFVd0QsS0FBMEJILEtBQUlPO0lBQ3JEO0FBUUQsV0FBTyxDQUFDbEIsRUFBd0JiLElBTDlCRyxNQUNDSCxHQUFRbUIsRUFBQUEsS0FBTSxVQTNlQSxNQTRlZHBCLEtBQXNCLFdBM2VMLE1BMmVnQkEsS0FBeUIsWUFBWSxHQUFBLEdBR25Cc0IsRUFBQUE7RUFBVTtBQUtsRSxNQUFNYSxJQUFOLE1BQU1BLEdBQUFBO0lBTUosWUFBQUMsRUFFRW5DLFNBQUNBLElBQVNFLFlBQWdCSCxHQUFBQSxHQUMxQnFDLElBQUFBO0FBRUEsVUFBSUM7QUFQTkMsV0FBS0MsUUFBd0IsQ0FBQTtBQVEzQixVQUFJQyxLQUFZLEdBQ1pDLEtBQWdCO0FBQ3BCLFlBQU1DLEtBQVkxQyxHQUFRb0IsU0FBUyxHQUM3Qm1CLEtBQVFELEtBQUtDLE9BQUFBLENBR1pwQyxJQUFNa0IsRUFBQUEsSUFBYUgsRUFBZ0JsQixJQUFTRCxFQUFBQTtBQUtuRCxVQUpBdUMsS0FBS0ssS0FBS1QsR0FBU1UsY0FBY3pDLElBQU1pQyxFQUFBQSxHQUN2Q3pCLEVBQU9rQyxjQUFjUCxLQUFLSyxHQUFHRyxTQXhnQmQsTUEyZ0JYL0MsTUExZ0JjLE1BMGdCU0EsSUFBd0I7QUFDakQsY0FBTWdELEtBQVVULEtBQUtLLEdBQUdHLFFBQVFFO0FBQ2hDRCxRQUFBQSxHQUFRRSxZQUFBQSxHQUFlRixHQUFRRyxVQUFBQTtNQUNoQztBQUdELGFBQXNDLFVBQTlCYixLQUFPMUIsRUFBT3dDLFNBQUFBLE1BQXdCWixHQUFNbkIsU0FBU3NCLE1BQVc7QUFDdEUsWUFBc0IsTUFBbEJMLEdBQUtlLFVBQWdCO0FBdUJ2QixjQUFLZixHQUFpQmdCLGNBQUFBLEVBQ3BCLFlBQVdDLE1BQVNqQixHQUFpQmtCLGtCQUFBQSxFQUNuQyxLQUFJRCxHQUFLRSxTQUFTdEYsQ0FBQUEsR0FBdUI7QUFDdkMsa0JBQU11RixLQUFXcEMsR0FBVW9CLElBQUFBLEdBRXJCaUIsS0FEU3JCLEdBQWlCc0IsYUFBYUwsRUFBQUEsRUFDdkJNLE1BQU16RixDQUFBQSxHQUN0QjBGLEtBQUksZUFBZWhDLEtBQUs0QixFQUFBQTtBQUM5QmxCLFlBQUFBLEdBQU1OLEtBQUssRUFDVGxDLE1BMWlCTyxHQTJpQlArRCxPQUFPdEIsSUFDUGMsTUFBTU8sR0FBRSxDQUFBLEdBQ1I3RCxTQUFTMEQsSUFDVEssTUFDVyxRQUFURixHQUFFLENBQUEsSUFDRUcsSUFDUyxRQUFUSCxHQUFFLENBQUEsSUFDQUksSUFDUyxRQUFUSixHQUFFLENBQUEsSUFDQUssSUFDQUMsRUFBQUEsQ0FBQUEsR0FFWDlCLEdBQWlCK0IsZ0JBQWdCZCxFQUFBQTtVQUNuQyxNQUFVQSxDQUFBQSxHQUFLdEIsV0FBVzdELENBQUFBLE1BQ3pCb0UsR0FBTU4sS0FBSyxFQUNUbEMsTUFyakJLLEdBc2pCTCtELE9BQU90QixHQUFBQSxDQUFBQSxHQUVSSCxHQUFpQitCLGdCQUFnQmQsRUFBQUE7QUFNeEMsY0FBSXpELEVBQWVpQyxLQUFNTyxHQUFpQmdDLE9BQUFBLEdBQVU7QUFJbEQsa0JBQU1yRSxLQUFXcUMsR0FBaUJpQyxZQUFhVixNQUFNekYsQ0FBQUEsR0FDL0N5RCxLQUFZNUIsR0FBUW9CLFNBQVM7QUFDbkMsZ0JBQUlRLEtBQVksR0FBRztBQUNoQlMsY0FBQUEsR0FBaUJpQyxjQUFjekcsSUFDM0JBLEVBQWEwRyxjQUNkO0FBTUosdUJBQVMvQyxLQUFJLEdBQUdBLEtBQUlJLElBQVdKLEtBQzVCYSxDQUFBQSxHQUFpQm1DLE9BQU94RSxHQUFRd0IsRUFBQUEsR0FBSTVDLEVBQUFBLENBQUFBLEdBRXJDK0IsRUFBT3dDLFNBQUFBLEdBQ1BaLEdBQU1OLEtBQUssRUFBQ2xDLE1BcmxCUCxHQXFsQnlCK0QsT0FBQUEsRUFBU3RCLEdBQUFBLENBQUFBO0FBS3hDSCxjQUFBQSxHQUFpQm1DLE9BQU94RSxHQUFRNEIsRUFBQUEsR0FBWWhELEVBQUFBLENBQUFBO1lBQzlDO1VBQ0Y7UUFDRixXQUE0QixNQUFsQnlELEdBQUtlLFNBRWQsS0FEY2YsR0FBaUJvQyxTQUNsQmpHLEVBQ1grRCxDQUFBQSxHQUFNTixLQUFLLEVBQUNsQyxNQWhtQkgsR0FnbUJxQitELE9BQU90QixHQUFBQSxDQUFBQTthQUNoQztBQUNMLGNBQUloQixLQUFBQTtBQUNKLGlCQUFBLFFBQVFBLEtBQUthLEdBQWlCb0MsS0FBS0MsUUFBUXZHLEdBQVFxRCxLQUFJLENBQUEsS0FHckRlLENBQUFBLEdBQU1OLEtBQUssRUFBQ2xDLE1Bam1CSCxHQWltQnVCK0QsT0FBT3RCLEdBQUFBLENBQUFBLEdBRXZDaEIsTUFBS3JELEVBQU9pRCxTQUFTO1FBRXhCO0FBRUhvQixRQUFBQTtNQUNEO0lBa0NGO0lBSUQsT0FBQSxjQUFxQnJDLElBQW1Cd0UsSUFBQUE7QUFDdEMsWUFBTWhDLEtBQUtqRSxFQUFFa0UsY0FBYyxVQUFBO0FBRTNCLGFBREFELEdBQUdpQyxZQUFZekUsSUFDUndDO0lBQ1I7RUFBQTtBQWdCSCxXQUFTa0MsRUFDUEMsSUFDQS9GLElBQ0FnRyxLQUEwQkQsSUFDMUJFLElBQUFBO0FBSUEsUUFBSWpHLE9BQVV1QixFQUNaLFFBQU92QjtBQUVULFFBQUlrRyxLQUFBQSxXQUNGRCxLQUNLRCxHQUF5QkcsT0FBZUYsRUFBQUEsSUFDeENELEdBQStDSTtBQUN0RCxVQUFNQyxLQUEyQnRHLEVBQVlDLEVBQUFBLElBQUFBLFNBR3hDQSxHQUEyQztBQXlCaEQsV0F4QklrRyxJQUFrQjlDLGdCQUFnQmlELE9BRXBDSCxJQUF1RCxPQUFBLEtBQUksR0FBQSxXQUN2REcsS0FDRkgsS0FBQUEsVUFFQUEsS0FBbUIsSUFBSUcsR0FBeUJOLEVBQUFBLEdBQ2hERyxHQUFpQkksS0FBYVAsSUFBTUMsSUFBUUMsRUFBQUEsSUFBQUEsV0FFMUNBLE1BQ0FELEdBQXlCRyxTQUFpQixDQUFBLEdBQUlGLEVBQUFBLElBQzlDQyxLQUVERixHQUFpQ0ksT0FBY0YsS0FBQUEsV0FHaERBLE9BQ0ZsRyxLQUFROEYsRUFDTkMsSUFDQUcsR0FBaUJLLEtBQVVSLElBQU8vRixHQUEwQmtCLE1BQUFBLEdBQzVEZ0YsSUFDQUQsRUFBQUEsSUFHR2pHO0VBQ1Q7QUFPQSxNQUFNd0csSUFBTixNQUFNQTtJQVNKLFlBQVlDLElBQW9CVCxJQUFBQTtBQVBoQ3pDLFdBQU9tRCxPQUE0QixDQUFBLEdBS25DbkQsS0FBd0JvRCxPQUFBQSxRQUd0QnBELEtBQUtxRCxPQUFhSCxJQUNsQmxELEtBQUtzRCxPQUFXYjtJQUNqQjtJQUdELElBQUEsYUFBSWM7QUFDRixhQUFPdkQsS0FBS3NELEtBQVNDO0lBQ3RCO0lBR0QsSUFBQSxPQUFJQztBQUNGLGFBQU94RCxLQUFLc0QsS0FBU0U7SUFDdEI7SUFJRCxFQUFPMUQsSUFBQUE7QUFDTCxZQUFBLEVBQ0VPLElBQUFBLEVBQUlHLFNBQUNBLEdBQUFBLEdBQ0xQLE9BQU9BLEdBQUFBLElBQ0xELEtBQUtxRCxNQUNISSxNQUFZM0QsSUFBUzRELGlCQUFpQnRILEdBQUd1SCxXQUFXbkQsSUFBQUEsSUFBUztBQUNuRW5DLFFBQU9rQyxjQUFja0Q7QUFFckIsVUFBSTFELEtBQU8xQixFQUFPd0MsU0FBQUEsR0FDZFgsS0FBWSxHQUNaMEQsS0FBWSxHQUNaQyxLQUFlNUQsR0FBTSxDQUFBO0FBRXpCLGFBQUEsV0FBTzRELE1BQTRCO0FBQ2pDLFlBQUkzRCxPQUFjMkQsR0FBYXJDLE9BQU87QUFDcEMsY0FBSWdCO0FBbndCTyxnQkFvd0JQcUIsR0FBYXBHLE9BQ2YrRSxLQUFPLElBQUlzQixFQUNUL0QsSUFDQUEsR0FBS2dFLGFBQ0wvRCxNQUNBRixFQUFBQSxJQTF3QlcsTUE0d0JKK0QsR0FBYXBHLE9BQ3RCK0UsS0FBTyxJQUFJcUIsR0FBYXBDLEtBQ3RCMUIsSUFDQThELEdBQWE3QyxNQUNiNkMsR0FBYW5HLFNBQ2JzQyxNQUNBRixFQUFBQSxJQTd3QlMsTUErd0JGK0QsR0FBYXBHLFNBQ3RCK0UsS0FBTyxJQUFJd0IsRUFBWWpFLElBQXFCQyxNQUFNRixFQUFBQSxJQUVwREUsS0FBS21ELEtBQVF4RCxLQUFLNkMsRUFBQUEsR0FDbEJxQixLQUFlNUQsR0FBQUEsRUFBUTJELEVBQUFBO1FBQ3hCO0FBQ0cxRCxRQUFBQSxPQUFjMkQsSUFBY3JDLFVBQzlCekIsS0FBTzFCLEVBQU93QyxTQUFBQSxHQUNkWDtNQUVIO0FBS0QsYUFEQTdCLEVBQU9rQyxjQUFjbkUsR0FDZHFIO0lBQ1I7SUFFRCxFQUFROUYsSUFBQUE7QUFDTixVQUFJdUIsS0FBSTtBQUNSLGlCQUFXc0QsTUFBUXhDLEtBQUttRCxLQUFBQSxZQUNsQlgsT0FBQUEsV0FVR0EsR0FBdUI5RSxXQUN6QjhFLEdBQXVCeUIsS0FBV3RHLElBQVE2RSxJQUF1QnRELEVBQUFBLEdBSWxFQSxNQUFNc0QsR0FBdUI5RSxRQUFTb0IsU0FBUyxLQUUvQzBELEdBQUt5QixLQUFXdEcsR0FBT3VCLEVBQUFBLENBQUFBLElBRzNCQTtJQUVIO0VBQUE7QUE4Q0gsTUFBTTRFLElBQU4sTUFBTUEsR0FBQUE7SUF3QkosSUFBQSxPQUFJTjtBQUlGLGFBQU94RCxLQUFLc0QsTUFBVUUsUUFBaUJ4RCxLQUFLa0U7SUFDN0M7SUFlRCxZQUNFQyxJQUNBQyxJQUNBM0IsSUFDQTNDLElBQUFBO0FBL0NPRSxXQUFJdkMsT0E3MkJJLEdBKzJCakJ1QyxLQUFnQnFFLE9BQVluRyxHQStCNUI4QixLQUF3Qm9ELE9BQUFBLFFBZ0J0QnBELEtBQUtzRSxPQUFjSCxJQUNuQm5FLEtBQUt1RSxPQUFZSCxJQUNqQnBFLEtBQUtzRCxPQUFXYixJQUNoQnpDLEtBQUtGLFVBQVVBLElBSWZFLEtBQUtrRSxPQUFnQnBFLElBQVMwRSxlQUFBQTtJQUsvQjtJQW9CRCxJQUFBLGFBQUlqQjtBQUNGLFVBQUlBLEtBQXdCdkQsS0FBS3NFLEtBQWFmO0FBQzlDLFlBQU1kLEtBQVN6QyxLQUFLc0Q7QUFVcEIsYUFBQSxXQVJFYixNQUN5QixPQUF6QmMsSUFBWXpDLGFBS1p5QyxLQUFjZCxHQUF3Q2MsYUFFakRBO0lBQ1I7SUFNRCxJQUFBLFlBQUlZO0FBQ0YsYUFBT25FLEtBQUtzRTtJQUNiO0lBTUQsSUFBQSxVQUFJRjtBQUNGLGFBQU9wRSxLQUFLdUU7SUFDYjtJQUVELEtBQVc5SCxJQUFnQmdJLEtBQW1DekUsTUFBQUE7QUFNNUR2RCxNQUFBQSxLQUFROEYsRUFBaUJ2QyxNQUFNdkQsSUFBT2dJLEVBQUFBLEdBQ2xDakksRUFBWUMsRUFBQUEsSUFJVkEsT0FBVXlCLEtBQW9CLFFBQVR6QixNQUEyQixPQUFWQSxNQUNwQ3VELEtBQUtxRSxTQUFxQm5HLEtBUzVCOEIsS0FBSzBFLEtBQUFBLEdBRVAxRSxLQUFLcUUsT0FBbUJuRyxLQUNmekIsT0FBVXVELEtBQUtxRSxRQUFvQjVILE9BQVV1QixLQUN0RGdDLEtBQUsyRSxFQUFZbEksRUFBQUEsSUFBQUEsV0FHVEEsR0FBcUMsYUFDL0N1RCxLQUFLNEUsRUFBc0JuSSxFQUFBQSxJQUFBQSxXQUNqQkEsR0FBZXFFLFdBZ0J6QmQsS0FBSzZFLEVBQVlwSSxFQUFBQSxJQUNSRyxFQUFXSCxFQUFBQSxJQUNwQnVELEtBQUs4RSxFQUFnQnJJLEVBQUFBLElBR3JCdUQsS0FBSzJFLEVBQVlsSSxFQUFBQTtJQUVwQjtJQUVPLEVBQXdCc0QsSUFBQUE7QUFDOUIsYUFBaUJDLEtBQUtzRSxLQUFhZixXQUFhd0IsYUFDOUNoRixJQUNBQyxLQUFLdUUsSUFBQUE7SUFFUjtJQUVPLEVBQVk5SCxJQUFBQTtBQUNkdUQsV0FBS3FFLFNBQXFCNUgsT0FDNUJ1RCxLQUFLMEUsS0FBQUEsR0FvQ0wxRSxLQUFLcUUsT0FBbUJyRSxLQUFLZ0YsRUFBUXZJLEVBQUFBO0lBRXhDO0lBRU8sRUFBWUEsSUFBQUE7QUFLaEJ1RCxXQUFLcUUsU0FBcUJuRyxLQUMxQjFCLEVBQVl3RCxLQUFLcUUsSUFBQUEsSUFFQ3JFLEtBQUtzRSxLQUFhUCxZQWNyQjVCLE9BQU8xRixLQXNCcEJ1RCxLQUFLNkUsRUFBWXpJLEVBQUU2SSxlQUFleEksRUFBQUEsQ0FBQUEsR0FVdEN1RCxLQUFLcUUsT0FBbUI1SDtJQUN6QjtJQUVPLEVBQ055SSxJQUFBQTtBQUdBLFlBQUEsRUFBTXZILFFBQUNBLElBQVFDLFlBQWdCSCxHQUFBQSxJQUFReUgsSUFLakNoQyxLQUNZLFlBQUEsT0FBVHpGLEtBQ0h1QyxLQUFLbUYsS0FBY0QsRUFBQUEsS0FBQUEsV0FDbEJ6SCxHQUFLNEMsT0FDSDVDLEdBQUs0QyxLQUFLVCxFQUFTVSxjQUNsQi9CLEVBQXdCZCxHQUFLMkgsR0FBRzNILEdBQUsySCxFQUFFLENBQUEsQ0FBQSxHQUN2Q3BGLEtBQUtGLE9BQUFBLElBRVRyQztBQUVOLFVBQUt1QyxLQUFLcUUsTUFBdUNoQixTQUFlSCxHQVU3RGxELE1BQUtxRSxLQUFzQ2dCLEVBQVExSCxFQUFBQTtXQUMvQztBQUNMLGNBQU0ySCxLQUFXLElBQUlyQyxFQUFpQkMsSUFBc0JsRCxJQUFBQSxHQUN0RHlELEtBQVc2QixHQUFTQyxFQUFPdkYsS0FBS0YsT0FBQUE7QUFXdEN3RixRQUFBQSxHQUFTRCxFQUFRMUgsRUFBQUEsR0FXakJxQyxLQUFLNkUsRUFBWXBCLEVBQUFBLEdBQ2pCekQsS0FBS3FFLE9BQW1CaUI7TUFDekI7SUFDRjtJQUlELEtBQWNKLElBQUFBO0FBQ1osVUFBSWhDLEtBQVcvRSxFQUFjcUgsSUFBSU4sR0FBT3hILE9BQUFBO0FBSXhDLGFBQUEsV0FISXdGLE1BQ0YvRSxFQUFjc0gsSUFBSVAsR0FBT3hILFNBQVV3RixLQUFXLElBQUl0RCxFQUFTc0YsRUFBQUEsQ0FBQUEsR0FFdERoQztJQUNSO0lBRU8sRUFBZ0J6RyxJQUFBQTtBQVdqQkMsUUFBUXNELEtBQUtxRSxJQUFBQSxNQUNoQnJFLEtBQUtxRSxPQUFtQixDQUFBLEdBQ3hCckUsS0FBSzBFLEtBQUFBO0FBS1AsWUFBTWdCLEtBQVkxRixLQUFLcUU7QUFDdkIsVUFDSXNCLElBREEvQixLQUFZO0FBR2hCLGlCQUFXZ0MsTUFBUW5KLEdBQ2JtSCxDQUFBQSxPQUFjOEIsR0FBVTVHLFNBSzFCNEcsR0FBVS9GLEtBQ1BnRyxLQUFXLElBQUk3QixHQUNkOUQsS0FBS2dGLEVBQVExSSxFQUFBQSxDQUFBQSxHQUNiMEQsS0FBS2dGLEVBQVExSSxFQUFBQSxDQUFBQSxHQUNiMEQsTUFDQUEsS0FBS0YsT0FBQUEsQ0FBQUEsSUFLVDZGLEtBQVdELEdBQVU5QixFQUFBQSxHQUV2QitCLEdBQVMxQixLQUFXMkIsRUFBQUEsR0FDcEJoQztBQUdFQSxNQUFBQSxLQUFZOEIsR0FBVTVHLFdBRXhCa0IsS0FBSzBFLEtBQ0hpQixNQUFpQkEsR0FBU3BCLEtBQVlSLGFBQ3RDSCxFQUFBQSxHQUdGOEIsR0FBVTVHLFNBQVM4RTtJQUV0QjtJQWFELEtBQ0VpQyxLQUErQjdGLEtBQUtzRSxLQUFhUCxhQUNqRCtCLElBQUFBO0FBR0EsV0FEQTlGLEtBQUsrRixPQUFBQSxPQUE0QixNQUFhRCxFQUFBQSxHQUN2Q0QsTUFBU0EsT0FBVTdGLEtBQUt1RSxRQUFXO0FBQ3hDLGNBQU15QixLQUFTSCxHQUFROUI7QUFDakI4QixRQUFBQSxHQUFvQkksT0FBQUEsR0FDMUJKLEtBQVFHO01BQ1Q7SUFDRjtJQVFELGFBQWF4QixJQUFBQTtBQUFBQSxpQkFDUHhFLEtBQUtzRCxTQUNQdEQsS0FBS2tFLE9BQWdCTSxJQUNyQnhFLEtBQUsrRixPQUE0QnZCLEVBQUFBO0lBT3BDO0VBQUE7QUEyQkgsTUFBTTNDLElBQU4sTUFBTUE7SUEyQkosSUFBQSxVQUFJRTtBQUNGLGFBQU8vQixLQUFLa0csUUFBUW5FO0lBQ3JCO0lBR0QsSUFBQSxPQUFJeUI7QUFDRixhQUFPeEQsS0FBS3NELEtBQVNFO0lBQ3RCO0lBRUQsWUFDRTBDLElBQ0FsRixJQUNBdEQsSUFDQStFLElBQ0EzQyxJQUFBQTtBQXhDT0UsV0FBSXZDLE9BOXpDUSxHQTgwQ3JCdUMsS0FBZ0JxRSxPQUE2Qm5HLEdBTTdDOEIsS0FBd0JvRCxPQUFBQSxRQW9CdEJwRCxLQUFLa0csVUFBVUEsSUFDZmxHLEtBQUtnQixPQUFPQSxJQUNaaEIsS0FBS3NELE9BQVdiLElBQ2hCekMsS0FBS0YsVUFBVUEsSUFDWHBDLEdBQVFvQixTQUFTLEtBQW9CLE9BQWZwQixHQUFRLENBQUEsS0FBNEIsT0FBZkEsR0FBUSxDQUFBLEtBQ3JEc0MsS0FBS3FFLE9BQXVCMUgsTUFBTWUsR0FBUW9CLFNBQVMsQ0FBQSxFQUFHcUgsS0FBSyxJQUFJQyxRQUFBQSxHQUMvRHBHLEtBQUt0QyxVQUFVQSxNQUVmc0MsS0FBS3FFLE9BQW1Cbkc7SUFLM0I7SUF3QkQsS0FDRXpCLElBQ0FnSSxLQUFtQ3pFLE1BQ25DcUcsSUFDQUMsSUFBQUE7QUFFQSxZQUFNNUksS0FBVXNDLEtBQUt0QztBQUdyQixVQUFJNkksS0FBQUE7QUFFSixVQUFBLFdBQUk3SSxHQUVGakIsQ0FBQUEsS0FBUThGLEVBQWlCdkMsTUFBTXZELElBQU9nSSxJQUFpQixDQUFBLEdBQ3ZEOEIsS0FBQUEsQ0FDRy9KLEVBQVlDLEVBQUFBLEtBQ1pBLE9BQVV1RCxLQUFLcUUsUUFBb0I1SCxPQUFVdUIsR0FDNUN1SSxPQUNGdkcsS0FBS3FFLE9BQW1CNUg7V0FFckI7QUFFTCxjQUFNa0IsS0FBU2xCO0FBR2YsWUFBSXlDLElBQUdzSDtBQUNQLGFBSEEvSixLQUFRaUIsR0FBUSxDQUFBLEdBR1h3QixLQUFJLEdBQUdBLEtBQUl4QixHQUFRb0IsU0FBUyxHQUFHSSxLQUNsQ3NILENBQUFBLEtBQUlqRSxFQUFpQnZDLE1BQU1yQyxHQUFPMEksS0FBY25ILEVBQUFBLEdBQUl1RixJQUFpQnZGLEVBQUFBLEdBRWpFc0gsT0FBTXhJLE1BRVJ3SSxLQUFLeEcsS0FBS3FFLEtBQW9DbkYsRUFBQUEsSUFFaERxSCxPQUFBQSxDQUNHL0osRUFBWWdLLEVBQUFBLEtBQU1BLE9BQU94RyxLQUFLcUUsS0FBb0NuRixFQUFBQSxHQUNqRXNILE9BQU10SSxJQUNSekIsS0FBUXlCLElBQ0N6QixPQUFVeUIsTUFDbkJ6QixPQUFVK0osTUFBSyxNQUFNOUksR0FBUXdCLEtBQUksQ0FBQSxJQUlsQ2MsS0FBS3FFLEtBQW9DbkYsRUFBQUEsSUFBS3NIO01BRWxEO0FBQ0dELE1BQUFBLE1BQUFBLENBQVdELE1BQ2J0RyxLQUFLeUcsRUFBYWhLLEVBQUFBO0lBRXJCO0lBR0QsRUFBYUEsSUFBQUE7QUFDUEEsTUFBQUEsT0FBVXlCLElBQ044QixLQUFLa0csUUFBcUJwRSxnQkFBZ0I5QixLQUFLZ0IsSUFBQUEsSUFvQi9DaEIsS0FBS2tHLFFBQXFCUSxhQUM5QjFHLEtBQUtnQixNQUNKdkUsTUFBUyxFQUFBO0lBR2Y7RUFBQTtBQUlILE1BQU1pRixJQUFOLGNBQTJCRyxFQUFBQTtJQUEzQixjQUFBaEM7QUFBQUEsWUFBQUEsR0FBQUEsU0FBQUEsR0FDb0JHLEtBQUl2QyxPQTk5Q0Y7SUF1L0NyQjtJQXRCVSxFQUFhaEIsSUFBQUE7QUFvQm5CdUQsV0FBS2tHLFFBQWdCbEcsS0FBS2dCLElBQUFBLElBQVF2RSxPQUFVeUIsSUFBQUEsU0FBc0J6QjtJQUNwRTtFQUFBO0FBSUgsTUFBTWtGLElBQU4sY0FBbUNFLEVBQUFBO0lBQW5DLGNBQUFoQztBQUFBQSxZQUFBQSxHQUFBQSxTQUFBQSxHQUNvQkcsS0FBSXZDLE9BMS9DTztJQTJnRDlCO0lBZFUsRUFBYWhCLElBQUFBO0FBU2R1RCxXQUFLa0csUUFBcUJTLGdCQUM5QjNHLEtBQUtnQixNQUFBQSxDQUFBQSxDQUNIdkUsTUFBU0EsT0FBVXlCLENBQUFBO0lBRXhCO0VBQUE7QUFrQkgsTUFBTTBELElBQU4sY0FBd0JDLEVBQUFBO0lBR3RCLFlBQ0VxRSxJQUNBbEYsSUFDQXRELElBQ0ErRSxJQUNBM0MsSUFBQUE7QUFFQThHLFlBQU1WLElBQVNsRixJQUFNdEQsSUFBUytFLElBQVEzQyxFQUFBQSxHQVR0QkUsS0FBSXZDLE9BNWhETDtJQThpRGhCO0lBS1EsS0FDUG9KLElBQ0FwQyxLQUFtQ3pFLE1BQUFBO0FBSW5DLFdBRkE2RyxLQUNFdEUsRUFBaUJ2QyxNQUFNNkcsSUFBYXBDLElBQWlCLENBQUEsS0FBTXZHLE9BQ3pDRixFQUNsQjtBQUVGLFlBQU04SSxLQUFjOUcsS0FBS3FFLE1BSW5CMEMsS0FDSEYsT0FBZ0IzSSxLQUFXNEksT0FBZ0I1SSxLQUMzQzJJLEdBQXlDRyxZQUN2Q0YsR0FBeUNFLFdBQzNDSCxHQUF5Q0ksU0FDdkNILEdBQXlDRyxRQUMzQ0osR0FBeUNLLFlBQ3ZDSixHQUF5Q0ksU0FJeENDLEtBQ0pOLE9BQWdCM0ksTUFDZjRJLE9BQWdCNUksS0FBVzZJO0FBYTFCQSxNQUFBQSxNQUNGL0csS0FBS2tHLFFBQVFrQixvQkFDWHBILEtBQUtnQixNQUNMaEIsTUFDQThHLEVBQUFBLEdBR0FLLE1BSUZuSCxLQUFLa0csUUFBUW1CLGlCQUNYckgsS0FBS2dCLE1BQ0xoQixNQUNBNkcsRUFBQUEsR0FHSjdHLEtBQUtxRSxPQUFtQndDO0lBQ3pCO0lBRUQsWUFBWVMsSUFBQUE7QUFDMkIsb0JBQUEsT0FBMUJ0SCxLQUFLcUUsT0FDZHJFLEtBQUtxRSxLQUFpQmtELEtBQUt2SCxLQUFLRixTQUFTMEgsUUFBUXhILEtBQUtrRyxTQUFTb0IsRUFBQUEsSUFFOUR0SCxLQUFLcUUsS0FBeUNvRCxZQUFZSCxFQUFBQTtJQUU5RDtFQUFBO0FBSUgsTUFBTXRELElBQU4sTUFBTUE7SUFpQkosWUFDU2tDLElBQ1B6RCxJQUNBM0MsSUFBQUE7QUFGT0UsV0FBT2tHLFVBQVBBLElBakJBbEcsS0FBSXZDLE9BeG5ETSxHQW9vRG5CdUMsS0FBd0JvRCxPQUFBQSxRQVN0QnBELEtBQUtzRCxPQUFXYixJQUNoQnpDLEtBQUtGLFVBQVVBO0lBQ2hCO0lBR0QsSUFBQSxPQUFJMEQ7QUFDRixhQUFPeEQsS0FBS3NELEtBQVNFO0lBQ3RCO0lBRUQsS0FBVy9HLElBQUFBO0FBUVQ4RixRQUFpQnZDLE1BQU12RCxFQUFBQTtJQUN4QjtFQUFBO0FBcUJVLE1BQUFpTCxJQUFPLEVBRWxCQyxHQUF1Qi9MLEdBQ3ZCZ00sR0FBUy9MLEdBQ1RnTSxHQUFjM0wsR0FDZDRMLEdBdHNEa0IsR0F1c0RsQkMsR0FBa0JuSixHQUVsQm9KLEdBQW1CL0UsR0FDbkJnRixHQUFhckwsR0FDYnNMLEdBQW1CM0YsR0FDbkI0RixHQUFZckUsR0FDWnNFLEdBQWdCdkcsR0FDaEJ3RyxHQUF1QjFHLEdBQ3ZCMkcsR0FBWTFHLEdBQ1oyRyxHQUFlN0csR0FDZjhHLEdBQWN4RSxFQUFBQTtBQWhCSCxNQW9CUHlFLElBRUZwTixFQUFPcU47QUFDWEQsTUFBa0I3SSxHQUFVa0UsQ0FBQUEsSUFJM0J6SSxFQUFPc04sb0JBQW9CLENBQUEsR0FBSWhKLEtBQUssT0FBQTtBQWtDeEIsTUFBQWlKLElBQVMsQ0FDcEJuTSxJQUNBb00sSUFDQS9JLE9BQUFBO0FBVUEsVUFBTWdKLEtBQWdCaEosSUFBU2lKLGdCQUFnQkY7QUFHL0MsUUFBSXJHLEtBQW1Cc0csR0FBa0M7QUFVekQsUUFBQSxXQUFJdEcsSUFBb0I7QUFDdEIsWUFBTTRCLEtBQVV0RSxJQUFTaUosZ0JBQWdCO0FBR3hDRCxNQUFBQSxHQUFrQyxhQUFJdEcsS0FBTyxJQUFJc0IsRUFDaEQrRSxHQUFVOUQsYUFBYXpJLEVBQUFBLEdBQWdCOEgsRUFBQUEsR0FDdkNBLElBQUFBLFFBRUF0RSxNQUFXLENBQUUsQ0FBQTtJQUVoQjtBQVdELFdBVkEwQyxHQUFLeUIsS0FBV3hILEVBQUFBLEdBVVQrRjtFQUFnQjs7O0FDanVFbEIsTUFBTSxPQUFPLENBQUMsU0FBaUM7QUFDcEQsV0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQU9RLElBQUk7QUFBQTtBQUFBLEVBRXJCOzs7QUNaTyxNQUFNLGFBQU4sY0FBeUIsWUFBWTtBQUFBLElBQzFDLFVBQWtCO0FBQUEsSUFFbEIsT0FBYyxlQUFlLFNBQWlCLFVBQWtCLEdBQUc7QUFDakUsZUFDRyxjQUEwQixhQUFhLEVBQ3ZDLG1CQUFtQixTQUFTLE9BQU87QUFBQSxJQUN4QztBQUFBLElBRVEsbUJBQW1CLFNBQWlCLFVBQWtCLEdBQUc7QUFDL0QsV0FBSyxVQUFVO0FBQ2YsVUFBSSxZQUFZLEdBQUc7QUFDakIsZUFBTyxXQUFXLE1BQU0sS0FBSyxLQUFLLEdBQUcsT0FBTztBQUFBLE1BQzlDO0FBQ0EsV0FBSyxPQUFPO0FBQ1osV0FBSyxPQUFPO0FBQUEsSUFDZDtBQUFBLElBRVEsU0FBUztBQUNmLFdBQUssVUFBVSxPQUFPLFFBQVE7QUFBQSxJQUNoQztBQUFBLElBRVEsT0FBTztBQUNiLFdBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxJQUM3QjtBQUFBLElBRVEsU0FBUztBQUNmLFFBQU8sS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzlCO0FBQUEsSUFFUSxXQUEyQjtBQUNqQyxhQUFPO0FBQUEsY0FDRyxLQUFLLE9BQU87QUFBQSx5REFDK0IsTUFBTSxLQUFLLEtBQUssQ0FBQztBQUFBLFVBQ2hFLEtBQUssT0FBTyxDQUFDO0FBQUE7QUFBQTtBQUFBLElBR3JCO0FBQUEsRUFDRjtBQUVBLGlCQUFlLE9BQU8sZUFBZSxVQUFVOzs7QUNoQy9DLE1BQUksa0JBQXlDO0FBRXRDLE1BQU0sMkJBQTJCLENBQUN3RyxPQUE2QjtBQUNwRSxzQkFBa0JBO0FBQUEsRUFDcEI7QUFHTyxNQUFNLGlCQUFpQixDQUFDQyxXQUFpQjtBQUM5QyxRQUFJLG9CQUFvQixjQUFjO0FBQ3BDLGlCQUFXLGVBQWVBLE9BQU0sT0FBTztBQUFBLElBQ3pDLE9BQU87QUFDTCxlQUFTLGNBQWMsSUFBSSxZQUFZLGdCQUFnQixFQUFFLFFBQVFBLE9BQU0sQ0FBQyxDQUFDO0FBQUEsSUFDM0U7QUFBQSxFQUNGO0FBR08sTUFBTSxnQkFBZ0IsQ0FBSSxRQUFtQjtBQUNsRCxRQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gscUJBQWUsSUFBSSxLQUFLO0FBQUEsSUFDMUI7QUFBQSxFQUNGOzs7QUMzQkEsTUFBTSxTQUFTLGlCQUFpQjtBQU1oQyxXQUFTLGlCQUFpQixpQkFBaUIsTUFBTTtBQUMvQyxVQUFNQyxjQUFhLFNBQVMsY0FBMEIsYUFBYTtBQUNuRSxJQUFBQSxZQUFXLFNBQVM7QUFFcEIsV0FBTyxpQkFBaUIsV0FBVyxPQUFPQyxPQUFNO0FBQzlDLFlBQU0sRUFBRSxNQUFNLE1BQU0sVUFBVSxJQUFJQSxHQUFFO0FBQ3BDLGNBQVEsTUFBTTtBQUFBLFFBQ1osS0FBSyxRQUFRO0FBQ1gsY0FBSSxLQUFLLFVBQVU7QUFDakI7QUFBQSxVQUNGLE9BQU87QUFDTCxrQkFBTSxNQUFNLE1BQU1ELFlBQVcsZUFBZSxLQUFLLEtBQW1CO0FBQ3BFLDBCQUFjLEdBQUc7QUFDakI7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLFFBQ0EsS0FBSyxlQUFlO0FBQ2xCLGdCQUFNLGNBQWUsS0FBeUI7QUFDOUMsZ0JBQU0sTUFBTSxNQUFNQSxZQUFXLGFBQWEsV0FBVztBQUNyRCxjQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsd0JBQVlDLEVBQUM7QUFDYjtBQUFBLFVBQ0Y7QUFFQSxpQkFBTyxZQUFZO0FBQUEsWUFDakIsTUFBTTtBQUFBLFlBQ047QUFBQSxZQUNBLE1BQU0sSUFBSTtBQUFBLFVBQ1osQ0FBQztBQUNEO0FBQUEsUUFDRjtBQUFBLFFBQ0EsS0FBSyxRQUFRO0FBQ1gsZ0JBQU1ELFlBQVcsS0FBSztBQUN0QixpQkFBTyxZQUFZO0FBQUEsWUFDakIsTUFBTTtBQUFBLFlBQ047QUFBQSxVQUNGLENBQUM7QUFDRDtBQUFBLFFBQ0Y7QUFBQSxRQUNBLEtBQUssUUFBUTtBQUNYLGdCQUFNQSxZQUFXLEtBQUs7QUFDdEIsaUJBQU8sWUFBWTtBQUFBLFlBQ2pCLE1BQU07QUFBQSxZQUNOO0FBQUEsVUFDRixDQUFDO0FBQ0Q7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0YsQ0FBQztBQUVELFdBQU8sWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQUEsRUFDdEMsQ0FBQztBQUVELFdBQVMsaUJBQWlCLGVBQWUsTUFBTTtBQUM3QyxXQUFPLFlBQVksRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUFBLEVBQ3JDLENBQUM7QUFFRCxXQUFTLGlCQUFpQixnQkFBZ0IsQ0FBQ0MsT0FBMEI7QUFDbkUsWUFBUSxJQUFJLGVBQWVBLEdBQUUsTUFBTTtBQUNuQyxXQUFPLFlBQVk7QUFBQSxNQUNqQixNQUFNO0FBQUEsTUFDTixPQUFPQSxHQUFFLE9BQU87QUFBQSxJQUNsQixDQUFDO0FBQUEsRUFDSCxDQUFDOzs7QUNyRU0sV0FBUyxHQUFNLE9BQXFCO0FBQ3pDLFdBQU8sRUFBRSxJQUFJLE1BQU0sTUFBYTtBQUFBLEVBQ2xDO0FBRU8sV0FBUyxNQUFTLE9BQWtDO0FBQ3pELFFBQUksT0FBTyxVQUFVLFVBQVU7QUFDN0IsYUFBTyxFQUFFLElBQUksT0FBTyxPQUFPLElBQUksTUFBTSxLQUFLLEVBQUU7QUFBQSxJQUM5QztBQUNBLFdBQU8sRUFBRSxJQUFJLE9BQU8sT0FBTyxNQUFNO0FBQUEsRUFDbkM7OztBQ0NPLE1BQU0sYUFBTixNQUFNLFlBQTZCO0FBQUEsSUFDeEMsY0FBc0I7QUFBQSxJQUN0QixpQkFBZ0M7QUFBQSxJQUNoQyxPQUFnQjtBQUFBO0FBQUEsSUFHaEIsTUFBTSxHQUFHQyxJQUF3QztBQUMvQyxhQUFPLEdBQUcsSUFBSSxZQUFXLENBQUM7QUFBQSxJQUM1QjtBQUFBLEVBQ0Y7QUFFTyxNQUFNLGVBQU4sTUFBTSxjQUFhO0FBQUEsSUFDeEIsT0FBZTtBQUFBLElBQ2YsY0FBc0I7QUFBQSxJQUN0QjtBQUFBLElBQ0E7QUFBQSxJQUVBO0FBQUEsSUFFQSxZQUFZLElBQVEsZ0JBQStCQyxPQUFlO0FBQ2hFLFdBQUssaUJBQWlCO0FBQ3RCLFdBQUssT0FBT0E7QUFDWixXQUFLLEtBQUs7QUFBQSxJQUNaO0FBQUEsSUFFQSxNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELFlBQU0sTUFBTSxLQUFLLEdBQUcsUUFBUUEsWUFBVyxJQUFJO0FBQzNDLFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUNBLE1BQUFBLFlBQVcsT0FBTyxJQUFJLE1BQU07QUFDNUIsYUFBTztBQUFBLFFBQ0wsSUFBSSxjQUFhLElBQUksTUFBTSxTQUFTLEtBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLE1BQ3BFO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7OztBQ2hDTyxNQUFNLGVBQU4sTUFBTSxjQUFhO0FBQUEsSUFDeEIsSUFBWTtBQUFBLElBQ1osSUFBWTtBQUFBLElBRVosWUFBWUMsS0FBWSxHQUFHQyxLQUFZLEdBQUc7QUFDeEMsV0FBSyxJQUFJRDtBQUNULFdBQUssSUFBSUM7QUFBQSxJQUNYO0FBQUEsSUFFQSxNQUFNLEtBQTRCO0FBQ2hDLGFBQU8sSUFBSSxNQUFNLEtBQUssS0FBSyxJQUFJLE1BQU0sS0FBSztBQUFBLElBQzVDO0FBQUEsSUFFQSxTQUFpQztBQUMvQixhQUFPO0FBQUEsUUFDTCxHQUFHLEtBQUs7QUFBQSxRQUNSLEdBQUcsS0FBSztBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsSUFFQSxPQUFPLFNBQVMsS0FBMkM7QUFDekQsYUFBTyxJQUFJLGNBQWEsSUFBSSxHQUFHLElBQUksQ0FBQztBQUFBLElBQ3RDO0FBQUEsRUFDRjtBQWtCTyxNQUFNLGtCQUFrQixDQUFDLFVBQXFDO0FBQ25FLFVBQU0sTUFBTSxvQkFBSSxJQUFtQjtBQUVuQyxVQUFNLFFBQVEsQ0FBQ0MsT0FBb0I7QUFDakMsWUFBTSxNQUFNLElBQUksSUFBSUEsR0FBRSxDQUFDLEtBQUssQ0FBQztBQUM3QixVQUFJLEtBQUtBLEVBQUM7QUFDVixVQUFJLElBQUlBLEdBQUUsR0FBRyxHQUFHO0FBQUEsSUFDbEIsQ0FBQztBQUVELFdBQU87QUFBQSxFQUNUO0FBVU8sTUFBTSxrQkFBa0IsQ0FBQyxVQUFxQztBQUNuRSxVQUFNLE1BQU0sb0JBQUksSUFBbUI7QUFFbkMsVUFBTSxRQUFRLENBQUNBLE9BQW9CO0FBQ2pDLFlBQU0sTUFBTSxJQUFJLElBQUlBLEdBQUUsQ0FBQyxLQUFLLENBQUM7QUFDN0IsVUFBSSxLQUFLQSxFQUFDO0FBQ1YsVUFBSSxJQUFJQSxHQUFFLEdBQUcsR0FBRztBQUFBLElBQ2xCLENBQUM7QUFFRCxXQUFPO0FBQUEsRUFDVDtBQU9PLE1BQU0sd0JBQXdCLENBQUMsVUFBa0M7QUFDdEUsVUFBTSxNQUFNO0FBQUEsTUFDVixPQUFPLG9CQUFJLElBQW1CO0FBQUEsTUFDOUIsT0FBTyxvQkFBSSxJQUFtQjtBQUFBLElBQ2hDO0FBRUEsVUFBTSxRQUFRLENBQUNBLE9BQW9CO0FBQ2pDLFVBQUksTUFBTSxJQUFJLE1BQU0sSUFBSUEsR0FBRSxDQUFDLEtBQUssQ0FBQztBQUNqQyxVQUFJLEtBQUtBLEVBQUM7QUFDVixVQUFJLE1BQU0sSUFBSUEsR0FBRSxHQUFHLEdBQUc7QUFDdEIsWUFBTSxJQUFJLE1BQU0sSUFBSUEsR0FBRSxDQUFDLEtBQUssQ0FBQztBQUM3QixVQUFJLEtBQUtBLEVBQUM7QUFDVixVQUFJLE1BQU0sSUFBSUEsR0FBRSxHQUFHLEdBQUc7QUFBQSxJQUN4QixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1Q7OztBQzNETyxNQUFNLEtBQU4sTUFBTSxJQUFHO0FBQUEsSUFDZCxTQUFrQixDQUFDO0FBQUEsSUFFbkIsWUFBWSxRQUFpQjtBQUMzQixXQUFLLFNBQVM7QUFBQSxJQUNoQjtBQUFBO0FBQUEsSUFHQSw0QkFDRSxNQUNBLGVBQ2M7QUFDZCxlQUFTQyxLQUFJLEdBQUdBLEtBQUksY0FBYyxRQUFRQSxNQUFLO0FBQzdDLGNBQU1DLEtBQUksY0FBY0QsRUFBQyxFQUFFLFFBQVEsSUFBSTtBQUN2QyxZQUFJLENBQUNDLEdBQUUsSUFBSTtBQUNULGlCQUFPQTtBQUFBLFFBQ1Q7QUFDQSxlQUFPQSxHQUFFLE1BQU07QUFBQSxNQUNqQjtBQUVBLGFBQU8sR0FBRyxJQUFJO0FBQUEsSUFDaEI7QUFBQTtBQUFBLElBR0EsUUFBUSxNQUE4QjtBQUNwQyxZQUFNLGdCQUF5QixDQUFDO0FBQ2hDLGVBQVNELEtBQUksR0FBR0EsS0FBSSxLQUFLLE9BQU8sUUFBUUEsTUFBSztBQUMzQyxjQUFNQyxLQUFJLEtBQUssT0FBT0QsRUFBQyxFQUFFLFFBQVEsSUFBSTtBQUNyQyxZQUFJLENBQUNDLEdBQUUsSUFBSTtBQUdULGdCQUFNLFlBQVksS0FBSyw0QkFBNEIsTUFBTSxhQUFhO0FBQ3RFLGNBQUksQ0FBQyxVQUFVLElBQUk7QUFDakIsbUJBQU87QUFBQSxVQUNUO0FBQ0EsaUJBQU9BO0FBQUEsUUFDVDtBQUNBLGVBQU9BLEdBQUUsTUFBTTtBQUNmLHNCQUFjLFFBQVFBLEdBQUUsTUFBTSxPQUFPO0FBQUEsTUFDdkM7QUFFQSxhQUFPLEdBQUc7QUFBQSxRQUNSO0FBQUEsUUFDQSxTQUFTLElBQUksSUFBRyxhQUFhO0FBQUEsTUFDL0IsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBT0EsTUFBTSwyQkFBMkIsQ0FBQyxVQUFnQixTQUE2QjtBQUM3RSxhQUFTRCxLQUFJLEdBQUdBLEtBQUksU0FBUyxRQUFRQSxNQUFLO0FBQ3hDLFlBQU0sTUFBTSxTQUFTQSxFQUFDLEVBQUUsUUFBUSxJQUFJO0FBQ3BDLFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUNBLGFBQU8sSUFBSSxNQUFNO0FBQUEsSUFDbkI7QUFFQSxXQUFPLEdBQUcsSUFBSTtBQUFBLEVBQ2hCO0FBSU8sTUFBTSxvQkFBb0IsQ0FDL0IsS0FDQSxTQUN5QjtBQUN6QixVQUFNLFdBQWlCLENBQUM7QUFDeEIsYUFBU0EsS0FBSSxHQUFHQSxLQUFJLElBQUksUUFBUUEsTUFBSztBQUNuQyxZQUFNLE1BQU0sSUFBSUEsRUFBQyxFQUFFLFFBQVEsSUFBSTtBQUMvQixVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsY0FBTSxhQUFhLHlCQUF5QixVQUFVLElBQUk7QUFDMUQsWUFBSSxDQUFDLFdBQVcsSUFBSTtBQUlsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxlQUFPO0FBQUEsTUFDVDtBQUNBLGVBQVMsUUFBUSxJQUFJLE1BQU0sT0FBTztBQUNsQyxhQUFPLElBQUksTUFBTTtBQUFBLElBQ25CO0FBRUEsV0FBTyxHQUFHO0FBQUEsTUFDUixLQUFLO0FBQUEsTUFDTDtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7OztBQ3hJTyxNQUFNLGlCQUFOLE1BQXNDO0FBQUEsSUFDM0M7QUFBQSxJQUNBO0FBQUE7QUFBQSxJQUdBO0FBQUEsSUFFQSxZQUNFLE1BQ0Esa0JBQ0EsbUJBQXdDLG9CQUFJLElBQUksR0FDaEQ7QUFDQSxXQUFLLE9BQU87QUFDWixXQUFLLG1CQUFtQjtBQUN4QixXQUFLLG1CQUFtQjtBQUFBLElBQzFCO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFVBQUksS0FBSyxvQkFBb0IsS0FBSyxJQUFJLE1BQU0sUUFBVztBQUNyRCxlQUFPLE1BQU0sR0FBRyxLQUFLLElBQUksNkJBQTZCO0FBQUEsTUFDeEQ7QUFFQSxXQUFLLG9CQUFvQixLQUFLLE1BQU0sS0FBSyxnQkFBZ0I7QUFNekQsV0FBSyxNQUFNLFNBQVMsUUFBUSxDQUFDLE1BQVksVUFBa0I7QUFDekQsYUFBSztBQUFBLFVBQ0gsS0FBSztBQUFBLFVBQ0wsS0FBSyxpQkFBaUIsSUFBSSxLQUFLLEtBQUssS0FBSyxpQkFBaUI7QUFBQSxRQUM1RDtBQUFBLE1BQ0YsQ0FBQztBQUVELGFBQU8sR0FBRyxFQUFFLE1BQVksU0FBUyxLQUFLLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDbkQ7QUFBQSxJQUVBLFVBQWlCO0FBQ2YsYUFBTyxJQUFJLGtCQUFrQixLQUFLLElBQUk7QUFBQSxJQUN4QztBQUFBLEVBQ0Y7QUFFTyxNQUFNLG9CQUFOLE1BQXlDO0FBQUEsSUFDOUM7QUFBQSxJQUVBLFlBQVksTUFBYztBQUN4QixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0sbUJBQW1CLEtBQUssb0JBQW9CLEtBQUssSUFBSTtBQUUzRCxVQUFJLHFCQUFxQixRQUFXO0FBQ2xDLGVBQU87QUFBQSxVQUNMLHdCQUF3QixLQUFLLElBQUk7QUFBQSxRQUNuQztBQUFBLE1BQ0Y7QUFFQSxVQUFJLGlCQUFpQixVQUFVO0FBQzdCLGVBQU8sTUFBTSxxQkFBcUIsS0FBSyxJQUFJLG9CQUFvQjtBQUFBLE1BQ2pFO0FBR0EsV0FBSyx1QkFBdUIsS0FBSyxJQUFJO0FBRXJDLFlBQU0sZ0NBQXFELG9CQUFJLElBQUk7QUFJbkUsV0FBSyxNQUFNLFNBQVMsUUFBUSxDQUFDLE1BQVksVUFBa0I7QUFDekQsY0FBTSxRQUFRLEtBQUssVUFBVSxLQUFLLElBQUk7QUFDdEMsWUFBSSxVQUFVLFFBQVc7QUFDdkIsd0NBQThCLElBQUksT0FBTyxLQUFLO0FBQUEsUUFDaEQ7QUFDQSxhQUFLLGFBQWEsS0FBSyxJQUFJO0FBQUEsTUFDN0IsQ0FBQztBQUVELGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsS0FBSyxRQUFRLGtCQUFrQiw2QkFBNkI7QUFBQSxNQUN2RSxDQUFDO0FBQUEsSUFDSDtBQUFBLElBRVEsUUFDTixrQkFDQSxvQ0FDTztBQUNQLGFBQU8sSUFBSTtBQUFBLFFBQ1QsS0FBSztBQUFBLFFBQ0w7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRU8sTUFBTSxvQkFBTixNQUFNLG1CQUFtQztBQUFBLElBQzlDO0FBQUEsSUFDQTtBQUFBLElBRUEsWUFBWSxTQUFpQixTQUFpQjtBQUM1QyxXQUFLLFVBQVU7QUFDZixXQUFLLFVBQVU7QUFBQSxJQUNqQjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxVQUFJLEtBQUssb0JBQW9CLEtBQUssT0FBTyxNQUFNLFFBQVc7QUFDeEQsZUFBTyxNQUFNLEdBQUcsS0FBSyxPQUFPLDhCQUE4QjtBQUFBLE1BQzVEO0FBRUEsWUFBTSxtQkFBbUIsS0FBSyxvQkFBb0IsS0FBSyxPQUFPO0FBQzlELFVBQUkscUJBQXFCLFFBQVc7QUFDbEMsZUFBTyxNQUFNLEdBQUcsS0FBSyxPQUFPLDZCQUE2QjtBQUFBLE1BQzNEO0FBQ0EsVUFBSSxpQkFBaUIsVUFBVTtBQUM3QixlQUFPLE1BQU0saUJBQWlCLEtBQUssT0FBTyxvQkFBb0I7QUFBQSxNQUNoRTtBQUVBLFdBQUssb0JBQW9CLEtBQUssU0FBUyxnQkFBZ0I7QUFDdkQsV0FBSyx1QkFBdUIsS0FBSyxPQUFPO0FBR3hDLFdBQUssTUFBTSxTQUFTLFFBQVEsQ0FBQyxTQUFlO0FBQzFDLGNBQU0sUUFBUSxLQUFLLFVBQVUsS0FBSyxPQUFPLEtBQUssaUJBQWlCO0FBQy9ELGFBQUssVUFBVSxLQUFLLFNBQVMsS0FBSztBQUNsQyxhQUFLLGFBQWEsS0FBSyxPQUFPO0FBQUEsTUFDaEMsQ0FBQztBQUVELGFBQU8sR0FBRyxFQUFFLE1BQVksU0FBUyxLQUFLLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDbkQ7QUFBQSxJQUVBLFVBQWlCO0FBQ2YsYUFBTyxJQUFJLG1CQUFrQixLQUFLLFNBQVMsS0FBSyxPQUFPO0FBQUEsSUFDekQ7QUFBQSxFQUNGO0FBRU8sTUFBTSxvQkFBTixNQUFNLG1CQUFtQztBQUFBLElBQzlDO0FBQUEsSUFDQTtBQUFBO0FBQUEsSUFHQTtBQUFBLElBRUEsWUFDRSxNQUNBLGtCQUNBLG1CQUF3QyxvQkFBSSxJQUFJLEdBQ2hEO0FBQ0EsV0FBSyxPQUFPO0FBQ1osV0FBSyxtQkFBbUI7QUFDeEIsV0FBSyxtQkFBbUI7QUFBQSxJQUMxQjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLHNCQUFzQixLQUFLLG9CQUFvQixLQUFLLElBQUk7QUFDOUQsVUFBSSx3QkFBd0IsUUFBVztBQUNyQyxlQUFPLE1BQU0sR0FBRyxLQUFLLElBQUksNkJBQTZCO0FBQUEsTUFDeEQ7QUFDQSxVQUFJLG9CQUFvQixVQUFVO0FBQ2hDLGVBQU8sTUFBTSxpQkFBaUIsS0FBSyxJQUFJLG9CQUFvQjtBQUFBLE1BQzdEO0FBR0EsV0FBSyxpQkFBaUIsVUFBVSxLQUFLLGlCQUFpQixNQUFNO0FBQUEsUUFDMUQsS0FBSyxpQkFBaUI7QUFBQSxNQUN4QjtBQUVBLFdBQUssb0JBQW9CLEtBQUssTUFBTSxLQUFLLGdCQUFnQjtBQUV6RCxZQUFNLG1CQUF3QyxvQkFBSSxJQUFJO0FBS3RELFdBQUssTUFBTSxTQUFTLFFBQVEsQ0FBQyxNQUFZLFVBQWtCO0FBQ3pELGNBQU0sV0FBVyxLQUFLLFVBQVUsS0FBSyxJQUFJO0FBRXpDLFlBQUk7QUFDSixZQUFJLEtBQUssaUJBQWlCLElBQUksS0FBSyxHQUFHO0FBR3BDLHFCQUFXLEtBQUssaUJBQWlCLElBQUksS0FBSztBQUFBLFFBQzVDLFdBQ0UsYUFBYSxvQkFBb0IsV0FDakMsS0FBSyxpQkFBaUIsTUFBTSxPQUFPLFlBQ25DLEtBQUssaUJBQWlCLE1BQU0sTUFBTSxVQUNsQztBQUdBLHFCQUFXLEtBQUssaUJBQWlCO0FBQ2pDLDJCQUFpQixJQUFJLE9BQU8sUUFBUTtBQUFBLFFBSXRDLE9BQU87QUFFTCxxQkFBVyxLQUFLLGlCQUFpQixNQUFNLE1BQU0sUUFBUTtBQUNyRCxxQkFBVyxLQUFLLGlCQUFpQixVQUFVLE1BQU0sUUFBUTtBQUN6RCwyQkFBaUIsSUFBSSxPQUFPLFFBQVE7QUFBQSxRQUN0QztBQUNBLGFBQUssVUFBVSxLQUFLLE1BQU0sUUFBUTtBQUFBLE1BQ3BDLENBQUM7QUFFRCxhQUFPLEdBQUc7QUFBQSxRQUNSO0FBQUEsUUFDQSxTQUFTLEtBQUssUUFBUSxxQkFBcUIsZ0JBQWdCO0FBQUEsTUFDN0QsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUVBLFFBQ0UscUJBQ0Esa0JBQ087QUFDUCxhQUFPLElBQUk7QUFBQSxRQUNULEtBQUs7QUFBQSxRQUNMO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVPLE1BQU0sc0JBQU4sTUFBTSxxQkFBcUM7QUFBQSxJQUNoRDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUFZLE1BQWMsT0FBZSxXQUFtQjtBQUMxRCxXQUFLLE9BQU87QUFDWixXQUFLLFFBQVE7QUFDYixXQUFLLFlBQVk7QUFBQSxJQUNuQjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLG9CQUFvQixLQUFLLG9CQUFvQixLQUFLLElBQUk7QUFDNUQsVUFBSSxzQkFBc0IsUUFBVztBQUNuQyxlQUFPLE1BQU0sR0FBRyxLQUFLLElBQUksNkJBQTZCO0FBQUEsTUFDeEQ7QUFFQSxZQUFNLE9BQU8sS0FBSyxNQUFNLFNBQVMsS0FBSyxTQUFTO0FBQy9DLFlBQU0sV0FBVyxLQUFLLFVBQVUsS0FBSyxJQUFJLEtBQUssa0JBQWtCO0FBQ2hFLFdBQUssVUFBVSxLQUFLLE1BQU0sa0JBQWtCLGNBQWMsS0FBSyxLQUFLLENBQUM7QUFFckUsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLEtBQUssUUFBUSxRQUFRLEVBQUUsQ0FBQztBQUFBLElBQzNEO0FBQUEsSUFFQSxRQUFRLE9BQXNCO0FBQzVCLGFBQU8sSUFBSSxxQkFBb0IsS0FBSyxNQUFNLE9BQU8sS0FBSyxTQUFTO0FBQUEsSUFDakU7QUFBQSxFQUNGO0FBRU8sV0FBUyxZQUNkLE1BQ0Esa0JBQ0k7QUFDSixXQUFPLElBQUksR0FBRyxDQUFDLElBQUksZUFBZSxNQUFNLGdCQUFnQixDQUFDLENBQUM7QUFBQSxFQUM1RDtBQUVPLFdBQVMsZUFBZSxNQUFrQjtBQUMvQyxXQUFPLElBQUksR0FBRyxDQUFDLElBQUksa0JBQWtCLElBQUksQ0FBQyxDQUFDO0FBQUEsRUFDN0M7QUFFTyxXQUFTLGVBQWUsU0FBaUIsU0FBcUI7QUFDbkUsV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLGtCQUFrQixTQUFTLE9BQU8sQ0FBQyxDQUFDO0FBQUEsRUFDekQ7QUFFTyxXQUFTLGVBQ2QsTUFDQSxrQkFDSTtBQUNKLFdBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxrQkFBa0IsTUFBTSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQUEsRUFDL0Q7QUFFTyxXQUFTLGlCQUNkLE1BQ0EsT0FDQSxXQUNJO0FBQ0osV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixNQUFNLE9BQU8sU0FBUyxDQUFDLENBQUM7QUFBQSxFQUNqRTs7O0FDdFJPLFdBQVMsb0JBQ2RFLElBQ0FDLElBQ0EsTUFDc0I7QUFDdEIsVUFBTSxRQUFRLEtBQUs7QUFDbkIsUUFBSUEsT0FBTSxJQUFJO0FBQ1osTUFBQUEsS0FBSSxNQUFNLFNBQVMsU0FBUztBQUFBLElBQzlCO0FBQ0EsUUFBSUQsS0FBSSxLQUFLQSxNQUFLLE1BQU0sU0FBUyxRQUFRO0FBQ3ZDLGFBQU87QUFBQSxRQUNMLHlCQUF5QkEsRUFBQyxlQUFlLE1BQU0sU0FBUyxTQUFTLENBQUM7QUFBQSxNQUNwRTtBQUFBLElBQ0Y7QUFDQSxRQUFJQyxLQUFJLEtBQUtBLE1BQUssTUFBTSxTQUFTLFFBQVE7QUFDdkMsYUFBTztBQUFBLFFBQ0wseUJBQXlCQSxFQUFDLGVBQWUsTUFBTSxTQUFTLFNBQVMsQ0FBQztBQUFBLE1BQ3BFO0FBQUEsSUFDRjtBQUNBLFFBQUlELE9BQU1DLElBQUc7QUFDWCxhQUFPLE1BQU0sb0NBQW9DRCxFQUFDLFFBQVFDLEVBQUMsRUFBRTtBQUFBLElBQy9EO0FBQ0EsV0FBTyxHQUFHLElBQUksYUFBYUQsSUFBR0MsRUFBQyxDQUFDO0FBQUEsRUFDbEM7QUFFTyxNQUFNLGVBQU4sTUFBb0M7QUFBQSxJQUN6QyxJQUFZO0FBQUEsSUFDWixJQUFZO0FBQUEsSUFFWixZQUFZRCxJQUFXQyxJQUFXO0FBQ2hDLFdBQUssSUFBSUQ7QUFDVCxXQUFLLElBQUlDO0FBQUEsSUFDWDtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxVQUFJLEtBQUssTUFBTSxJQUFJO0FBQ2pCLGFBQUssSUFBSSxLQUFLLE1BQU0sU0FBUyxTQUFTO0FBQUEsTUFDeEM7QUFDQSxVQUFJLEtBQUssTUFBTSxJQUFJO0FBQ2pCLGFBQUssSUFBSSxLQUFLLE1BQU0sU0FBUyxTQUFTO0FBQUEsTUFDeEM7QUFFQSxZQUFNQyxLQUFJLG9CQUFvQixLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUk7QUFDbEQsVUFBSSxDQUFDQSxHQUFFLElBQUk7QUFDVCxlQUFPQTtBQUFBLE1BQ1Q7QUFHQSxVQUFJLENBQUMsS0FBSyxNQUFNLE1BQU0sS0FBSyxDQUFDLFVBQXdCLE1BQU0sTUFBTUEsR0FBRSxLQUFLLENBQUMsR0FBRztBQUN6RSxhQUFLLE1BQU0sTUFBTSxLQUFLQSxHQUFFLEtBQUs7QUFBQSxNQUMvQjtBQUVBLGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsS0FBSyxRQUFRO0FBQUEsTUFDeEIsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUVBLFVBQWlCO0FBQ2YsYUFBTyxJQUFJLGdCQUFnQixLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQUEsSUFDM0M7QUFBQSxFQUNGO0FBRU8sTUFBTSxrQkFBTixNQUF1QztBQUFBLElBQzVDLElBQVk7QUFBQSxJQUNaLElBQVk7QUFBQSxJQUVaLFlBQVlGLElBQVdDLElBQVc7QUFDaEMsV0FBSyxJQUFJRDtBQUNULFdBQUssSUFBSUM7QUFBQSxJQUNYO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFVBQUksS0FBSyxNQUFNLElBQUk7QUFDakIsYUFBSyxJQUFJLEtBQUssTUFBTSxTQUFTLFNBQVM7QUFBQSxNQUN4QztBQUNBLFVBQUksS0FBSyxNQUFNLElBQUk7QUFDakIsYUFBSyxJQUFJLEtBQUssTUFBTSxTQUFTLFNBQVM7QUFBQSxNQUN4QztBQUVBLFlBQU1DLEtBQUksb0JBQW9CLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSTtBQUNsRCxVQUFJLENBQUNBLEdBQUUsSUFBSTtBQUNULGVBQU9BO0FBQUEsTUFDVDtBQUNBLFdBQUssTUFBTSxRQUFRLEtBQUssTUFBTSxNQUFNO0FBQUEsUUFDbEMsQ0FBQ0MsT0FBNkIsQ0FBQ0EsR0FBRSxNQUFNRCxHQUFFLEtBQUs7QUFBQSxNQUNoRDtBQUVBLGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsS0FBSyxRQUFRO0FBQUEsTUFDeEIsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUVBLFVBQWlCO0FBQ2YsYUFBTyxJQUFJLGFBQWEsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUFBLElBQ3hDO0FBQUEsRUFDRjtBQUVBLFdBQVMsd0JBQXdCLE9BQWUsT0FBNEI7QUFDMUUsUUFBSSxRQUFRLEtBQUssUUFBUSxNQUFNLFNBQVMsU0FBUyxHQUFHO0FBQ2xELGFBQU8sTUFBTSxHQUFHLEtBQUssd0JBQXdCLE1BQU0sU0FBUyxTQUFTLENBQUMsR0FBRztBQUFBLElBQzNFO0FBQ0EsV0FBTyxHQUFHLElBQUk7QUFBQSxFQUNoQjtBQUVBLFdBQVMsaUNBQ1AsT0FDQSxPQUNjO0FBQ2QsUUFBSSxRQUFRLEtBQUssUUFBUSxNQUFNLFNBQVMsU0FBUyxHQUFHO0FBQ2xELGFBQU8sTUFBTSxHQUFHLEtBQUssd0JBQXdCLE1BQU0sU0FBUyxTQUFTLENBQUMsR0FBRztBQUFBLElBQzNFO0FBQ0EsV0FBTyxHQUFHLElBQUk7QUFBQSxFQUNoQjtBQUVPLE1BQU0sb0JBQU4sTUFBeUM7QUFBQSxJQUM5QyxRQUFnQjtBQUFBLElBQ2hCO0FBQUEsSUFFQSxZQUNFLE9BQ0EsdUJBQW9ELE1BQ3BEO0FBQ0EsV0FBSyxRQUFRO0FBQ2IsV0FBSyx1QkFBdUI7QUFBQSxJQUM5QjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLFFBQVEsS0FBSztBQUNuQixZQUFNLE1BQU0sd0JBQXdCLEtBQUssT0FBTyxLQUFLO0FBQ3JELFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUNBLFVBQUksT0FBTyxLQUFLLFFBQVE7QUFDeEIsVUFBSSxLQUFLLHlCQUF5QixNQUFNO0FBQ3RDLGVBQU8sS0FBSyxxQkFBcUI7QUFBQSxNQUNuQztBQUNBLFdBQUssTUFBTSxTQUFTLE9BQU8sS0FBSyxRQUFRLEdBQUcsR0FBRyxJQUFJO0FBR2xELGVBQVNGLEtBQUksR0FBR0EsS0FBSSxNQUFNLE1BQU0sUUFBUUEsTUFBSztBQUMzQyxjQUFNLE9BQU8sTUFBTSxNQUFNQSxFQUFDO0FBQzFCLFlBQUksS0FBSyxLQUFLLEtBQUssUUFBUSxHQUFHO0FBQzVCLGVBQUs7QUFBQSxRQUNQO0FBQ0EsWUFBSSxLQUFLLEtBQUssS0FBSyxRQUFRLEdBQUc7QUFDNUIsZUFBSztBQUFBLFFBQ1A7QUFBQSxNQUNGO0FBRUEsVUFBSSxLQUFLLHlCQUF5QixNQUFNO0FBQ3RDLGNBQU0sTUFBTSxLQUFLLEdBQUcsS0FBSyxxQkFBcUIsS0FBSztBQUFBLE1BQ3JEO0FBRUEsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLEtBQUssUUFBUSxFQUFFLENBQUM7QUFBQSxJQUNuRDtBQUFBLElBRUEsVUFBaUI7QUFDZixhQUFPLElBQUksZ0JBQWdCLEtBQUssUUFBUSxDQUFDO0FBQUEsSUFDM0M7QUFBQSxFQUNGO0FBRU8sTUFBTSxlQUFOLE1BQW9DO0FBQUEsSUFDekMsUUFBZ0I7QUFBQSxJQUVoQixZQUFZLE9BQWU7QUFDekIsV0FBSyxRQUFRO0FBQUEsSUFDZjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLFFBQVEsS0FBSztBQUNuQixZQUFNLE1BQU0saUNBQWlDLEtBQUssT0FBTyxLQUFLO0FBQzlELFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUVBLFlBQU0sT0FBTyxLQUFLLE1BQU0sU0FBUyxLQUFLLEtBQUssRUFBRSxJQUFJO0FBRWpELFdBQUssTUFBTSxTQUFTLE9BQU8sS0FBSyxPQUFPLEdBQUcsSUFBSTtBQUc5QyxlQUFTQSxLQUFJLEdBQUdBLEtBQUksTUFBTSxNQUFNLFFBQVFBLE1BQUs7QUFDM0MsY0FBTSxPQUFPLE1BQU0sTUFBTUEsRUFBQztBQUMxQixZQUFJLEtBQUssSUFBSSxLQUFLLE9BQU87QUFDdkIsZUFBSztBQUFBLFFBQ1A7QUFDQSxZQUFJLEtBQUssSUFBSSxLQUFLLE9BQU87QUFDdkIsZUFBSztBQUFBLFFBQ1A7QUFBQSxNQUNGO0FBQ0EsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLEtBQUssUUFBUSxFQUFFLENBQUM7QUFBQSxJQUNuRDtBQUFBLElBRUEsVUFBaUI7QUFDZixhQUFPLElBQUksZ0JBQWdCLEtBQUssUUFBUSxDQUFDO0FBQUEsSUFDM0M7QUFBQSxFQUNGO0FBSU8sTUFBTSxrQ0FBTixNQUFNLGlDQUFpRDtBQUFBLElBQzVELGdCQUF3QjtBQUFBLElBQ3hCLGNBQXNCO0FBQUEsSUFDdEI7QUFBQSxJQUVBLFlBQ0UsZUFDQSxhQUNBLGNBQTRCLG9CQUFJLElBQUksR0FDcEM7QUFDQSxXQUFLLGdCQUFnQjtBQUNyQixXQUFLLGNBQWM7QUFDbkIsV0FBSyxjQUFjO0FBQUEsSUFDckI7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsWUFBTSxRQUFRLEtBQUs7QUFDbkIsVUFBSSxNQUFNLGlDQUFpQyxLQUFLLGVBQWUsS0FBSztBQUNwRSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLGlDQUFpQyxLQUFLLGFBQWEsS0FBSztBQUM5RCxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFFQSxVQUFJLEtBQUssWUFBWSxPQUFPLFdBQVcsR0FBRztBQUN4QyxjQUFNLGNBQTRCLG9CQUFJLElBQUk7QUFFMUMsaUJBQVNBLEtBQUksR0FBR0EsS0FBSSxNQUFNLE1BQU0sUUFBUUEsTUFBSztBQUMzQyxnQkFBTSxPQUFPLE1BQU0sTUFBTUEsRUFBQztBQUUxQixjQUFJLEtBQUssTUFBTSxLQUFLLGlCQUFpQixLQUFLLE1BQU0sS0FBSyxhQUFhO0FBQ2hFO0FBQUEsVUFDRjtBQUVBLGNBQUksS0FBSyxNQUFNLEtBQUssZUFBZTtBQUNqQyx3QkFBWTtBQUFBLGNBQ1YsSUFBSSxhQUFhLEtBQUssYUFBYSxLQUFLLENBQUM7QUFBQSxjQUN6QyxJQUFJLGFBQWEsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUFBLFlBQ2pDO0FBQ0EsaUJBQUssSUFBSSxLQUFLO0FBQUEsVUFDaEI7QUFBQSxRQUNGO0FBQ0EsZUFBTyxHQUFHO0FBQUEsVUFDUjtBQUFBLFVBQ0EsU0FBUyxLQUFLO0FBQUEsWUFDWixLQUFLO0FBQUEsWUFDTCxLQUFLO0FBQUEsWUFDTDtBQUFBLFVBQ0Y7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNILE9BQU87QUFDTCxpQkFBU0EsS0FBSSxHQUFHQSxLQUFJLE1BQU0sTUFBTSxRQUFRQSxNQUFLO0FBQzNDLGdCQUFNLFVBQVUsS0FBSyxZQUFZLElBQUksS0FBSyxNQUFNLE1BQU1BLEVBQUMsQ0FBQztBQUN4RCxjQUFJLFlBQVksUUFBVztBQUN6QixpQkFBSyxNQUFNLE1BQU1BLEVBQUMsSUFBSTtBQUFBLFVBQ3hCO0FBQUEsUUFDRjtBQUVBLGVBQU8sR0FBRztBQUFBLFVBQ1I7QUFBQSxVQUNBLFNBQVMsSUFBSTtBQUFBLFlBQ1gsS0FBSztBQUFBLFlBQ0wsS0FBSztBQUFBLFVBQ1A7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUFBLElBRUEsUUFDRSxhQUNBLGVBQ0EsYUFDTztBQUNQLGFBQU8sSUFBSTtBQUFBLFFBQ1Q7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVPLE1BQU0sMEJBQU4sTUFBK0M7QUFBQSxJQUNwRCxZQUFvQjtBQUFBLElBQ3BCLFVBQWtCO0FBQUEsSUFFbEIsWUFBWSxXQUFtQixTQUFpQjtBQUM5QyxXQUFLLFlBQVk7QUFDakIsV0FBSyxVQUFVO0FBQUEsSUFDakI7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsWUFBTSxNQUFNLHdCQUF3QixLQUFLLFdBQVcsS0FBSyxLQUFLO0FBQzlELFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUVBLFlBQU0sV0FBMkIsQ0FBQztBQUNsQyxXQUFLLE1BQU0sTUFBTSxRQUFRLENBQUMsU0FBdUI7QUFDL0MsWUFBSSxLQUFLLE1BQU0sS0FBSyxXQUFXO0FBQzdCLG1CQUFTLEtBQUssSUFBSSxhQUFhLEtBQUssU0FBUyxLQUFLLENBQUMsQ0FBQztBQUFBLFFBQ3REO0FBQ0EsWUFBSSxLQUFLLE1BQU0sS0FBSyxXQUFXO0FBQzdCLG1CQUFTLEtBQUssSUFBSSxhQUFhLEtBQUssR0FBRyxLQUFLLE9BQU8sQ0FBQztBQUFBLFFBQ3REO0FBQUEsTUFDRixDQUFDO0FBQ0QsV0FBSyxNQUFNLE1BQU0sS0FBSyxHQUFHLFFBQVE7QUFFakMsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLElBQUksb0JBQW9CLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDdEU7QUFBQSxFQUNGO0FBRU8sTUFBTSxzQkFBTixNQUEyQztBQUFBLElBQ2hEO0FBQUEsSUFFQSxZQUFZLE9BQXVCO0FBQ2pDLFdBQUssUUFBUTtBQUFBLElBQ2Y7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsV0FBSyxNQUFNLFFBQVEsS0FBSyxNQUFNLE1BQU07QUFBQSxRQUNsQyxDQUFDLFNBQ0MsT0FDQSxLQUFLLE1BQU07QUFBQSxVQUFVLENBQUMsZ0JBQ3BCLEtBQUssTUFBTSxXQUFXO0FBQUEsUUFDeEI7QUFBQSxNQUNKO0FBRUEsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLElBQUksaUJBQWlCLEtBQUssS0FBSyxFQUFFLENBQUM7QUFBQSxJQUNyRTtBQUFBLEVBQ0Y7QUFFTyxNQUFNLG1CQUFOLE1BQXdDO0FBQUEsSUFDN0M7QUFBQSxJQUVBLFlBQVksT0FBdUI7QUFDakMsV0FBSyxRQUFRO0FBQUEsSUFDZjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxXQUFLLE1BQU0sTUFBTSxLQUFLLEdBQUcsS0FBSyxLQUFLO0FBRW5DLGFBQU8sR0FBRyxFQUFFLE1BQVksU0FBUyxJQUFJLG9CQUFvQixLQUFLLEtBQUssRUFBRSxDQUFDO0FBQUEsSUFDeEU7QUFBQSxFQUNGO0FBT08sTUFBTSxrQkFBTixNQUF1QztBQUFBLElBQzVDLFFBQWdCO0FBQUEsSUFFaEIsWUFBWSxPQUFlO0FBQ3pCLFdBQUssUUFBUTtBQUFBLElBQ2Y7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsWUFBTSxRQUFRLEtBQUs7QUFDbkIsWUFBTSxNQUFNLHdCQUF3QixLQUFLLE9BQU8sS0FBSztBQUNyRCxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFFQSxZQUFNLG9CQUFvQixNQUFNLE1BQU0sT0FBTyxDQUFDLE9BQXFCO0FBQ2pFLFlBQUksR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sS0FBSyxPQUFPO0FBQzlDLGlCQUFPO0FBQUEsUUFDVDtBQUNBLGVBQU87QUFBQSxNQUNULENBQUM7QUFHRCxZQUFNLFFBQVEsTUFBTSxNQUFNLE9BQU8sQ0FBQyxPQUFxQjtBQUNyRCxZQUFJLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLEtBQUssT0FBTztBQUM5QyxpQkFBTztBQUFBLFFBQ1Q7QUFDQSxlQUFPO0FBQUEsTUFDVCxDQUFDO0FBR0QsZUFBU0EsS0FBSSxHQUFHQSxLQUFJLE1BQU0sTUFBTSxRQUFRQSxNQUFLO0FBQzNDLGNBQU0sT0FBTyxNQUFNLE1BQU1BLEVBQUM7QUFDMUIsWUFBSSxLQUFLLElBQUksS0FBSyxPQUFPO0FBQ3ZCLGVBQUs7QUFBQSxRQUNQO0FBQ0EsWUFBSSxLQUFLLElBQUksS0FBSyxPQUFPO0FBQ3ZCLGVBQUs7QUFBQSxRQUNQO0FBQUEsTUFDRjtBQUVBLFlBQU0sbUJBQW1CLE1BQU0sU0FBUyxPQUFPLEtBQUssT0FBTyxDQUFDO0FBQzVELFlBQU0sdUJBQXVCO0FBQUEsUUFDM0IsT0FBTztBQUFBLFFBQ1AsTUFBTSxpQkFBaUIsQ0FBQztBQUFBLE1BQzFCO0FBQ0EsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLEtBQUssUUFBUSxvQkFBb0IsRUFBRSxDQUFDO0FBQUEsSUFDdkU7QUFBQSxJQUVBLFFBQVEsc0JBQW1EO0FBQ3pELGFBQU8sSUFBSSxrQkFBa0IsS0FBSyxRQUFRLEdBQUcsb0JBQW9CO0FBQUEsSUFDbkU7QUFBQSxFQUNGO0FBRU8sTUFBTSx3QkFBTixNQUFNLHVCQUF1QztBQUFBLElBQ2xELGNBQWM7QUFBQSxJQUFDO0FBQUEsSUFFZixRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0sWUFBWSxzQkFBc0IsS0FBSyxNQUFNLEtBQUs7QUFDeEQsWUFBTSxRQUFRO0FBQ2QsWUFBTSxTQUFTLEtBQUssTUFBTSxTQUFTLFNBQVM7QUFLNUMsZUFBU0EsS0FBSSxPQUFPQSxLQUFJLFFBQVFBLE1BQUs7QUFDbkMsY0FBTSxlQUFlLFVBQVUsTUFBTSxJQUFJQSxFQUFDO0FBQzFDLFlBQUksaUJBQWlCLFFBQVc7QUFDOUIsZ0JBQU0sWUFBWSxJQUFJLGFBQWFBLElBQUcsTUFBTTtBQUM1QyxlQUFLLE1BQU0sTUFBTSxLQUFLLFNBQVM7QUFBQSxRQUNqQyxPQUFPO0FBRUwsY0FDRSxhQUFhLFNBQVMsS0FDdEIsYUFBYSxLQUFLLENBQUMsVUFBd0IsTUFBTSxNQUFNLE1BQU0sR0FDN0Q7QUFDQSxrQkFBTSxjQUFjLElBQUksYUFBYUEsSUFBRyxNQUFNO0FBQzlDLGlCQUFLLE1BQU0sUUFBUSxLQUFLLE1BQU0sTUFBTTtBQUFBLGNBQ2xDLENBQUMsVUFBd0IsQ0FBQyxZQUFZLE1BQU0sS0FBSztBQUFBLFlBQ25EO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBS0EsZUFBU0EsS0FBSSxRQUFRLEdBQUdBLEtBQUksUUFBUUEsTUFBSztBQUN2QyxjQUFNLGVBQWUsVUFBVSxNQUFNLElBQUlBLEVBQUM7QUFDMUMsWUFBSSxpQkFBaUIsUUFBVztBQUM5QixnQkFBTSxZQUFZLElBQUksYUFBYSxPQUFPQSxFQUFDO0FBQzNDLGVBQUssTUFBTSxNQUFNLEtBQUssU0FBUztBQUFBLFFBQ2pDLE9BQU87QUFFTCxjQUNFLGFBQWEsU0FBUyxLQUN0QixhQUFhLEtBQUssQ0FBQyxVQUF3QixNQUFNLE1BQU0sS0FBSyxHQUM1RDtBQUNBLGtCQUFNLGNBQWMsSUFBSSxhQUFhLE9BQU9BLEVBQUM7QUFDN0MsaUJBQUssTUFBTSxRQUFRLEtBQUssTUFBTSxNQUFNO0FBQUEsY0FDbEMsQ0FBQyxVQUF3QixDQUFDLFlBQVksTUFBTSxLQUFLO0FBQUEsWUFDbkQ7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxVQUFJLEtBQUssTUFBTSxNQUFNLFdBQVcsR0FBRztBQUNqQyxhQUFLLE1BQU0sTUFBTSxLQUFLLElBQUksYUFBYSxPQUFPLE1BQU0sQ0FBQztBQUFBLE1BQ3ZEO0FBRUEsYUFBTyxHQUFHLEVBQUUsTUFBWSxTQUFTLEtBQUssUUFBUSxFQUFFLENBQUM7QUFBQSxJQUNuRDtBQUFBLElBRUEsVUFBaUI7QUFDZixhQUFPLElBQUksdUJBQXNCO0FBQUEsSUFDbkM7QUFBQSxFQUNGO0FBRU8sTUFBTSxtQkFBTixNQUFNLGtCQUFrQztBQUFBLElBQzdDO0FBQUEsSUFDQTtBQUFBLElBRUEsWUFBWSxXQUFtQixNQUFjO0FBQzNDLFdBQUssWUFBWTtBQUNqQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0sTUFBTSx3QkFBd0IsS0FBSyxXQUFXLEtBQUssS0FBSztBQUM5RCxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLFVBQVUsS0FBSyxNQUFNLFNBQVMsS0FBSyxTQUFTLEVBQUU7QUFDcEQsV0FBSyxNQUFNLFNBQVMsS0FBSyxTQUFTLEVBQUUsT0FBTyxLQUFLO0FBQ2hELGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsS0FBSyxRQUFRLE9BQU87QUFBQSxNQUMvQixDQUFDO0FBQUEsSUFDSDtBQUFBLElBRUEsUUFBUSxTQUF3QjtBQUM5QixhQUFPLElBQUksa0JBQWlCLEtBQUssV0FBVyxPQUFPO0FBQUEsSUFDckQ7QUFBQSxFQUNGO0FBRU8sV0FBUywrQkFBK0IsV0FBdUI7QUFDcEUsV0FBTyxJQUFJLEdBQUc7QUFBQSxNQUNaLElBQUksc0JBQXNCO0FBQUEsTUFDMUIsSUFBSSxrQkFBa0IsU0FBUztBQUFBLE1BQy9CLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztBQUFBLE1BQ2pDLElBQUksYUFBYSxZQUFZLEdBQUcsRUFBRTtBQUFBLE1BQ2xDLElBQUksc0JBQXNCO0FBQUEsSUFDNUIsQ0FBQztBQUFBLEVBQ0g7QUFFTyxXQUFTLGNBQWMsV0FBbUIsTUFBa0I7QUFDakUsV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLGlCQUFpQixXQUFXLElBQUksQ0FBQyxDQUFDO0FBQUEsRUFDdkQ7QUFFTyxXQUFTLFlBQVksV0FBdUI7QUFDakQsVUFBTSxTQUFrQjtBQUFBLE1BQ3RCLElBQUksYUFBYSxTQUFTO0FBQUEsTUFDMUIsSUFBSSxhQUFhLFdBQVcsWUFBWSxDQUFDO0FBQUEsTUFDekMsSUFBSSxnQ0FBZ0MsV0FBVyxZQUFZLENBQUM7QUFBQSxJQUM5RDtBQUVBLFdBQU8sSUFBSSxHQUFHLE1BQU07QUFBQSxFQUN0QjtBQUVPLFdBQVMsVUFBVSxXQUF1QjtBQUMvQyxVQUFNLFNBQWtCO0FBQUEsTUFDdEIsSUFBSSxhQUFhLFNBQVM7QUFBQSxNQUMxQixJQUFJLHdCQUF3QixXQUFXLFlBQVksQ0FBQztBQUFBLElBQ3REO0FBRUEsV0FBTyxJQUFJLEdBQUcsTUFBTTtBQUFBLEVBQ3RCO0FBRU8sV0FBUyxhQUFhLFdBQXVCO0FBQ2xELFdBQU8sSUFBSSxHQUFHO0FBQUEsTUFDWixJQUFJLHNCQUFzQjtBQUFBLE1BQzFCLElBQUksZ0JBQWdCLFNBQVM7QUFBQSxNQUM3QixJQUFJLHNCQUFzQjtBQUFBLElBQzVCLENBQUM7QUFBQSxFQUNIO0FBRU8sV0FBUyxVQUFVLGVBQXVCLGFBQXlCO0FBQ3hFLFdBQU8sSUFBSSxHQUFHO0FBQUEsTUFDWixJQUFJLHNCQUFzQjtBQUFBLE1BQzFCLElBQUksYUFBYSxlQUFlLFdBQVc7QUFBQSxNQUMzQyxJQUFJLHNCQUFzQjtBQUFBLElBQzVCLENBQUM7QUFBQSxFQUNIO0FBRU8sV0FBUyxxQkFBeUI7QUFDdkMsV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLENBQUM7QUFBQSxFQUM3QztBQUVPLFdBQVMsYUFBYUEsSUFBV0MsSUFBZTtBQUNyRCxXQUFPLElBQUksR0FBRztBQUFBLE1BQ1osSUFBSSxzQkFBc0I7QUFBQSxNQUMxQixJQUFJLGdCQUFnQkQsSUFBR0MsRUFBQztBQUFBLE1BQ3hCLElBQUksc0JBQXNCO0FBQUEsSUFDNUIsQ0FBQztBQUFBLEVBQ0g7QUFFTyxXQUFTLDBCQUEwQixXQUF1QjtBQUMvRCxXQUFPLElBQUksR0FBRztBQUFBLE1BQ1osSUFBSSxzQkFBc0I7QUFBQSxNQUMxQixJQUFJLGtCQUFrQixTQUFTO0FBQUEsTUFDL0IsSUFBSSxvQkFBb0IsWUFBWSxJQUFJLFlBQVksQ0FBQztBQUFBLE1BQ3JELElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztBQUFBLE1BQ2pDLElBQUksYUFBYSxZQUFZLEdBQUcsRUFBRTtBQUFBLE1BQ2xDLElBQUksc0JBQXNCO0FBQUEsSUFDNUIsQ0FBQztBQUFBLEVBQ0g7OztBQ3hqQk8sTUFBTSx1QkFBTixNQUE2QztBQUFBLElBQ2xELGNBQ0U7QUFBQSxJQUNGLGlCQUFnQztBQUFBLElBQ2hDLE9BQWdCO0FBQUEsSUFFaEIsTUFBTSxHQUFHRyxhQUFpRDtBQUN4RCxVQUFJQSxZQUFXLGlCQUFpQixJQUFJO0FBQ2xDLGVBQU8sTUFBTSxJQUFJLE1BQU0sMEJBQTBCLENBQUM7QUFBQSxNQUNwRDtBQUNBLFlBQU0sZ0JBQWdCLE1BQU1BLFlBQ3pCLGNBQW1DLHVCQUF1QixFQUMxRCxpQkFBaUJBLFlBQVcsS0FBSyxPQUFPQSxZQUFXLGNBQWMsTUFBTTtBQUMxRSxVQUFJLGtCQUFrQixRQUFXO0FBQy9CLGVBQU8sTUFBTSxJQUFJLE1BQU0sOEJBQThCLENBQUM7QUFBQSxNQUN4RDtBQUNBLFlBQU0sTUFBTSxVQUFVLGVBQWVBLFlBQVcsWUFBWSxFQUFFO0FBQUEsUUFDNURBLFlBQVc7QUFBQSxNQUNiO0FBQ0EsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTztBQUFBLFFBQ0wsSUFBSTtBQUFBLFVBQ0YsSUFBSSxNQUFNO0FBQUEsVUFDVCxLQUFLLGlCQUFpQixLQUFLO0FBQUEsVUFDNUI7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGOzs7QUM5Qk8sTUFBTSxxQkFBTixNQUEyQztBQUFBLElBQ2hELGNBQXNCO0FBQUEsSUFDdEIsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQSxJQUVoQixNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELFVBQUlBLFlBQVcsaUJBQWlCLElBQUk7QUFDbEMsZUFBTyxNQUFNLElBQUksTUFBTSwwQkFBMEIsQ0FBQztBQUFBLE1BQ3BEO0FBQ0EsWUFBTSxnQkFBZ0IsTUFBTUEsWUFDekIsY0FBbUMsdUJBQXVCLEVBQzFELGlCQUFpQkEsWUFBVyxLQUFLLE9BQU9BLFlBQVcsY0FBYyxNQUFNO0FBQzFFLFVBQUksa0JBQWtCLFFBQVc7QUFDL0IsZUFBTyxNQUFNLElBQUksTUFBTSw0QkFBNEIsQ0FBQztBQUFBLE1BQ3REO0FBQ0EsWUFBTSxNQUFNLFVBQVVBLFlBQVcsY0FBYyxhQUFhLEVBQUU7QUFBQSxRQUM1REEsWUFBVztBQUFBLE1BQ2I7QUFDQSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUEsUUFDTCxJQUFJO0FBQUEsVUFDRixJQUFJLE1BQU07QUFBQSxVQUNULEtBQUssaUJBQWlCLEtBQUs7QUFBQSxVQUM1QjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7OztBQzlCTyxNQUFNLHVCQUFOLE1BQTZDO0FBQUEsSUFDbEQsY0FBc0I7QUFBQSxJQUN0QixpQkFBZ0M7QUFBQSxJQUNoQyxPQUFnQjtBQUFBLElBRWhCLE1BQU0sR0FBR0MsYUFBaUQ7QUFDeEQsTUFBQUEsWUFDRyxjQUFvQyxpQkFBaUIsRUFDckQsV0FBV0EsV0FBVTtBQUd4QixhQUFPLEdBQUcsSUFBSSxXQUFXLENBQUM7QUFBQSxJQUM1QjtBQUFBLEVBQ0Y7OztBQ2JPLE1BQU0sbUJBQU4sTUFBeUM7QUFBQSxJQUM5QyxjQUFzQjtBQUFBLElBQ3RCLGlCQUFnQztBQUFBLElBQ2hDLE9BQWdCO0FBQUE7QUFBQSxJQUdoQixNQUFNLEdBQUcsYUFBa0Q7QUFDekQsZUFDRyxjQUErQixtQkFBbUIsRUFDbEQsd0JBQXdCLFdBQVc7QUFDdEMsYUFBTyxHQUFHLElBQUk7QUFBQSxJQUNoQjtBQUFBLEVBQ0Y7QUFFTyxNQUFNLHVCQUFOLE1BQTZDO0FBQUEsSUFDbEQsY0FDRTtBQUFBLElBQ0YsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQTtBQUFBLElBR2hCLE1BQU0sR0FBRyxhQUFrRDtBQUN6RCxlQUNHLGNBQStCLG1CQUFtQixFQUNsRCx3QkFBd0IsV0FBVztBQUN0QyxhQUFPLEdBQUcsSUFBSTtBQUFBLElBQ2hCO0FBQUEsRUFDRjs7O0FDNUJPLE1BQU0sYUFBTixNQUFtQztBQUFBLElBQ3hDLGNBQXNCO0FBQUEsSUFDdEIsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQSxJQUVoQixNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELE1BQUFBLFlBQ0csY0FBaUMscUJBQXFCLEVBQ3RELFVBQVU7QUFDYixhQUFPLEdBQUcsSUFBSTtBQUFBLElBQ2hCO0FBQUEsRUFDRjs7O0FDWE8sTUFBTSxrQkFBTixNQUF3QztBQUFBLElBQzdDLGNBQXNCO0FBQUEsSUFDdEIsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQSxJQUVoQixNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELE1BQUFBLFlBQVcsZUFBZTtBQUMxQixhQUFPLEdBQUcsSUFBSTtBQUFBLElBQ2hCO0FBQUEsRUFDRjs7O0FDSE8sTUFBTSxrQkFBTixNQUF3QztBQUFBLElBQzdDLGNBQXNCO0FBQUEsSUFDdEIsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQSxJQUVoQixNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELFVBQUlBLFlBQVcsaUJBQWlCLElBQUk7QUFDbEMsZUFBTyxNQUFNLElBQUksTUFBTSxnQ0FBZ0MsQ0FBQztBQUFBLE1BQzFEO0FBQ0EsWUFBTSxNQUFNLFlBQVlBLFlBQVcsWUFBWSxFQUFFLFFBQVFBLFlBQVcsSUFBSTtBQUN4RSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUEsUUFDTCxJQUFJLGFBQWEsSUFBSSxNQUFNLFNBQVMsS0FBSyxnQkFBZ0IsS0FBSyxJQUFJO0FBQUEsTUFDcEU7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVPLE1BQU0sZ0JBQU4sTUFBc0M7QUFBQSxJQUMzQyxjQUFzQjtBQUFBLElBQ3RCLGlCQUFnQztBQUFBLElBQ2hDLE9BQWdCO0FBQUEsSUFFaEIsTUFBTSxHQUFHQSxhQUFpRDtBQUN4RCxVQUFJQSxZQUFXLGlCQUFpQixJQUFJO0FBQ2xDLGVBQU8sTUFBTSxJQUFJLE1BQU0sZ0NBQWdDLENBQUM7QUFBQSxNQUMxRDtBQUNBLFlBQU0sTUFBTSxVQUFVQSxZQUFXLFlBQVksRUFBRSxRQUFRQSxZQUFXLElBQUk7QUFDdEUsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTztBQUFBLFFBQ0wsSUFBSSxhQUFhLElBQUksTUFBTSxTQUFTLEtBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLE1BQ3BFO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFTyxNQUFNLGdCQUFOLE1BQXNDO0FBQUEsSUFDM0MsY0FBc0I7QUFBQSxJQUN0QixpQkFBZ0M7QUFBQSxJQUNoQyxPQUFnQjtBQUFBLElBRWhCLE1BQU0sR0FBR0EsYUFBaUQ7QUFDeEQsWUFBTSxNQUFNLDBCQUEwQixDQUFDLEVBQUUsUUFBUUEsWUFBVyxJQUFJO0FBQ2hFLFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUNBLGFBQU87QUFBQSxRQUNMLElBQUksYUFBYSxJQUFJLE1BQU0sU0FBUyxLQUFLLGdCQUFnQixLQUFLLElBQUk7QUFBQSxNQUNwRTtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRU8sTUFBTSxtQkFBTixNQUF5QztBQUFBLElBQzlDLGNBQXNCO0FBQUEsSUFDdEIsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQSxJQUVoQixNQUFNLEdBQUdBLGFBQWlEO0FBQ3hELFVBQUlBLFlBQVcsaUJBQWlCLElBQUk7QUFDbEMsZUFBTyxNQUFNLElBQUksTUFBTSxnQ0FBZ0MsQ0FBQztBQUFBLE1BQzFEO0FBQ0EsWUFBTSxNQUFNLGFBQWFBLFlBQVcsWUFBWSxFQUFFLFFBQVFBLFlBQVcsSUFBSTtBQUN6RSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFDQSxNQUFBQSxZQUFXLGVBQWU7QUFDMUIsYUFBTztBQUFBLFFBQ0wsSUFBSSxhQUFhLElBQUksTUFBTSxTQUFTLEtBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLE1BQ3BFO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7OztBQ2xGQSxNQUFNLDBCQUEwQjtBQUl6QixNQUFNLGNBQWMsTUFBTTtBQUMvQixXQUFPLGFBQWE7QUFBQSxNQUNsQjtBQUFBLE1BQ0EsU0FBUyxLQUFLLFVBQVUsT0FBTyxVQUFVLElBQUksTUFBTTtBQUFBLElBQ3JEO0FBQUEsRUFDRjtBQUVPLE1BQU0sbUJBQW1CLE1BQU07QUFDcEMsYUFBUyxLQUFLLFVBQVU7QUFBQSxNQUN0QjtBQUFBLE1BQ0EsT0FBTyxhQUFhLFFBQVEsdUJBQXVCLE1BQU07QUFBQSxJQUMzRDtBQUFBLEVBQ0Y7OztBQ1hPLE1BQU0sdUJBQU4sTUFBNkM7QUFBQSxJQUNsRCxjQUFzQjtBQUFBLElBQ3RCLGlCQUFnQztBQUFBLElBQ2hDLE9BQWdCO0FBQUE7QUFBQSxJQUdoQixNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELGtCQUFZO0FBRVosYUFBTyxHQUFHLElBQUk7QUFBQSxJQUNoQjtBQUFBLEVBQ0Y7OztBQ1pPLE1BQU0sb0JBQU4sTUFBMEM7QUFBQSxJQUMvQyxjQUFzQjtBQUFBLElBQ3RCLGlCQUFnQztBQUFBLElBQ2hDLE9BQWdCO0FBQUEsSUFFaEIsTUFBTSxHQUFHQyxhQUFpRDtBQUN4RCxNQUFBQSxZQUFXLFlBQVk7QUFFdkIsYUFBTyxHQUFHLElBQUk7QUFBQSxJQUNoQjtBQUFBLEVBQ0Y7OztBQ1RPLE1BQU0sYUFBTixNQUFtQztBQUFBLElBQ3hDLGNBQXNCO0FBQUEsSUFDdEIsaUJBQWdDO0FBQUEsSUFDaEMsT0FBZ0I7QUFBQSxJQUVoQixNQUFNLEdBQUdDLGFBQWlEO0FBQ3hELFlBQU0sTUFBTSxNQUFNLEtBQUtBLFdBQVU7QUFDakMsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU87QUFBQSxNQUNUO0FBR0EsYUFBTyxHQUFHLElBQUksV0FBVyxDQUFDO0FBQUEsSUFDNUI7QUFBQSxFQUNGO0FBRU8sTUFBTSxhQUFOLE1BQW1DO0FBQUEsSUFDeEMsY0FBc0I7QUFBQSxJQUN0QixpQkFBZ0M7QUFBQSxJQUNoQyxPQUFnQjtBQUFBLElBRWhCLE1BQU0sR0FBR0EsYUFBaUQ7QUFDeEQsWUFBTSxNQUFNLE1BQU0sS0FBS0EsV0FBVTtBQUNqQyxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1Q7QUFHQSxhQUFPLEdBQUcsSUFBSSxXQUFXLENBQUM7QUFBQSxJQUM1QjtBQUFBLEVBQ0Y7OztBQ0VPLE1BQU0saUJBQThDO0FBQUEsSUFDekQsc0JBQXNCLElBQUkscUJBQXFCO0FBQUEsSUFDL0MsbUJBQW1CLElBQUksa0JBQWtCO0FBQUEsSUFDekMsaUJBQWlCLElBQUksZ0JBQWdCO0FBQUEsSUFDckMsWUFBWSxJQUFJLFdBQVc7QUFBQSxJQUMzQixZQUFZLElBQUksV0FBVztBQUFBLElBQzNCLFlBQVksSUFBSSxXQUFXO0FBQUEsSUFDM0IsaUJBQWlCLElBQUksZ0JBQWdCO0FBQUEsSUFDckMsZUFBZSxJQUFJLGNBQWM7QUFBQSxJQUNqQyxlQUFlLElBQUksY0FBYztBQUFBLElBQ2pDLGtCQUFrQixJQUFJLGlCQUFpQjtBQUFBLElBQ3ZDLGtCQUFrQixJQUFJLGlCQUFpQjtBQUFBLElBQ3ZDLHNCQUFzQixJQUFJLHFCQUFxQjtBQUFBLElBQy9DLHNCQUFzQixJQUFJLHFCQUFxQjtBQUFBLElBQy9DLG9CQUFvQixJQUFJLG1CQUFtQjtBQUFBLElBQzNDLHNCQUFzQixJQUFJLHFCQUFxQjtBQUFBLEVBQ2pEOzs7QUN2Q0EsTUFBTSxZQUFzQixDQUFDO0FBQzdCLE1BQU0sWUFBc0IsQ0FBQztBQUV0QixNQUFNLE9BQU8sT0FBT0MsZ0JBQWtEO0FBQzNFLFVBQU0sU0FBUyxVQUFVLElBQUk7QUFDN0IsUUFBSSxDQUFDLFFBQVE7QUFDWCxhQUFPLEdBQUcsSUFBSTtBQUFBLElBQ2hCO0FBRUEsV0FBTyxNQUFNLGNBQWMsUUFBUUEsYUFBWSxNQUFNO0FBQUEsRUFDdkQ7QUFFTyxNQUFNLE9BQU8sT0FBT0EsZ0JBQWtEO0FBQzNFLFVBQU0sU0FBUyxVQUFVLElBQUk7QUFDN0IsUUFBSSxDQUFDLFFBQVE7QUFDWCxhQUFPLEdBQUcsSUFBSTtBQUFBLElBQ2hCO0FBRUEsV0FBTyxNQUFNLGNBQWMsUUFBUUEsYUFBWSxNQUFNO0FBQUEsRUFDdkQ7QUFFTyxNQUFNLGdCQUFnQixPQUMzQixNQUNBQSxnQkFDMEI7QUFDMUIsV0FBTyxjQUFjLGVBQWUsSUFBSSxHQUFHQSxXQUFVO0FBQUEsRUFDdkQ7QUFFTyxNQUFNLGdCQUFnQixPQUMzQixRQUNBQSxhQUNBLGVBQTZCLGFBQ0g7QUFDMUIsVUFBTSxNQUFNLE1BQU0sT0FBTyxHQUFHQSxXQUFVO0FBQ3RDLFFBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxhQUFPO0FBQUEsSUFDVDtBQUNBLFlBQVEsT0FBTyxnQkFBZ0I7QUFBQSxNQUM3QixLQUFLO0FBQ0g7QUFBQSxNQUVGLEtBQUs7QUFDSCxRQUFBQSxZQUFXLFdBQVc7QUFDdEI7QUFBQSxNQUVGLEtBQUs7QUFDSCxRQUFBQSxZQUFXLDZCQUE2QjtBQUN4QyxRQUFBQSxZQUFXLFdBQVc7QUFHdEIsaUJBQVMsY0FBYyxJQUFJLFlBQVkseUJBQXlCLENBQUM7QUFBQSxNQUVuRTtBQUNFO0FBQUEsSUFDSjtBQUVBLFFBQUksT0FBTyxNQUFNO0FBQ2YsY0FBUSxjQUFjO0FBQUEsUUFDcEIsS0FBSztBQUNILG9CQUFVLEtBQUssSUFBSSxLQUFLO0FBQ3hCLG9CQUFVLFNBQVM7QUFDbkIsbUJBQVMsY0FBYyxJQUFJLFlBQVksYUFBYSxDQUFDO0FBQ3JEO0FBQUEsUUFFRixLQUFLO0FBQ0gsb0JBQVUsS0FBSyxJQUFJLEtBQUs7QUFDeEI7QUFBQSxRQUVGLEtBQUs7QUFDSCxvQkFBVSxLQUFLLElBQUksS0FBSztBQUN4QjtBQUFBLFFBRUY7QUFDRTtBQUFBLE1BQ0o7QUFBQSxJQUNGO0FBRUEsV0FBTyxHQUFHLElBQUk7QUFBQSxFQUNoQjtBQUVPLE1BQU0sWUFBWSxPQUN2QixJQUNBLGdCQUNBQyxPQUNBRCxnQkFDMEI7QUFDMUIsV0FBTyxjQUFjLElBQUksYUFBYSxJQUFJLGdCQUFnQkMsS0FBSSxHQUFHRCxXQUFVO0FBQUEsRUFDN0U7OztBQ2hHTyxNQUFNLFNBQW1DLG9CQUFJLElBQUk7QUFBQSxJQUN0RCxDQUFDLGdCQUFnQixtQkFBbUI7QUFBQSxJQUNwQyxDQUFDLGdCQUFnQixzQkFBc0I7QUFBQSxJQUN2QyxDQUFDLGdCQUFnQixpQkFBaUI7QUFBQSxJQUNsQyxDQUFDLFVBQVUsWUFBWTtBQUFBLElBQ3ZCLENBQUMsVUFBVSxZQUFZO0FBQUEsSUFDdkIsQ0FBQyxnQkFBZ0IsWUFBWTtBQUFBLElBQzdCLENBQUMsZ0JBQWdCLGlCQUFpQjtBQUFBLElBQ2xDLENBQUMsZ0JBQWdCLGVBQWU7QUFBQSxJQUNoQyxDQUFDLGNBQWMsZUFBZTtBQUFBLElBQzlCLENBQUMsY0FBYyxrQkFBa0I7QUFBQSxJQUNqQyxDQUFDLFVBQVUsa0JBQWtCO0FBQUEsSUFDN0IsQ0FBQyxnQkFBZ0Isc0JBQXNCO0FBQUEsSUFDdkMsQ0FBQyxnQkFBZ0Isc0JBQXNCO0FBQUEsSUFDdkMsQ0FBQyxnQkFBZ0Isb0JBQW9CO0FBQUEsSUFDckMsQ0FBQyxnQkFBZ0Isc0JBQXNCO0FBQUEsRUFDekMsQ0FBQztBQUVELE1BQUk7QUFFRyxNQUFNLHdCQUF3QixDQUFDLE9BQW1CO0FBQ3ZELGlCQUFhO0FBQ2IsYUFBUyxpQkFBaUIsV0FBVyxTQUFTO0FBQUEsRUFDaEQ7QUFFQSxNQUFNLFlBQVksT0FBT0UsT0FBcUI7QUFDNUMsVUFBTSxVQUFVLEdBQUdBLEdBQUUsV0FBVyxXQUFXLEVBQUUsR0FBR0EsR0FBRSxVQUFVLFVBQVUsRUFBRSxHQUFHQSxHQUFFLFVBQVUsVUFBVSxFQUFFLEdBQUdBLEdBQUUsU0FBUyxTQUFTLEVBQUUsR0FBR0EsR0FBRSxHQUFHO0FBRXBJLFVBQU0sYUFBYSxPQUFPLElBQUksT0FBTztBQUNyQyxRQUFJLGVBQWUsUUFBVztBQUM1QjtBQUFBLElBQ0Y7QUFDQSxJQUFBQSxHQUFFLGdCQUFnQjtBQUNsQixJQUFBQSxHQUFFLGVBQWU7QUFDakIsVUFBTSxNQUFNLE1BQU0sY0FBYyxZQUFZLFVBQVU7QUFDdEQsa0JBQWMsR0FBRztBQUFBLEVBQ25CO0FBRU8sTUFBTSxtQkFBbUIsTUFBTTtBQUNwQyxXQUFPLE9BQU8sUUFBUTtBQUN0QixXQUFPLE9BQU8sUUFBUTtBQUFBLEVBQ3hCOzs7QUMxQ0EsTUFBTSxvQkFBTixjQUFnQyxZQUFZO0FBQUEsSUFDMUMsb0JBQTBCO0FBQ3hCLFlBQU0sZ0JBQWdCLENBQUMsR0FBRyxPQUFPLFFBQVEsQ0FBQztBQUMxQyxvQkFBYyxLQUFLO0FBQ25CO0FBQUEsUUFDRTtBQUFBO0FBQUE7QUFBQSxjQUdRLGNBQWM7QUFBQSxVQUNkLENBQUMsQ0FBQyxLQUFLLFVBQVUsTUFDZjtBQUFBLHdCQUNRLEdBQUc7QUFBQSx3QkFDSCxlQUFlLFVBQVUsRUFBRSxXQUFXO0FBQUE7QUFBQSxRQUVsRCxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFJUDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFFQSxZQUFZO0FBQ1YsV0FBSyxjQUFpQyxRQUFRLEVBQUcsVUFBVTtBQUFBLElBQzdEO0FBQUEsRUFDRjtBQUVBLGlCQUFlLE9BQU8sdUJBQXVCLGlCQUFpQjs7O0FDNUJ2RCxNQUFNLG1CQUFOLGNBQStCLFlBQVk7QUFBQSxJQUNoRCxhQUFnQztBQUFBLElBQ2hDO0FBQUEsSUFFQSxjQUFjO0FBQ1osWUFBTTtBQUNOLFdBQUssZ0NBQWdDLE1BQU07QUFDekMsWUFBSSxLQUFLLGVBQWUsTUFBTTtBQUM1QixlQUFLLE9BQU87QUFBQSxRQUNkO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUVBLG9CQUEwQjtBQUN4QixlQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFFQSx1QkFBNkI7QUFDM0IsZUFBUztBQUFBLFFBQ1A7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQUEsSUFDRjtBQUFBLElBRVEsU0FBUztBQUNmLFFBQU8sS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzlCO0FBQUEsSUFFQSxVQUFVQyxhQUF3QjtBQUNoQyxXQUFLLGFBQWFBO0FBQ2xCLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVRLFdBQTJCO0FBQ2pDLFVBQUksQ0FBQyxLQUFLLFlBQVk7QUFDcEIsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLG1CQUFtQixLQUFLLFdBQVc7QUFDekMsYUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHFCQU9VLGdCQUFnQjtBQUFBLHNCQUNmLENBQUNDLE9BQWtCLEtBQUssWUFBWUEsRUFBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQVlyQyxLQUFLLFdBQVcsZ0NBQWdDO0FBQUEscUJBQ2xELENBQUNBLE9BQWtCO0FBQzFCLGFBQUssa0JBQWtCQSxFQUFDO0FBQUEsTUFDMUIsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1YO0FBQUEsSUFFUSxZQUFZQSxJQUFlO0FBQ2pDLFlBQU0sV0FBbUIsQ0FBRUEsR0FBRSxPQUE0QjtBQUN6RCxVQUFJLFdBQVcsS0FBSyxXQUFXLEtBQVM7QUFDdEMsYUFBSyxXQUFZLHFCQUFxQjtBQUFBLE1BQ3hDO0FBQUEsSUFDRjtBQUFBLElBRVEsa0JBQWtCQSxJQUFlO0FBQ3ZDLFlBQU1DLEtBQWNELEdBQUUsT0FBNEI7QUFDbEQsV0FBSyxXQUFZLG1DQUFtQ0M7QUFBQSxJQUN0RDtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLHNCQUFzQixnQkFBZ0I7OztBQ3hGckQsTUFBTSxlQUFOLGNBQTJCLFlBQVk7QUFBQSxJQUM1QyxTQUFtQztBQUFBLElBQ25DLFVBQXFDO0FBQUEsSUFDckMsZUFBd0M7QUFBQSxJQUN4QyxVQUEwQyxNQUFNO0FBQUEsSUFBQztBQUFBLElBRWpELG9CQUEwQjtBQUN4QixXQUFLLFNBQVMsS0FBSyxjQUFjLFFBQVE7QUFDekMsV0FBSyxVQUFVLEtBQUssY0FBYyxJQUFJO0FBQ3RDLFdBQUssZUFBZSxLQUFLLGNBQWMsT0FBTztBQUU5QyxXQUFLLGNBQWMsZ0JBQWdCLEVBQUcsaUJBQWlCLFNBQVMsTUFBTTtBQUNwRSxhQUFLLE9BQVEsTUFBTTtBQUNuQixhQUFLLFFBQVEsSUFBSTtBQUFBLE1BQ25CLENBQUM7QUFFRCxXQUFLLGNBQWMsWUFBWSxFQUFHLGlCQUFpQixTQUFTLE1BQU07QUFDaEUsYUFBSyxPQUFRLE1BQU07QUFDbkIsYUFBSyxRQUFRLEtBQUssYUFBYyxLQUFLO0FBQUEsTUFDdkMsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUVBLE9BQU8sU0FBeUM7QUFDOUMsWUFBTUMsS0FBSSxJQUFJLFFBQXVCLENBQUMsWUFBWTtBQUNoRCxhQUFLLFVBQVU7QUFBQSxNQUNqQixDQUFDO0FBRUQsV0FBSyxRQUFTLGNBQWM7QUFDNUIsV0FBSyxhQUFjLFFBQVE7QUFDM0IsV0FBSyxPQUFRLFVBQVU7QUFFdkIsYUFBT0E7QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUVBLGlCQUFlLE9BQU8saUJBQWlCLFlBQVk7OztBQzFCNUMsTUFBTSxpQkFBTixjQUE2QixZQUFZO0FBQUEsSUFDOUMsYUFBZ0M7QUFBQTtBQUFBLElBR2hDLGlCQUEyQixDQUFDO0FBQUEsSUFFNUIsa0JBQTBCO0FBQUEsSUFFMUI7QUFBQSxJQUVBLGNBQWM7QUFDWixZQUFNO0FBQ04sV0FBSyxnQ0FBZ0MsTUFBTTtBQUN6QyxZQUFJLEtBQUssZUFBZSxNQUFNO0FBQzVCLGVBQUssZ0JBQWdCO0FBQ3JCLGVBQUssT0FBTztBQUFBLFFBQ2Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBRUEsa0JBQWtCO0FBQ2hCLFlBQU0sT0FBTyxLQUFLLFlBQVk7QUFDOUIsVUFBSSxTQUFTLFFBQVc7QUFDdEI7QUFBQSxNQUNGO0FBQ0EsV0FBSyxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsT0FBTyxLQUFLLEtBQUssbUJBQW1CLENBQUM7QUFDbkUsVUFBSSxDQUFDLEtBQUssZUFBZSxTQUFTLEtBQUssZUFBZSxHQUFHO0FBQ3ZELGFBQUssa0JBQWtCO0FBQUEsTUFDekI7QUFBQSxJQUNGO0FBQUEsSUFFQSxvQkFBMEI7QUFDeEIsZUFBUztBQUFBLFFBQ1A7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQUEsSUFDRjtBQUFBLElBRUEsdUJBQTZCO0FBQzNCLGVBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxJQUVRLFNBQVM7QUFDZixRQUFPLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUM5QjtBQUFBLElBRUEsVUFBVUMsYUFBd0I7QUFDaEMsV0FBSyxhQUFhQTtBQUNsQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUE7QUFBQSxJQUdBLG1CQUEyQjtBQUN6QixhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUEsSUFFQSxlQUFlQyxJQUFlO0FBQzVCLFdBQUssa0JBQW1CQSxHQUFFLE9BQTZCO0FBQ3ZELFdBQUs7QUFBQSxRQUNILElBQUksWUFBWSw2QkFBNkI7QUFBQSxVQUMzQyxTQUFTO0FBQUEsVUFDVCxRQUFRLEtBQUs7QUFBQSxRQUNmLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUFBLElBRVEsV0FBMkI7QUFDakMsYUFBTztBQUFBLHVCQUNZLENBQUNBLE9BQWtCLEtBQUssZUFBZUEsRUFBQyxDQUFDO0FBQUEsVUFDdEQsS0FBSyxlQUFlLElBQUksQ0FBQyxZQUFvQjtBQUM3QyxjQUFNLFFBQVEsVUFBVSxVQUFVO0FBQ2xDLGVBQU8sc0JBQXlCLFlBQVksS0FBSyxlQUFlO0FBQUEsY0FDNUQsS0FBSztBQUFBO0FBQUEsTUFFWCxDQUFDLENBQUM7QUFBQTtBQUFBO0FBQUEsSUFHUjtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLG1CQUFtQixjQUFjOzs7QUM1RnZELE1BQU0sYUFBTixjQUF5QixZQUFZO0FBQUEsSUFDbkMsYUFBa0MsQ0FBQztBQUFBLElBRW5DLG9CQUEwQjtBQUN4QixXQUFLLGlCQUFpQixRQUFRLEVBQUUsUUFBUSxDQUFDLFdBQThCO0FBQ3JFLGNBQU0sU0FBUyxPQUFPLFFBQVE7QUFDOUIsWUFBSSxDQUFDLFFBQVE7QUFDWDtBQUFBLFFBQ0Y7QUFDQSxhQUFLLFdBQVcsS0FBSyxNQUFNO0FBQzNCLGVBQU8saUJBQWlCLFNBQVMsTUFBTSxLQUFLLFdBQVcsTUFBTSxDQUFDO0FBQUEsTUFDaEUsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUVBLFdBQVcsUUFBZ0I7QUFDekIsV0FBSyxXQUFXLFFBQVEsQ0FBQyxXQUE4QjtBQUNyRCxjQUFNLFdBQVcsU0FBUyxlQUFlLE9BQU8sUUFBUSxNQUFPO0FBQy9ELFlBQUksT0FBTyxRQUFRLFdBQVcsUUFBUTtBQUNwQyxvQkFBVSxVQUFVLE9BQU8sUUFBUTtBQUNuQyxpQkFBTyxVQUFVLElBQUksVUFBVTtBQUFBLFFBQ2pDLE9BQU87QUFDTCxvQkFBVSxVQUFVLElBQUksUUFBUTtBQUNoQyxpQkFBTyxVQUFVLE9BQU8sVUFBVTtBQUFBLFFBQ3BDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLGVBQWUsVUFBVTs7O0FDdkJ4QyxNQUFNLGNBQWMsQ0FBQ0MsT0FBb0JBLEdBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxFQUFFO0FBRXBFLE1BQU0sb0JBQW9CO0FBRTFCLE1BQU0sa0JBQWtCLENBQUNDLE9BQTRCO0FBQzFELFFBQUksQ0FBQyxrQkFBa0IsS0FBS0EsRUFBQyxHQUFHO0FBQzlCLGFBQU8sTUFBTSxJQUFJLE1BQU0sR0FBR0EsRUFBQyxzQkFBc0IsQ0FBQztBQUFBLElBQ3BEO0FBRUEsV0FBTyxHQUFHLG9CQUFJLEtBQUtBLEtBQUksZ0JBQWdCLENBQUM7QUFBQSxFQUMxQztBQUVPLE1BQU0sYUFBYSxNQUFZO0FBQ3BDLFVBQU1ELEtBQUksb0JBQUksS0FBSztBQUNuQixXQUFPLElBQUk7QUFBQSxNQUNULEtBQUssSUFBSUEsR0FBRSxZQUFZLEdBQUdBLEdBQUUsU0FBUyxHQUFHQSxHQUFFLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUFBLElBQy9EO0FBQUEsRUFDRjs7O0FDVE8sTUFBTSxlQUFlLENBQUMsV0FBNkI7QUFDeEQsUUFBSSxPQUFPLFVBQVUsYUFBYTtBQUNoQyxhQUFPLFdBQVc7QUFBQSxJQUNwQjtBQUVBLFdBQU8sSUFBSSxLQUFLLE9BQU8sS0FBSztBQUFBLEVBQzlCO0FBU08sTUFBTSxTQUFTLENBQUNFLE9BQXdDO0FBQzdELFVBQU0sTUFBNEI7QUFBQSxNQUNoQyxPQUFPO0FBQUEsTUFDUCxPQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUlBLEdBQUUsVUFBVSxXQUFXO0FBQ3pCLFVBQUksUUFBUTtBQUNaLFVBQUksUUFBUSxZQUFZLElBQUksS0FBS0EsR0FBRSxLQUFLLENBQUM7QUFBQSxJQUMzQztBQUNBLFdBQU87QUFBQSxFQUNUO0FBRU8sTUFBTSxXQUFXLENBQUNBLE9BQXdDO0FBQy9ELFVBQU0sWUFBd0IsRUFBRSxPQUFPLGFBQWEsT0FBTyxFQUFFO0FBRTdELFFBQUlBLEdBQUUsVUFBVSxRQUFXO0FBQ3pCLGFBQU87QUFBQSxJQUNUO0FBQ0EsUUFBSUEsR0FBRSxVQUFVLFdBQVc7QUFDekIsVUFBSUEsR0FBRSxVQUFVLFFBQVc7QUFDekIsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLE1BQU0sZ0JBQWdCQSxHQUFFLEtBQUs7QUFDbkMsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTztBQUFBLFFBQ0wsT0FBTztBQUFBLFFBQ1AsT0FBTyxJQUFJLE1BQU0sUUFBUTtBQUFBLE1BQzNCO0FBQUEsSUFDRjtBQUNBLFdBQU87QUFBQSxFQUNUOzs7QUNiTyxNQUFNLGtCQUFrQixDQUFDQyxPQUErQjtBQUM3RCxVQUFNLE1BQWdCO0FBQUEsTUFDcEIsV0FBVztBQUFBLE1BQ1gsT0FBTyxDQUFDO0FBQUEsTUFDUixPQUFPLENBQUM7QUFBQSxJQUNWO0FBRUEsVUFBTSxVQUFVLGdCQUFnQkEsR0FBRSxLQUFLO0FBRXZDLFVBQU0sNEJBQTRCLG9CQUFJLElBQVk7QUFDbEQsSUFBQUEsR0FBRSxTQUFTO0FBQUEsTUFBUSxDQUFDQyxJQUFXLFVBQzdCLDBCQUEwQixJQUFJLEtBQUs7QUFBQSxJQUNyQztBQUVBLFVBQU0sbUJBQW1CLENBQUMsVUFBMkI7QUFDbkQsYUFBTyxDQUFDLDBCQUEwQixJQUFJLEtBQUs7QUFBQSxJQUM3QztBQUVBLFVBQU0sZ0JBQWdCLG9CQUFJLElBQVk7QUFFdEMsVUFBTSxRQUFRLENBQUMsVUFBMkI7QUFDeEMsVUFBSSxpQkFBaUIsS0FBSyxHQUFHO0FBQzNCLGVBQU87QUFBQSxNQUNUO0FBQ0EsVUFBSSxjQUFjLElBQUksS0FBSyxHQUFHO0FBRzVCLGVBQU87QUFBQSxNQUNUO0FBQ0Esb0JBQWMsSUFBSSxLQUFLO0FBRXZCLFlBQU0sWUFBWSxRQUFRLElBQUksS0FBSztBQUNuQyxVQUFJLGNBQWMsUUFBVztBQUMzQixpQkFBU0MsS0FBSSxHQUFHQSxLQUFJLFVBQVUsUUFBUUEsTUFBSztBQUN6QyxnQkFBTUMsS0FBSSxVQUFVRCxFQUFDO0FBQ3JCLGNBQUksQ0FBQyxNQUFNQyxHQUFFLENBQUMsR0FBRztBQUNmLG1CQUFPO0FBQUEsVUFDVDtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBRUEsb0JBQWMsT0FBTyxLQUFLO0FBQzFCLGdDQUEwQixPQUFPLEtBQUs7QUFDdEMsVUFBSSxNQUFNLFFBQVEsS0FBSztBQUN2QixhQUFPO0FBQUEsSUFDVDtBQUdBLFVBQU1DLE1BQUssTUFBTSxDQUFDO0FBQ2xCLFFBQUksQ0FBQ0EsS0FBSTtBQUNQLFVBQUksWUFBWTtBQUNoQixVQUFJLFFBQVEsQ0FBQyxHQUFHLGNBQWMsS0FBSyxDQUFDO0FBQUEsSUFDdEM7QUFFQSxXQUFPO0FBQUEsRUFDVDs7O0FDdkZPLE1BQU0sb0JBQW9CO0FBaUIxQixNQUFNLE9BQU4sTUFBTSxNQUFLO0FBQUE7QUFBQTtBQUFBLElBR2hCO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUFZLE9BQWUsSUFBSTtBQUM3QixXQUFLLE9BQU8sUUFBUTtBQUNwQixXQUFLLFVBQVUsQ0FBQztBQUNoQixXQUFLLFlBQVksQ0FBQztBQUNsQixXQUFLLEtBQUssT0FBTyxXQUFXO0FBQUEsSUFDOUI7QUFBQSxJQUVBLFNBQXlCO0FBQ3ZCLGFBQU87QUFBQSxRQUNMLFdBQVcsS0FBSztBQUFBLFFBQ2hCLFNBQVMsS0FBSztBQUFBLFFBQ2QsTUFBTSxLQUFLO0FBQUEsUUFDWCxJQUFJLEtBQUs7QUFBQSxNQUNYO0FBQUEsSUFDRjtBQUFBLElBRUEsT0FBTyxTQUFTLGdCQUFzQztBQUNwRCxZQUFNLE1BQU0sSUFBSSxNQUFLLGVBQWUsSUFBSTtBQUN4QyxVQUFJLEtBQUssZUFBZTtBQUN4QixVQUFJLFlBQVksZUFBZTtBQUMvQixVQUFJLFVBQVUsZUFBZTtBQUU3QixhQUFPO0FBQUEsSUFDVDtBQUFBLElBRUEsSUFBVyxXQUFtQjtBQUM1QixhQUFPLEtBQUssVUFBVSxVQUFVO0FBQUEsSUFDbEM7QUFBQSxJQUVBLElBQVcsU0FBUyxPQUFlO0FBQ2pDLFdBQUssVUFBVSxZQUFZLEtBQUs7QUFBQSxJQUNsQztBQUFBLElBRU8sVUFBVSxLQUFpQztBQUNoRCxhQUFPLEtBQUssUUFBUSxHQUFHO0FBQUEsSUFDekI7QUFBQSxJQUVPLFVBQVUsS0FBYSxPQUFlO0FBQzNDLFdBQUssUUFBUSxHQUFHLElBQUk7QUFBQSxJQUN0QjtBQUFBLElBRU8sYUFBYSxLQUFhO0FBQy9CLGFBQU8sS0FBSyxRQUFRLEdBQUc7QUFBQSxJQUN6QjtBQUFBLElBRU8sWUFBWSxLQUFpQztBQUNsRCxhQUFPLEtBQUssVUFBVSxHQUFHO0FBQUEsSUFDM0I7QUFBQSxJQUVPLFlBQVksS0FBYSxPQUFlO0FBQzdDLFdBQUssVUFBVSxHQUFHLElBQUk7QUFBQSxJQUN4QjtBQUFBLElBRU8sZUFBZSxLQUFhO0FBQ2pDLGFBQU8sS0FBSyxVQUFVLEdBQUc7QUFBQSxJQUMzQjtBQUFBLElBRU8sTUFBWTtBQUNqQixZQUFNLE1BQU0sSUFBSSxNQUFLO0FBQ3JCLFVBQUksWUFBWSxPQUFPLE9BQU8sQ0FBQyxHQUFHLEtBQUssU0FBUztBQUNoRCxVQUFJLFVBQVUsT0FBTyxPQUFPLENBQUMsR0FBRyxLQUFLLE9BQU87QUFDNUMsVUFBSSxPQUFPLEtBQUs7QUFDaEIsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBVU8sTUFBTSxRQUFOLE1BQU0sT0FBTTtBQUFBLElBQ2pCO0FBQUEsSUFDQTtBQUFBLElBRUEsY0FBYztBQUNaLFlBQU0sUUFBUSxJQUFJLEtBQUssT0FBTztBQUM5QixZQUFNLFVBQVUsWUFBWSxDQUFDO0FBQzdCLFlBQU0sU0FBUyxJQUFJLEtBQUssUUFBUTtBQUNoQyxhQUFPLFVBQVUsWUFBWSxDQUFDO0FBQzlCLFdBQUssV0FBVyxDQUFDLE9BQU8sTUFBTTtBQUM5QixXQUFLLFFBQVEsQ0FBQyxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUN0QztBQUFBLElBRUEsU0FBMEI7QUFDeEIsYUFBTztBQUFBLFFBQ0wsVUFBVSxLQUFLLFNBQVMsSUFBSSxDQUFDQyxPQUFZQSxHQUFFLE9BQU8sQ0FBQztBQUFBLFFBQ25ELE9BQU8sS0FBSyxNQUFNLElBQUksQ0FBQ0MsT0FBb0JBLEdBQUUsT0FBTyxDQUFDO0FBQUEsTUFDdkQ7QUFBQSxJQUNGO0FBQUEsSUFFQSxPQUFPLFNBQVMsaUJBQXlDO0FBQ3ZELFlBQU0sTUFBTSxJQUFJLE9BQU07QUFDdEIsVUFBSSxXQUFXLGdCQUFnQixTQUFTO0FBQUEsUUFBSSxDQUFDLE9BQzNDLEtBQUssU0FBUyxFQUFFO0FBQUEsTUFDbEI7QUFDQSxVQUFJLFFBQVEsZ0JBQWdCLE1BQU07QUFBQSxRQUNoQyxDQUFDLDJCQUNDLGFBQWEsU0FBUyxzQkFBc0I7QUFBQSxNQUNoRDtBQUNBLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQU9PLFdBQVMsc0JBQXNCQyxJQUFrQztBQUN0RSxRQUFJQSxHQUFFLFNBQVMsU0FBUyxHQUFHO0FBQ3pCLGFBQU87QUFBQSxRQUNMO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFFQSxVQUFNLGFBQWEsZ0JBQWdCQSxHQUFFLEtBQUs7QUFDMUMsVUFBTSxhQUFhLGdCQUFnQkEsR0FBRSxLQUFLO0FBRzFDLFFBQUksV0FBVyxJQUFJLENBQUMsTUFBTSxRQUFXO0FBQ25DLGFBQU8sTUFBTSwwQ0FBMEM7QUFBQSxJQUN6RDtBQUdBLGFBQVNDLEtBQUksR0FBR0EsS0FBSUQsR0FBRSxTQUFTLFFBQVFDLE1BQUs7QUFDMUMsVUFBSSxXQUFXLElBQUlBLEVBQUMsTUFBTSxRQUFXO0FBQ25DLGVBQU87QUFBQSxVQUNMLHlEQUF5REEsRUFBQztBQUFBLFFBQzVEO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFHQSxRQUFJLFdBQVcsSUFBSUQsR0FBRSxTQUFTLFNBQVMsQ0FBQyxNQUFNLFFBQVc7QUFDdkQsYUFBTztBQUFBLFFBQ0w7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUdBLGFBQVNDLEtBQUksR0FBR0EsS0FBSUQsR0FBRSxTQUFTLFNBQVMsR0FBR0MsTUFBSztBQUM5QyxVQUFJLFdBQVcsSUFBSUEsRUFBQyxNQUFNLFFBQVc7QUFDbkMsZUFBTztBQUFBLFVBQ0wsOERBQThEQSxFQUFDO0FBQUEsUUFDakU7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLFVBQU0sY0FBY0QsR0FBRSxTQUFTO0FBRS9CLGFBQVNDLEtBQUksR0FBR0EsS0FBSUQsR0FBRSxNQUFNLFFBQVFDLE1BQUs7QUFDdkMsWUFBTSxVQUFVRCxHQUFFLE1BQU1DLEVBQUM7QUFDekIsVUFDRSxRQUFRLElBQUksS0FDWixRQUFRLEtBQUssZUFDYixRQUFRLElBQUksS0FDWixRQUFRLEtBQUssYUFDYjtBQUNBLGVBQU8sTUFBTSxRQUFRLE9BQU8sbUNBQW1DO0FBQUEsTUFDakU7QUFBQSxJQUNGO0FBS0EsVUFBTSxRQUFRLGdCQUFnQkQsRUFBQztBQUMvQixRQUFJLE1BQU0sV0FBVztBQUNuQixhQUFPLE1BQU0sb0JBQW9CLENBQUMsR0FBRyxNQUFNLEtBQUssRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFO0FBQUEsSUFDaEU7QUFFQSxXQUFPLEdBQUcsTUFBTSxLQUFLO0FBQUEsRUFDdkI7QUFFTyxXQUFTLGNBQ2RFLElBQ0EsZUFBb0MsTUFDcEI7QUFDaEIsUUFBSSxpQkFBaUIsTUFBTTtBQUN6QixxQkFBZSxDQUFDLGNBQXNCQSxHQUFFLFNBQVMsU0FBUyxFQUFFO0FBQUEsSUFDOUQ7QUFDQSxVQUFNLE1BQU0sc0JBQXNCQSxFQUFDO0FBQ25DLFFBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxhQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUksYUFBYSxDQUFDLE1BQU0sR0FBRztBQUN6QixhQUFPO0FBQUEsUUFDTCx3REFBd0QsYUFBYSxDQUFDLENBQUM7QUFBQSxNQUN6RTtBQUFBLElBQ0Y7QUFDQSxRQUFJLGFBQWFBLEdBQUUsU0FBUyxTQUFTLENBQUMsTUFBTSxHQUFHO0FBQzdDLGFBQU87QUFBQSxRQUNMLHlEQUF5RDtBQUFBLFVBQ3ZEQSxHQUFFLFNBQVMsU0FBUztBQUFBLFFBQ3RCLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUNBLFVBQU0sU0FBUyxvQkFBSSxJQUFJO0FBQ3ZCLGFBQVMsWUFBWSxHQUFHLFlBQVlBLEdBQUUsU0FBUyxRQUFRLGFBQWE7QUFDbEUsWUFBTSxPQUFPQSxHQUFFLFNBQVMsU0FBUztBQUNqQyxVQUFJLE9BQU8sSUFBSSxLQUFLLEVBQUUsR0FBRztBQUN2QixlQUFPLE1BQU0sSUFBSSxNQUFNLGtDQUFrQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0FBQUEsTUFDckU7QUFDQSxhQUFPLElBQUksS0FBSyxFQUFFO0FBQUEsSUFDcEI7QUFDQSxXQUFPO0FBQUEsRUFDVDs7O0FDbFBPLE1BQU0sT0FBTixNQUFXO0FBQUEsSUFDaEI7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUFZLFFBQWdCLEdBQUcsU0FBaUIsR0FBRztBQUNqRCxXQUFLLFFBQVE7QUFDYixXQUFLLFNBQVM7QUFBQSxJQUNoQjtBQUFBLEVBQ0Y7QUFHTyxNQUFNLFFBQU4sTUFBWTtBQUFBLElBQ2pCLFFBQWMsSUFBSSxLQUFLO0FBQUEsSUFDdkIsT0FBYSxJQUFJLEtBQUs7QUFBQSxJQUN0QixRQUFnQjtBQUFBLEVBQ2xCO0FBT08sV0FBUyxhQUNkQyxJQUNBLGVBQW9DLE1BQ3BDLE9BQ0EscUJBQTJDLE1BQzNDLHNCQUE0QyxNQUMvQjtBQUNiLFFBQUksaUJBQWlCLE1BQU07QUFDekIscUJBQWUsQ0FBQyxjQUFzQkEsR0FBRSxTQUFTLFNBQVMsRUFBRTtBQUFBLElBQzlEO0FBR0EsVUFBTSxTQUFrQixJQUFJLE1BQU1BLEdBQUUsU0FBUyxNQUFNO0FBQ25ELGFBQVNDLEtBQUksR0FBR0EsS0FBSUQsR0FBRSxTQUFTLFFBQVFDLE1BQUs7QUFDMUMsYUFBT0EsRUFBQyxJQUFJLElBQUksTUFBTTtBQUFBLElBQ3hCO0FBRUEsVUFBTUMsS0FBSSxjQUFjRixJQUFHLFlBQVk7QUFDdkMsUUFBSSxDQUFDRSxHQUFFLElBQUk7QUFDVCxhQUFPLE1BQU1BLEdBQUUsS0FBSztBQUFBLElBQ3RCO0FBRUEsVUFBTSxRQUFRLHNCQUFzQkYsR0FBRSxLQUFLO0FBRTNDLFVBQU0sbUJBQW1CRSxHQUFFO0FBSzNCLHFCQUFpQixNQUFNLENBQUMsRUFBRSxRQUFRLENBQUMsZ0JBQXdCO0FBQ3pELFlBQU0sUUFBUSxPQUFPLFdBQVc7QUFDaEMsWUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLFFBQ3ZCLEdBQUcsTUFBTSxNQUFNLElBQUksV0FBVyxFQUFHLElBQUksQ0FBQ0MsT0FBNEI7QUFDaEUsZ0JBQU0sbUJBQW1CLE9BQU9BLEdBQUUsQ0FBQztBQUNuQyxpQkFBTyxpQkFBaUIsTUFBTTtBQUFBLFFBQ2hDLENBQUM7QUFBQSxNQUNIO0FBQ0EsWUFBTSwwQkFBMEIscUJBQXFCLFdBQVc7QUFDaEUsVUFBSSw0QkFBNEIsUUFBVztBQUN6QyxjQUFNLE1BQU0sUUFBUTtBQUFBLE1BQ3RCO0FBQ0EsWUFBTSwyQkFBMkIsc0JBQXNCLFdBQVc7QUFDbEUsVUFBSSw2QkFBNkIsUUFBVztBQUMxQyxjQUFNLE1BQU0sU0FBUztBQUFBLE1BQ3ZCLE9BQU87QUFDTCxjQUFNLE1BQU0sU0FBUyxNQUFNLE1BQU0sTUFBTSxRQUFRLGFBQWEsV0FBVyxDQUFDO0FBQUEsTUFDMUU7QUFBQSxJQUNGLENBQUM7QUFPRCxxQkFBaUIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxnQkFBd0I7QUFDMUQsWUFBTSxRQUFRLE9BQU8sV0FBVztBQUNoQyxZQUFNLGFBQWEsTUFBTSxNQUFNLElBQUksV0FBVztBQUM5QyxVQUFJLENBQUMsY0FBYyxxQkFBcUIsV0FBVyxHQUFHO0FBQ3BELGNBQU0sS0FBSyxTQUFTLE1BQU0sTUFBTTtBQUNoQyxjQUFNLEtBQUssUUFBUSxNQUFNLE1BQU07QUFDL0IsY0FBTSxRQUFRO0FBQUEsTUFDaEIsT0FBTztBQUNMLGNBQU0sYUFBYSxNQUFNLE1BQ3RCLElBQUksV0FBVyxFQUNmLElBQUksQ0FBQ0EsT0FBNEI7QUFDaEMsZ0JBQU0saUJBQWlCLE9BQU9BLEdBQUUsQ0FBQztBQUNqQyxpQkFBTyxlQUFlLEtBQUs7QUFBQSxRQUM3QixDQUFDO0FBQ0gsWUFBSSxXQUFXLFdBQVcsR0FBRztBQUMzQixnQkFBTSxLQUFLLFNBQVMsTUFBTSxNQUFNO0FBQUEsUUFDbEMsT0FBTztBQUNMLGdCQUFNLEtBQUssU0FBUyxLQUFLLElBQUksR0FBRyxVQUFVO0FBQUEsUUFDNUM7QUFDQSxjQUFNLEtBQUssUUFBUSxNQUFNLE1BQU0sS0FBSyxTQUFTLGFBQWEsV0FBVyxDQUFDO0FBQ3RFLGNBQU0sUUFBUSxNQUFNLE1BQU0sS0FBSyxTQUFTLE1BQU0sTUFBTSxNQUFNO0FBQUEsTUFDNUQ7QUFBQSxJQUNGLENBQUM7QUFFRCxXQUFPLEdBQUcsTUFBTTtBQUFBLEVBQ2xCO0FBRU8sTUFBTSxlQUFlLENBQUMsUUFBaUIsVUFBNkI7QUFDekUsVUFBTSxNQUFnQixDQUFDO0FBQ3ZCLFdBQU8sUUFBUSxDQUFDLE9BQWMsVUFBa0I7QUFDOUMsVUFDRSxNQUFNLE1BQU0sS0FBSyxTQUFTLE1BQU0sTUFBTSxNQUFNLElBQUksT0FBTyxXQUN2RCxNQUFNLE1BQU0sTUFBTSxTQUFTLE1BQU0sTUFBTSxLQUFLLElBQUksT0FBTyxTQUN2RDtBQUNBLFlBQUksS0FBSyxLQUFLO0FBQUEsTUFDaEI7QUFBQSxJQUNGLENBQUM7QUFDRCxXQUFPO0FBQUEsRUFDVDs7O0FDM0ZPLE1BQU1DLFVBQVMsQ0FDcEIsbUJBQzZCO0FBQzdCLFVBQU0sTUFBZ0M7QUFBQSxNQUNwQyxPQUFPLGVBQWU7QUFBQSxNQUN0QixPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixpQkFBaUI7QUFBQSxJQUNuQjtBQUVBLFlBQVEsZUFBZSxPQUFPO0FBQUEsTUFDNUIsS0FBSztBQUNIO0FBQUEsTUFDRixLQUFLO0FBQ0gsWUFBSSxRQUFRLGVBQWU7QUFDM0IsWUFBSSxrQkFBa0IsZUFBZTtBQUNyQztBQUFBLE1BQ0YsS0FBSztBQUNILFlBQUksUUFBUSxlQUFlLEtBQUs7QUFDaEMsWUFBSSxTQUFTLGVBQWUsS0FBSztBQUNqQztBQUFBLE1BQ0Y7QUFDRTtBQUNBO0FBQUEsSUFDSjtBQUNBLFdBQU87QUFBQSxFQUNUO0FBRU8sTUFBTUMsWUFBVyxDQUN0Qiw2QkFDbUI7QUFDbkIsVUFBTSxZQUE0QixFQUFFLE9BQU8sWUFBWTtBQUN2RCxZQUFRLHlCQUF5QixPQUFPO0FBQUEsTUFDdEMsS0FBSztBQUNILGVBQU87QUFBQSxVQUNMLE9BQU87QUFBQSxRQUNUO0FBQUEsTUFDRixLQUFLO0FBQ0gsWUFBSSx5QkFBeUIsVUFBVSxRQUFXO0FBQ2hELGlCQUFPO0FBQUEsUUFDVDtBQUNBLGVBQU87QUFBQSxVQUNMLE9BQU87QUFBQSxVQUNQLE9BQU8seUJBQXlCO0FBQUEsVUFDaEMsaUJBQWlCLHlCQUF5QjtBQUFBLFFBQzVDO0FBQUEsTUFDRixLQUFLO0FBQ0gsWUFDRSx5QkFBeUIsVUFBVSxVQUNuQyx5QkFBeUIsV0FBVyxRQUNwQztBQUNBLGlCQUFPO0FBQUEsUUFDVDtBQUNBLGVBQU87QUFBQSxVQUNMLE9BQU87QUFBQSxVQUNQLE1BQU0sSUFBSTtBQUFBLFlBQ1IseUJBQXlCO0FBQUEsWUFDekIseUJBQXlCO0FBQUEsVUFDM0I7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUNFLGVBQU87QUFBQSxJQUNYO0FBQUEsRUFDRjtBQUVPLE1BQU0sd0JBQXdCLENBQ25DQyxPQUM4QjtBQUM5QixXQUFPLE9BQU87QUFBQSxNQUNaLE9BQU8sUUFBUUEsRUFBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssY0FBYyxNQUFNO0FBQUEsUUFDL0M7QUFBQSxRQUNBRixRQUFPLGNBQWM7QUFBQSxNQUN2QixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFFTyxNQUFNLDBCQUEwQixDQUNyQ0UsT0FDb0I7QUFDcEIsV0FBTyxPQUFPO0FBQUEsTUFDWixPQUFPLFFBQVFBLEVBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLHdCQUF3QixNQUFNO0FBQUEsUUFDekQ7QUFBQSxRQUNBRCxVQUFTLHdCQUF3QjtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjs7O0FDaEdPLE1BQU0seUJBQU4sTUFBTSx3QkFBd0M7QUFBQSxJQUNuRDtBQUFBLElBQ0Esa0JBQTBDO0FBQUEsSUFFMUMsWUFDRSxPQUNBLGtCQUEwQyxNQUMxQztBQUNBLFdBQUssUUFBUTtBQUNiLFdBQUssa0JBQWtCO0FBQUEsSUFDekI7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsWUFBTSxZQUFZLFNBQVMsT0FBTyxLQUFLLE1BQU0sQ0FBQztBQUM5QyxXQUFLLFNBQVMsS0FBSztBQUVuQixZQUFNLDBCQUEwQjtBQUFBLFFBQzlCLHNCQUFzQixLQUFLLGNBQWM7QUFBQSxNQUMzQztBQUVBLFVBQUksS0FBSyxvQkFBb0IsTUFBTTtBQUNqQyxhQUFLLGlCQUFpQixLQUFLO0FBQUEsTUFDN0I7QUFFQSxVQUFJLEtBQUssT0FBTyxVQUFVLGFBQWE7QUFFckMsYUFBSyxNQUFNLFNBQVMsUUFBUSxDQUFDLFNBQWU7QUFDMUMsZUFBSyxlQUFlLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxZQUFZO0FBQUEsUUFDdEQsQ0FBQztBQUFBLE1BQ0g7QUFFQSxhQUFPLEdBQUc7QUFBQSxRQUNSO0FBQUEsUUFDQSxTQUFTLElBQUksd0JBQXVCLFdBQVcsdUJBQXVCO0FBQUEsTUFDeEUsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBdUJPLE1BQU0sb0JBQU4sTUFBTSxtQkFBbUM7QUFBQSxJQUM5QztBQUFBLElBRUEsWUFBWSxNQUFpQjtBQUMzQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0sV0FBVyxLQUFLLGNBQWMsS0FBSztBQUN6QyxXQUFLLGlCQUFpQixLQUFLLElBQUk7QUFFL0IsYUFBTyxHQUFHO0FBQUEsUUFDUjtBQUFBLFFBQ0EsU0FBUyxJQUFJLG1CQUFrQixRQUFRO0FBQUEsTUFDekMsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBRU8sTUFBTSx5QkFBTixNQUFNLHdCQUF3QztBQUFBLElBQ25EO0FBQUEsSUFDQTtBQUFBLElBRUEsWUFBWSxXQUFtQixPQUF1QjtBQUNwRCxXQUFLLFlBQVk7QUFDakIsV0FBSyxRQUFRO0FBQUEsSUFDZjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxVQUFJLEtBQUssTUFBTSxVQUFVLGVBQWUsS0FBSyxPQUFPLFVBQVUsYUFBYTtBQUN6RSxlQUFPO0FBQUEsVUFDTCxJQUFJLE1BQU0scURBQXFEO0FBQUEsUUFDakU7QUFBQSxNQUNGO0FBQ0EsVUFBSSxLQUFLLE1BQU0sVUFBVSxXQUFXO0FBQ2xDLFlBQUksS0FBSyxNQUFNLFFBQVEsR0FBRztBQUN4QixpQkFBTztBQUFBLFlBQ0wsSUFBSTtBQUFBLGNBQ0Y7QUFBQSxZQUNGO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFDQSxZQUFJLEtBQUssTUFBTSxrQkFBa0IsS0FBSyxLQUFLLE1BQU0sa0JBQWtCLElBQUk7QUFDckUsaUJBQU8sTUFBTSxJQUFJLE1BQU0sc0NBQXNDLENBQUM7QUFBQSxRQUNoRTtBQUFBLE1BQ0Y7QUFDQSxVQUFJLEtBQUssTUFBTSxVQUFVLFlBQVk7QUFDbkMsWUFBSSxLQUFLLE1BQU0sS0FBSyxTQUFTLEtBQUssTUFBTSxLQUFLLE9BQU87QUFDbEQsaUJBQU8sTUFBTSxJQUFJLE1BQU0saUNBQWlDLENBQUM7QUFBQSxRQUMzRDtBQUNBLFlBQUksS0FBSyxNQUFNLEtBQUssUUFBUSxHQUFHO0FBQzdCLGlCQUFPO0FBQUEsWUFDTCxJQUFJO0FBQUEsY0FDRjtBQUFBLFlBQ0Y7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFFQSxZQUFNLE1BQU0sS0FBSyxrQkFBa0IsS0FBSyxTQUFTO0FBQ2pELFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUVBLFlBQU0sZ0JBQWdCRSxVQUFhQyxRQUFXLElBQUksS0FBSyxDQUFDO0FBQ3hELFlBQU0sU0FBUyxLQUFLLGtCQUFrQixLQUFLLFdBQVcsS0FBSyxLQUFLO0FBQ2hFLFVBQUksQ0FBQyxPQUFPLElBQUk7QUFDZCxlQUFPO0FBQUEsTUFDVDtBQUVBLGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsSUFBSSx3QkFBdUIsS0FBSyxXQUFXLGFBQWE7QUFBQSxNQUNuRSxDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFFTyxXQUFTLG9CQUNkLFdBQ0EsT0FDSTtBQUNKLFdBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSx1QkFBdUIsV0FBVyxLQUFLLENBQUMsQ0FBQztBQUFBLEVBQzlEO0FBRU8sV0FBUyxlQUFlLE1BQXFCO0FBQ2xELFdBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxrQkFBa0IsSUFBSSxDQUFDLENBQUM7QUFBQSxFQUM3QztBQUVPLFdBQVMsb0JBQW9CLE9BQXVCO0FBQ3pELFdBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSx1QkFBdUIsS0FBSyxDQUFDLENBQUM7QUFBQSxFQUNuRDs7O0FDaktPLE1BQU0sV0FBTixNQUFlO0FBQUEsSUFDcEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTUE7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUFZLE9BQWE7QUFDdkIsV0FBSyxRQUFRO0FBQ2IsV0FBSyxRQUFRLG9CQUFJLElBQUk7QUFDckIsV0FBSyxNQUFNLElBQUksR0FBRyxDQUFDO0FBQ25CLFdBQUssaUJBQWlCO0FBQUEsSUFDeEI7QUFBQSxJQUVBLGNBQWNDLElBQTJCO0FBQ3ZDLFlBQU0sTUFBTSxnQkFBZ0JBLEVBQUM7QUFDN0IsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU87QUFBQSxNQUNUO0FBQ0EsWUFBTSxPQUFPLElBQUk7QUFDakIsVUFBSSxRQUFRLEtBQUssT0FBTztBQUN0QixlQUFPLE1BQU0sSUFBSSxNQUFNLEdBQUcsSUFBSSxpQkFBaUIsS0FBSyxLQUFLLEVBQUUsQ0FBQztBQUFBLE1BQzlEO0FBQ0EsWUFBTSxRQUFRLElBQUksS0FBSyxLQUFLLE1BQU0sUUFBUSxDQUFDO0FBQzNDLFVBQUksZ0JBQWdCLFlBQVksS0FBSztBQUNyQyxVQUFJLFVBQVU7QUFDZCxhQUFPLGdCQUFnQkEsSUFBRztBQUN4QixjQUFNLFVBQVUsTUFBTSxRQUFRO0FBQzlCLGNBQU0sUUFBUSxVQUFVLENBQUM7QUFFekIsY0FBTSxZQUFZLE1BQU0sT0FBTztBQUMvQixZQUFJLGNBQWMsS0FBSyxjQUFjLEdBQUc7QUFHdEM7QUFBQSxRQUNGO0FBRUEsbUJBQVc7QUFDWCx3QkFBZ0IsWUFBWSxLQUFLO0FBQUEsTUFDbkM7QUFDQSxhQUFPLEdBQUcsT0FBTztBQUFBLElBQ25CO0FBQUEsSUFFQSxlQUFlLGFBQTZCO0FBQzFDLFVBQUksY0FBYyxHQUFHO0FBQ25CLGVBQU87QUFBQSxNQUNUO0FBQ0Esb0JBQWMsS0FBSyxNQUFNLFdBQVc7QUFDcEMsWUFBTSxhQUFhLEtBQUssTUFBTSxJQUFJLFdBQVc7QUFDN0MsVUFBSSxlQUFlLFFBQVc7QUFDNUIsZUFBTztBQUFBLE1BQ1Q7QUFFQSxZQUFNLFFBQVEsSUFBSSxLQUFLLEtBQUssTUFBTSxRQUFRLENBQUM7QUFDM0MsVUFBSSxVQUFVLEtBQUs7QUFDbkIsVUFBSSxNQUFNLEtBQUssTUFBTSxJQUFJLE9BQU87QUFDaEMsWUFBTSxRQUFRLE1BQU0sUUFBUSxJQUFJLEdBQUc7QUFFbkMsYUFBTyxZQUFZLGFBQWE7QUFDOUIsY0FBTSxVQUFVLE1BQU0sUUFBUTtBQUM5QixjQUFNLFFBQVEsVUFBVSxDQUFDO0FBQ3pCLGVBQU87QUFFUCxjQUFNLFlBQVksTUFBTSxPQUFPO0FBQy9CLFlBQUksY0FBYyxLQUFLLGNBQWMsR0FBRztBQUd0QztBQUFBLFFBQ0Y7QUFDQSxtQkFBVztBQUNYLGFBQUssTUFBTSxJQUFJLFNBQVMsR0FBRztBQUFBLE1BQzdCO0FBQ0EsV0FBSyxpQkFBaUI7QUFDdEIsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGOzs7QUN4RE8sTUFBTSxXQUFOLE1BQStCO0FBQUEsSUFDMUI7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBRVYsWUFBWSxPQUFhLFlBQThCLFVBQXFCO0FBQzFFLFdBQUssUUFBUTtBQUNiLFdBQUssYUFBYTtBQUNsQixXQUFLLFdBQVc7QUFBQSxJQUNsQjtBQUFBO0FBQUEsSUFHQSxZQUFZLElBQW9CO0FBQzlCLFlBQU0sSUFBSSxNQUFNLG1DQUFtQztBQUFBLElBQ3JEO0FBQUE7QUFBQSxJQUdBLE9BQU8sSUFBa0I7QUFDdkIsWUFBTSxJQUFJLE1BQU0sbUNBQW1DO0FBQUEsSUFDckQ7QUFBQTtBQUFBLElBR0EsTUFBTSxJQUE0QjtBQUNoQyxZQUFNLElBQUksTUFBTSxtQ0FBbUM7QUFBQSxJQUNyRDtBQUFBLElBRUEsT0FBa0I7QUFDaEIsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUFBLElBRUEsU0FBeUI7QUFDdkIsYUFBTyxFQUFFLFVBQVUsS0FBSyxTQUFTO0FBQUEsSUFDbkM7QUFBQSxJQUVBLE9BQU8sU0FDTEMsSUFDQSxPQUNBLFlBQ1U7QUFDVixhQUFPLGFBQWEsT0FBT0EsR0FBRSxRQUFRLENBQUMsRUFBRSxPQUFPLFVBQVU7QUFBQSxJQUMzRDtBQUFBLEVBQ0Y7QUFFTyxNQUFNLGFBQWEsQ0FBQyxZQUFZLFFBQVEsVUFBVTtBQWFsRCxNQUFNLGVBR1Q7QUFBQSxJQUNGLFVBQVUsQ0FBQyxPQUFhLGVBQ3RCLElBQUksU0FBUyxPQUFPLFVBQVU7QUFBQSxJQUNoQyxNQUFNLENBQUMsT0FBYSxlQUNsQixJQUFJLEtBQUssT0FBTyxVQUFVO0FBQUEsSUFDNUIsVUFBVSxDQUFDLE9BQWEsZUFDdEIsSUFBSSxTQUFTLE9BQU8sVUFBVTtBQUFBLEVBQ2xDO0FBR08sTUFBTSxTQUFTLENBQUNDLE9BQXlCO0FBQzlDLFFBQUksV0FBVyxLQUFLLENBQUNDLE9BQWlCQSxPQUFNRCxFQUFDLEdBQUc7QUFDOUMsYUFBT0E7QUFBQSxJQUNUO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFHTyxNQUFNLFdBQU4sY0FBdUIsU0FBeUI7QUFBQSxJQUNyRCxZQUFZLE9BQWEsWUFBOEI7QUFDckQsWUFBTSxPQUFPLFlBQVksVUFBVTtBQUFBLElBQ3JDO0FBQUE7QUFBQSxJQUdBLFlBQVlDLElBQVcsU0FBd0M7QUFDN0QsYUFBTyxLQUFLLFdBQVcsY0FBY0EsRUFBQyxFQUFFLFNBQVM7QUFBQSxJQUNuRDtBQUFBO0FBQUEsSUFHQSxPQUFPLElBQWtCO0FBRXZCLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBLE1BQU1ELElBQTJCO0FBQy9CLFlBQU0sU0FBUyxDQUFDQTtBQUNoQixVQUFJLE9BQU8sTUFBTSxNQUFNLEdBQUc7QUFDeEIsZUFBTyxNQUFNLElBQUksTUFBTSx5QkFBeUJBLEVBQUMsRUFBRSxDQUFDO0FBQUEsTUFDdEQ7QUFDQSxhQUFPLEdBQUcsS0FBSyxXQUFXLGNBQWMsTUFBTSxDQUFDO0FBQUEsSUFDakQ7QUFBQSxFQUNGO0FBRU8sTUFBTSxPQUFOLGNBQW1CLFNBQXlCO0FBQUEsSUFDakQsWUFBWSxPQUFhLFlBQThCO0FBQ3JELFlBQU0sT0FBTyxZQUFZLE1BQU07QUFBQSxJQUNqQztBQUFBLElBRUEsWUFBWUMsSUFBbUI7QUFDN0IsYUFBTyxZQUFZLEtBQUssT0FBT0EsRUFBQyxDQUFDO0FBQUEsSUFDbkM7QUFBQSxJQUVBLE9BQU9BLElBQWlCO0FBRXRCLFlBQU1DLEtBQUksSUFBSSxLQUFLLEtBQUssTUFBTSxRQUFRLENBQUM7QUFDdkMsTUFBQUEsR0FBRSxRQUFRQSxHQUFFLFFBQVEsSUFBSUQsRUFBQztBQUN6QixhQUFPQztBQUFBLElBQ1Q7QUFBQSxJQUVBLE1BQU1GLElBQTJCO0FBQy9CLFlBQU0sTUFBTSxnQkFBZ0JBLEVBQUM7QUFDN0IsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU87QUFBQSxNQUNUO0FBQ0EsWUFBTSxzQkFBc0IsSUFBSSxNQUFNLFFBQVEsSUFBSSxLQUFLLE1BQU0sUUFBUSxJQUFJO0FBQ3pFLFVBQUksc0JBQXNCLEdBQUc7QUFDM0IsZUFBTyxNQUFNLElBQUksTUFBTSw4Q0FBOEMsQ0FBQztBQUFBLE1BQ3hFO0FBRUEsYUFBTztBQUFBLFFBQ0wsS0FBSyxXQUFXLGNBQWMsdUJBQXVCLE1BQU8sS0FBSyxLQUFLLEdBQUc7QUFBQSxNQUMzRTtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRU8sTUFBTSxXQUFOLGNBQXVCLFNBQXlCO0FBQUEsSUFDckQ7QUFBQSxJQUVBLFlBQVksT0FBYSxZQUE4QjtBQUNyRCxZQUFNLE9BQU8sWUFBWSxVQUFVO0FBQ25DLFdBQUssV0FBVyxJQUFJLFNBQVMsS0FBSztBQUFBLElBQ3BDO0FBQUE7QUFBQSxJQUdBLFlBQVlDLElBQW1CO0FBQzdCLGFBQU8sWUFBWSxLQUFLLE9BQU9BLEVBQUMsQ0FBQztBQUFBLElBQ25DO0FBQUEsSUFFQSxPQUFPQSxJQUFpQjtBQUV0QixZQUFNQyxLQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sUUFBUSxDQUFDO0FBQ3ZDLE1BQUFBLEdBQUUsUUFBUUEsR0FBRSxRQUFRLElBQUksS0FBSyxTQUFTLGVBQWVELEVBQUMsQ0FBQztBQUN2RCxhQUFPQztBQUFBLElBQ1Q7QUFBQSxJQUVBLE1BQU1GLElBQTJCO0FBQy9CLGFBQU8sS0FBSyxTQUFTLGNBQWNBLEVBQUM7QUFBQSxJQUN0QztBQUFBLEVBQ0Y7OztBQ2pMTyxNQUFNLGtCQUFOLGNBQThCLFlBQVk7QUFBQSxJQUMvQyxhQUFnQztBQUFBLElBQ2hDO0FBQUEsSUFFQSxjQUFjO0FBQ1osWUFBTTtBQUNOLFdBQUssZ0NBQWdDLE1BQU07QUFDekMsWUFBSSxLQUFLLGVBQWUsTUFBTTtBQUM1QixlQUFLLE9BQU87QUFBQSxRQUNkO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUVBLG9CQUEwQjtBQUN4QixlQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFFQSx1QkFBNkI7QUFDM0IsZUFBUztBQUFBLFFBQ1A7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQUEsSUFDRjtBQUFBLElBRVEsU0FBUztBQUNmLFFBQU8sS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzlCO0FBQUEsSUFFQSxVQUFVRyxhQUF3QjtBQUNoQyxXQUFLLGFBQWFBO0FBQ2xCLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVRLFdBQTJCO0FBQ2pDLGFBQU87QUFBQTtBQUFBO0FBQUEsZUFHSSxLQUFLLGlCQUFpQixDQUFDLElBQUksS0FBSyxlQUFlLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFJNUMsV0FBVyxNQUFNO0FBQUEscUJBQ2YsQ0FBQ0MsT0FBa0IsS0FBSyxZQUFZQSxFQUFDLENBQUM7QUFBQTtBQUFBLGNBRTdDLFdBQVcsSUFBSSxDQUFDLGFBQWE7QUFDN0IsZUFBTyxrQkFBcUIsUUFBUSxJQUFJLFFBQVE7QUFBQSxNQUNsRCxDQUFDLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS1o7QUFBQSxJQUVBLE1BQWMsWUFBWUEsSUFBZTtBQUN2QyxZQUFNLGVBQWdCQSxHQUFFLE9BQTRCO0FBQ3BELFlBQU0sTUFBTSxNQUFNO0FBQUEsUUFDaEIsZUFBZSxPQUFPLFlBQVksQ0FBQztBQUFBLFFBQ25DO0FBQUEsUUFDQTtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFDQSxvQkFBYyxHQUFHO0FBQ2pCLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVRLG1CQUFtQztBQUN6QyxVQUFJLEtBQUssV0FBWSxLQUFLLE9BQU8sVUFBVSxhQUFhO0FBQ3RELGVBQU87QUFBQTtBQUFBLDBDQUU2QixNQUFNLEtBQUssTUFBTSxDQUFDO0FBQUE7QUFBQTtBQUFBLE1BR3hELE9BQU87QUFDTCxlQUFPO0FBQUEsTUFDVDtBQUFBLElBQ0Y7QUFBQSxJQUVRLGlCQUFpQztBQUN2QyxVQUFJLEtBQUssV0FBWSxLQUFLLE9BQU8sVUFBVSxXQUFXO0FBQ3BELGVBQU87QUFBQTtBQUFBLGtEQUVxQyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFLbkQsWUFBWSxJQUFJLEtBQUssS0FBSyxXQUFZLEtBQUssT0FBTyxLQUFLLENBQUMsQ0FBQztBQUFBLG1CQUN6RCxDQUFDQSxPQUFrQixLQUFLLFlBQVlBLEVBQUMsQ0FBQztBQUFBO0FBQUE7QUFBQSxNQUdyRCxPQUFPO0FBQ0wsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQUEsSUFFQSxNQUFjLFlBQVlBLElBQWU7QUFDdkMsWUFBTSxRQUFTQSxHQUFFLE9BQTRCLFlBQWEsUUFBUTtBQUNsRSxZQUFNLE1BQU0sTUFBTTtBQUFBLFFBQ2hCLG9CQUFvQixFQUFFLE9BQU8sV0FBVyxNQUFhLENBQUM7QUFBQSxRQUN0RDtBQUFBLFFBQ0E7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQ0Esb0JBQWMsR0FBRztBQUVqQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxNQUFjLFFBQVE7QUFDcEIsWUFBTSxRQUFRLEtBQUssSUFBSTtBQUN2QixZQUFNLE1BQU0sTUFBTTtBQUFBLFFBQ2hCLG9CQUFvQixFQUFFLE9BQU8sV0FBVyxNQUFhLENBQUM7QUFBQSxRQUN0RDtBQUFBLFFBQ0E7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQ0Esb0JBQWMsR0FBRztBQUNqQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxNQUFjLFVBQVU7QUFDdEIsWUFBTSxNQUFNLE1BQU07QUFBQSxRQUNoQixvQkFBb0IsRUFBRSxPQUFPLGFBQWEsT0FBTyxFQUFFLENBQUM7QUFBQSxRQUNwRDtBQUFBLFFBQ0E7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQ0Esb0JBQWMsR0FBRztBQUNqQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsRUFDRjtBQUVBLGlCQUFlLE9BQU8scUJBQXFCLGVBQWU7OztBQ3JHN0MsTUFBQUMsS0FBVyxFQUN0QkMsV0FBVyxHQUNYQyxPQUFPLEdBQ1BDLFVBQVUsR0FDVkMsbUJBQW1CLEdBQ25CQyxPQUFPLEdBQ1BDLFNBQVMsRUFBQTtBQU5FLE1BMENBQyxLQUNnQkMsQ0FBQUEsT0FDM0IsSUFBSUMsUUFBc0UsRUFFeEVDLGlCQUFxQkYsSUFDckJDLFFBQUFBLEdBQUFBO0FBQUFBLE1BUWtCRSxLQVJsQkYsTUFRa0JFO0lBa0JwQixZQUFZQyxJQUFBQTtJQUF1QjtJQUduQyxJQUFBLE9BQUlDO0FBQ0YsYUFBT0MsS0FBS0MsS0FBU0Y7SUFDdEI7SUFHRCxLQUNFRyxJQUNBQyxJQUNBQyxJQUFBQTtBQUVBSixXQUFLSyxPQUFTSCxJQUNkRixLQUFLQyxPQUFXRSxJQUNoQkgsS0FBS00sT0FBbUJGO0lBQ3pCO0lBRUQsS0FBVUYsSUFBWUssSUFBQUE7QUFDcEIsYUFBT1AsS0FBS1EsT0FBT04sSUFBTUssRUFBQUE7SUFDMUI7SUFJRCxPQUFPRSxJQUFhRixJQUFBQTtBQUNsQixhQUFPUCxLQUFLVSxPQUFBQSxHQUFVSCxFQUFBQTtJQUN2QjtFQUFBOzs7QUN2SEgsTUFBQSxFQUFPSSxHQUFZQyxHQUFBQSxJQUFhQztBQUFoQyxNQWlGYUMsS0FBc0JDLENBQUFBLE9BQUFBLFdBQ2hDQSxHQUEyQkM7QUFsRjlCLE1Bb0xNQyxLQUFjLENBQUE7QUFwTHBCLE1BaU1hQyxLQUFvQixDQUFDQyxJQUFZQyxLQUFpQkgsT0FDNURFLEdBQUtFLE9BQW1CRDs7O01DN0hkRSxLQUFPQyxHQTNFcEIsY0FBNEJDLEdBQUFBO0lBQzFCLFlBQVlDLElBQUFBO0FBRVYsVUFEQUMsTUFBTUQsRUFBQUEsR0FHRkEsR0FBU0UsU0FBU0MsR0FBU0MsWUFDM0JKLEdBQVNFLFNBQVNDLEdBQVNFLGFBQzNCTCxHQUFTRSxTQUFTQyxHQUFTRyxrQkFHN0IsT0FBVUMsTUFDUixnRUFBQTtBQUdKLFVBQUEsQ0FBS0MsR0FBbUJSLEVBQUFBLEVBQ3RCLE9BQVVPLE1BQU0sc0RBQUE7SUFFbkI7SUFFRCxPQUFPRSxJQUFBQTtBQUNMLGFBQU9BO0lBQ1I7SUFFUSxPQUFPQyxJQUFBQSxDQUFzQkQsRUFBQUEsR0FBQUE7QUFDcEMsVUFBSUEsT0FBVUUsS0FBWUYsT0FBVUcsRUFDbEMsUUFBT0g7QUFFVCxZQUFNSSxLQUFVSCxHQUFLRyxTQUNmQyxLQUFPSixHQUFLSTtBQUVsQixVQUFJSixHQUFLUixTQUFTQyxHQUFTQyxVQUFBQTtBQUV6QixZQUFJSyxPQUFXSSxHQUFnQkMsRUFBQUEsRUFDN0IsUUFBT0g7TUFBQUEsV0FFQUQsR0FBS1IsU0FBU0MsR0FBU0csbUJBQUFBO0FBQ2hDLFlBQUEsQ0FBQSxDQUFNRyxPQUFVSSxHQUFRRSxhQUFhRCxFQUFBQSxFQUNuQyxRQUFPSDtNQUFBQSxXQUVBRCxHQUFLUixTQUFTQyxHQUFTRSxhQUM1QlEsR0FBUUcsYUFBYUYsRUFBQUEsTUFBaUJMLEtBQVBRLEdBQ2pDLFFBQU9OO0FBTVgsYUFEQU8sR0FBa0JSLEVBQUFBLEdBQ1hEO0lBQ1I7RUFBQSxDQUFBOzs7QUMvQ0ksTUFBTSxhQUFOLGNBQXlCLFlBQVk7QUFBQSxJQUMxQyxTQUFpQztBQUFBLElBRWpDLElBQVcsTUFBTVUsSUFBb0I7QUFDbkMsV0FBSyxTQUFTQTtBQUNkLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVRLFNBQVM7QUFDZixRQUFPLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUM5QjtBQUFBLElBRVEsV0FBMkI7QUFDakMsVUFBSSxLQUFLLFdBQVcsTUFBTTtBQUN4QixlQUFPO0FBQUEsTUFDVDtBQUNBLFlBQU0sT0FBTyxLQUFLLE9BQU8sS0FBSyxLQUFLO0FBQ25DLFVBQUksU0FBUyxZQUFZO0FBQ3ZCLGVBQU87QUFBQTtBQUFBLGlCQUVJQyxHQUFLLEtBQUssT0FBTyxVQUFVLENBQUM7QUFBQSxrQkFDM0IsQ0FBQ0MsT0FBa0IsS0FBSyxhQUFhQSxFQUFDLENBQUM7QUFBQTtBQUFBLE1BRXJELE9BQU87QUFDTCxlQUFPO0FBQUE7QUFBQTtBQUFBLG1CQUdNRDtBQUFBLFVBQ1AsWUFBWSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxVQUFVLENBQUM7QUFBQSxRQUM3RCxDQUFDO0FBQUEsbUJBQ1EsQ0FBQ0MsT0FBa0IsS0FBSyxhQUFhQSxFQUFDLENBQUM7QUFBQTtBQUFBO0FBQUEsTUFHdEQ7QUFBQSxJQUNGO0FBQUEsSUFFUSxhQUFhQSxJQUFlO0FBQ2xDLFlBQU0sTUFBTSxLQUFLLE9BQVEsS0FBSyxNQUFPQSxHQUFFLE9BQTRCLEtBQUs7QUFDeEUsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGFBQUssT0FBTztBQUNaLHVCQUFlLElBQUksS0FBSztBQUFBLE1BQzFCLE9BQU87QUFDTCxhQUFLO0FBQUEsVUFDSCxJQUFJLFlBQW9CLHFCQUFxQjtBQUFBLFlBQzNDLFNBQVM7QUFBQSxZQUNULFFBQVEsSUFBSTtBQUFBLFVBQ2QsQ0FBQztBQUFBLFFBQ0g7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLGVBQWUsVUFBVTs7O0FDeER4QyxNQUFNLHNCQUFOLGNBQWtDLFlBQVk7QUFBQSxJQUNuRCxhQUFnQztBQUFBLElBQ2hDLE9BQW9CO0FBQUEsSUFDcEIsWUFBb0I7QUFBQSxJQUNwQixpQkFBd0M7QUFBQSxJQUN4QztBQUFBLElBRUEsY0FBYztBQUNaLFlBQU07QUFDTixXQUFLLGdDQUFnQyxNQUFNO0FBQ3pDLGFBQUssY0FBYztBQUFBLE1BQ3JCO0FBQUEsSUFDRjtBQUFBLElBRUEsb0JBQTBCO0FBQ3hCLGVBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxJQUVBLHVCQUE2QjtBQUMzQixlQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFFQSxPQUFPQyxhQUF3QixXQUFtQixNQUFZO0FBQzVELFdBQUssYUFBYUE7QUFDbEIsV0FBSyxZQUFZO0FBQ2pCLFdBQUssT0FBTztBQUNaLFdBQUssY0FBYztBQUFBLElBQ3JCO0FBQUEsSUFFUSxnQkFBZ0I7QUFDdEIsWUFBTSxNQUFNLEtBQUssV0FBWSxLQUFNLGtCQUFrQixLQUFLLFNBQVM7QUFDbkUsVUFBSSxJQUFJLElBQUk7QUFDVixhQUFLLGlCQUFpQixJQUFJO0FBQUEsTUFDNUI7QUFDQSxRQUFPLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUM5QjtBQUFBLElBRVEsV0FBMkI7QUFDakMsVUFBSSxLQUFLLG1CQUFtQixNQUFNO0FBQ2hDLGVBQU87QUFBQSxNQUNUO0FBQ0EsVUFBSSxLQUFLLFdBQVksS0FBSyxPQUFPLFVBQVUsYUFBYTtBQUN0RCxlQUFPO0FBQUEsTUFDVDtBQUNBLGNBQVEsS0FBSyxlQUFlLE9BQU87QUFBQSxRQUNqQyxLQUFLO0FBQ0gsaUJBQU87QUFBQTtBQUFBLDZDQUU4QixNQUFNLEtBQUssTUFBTSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBSXZEO0FBQUEsUUFFRixLQUFLO0FBQ0gsaUJBQU87QUFBQTtBQUFBLHFEQUVzQyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQkFLcEQ7QUFBQSxZQUNQLE1BQU0sS0FBSyxXQUFZLEtBQU07QUFBQSxZQUM3QixZQUFZLEtBQUssZUFBZTtBQUFBLFVBQ2xDLENBQUM7QUFBQSxpQ0FDb0IsQ0FBQ0MsT0FDcEIsS0FBSyxpQkFBaUJBLEVBQUMsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBLDZDQUlPLE1BQU0sS0FBSyxPQUFPLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFVekNDLEdBQUssS0FBSyxlQUFlLGVBQWUsQ0FBQztBQUFBLHdCQUN4QyxDQUFDRCxPQUFrQixLQUFLLGNBQWNBLEVBQUMsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS3hEO0FBQUEsUUFFRixLQUFLO0FBQ0gsaUJBQU87QUFBQTtBQUFBLHFEQUVzQyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQkFLcEQ7QUFBQSxZQUNQLE1BQU0sS0FBSyxXQUFZLEtBQU07QUFBQSxZQUM3QixZQUFZLEtBQUssZUFBZSxLQUFLO0FBQUEsVUFDdkMsQ0FBQztBQUFBLGlDQUNvQixDQUFDQSxPQUNwQixLQUFLLGlCQUFpQkEsRUFBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEscURBSWUsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEscUJBS3JEO0FBQUEsWUFDUCxNQUFNLEtBQUssV0FBWSxLQUFNO0FBQUEsWUFDN0IsWUFBWSxLQUFLLGVBQWUsS0FBSztBQUFBLFVBQ3ZDLENBQUM7QUFBQSxpQ0FDb0IsQ0FBQ0EsT0FDcEIsS0FBSyxrQkFBa0JBLEVBQUMsQ0FBQztBQUFBO0FBQUE7QUFHL0I7QUFBQSxRQUVGO0FBRUUsZUFBSztBQUNMLGlCQUFPO0FBQ1A7QUFBQSxNQUNKO0FBQUEsSUFDRjtBQUFBLElBRUEsTUFBYyxzQkFBc0JFLElBQW1CO0FBQ3JELFlBQU0sTUFBTSxNQUFNO0FBQUEsUUFDaEIsb0JBQW9CLEtBQUssV0FBV0EsRUFBQztBQUFBLFFBQ3JDO0FBQUEsUUFDQTtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFDQSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsYUFBSyxjQUFjO0FBQ25CLHVCQUFlLElBQUksS0FBSztBQUFBLE1BQzFCO0FBQUEsSUFDRjtBQUFBLElBRUEsTUFBYyxRQUFRO0FBQ3BCLFdBQUssc0JBQXNCO0FBQUEsUUFDekIsT0FBTztBQUFBLFFBQ1AsT0FBTyxLQUFLLEtBQU07QUFBQSxRQUNsQixpQkFBaUI7QUFBQSxNQUNuQixDQUFDO0FBQUEsSUFDSDtBQUFBLElBRVEsVUFBVTtBQUNoQixXQUFLLHNCQUFzQjtBQUFBLFFBQ3pCLE9BQU87QUFBQSxNQUNULENBQUM7QUFBQSxJQUNIO0FBQUEsSUFFUSxTQUFTO0FBQ2YsVUFBSSxLQUFLLGVBQWdCLFVBQVUsV0FBVztBQUM1QyxhQUFLLHNCQUFzQjtBQUFBLFVBQ3pCLE9BQU87QUFBQTtBQUFBO0FBQUEsVUFHUCxNQUFNLElBQUksS0FBSyxLQUFLLGVBQWdCLE9BQU8sS0FBSyxLQUFNLE1BQU07QUFBQSxRQUM5RCxDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFBQSxJQUVRLFdBQVc7QUFDakIsVUFBSSxLQUFLLGVBQWdCLFVBQVUsWUFBWTtBQUM3QyxhQUFLLHNCQUFzQjtBQUFBLFVBQ3pCLE9BQU87QUFBQTtBQUFBO0FBQUEsVUFHUCxpQkFBaUI7QUFBQSxVQUNqQixPQUFPLEtBQUssZUFBZ0IsS0FBSztBQUFBLFFBQ25DLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUFBLElBRVEsY0FBY0YsSUFBZTtBQUNuQyxZQUFNRyxPQUFNQyxVQUFTQyxRQUFPLEtBQUssY0FBZSxDQUFDO0FBQ2pELFVBQUlGLEtBQUksVUFBVSxXQUFXO0FBQzNCLFFBQUFBLEtBQUksa0JBQW1CSCxHQUFFLE9BQTRCO0FBQ3JELGFBQUssc0JBQXNCRyxJQUFHO0FBQUEsTUFDaEM7QUFBQSxJQUNGO0FBQUEsSUFFUSxpQkFBaUJILElBQXdCO0FBQy9DLFlBQU1HLE9BQU1DLFVBQVNDLFFBQU8sS0FBSyxjQUFlLENBQUM7QUFDakQsVUFBSUYsS0FBSSxVQUFVLFlBQVk7QUFDNUIsUUFBQUEsS0FBSSxLQUFLLFFBQVFILEdBQUU7QUFBQSxNQUNyQixXQUFXRyxLQUFJLFVBQVUsV0FBVztBQUNsQyxRQUFBQSxLQUFJLFFBQVFILEdBQUU7QUFBQSxNQUNoQjtBQUNBLFdBQUssc0JBQXNCRyxJQUFHO0FBQUEsSUFDaEM7QUFBQSxJQUVRLGtCQUFrQkgsSUFBd0I7QUFDaEQsWUFBTUcsT0FBTUMsVUFBU0MsUUFBTyxLQUFLLGNBQWUsQ0FBQztBQUNqRCxVQUFJRixLQUFJLFVBQVUsWUFBWTtBQUM1QixRQUFBQSxLQUFJLEtBQUssU0FBU0gsR0FBRTtBQUFBLE1BQ3RCO0FBQ0EsV0FBSyxzQkFBc0JHLElBQUc7QUFBQSxJQUNoQztBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLHlCQUF5QixtQkFBbUI7OztBQzdOM0QsTUFBTSx5QkFBeUI7QUFPL0IsTUFBTSxxQkFBTixNQUFNLG9CQUFtQjtBQUFBLElBQzlCO0FBQUE7QUFBQSxJQUdBO0FBQUEsSUFFQSxZQUNFLFNBQW1CLENBQUMsc0JBQXNCLEdBQzFDLFdBQW9CLE9BQ3BCO0FBQ0EsV0FBSyxTQUFTO0FBQ2QsV0FBSyxXQUFXO0FBQUEsSUFDbEI7QUFBQSxJQUVBLFNBQXVDO0FBQ3JDLGFBQU87QUFBQSxRQUNMLFFBQVEsS0FBSztBQUFBLFFBQ2IsUUFBUSxLQUFLO0FBQUEsTUFDZjtBQUFBLElBQ0Y7QUFBQSxJQUVBLE9BQU8sU0FBU0csSUFBcUQ7QUFDbkUsYUFBTyxJQUFJLG9CQUFtQkEsR0FBRSxRQUFRQSxHQUFFLE1BQU07QUFBQSxJQUNsRDtBQUFBLEVBQ0Y7OztBQzFCTyxNQUFNLG1CQUFOLE1BQXdDO0FBQUEsSUFDN0M7QUFBQSxJQUVBO0FBQUEsSUFFQSxZQUNFLE1BQ0EsMEJBQTBELE1BQzFEO0FBQ0EsV0FBSyxNQUFNO0FBQ1gsV0FBSywwQkFBMEI7QUFBQSxJQUNqQztBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLGFBQWEsS0FBSyxzQkFBc0IsS0FBSyxHQUFHO0FBQ3RELFVBQUksZUFBZSxRQUFXO0FBQzVCLGVBQU8sTUFBTSxHQUFHLEtBQUssR0FBRywrQkFBK0I7QUFBQSxNQUN6RDtBQUVBLFdBQUs7QUFBQSxRQUNILEtBQUs7QUFBQSxRQUNKLEtBQUssMkJBQ0osS0FBSyx3QkFBd0Isc0JBQzdCLElBQUksbUJBQW1CO0FBQUEsTUFDM0I7QUFJQSxXQUFLLE1BQU0sU0FBUyxRQUFRLENBQUMsTUFBWSxVQUFrQjtBQUN6RCxhQUFLO0FBQUEsVUFDSCxLQUFLO0FBQUEsVUFDSixLQUFLLDJCQUNKLEtBQUssd0JBQXdCLGdDQUFnQztBQUFBLFlBQzNEO0FBQUEsVUFDRixLQUNBO0FBQUEsUUFDSjtBQUFBLE1BQ0YsQ0FBQztBQUVELGFBQU8sR0FBRyxFQUFFLE1BQVksU0FBUyxLQUFLLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDbkQ7QUFBQSxJQUVBLFVBQWlCO0FBQ2YsYUFBTyxJQUFJLG9CQUFvQixLQUFLLEdBQUc7QUFBQSxJQUN6QztBQUFBLEVBQ0Y7QUFPTyxNQUFNLHNCQUFOLE1BQTJDO0FBQUEsSUFDaEQ7QUFBQSxJQUVBLFlBQVksTUFBYztBQUN4QixXQUFLLE1BQU07QUFBQSxJQUNiO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0scUJBQXFCLEtBQUssc0JBQXNCLEtBQUssR0FBRztBQUM5RCxVQUFJLHVCQUF1QixRQUFXO0FBQ3BDLGVBQU87QUFBQSxVQUNMLDBCQUEwQixLQUFLLEdBQUc7QUFBQSxRQUNwQztBQUFBLE1BQ0Y7QUFHQSxXQUFLLHlCQUF5QixLQUFLLEdBQUc7QUFFdEMsWUFBTSxrQ0FBdUQsb0JBQUksSUFBSTtBQUlyRSxXQUFLLE1BQU0sU0FBUyxRQUFRLENBQUMsTUFBWSxVQUFrQjtBQUN6RCxjQUFNLFFBQVEsS0FBSyxZQUFZLEtBQUssR0FBRyxLQUFLO0FBQzVDLHdDQUFnQyxJQUFJLE9BQU8sS0FBSztBQUNoRCxhQUFLLGVBQWUsS0FBSyxHQUFHO0FBQUEsTUFDOUIsQ0FBQztBQUVELFlBQU0sMEJBQW1EO0FBQUEsUUFDdkQ7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUVBLGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsS0FBSyxRQUFRLHVCQUF1QjtBQUFBLE1BQy9DLENBQUM7QUFBQSxJQUNIO0FBQUEsSUFFUSxRQUFRLHlCQUF5RDtBQUN2RSxhQUFPLElBQUksaUJBQWlCLEtBQUssS0FBSyx1QkFBdUI7QUFBQSxJQUMvRDtBQUFBLEVBQ0Y7QUFFTyxNQUFNLHlCQUFOLE1BQThDO0FBQUEsSUFDbkQ7QUFBQSxJQUNBO0FBQUEsSUFDQSx5QkFBbUMsQ0FBQztBQUFBLElBRXBDLFlBQ0UsS0FDQSxPQUNBLHlCQUFtQyxDQUFDLEdBQ3BDO0FBQ0EsV0FBSyxNQUFNO0FBQ1gsV0FBSyxRQUFRO0FBQ2IsV0FBSyx5QkFBeUI7QUFBQSxJQUNoQztBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLGFBQWEsS0FBSyxzQkFBc0IsS0FBSyxHQUFHO0FBQ3RELFVBQUksZUFBZSxRQUFXO0FBQzVCLGVBQU8sTUFBTSxHQUFHLEtBQUssR0FBRyw4QkFBOEI7QUFBQSxNQUN4RDtBQUNBLFlBQU0sZ0JBQWdCLFdBQVcsT0FBTztBQUFBLFFBQ3RDLENBQUMsVUFBa0IsVUFBVSxLQUFLO0FBQUEsTUFDcEM7QUFDQSxVQUFJLGtCQUFrQixJQUFJO0FBQ3hCLGVBQU87QUFBQSxVQUNMLEdBQUcsS0FBSyxLQUFLLDhDQUE4QyxLQUFLLEdBQUc7QUFBQSxRQUNyRTtBQUFBLE1BQ0Y7QUFDQSxpQkFBVyxPQUFPLEtBQUssS0FBSyxLQUFLO0FBSWpDLFdBQUssdUJBQXVCLFFBQVEsQ0FBQyxjQUFzQjtBQUN6RCxhQUFLLE1BQU0sU0FBUyxTQUFTLEVBQUUsWUFBWSxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUEsTUFDakUsQ0FBQztBQUVELGFBQU8sR0FBRyxFQUFFLE1BQVksU0FBUyxLQUFLLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDbkQ7QUFBQSxJQUVRLFVBQWlCO0FBQ3ZCLGFBQU8sSUFBSTtBQUFBLFFBQ1QsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVPLE1BQU0sNEJBQU4sTUFBaUQ7QUFBQSxJQUN0RDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUNFLEtBQ0EsT0FDQSx5QkFBbUMsQ0FBQyxHQUNwQztBQUNBLFdBQUssTUFBTTtBQUNYLFdBQUssUUFBUTtBQUNiLFdBQUsseUJBQXlCO0FBQUEsSUFDaEM7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsWUFBTSxhQUFhLEtBQUssc0JBQXNCLEtBQUssR0FBRztBQUN0RCxVQUFJLGVBQWUsUUFBVztBQUM1QixlQUFPLE1BQU0sR0FBRyxLQUFLLEdBQUcsOEJBQThCO0FBQUEsTUFDeEQ7QUFDQSxZQUFNLGFBQWEsV0FBVyxPQUFPO0FBQUEsUUFDbkMsQ0FBQyxVQUFrQixVQUFVLEtBQUs7QUFBQSxNQUNwQztBQUNBLFVBQUksZUFBZSxJQUFJO0FBQ3JCLGVBQU87QUFBQSxVQUNMLEdBQUcsS0FBSyxLQUFLLDhDQUE4QyxLQUFLLEdBQUc7QUFBQSxRQUNyRTtBQUFBLE1BQ0Y7QUFDQSxVQUFJLFdBQVcsT0FBTyxXQUFXLEdBQUc7QUFDbEMsZUFBTztBQUFBLFVBQ0wsMkNBQTJDLEtBQUssS0FBSztBQUFBLFFBQ3ZEO0FBQUEsTUFDRjtBQUVBLGlCQUFXLE9BQU8sT0FBTyxZQUFZLENBQUM7QUFNdEMsWUFBTSwyQ0FBcUQsQ0FBQztBQUU1RCxXQUFLLE1BQU0sU0FBUyxRQUFRLENBQUMsTUFBWSxVQUFrQjtBQUN6RCxjQUFNLGdCQUFnQixLQUFLLFlBQVksS0FBSyxHQUFHO0FBQy9DLFlBQUksa0JBQWtCLFFBQVc7QUFDL0I7QUFBQSxRQUNGO0FBQ0EsWUFBSSxrQkFBa0IsS0FBSyxPQUFPO0FBQ2hDO0FBQUEsUUFDRjtBQUdBLGFBQUssWUFBWSxLQUFLLEtBQUssV0FBVyxPQUFPLENBQUMsQ0FBQztBQUcvQyxpREFBeUMsS0FBSyxLQUFLO0FBQUEsTUFDckQsQ0FBQztBQUVELGFBQU8sR0FBRztBQUFBLFFBQ1I7QUFBQSxRQUNBLFNBQVMsS0FBSyxRQUFRLHdDQUF3QztBQUFBLE1BQ2hFLENBQUM7QUFBQSxJQUNIO0FBQUEsSUFFUSxRQUFRLHdCQUF5QztBQUN2RCxhQUFPLElBQUk7QUFBQSxRQUNULEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRU8sTUFBTSxzQkFBTixNQUFNLHFCQUFxQztBQUFBLElBQ2hEO0FBQUEsSUFDQTtBQUFBLElBRUEsWUFBWSxRQUFnQixRQUFnQjtBQUMxQyxXQUFLLFNBQVM7QUFDZCxXQUFLLFNBQVM7QUFBQSxJQUNoQjtBQUFBLElBRUEsUUFBUSxNQUFpQztBQUN2QyxZQUFNLGdCQUFnQixLQUFLLHNCQUFzQixLQUFLLE1BQU07QUFDNUQsVUFBSSxrQkFBa0IsUUFBVztBQUMvQixlQUFPLE1BQU0sR0FBRyxLQUFLLE1BQU0sK0JBQStCO0FBQUEsTUFDNUQ7QUFHQSxZQUFNLG1CQUFtQixLQUFLLHNCQUFzQixLQUFLLE1BQU07QUFDL0QsVUFBSSxxQkFBcUIsUUFBVztBQUNsQyxlQUFPLE1BQU0sR0FBRyxLQUFLLE1BQU0scUNBQXFDO0FBQUEsTUFDbEU7QUFFQSxXQUFLLHlCQUF5QixLQUFLLE1BQU07QUFDekMsV0FBSyxzQkFBc0IsS0FBSyxRQUFRLGFBQWE7QUFHckQsV0FBSyxNQUFNLFNBQVMsUUFBUSxDQUFDLFNBQWU7QUFDMUMsY0FBTSxlQUNKLEtBQUssWUFBWSxLQUFLLE1BQU0sS0FBSztBQUNuQyxhQUFLLFlBQVksS0FBSyxRQUFRLFlBQVk7QUFDMUMsYUFBSyxlQUFlLEtBQUssTUFBTTtBQUFBLE1BQ2pDLENBQUM7QUFFRCxhQUFPLEdBQUcsRUFBRSxNQUFZLFNBQVMsS0FBSyxRQUFRLEVBQUUsQ0FBQztBQUFBLElBQ25EO0FBQUEsSUFFQSxVQUFpQjtBQUNmLGFBQU8sSUFBSSxxQkFBb0IsS0FBSyxRQUFRLEtBQUssTUFBTTtBQUFBLElBQ3pEO0FBQUEsRUFDRjtBQUVPLE1BQU0sNEJBQU4sTUFBTSwyQkFBMkM7QUFBQSxJQUN0RDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUFZLEtBQWEsVUFBa0IsVUFBa0I7QUFDM0QsV0FBSyxNQUFNO0FBQ1gsV0FBSyxXQUFXO0FBQ2hCLFdBQUssV0FBVztBQUFBLElBQ2xCO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0sYUFBYSxLQUFLLHNCQUFzQixLQUFLLEdBQUc7QUFDdEQsVUFBSSxlQUFlLFFBQVc7QUFDNUIsZUFBTyxNQUFNLEdBQUcsS0FBSyxHQUFHLCtCQUErQjtBQUFBLE1BQ3pEO0FBR0EsWUFBTSxnQkFBZ0IsV0FBVyxPQUFPLFFBQVEsS0FBSyxRQUFRO0FBRTdELFVBQUksa0JBQWtCLElBQUk7QUFDeEIsZUFBTyxNQUFNLEdBQUcsS0FBSyxHQUFHLHFCQUFxQixLQUFLLFFBQVEsRUFBRTtBQUFBLE1BQzlEO0FBR0EsWUFBTSxnQkFBZ0IsV0FBVyxPQUFPLFFBQVEsS0FBSyxRQUFRO0FBQzdELFVBQUksa0JBQWtCLElBQUk7QUFDeEIsZUFBTyxNQUFNLEdBQUcsS0FBSyxHQUFHLHdCQUF3QixLQUFLLFFBQVEsRUFBRTtBQUFBLE1BQ2pFO0FBR0EsaUJBQVcsT0FBTyxPQUFPLGVBQWUsR0FBRyxLQUFLLFFBQVE7QUFHeEQsV0FBSyxNQUFNLFNBQVMsUUFBUSxDQUFDLFNBQWU7QUFDMUMsY0FBTSxlQUFlLEtBQUssWUFBWSxLQUFLLEdBQUc7QUFDOUMsWUFBSSxpQkFBaUIsS0FBSyxVQUFVO0FBQ2xDLGVBQUssWUFBWSxLQUFLLEtBQUssS0FBSyxRQUFRO0FBQUEsUUFDMUM7QUFBQSxNQUNGLENBQUM7QUFFRCxhQUFPLEdBQUcsRUFBRSxNQUFZLFNBQVMsS0FBSyxRQUFRLEVBQUUsQ0FBQztBQUFBLElBQ25EO0FBQUEsSUFFQSxVQUFpQjtBQUNmLGFBQU8sSUFBSTtBQUFBLFFBQ1QsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVPLE1BQU0sMEJBQU4sTUFBTSx5QkFBeUM7QUFBQSxJQUNwRDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUFZLEtBQWEsVUFBa0IsVUFBa0I7QUFDM0QsV0FBSyxNQUFNO0FBQ1gsV0FBSyxXQUFXO0FBQ2hCLFdBQUssV0FBVztBQUFBLElBQ2xCO0FBQUEsSUFFQSxRQUFRLE1BQWlDO0FBQ3ZDLFlBQU0sYUFBYSxLQUFLLHNCQUFzQixLQUFLLEdBQUc7QUFDdEQsVUFBSSxlQUFlLFFBQVc7QUFDNUIsZUFBTyxNQUFNLEdBQUcsS0FBSyxHQUFHLCtCQUErQjtBQUFBLE1BQ3pEO0FBRUEsVUFBSSxLQUFLLFdBQVcsR0FBRztBQUNyQixlQUFPLE1BQU0sR0FBRyxLQUFLLFFBQVEsK0JBQStCO0FBQUEsTUFDOUQ7QUFFQSxVQUFJLEtBQUssV0FBVyxXQUFXLE9BQU8sU0FBUyxHQUFHO0FBQ2hELGVBQU87QUFBQSxVQUNMLEdBQUcsS0FBSyxHQUFHLG1DQUFtQyxLQUFLLFFBQVE7QUFBQSxRQUM3RDtBQUFBLE1BQ0Y7QUFDQSxVQUFJLEtBQUssV0FBVyxXQUFXLE9BQU8sU0FBUyxHQUFHO0FBQ2hELGVBQU87QUFBQSxVQUNMLEdBQUcsS0FBSyxHQUFHLG1DQUFtQyxLQUFLLFFBQVE7QUFBQSxRQUM3RDtBQUFBLE1BQ0Y7QUFHQSxZQUFNLE1BQU0sV0FBVyxPQUFPLEtBQUssUUFBUTtBQUMzQyxpQkFBVyxPQUFPLEtBQUssUUFBUSxJQUFJLFdBQVcsT0FBTyxLQUFLLFFBQVE7QUFDbEUsaUJBQVcsT0FBTyxLQUFLLFFBQVEsSUFBSTtBQUtuQyxhQUFPLEdBQUcsRUFBRSxNQUFZLFNBQVMsS0FBSyxRQUFRLEVBQUUsQ0FBQztBQUFBLElBQ25EO0FBQUEsSUFFQSxVQUFpQjtBQUNmLGFBQU8sSUFBSSx5QkFBd0IsS0FBSyxLQUFLLEtBQUssVUFBVSxLQUFLLFFBQVE7QUFBQSxJQUMzRTtBQUFBLEVBQ0Y7QUFFTyxNQUFNLHdCQUFOLE1BQU0sdUJBQXVDO0FBQUEsSUFDbEQ7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBRUEsWUFBWSxLQUFhLE9BQWUsV0FBbUI7QUFDekQsV0FBSyxNQUFNO0FBQ1gsV0FBSyxRQUFRO0FBQ2IsV0FBSyxZQUFZO0FBQUEsSUFDbkI7QUFBQSxJQUVBLFFBQVEsTUFBaUM7QUFDdkMsWUFBTSxhQUFhLEtBQUssc0JBQXNCLEtBQUssR0FBRztBQUN0RCxVQUFJLGVBQWUsUUFBVztBQUM1QixlQUFPLE1BQU0sR0FBRyxLQUFLLEdBQUcsK0JBQStCO0FBQUEsTUFDekQ7QUFFQSxZQUFNLGtCQUFrQixXQUFXLE9BQU8sVUFBVSxDQUFDQyxPQUFjO0FBQ2pFLGVBQU9BLE9BQU0sS0FBSztBQUFBLE1BQ3BCLENBQUM7QUFDRCxVQUFJLG9CQUFvQixJQUFJO0FBQzFCLGVBQU8sTUFBTSxHQUFHLEtBQUssR0FBRyw2QkFBNkIsS0FBSyxLQUFLLEVBQUU7QUFBQSxNQUNuRTtBQUNBLFVBQUksS0FBSyxZQUFZLEtBQUssS0FBSyxhQUFhLEtBQUssTUFBTSxTQUFTLFFBQVE7QUFDdEUsZUFBTyxNQUFNLDZCQUE2QixLQUFLLFNBQVMsRUFBRTtBQUFBLE1BQzVEO0FBRUEsWUFBTSxPQUFPLEtBQUssTUFBTSxTQUFTLEtBQUssU0FBUztBQUMvQyxZQUFNLFdBQVcsS0FBSyxZQUFZLEtBQUssR0FBRztBQUMxQyxXQUFLLFlBQVksS0FBSyxLQUFLLEtBQUssS0FBSztBQUVyQyxhQUFPLEdBQUcsRUFBRSxNQUFZLFNBQVMsS0FBSyxRQUFRLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDM0Q7QUFBQSxJQUVBLFFBQVEsVUFBeUI7QUFDL0IsYUFBTyxJQUFJLHVCQUFzQixLQUFLLEtBQUssVUFBVSxLQUFLLFNBQVM7QUFBQSxJQUNyRTtBQUFBLEVBQ0Y7QUFFTyxXQUFTLGNBQWMsTUFBa0I7QUFDOUMsV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLGlCQUFpQixJQUFJLENBQUMsQ0FBQztBQUFBLEVBQzVDO0FBRU8sV0FBUyxpQkFBaUIsTUFBa0I7QUFDakQsV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLG9CQUFvQixJQUFJLENBQUMsQ0FBQztBQUFBLEVBQy9DO0FBRU8sV0FBUyxvQkFBb0IsS0FBYSxPQUFtQjtBQUNsRSxXQUFPLElBQUksR0FBRyxDQUFDLElBQUksdUJBQXVCLEtBQUssS0FBSyxDQUFDLENBQUM7QUFBQSxFQUN4RDtBQUVPLFdBQVMsdUJBQXVCLEtBQWEsT0FBbUI7QUFDckUsV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLDBCQUEwQixLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQUEsRUFDM0Q7QUFFTyxXQUFTLHVCQUNkLEtBQ0EsVUFDQSxVQUNJO0FBQ0osV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLDBCQUEwQixLQUFLLFVBQVUsUUFBUSxDQUFDLENBQUM7QUFBQSxFQUN4RTtBQUVPLFdBQVMsaUJBQWlCLFVBQWtCLFVBQXNCO0FBQ3ZFLFdBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxvQkFBb0IsVUFBVSxRQUFRLENBQUMsQ0FBQztBQUFBLEVBQzdEO0FBRU8sV0FBUyxxQkFDZCxLQUNBLFVBQ0EsVUFDSTtBQUNKLFdBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSx3QkFBd0IsS0FBSyxVQUFVLFFBQVEsQ0FBQyxDQUFDO0FBQUEsRUFDdEU7QUFFTyxXQUFTLG1CQUNkLEtBQ0EsT0FDQSxXQUNJO0FBQ0osV0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLHNCQUFzQixLQUFLLE9BQU8sU0FBUyxDQUFDLENBQUM7QUFBQSxFQUNsRTs7O0FDaGJPLE1BQU0seUJBQU4sY0FBcUMsWUFBWTtBQUFBLElBQ3RELGFBQWdDO0FBQUEsSUFDaEMscUJBQXlDLElBQUksbUJBQW1CO0FBQUEsSUFDaEUsT0FBZTtBQUFBLElBQ2Y7QUFBQSxJQUNBLGtCQUFrQjtBQUFBLElBRWxCLGNBQWM7QUFDWixZQUFNO0FBQ04sV0FBSyxnQ0FBZ0MsTUFBTTtBQUN6QyxhQUFLLE9BQU87QUFBQSxNQUNkO0FBQUEsSUFDRjtBQUFBLElBRUEsb0JBQTBCO0FBQ3hCLGVBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxJQUVBLHVCQUE2QjtBQUMzQixlQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFFQSxVQUNFQyxhQUNBLE1BQ0Esb0JBQ0E7QUFDQSxXQUFLLGFBQWFBO0FBQ2xCLFdBQUsscUJBQXFCO0FBQzFCLFdBQUssT0FBTztBQUNaLFdBQUssT0FBTztBQUNaLFdBQUssY0FBaUMsUUFBUSxFQUFHLFVBQVU7QUFBQSxJQUM3RDtBQUFBLElBRVEsU0FBUztBQUNmLFFBQU8sS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzlCO0FBQUEsSUFFUSxTQUFTO0FBQ2YsV0FBSyxjQUFpQyxRQUFRLEVBQUcsTUFBTTtBQUFBLElBQ3pEO0FBQUEsSUFFQSxNQUFjLFVBQVUsSUFBK0I7QUFDckQsWUFBTSxNQUFNLE1BQU07QUFBQSxRQUNoQjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUNBLFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPLE1BQU0sSUFBSSxLQUFLO0FBQUEsTUFDeEI7QUFDQSxhQUFPO0FBQUEsSUFDVDtBQUFBLElBRUEsTUFBYyxtQkFBbUJDLElBQVUsU0FBaUIsU0FBaUI7QUFDM0UsWUFBTSxNQUFNLE1BQU0sS0FBSyxVQUFVLGlCQUFpQixTQUFTLE9BQU8sQ0FBQztBQUNuRSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsZUFBTyxNQUFNLElBQUksS0FBSztBQUN0QixhQUFLLE9BQU87QUFDWixhQUFLLE9BQU87QUFBQSxNQUNkO0FBQ0EsV0FBSyxPQUFPO0FBQUEsSUFDZDtBQUFBLElBRUEsTUFBYyx3QkFDWkEsSUFDQSxVQUNBLFVBQ0E7QUFDQSxZQUFNLE1BQU0sTUFBTSxLQUFLO0FBQUEsUUFDckIsdUJBQXVCLEtBQUssTUFBTSxVQUFVLFFBQVE7QUFBQSxNQUN0RDtBQUNBLFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPLE1BQU0sSUFBSSxLQUFLO0FBQ3RCLFFBQUNBLEdBQUUsT0FBNEIsUUFBUTtBQUN2QyxhQUFLLE9BQU87QUFBQSxNQUNkO0FBQUEsSUFDRjtBQUFBLElBRVEsMEJBQWtDO0FBQ3hDLFdBQUs7QUFDTCxhQUFPLGFBQWEsS0FBSyxlQUFlO0FBQUEsSUFDMUM7QUFBQSxJQUVBLE1BQWMsbUJBQW1CO0FBQy9CLFdBQUssa0JBQWtCO0FBR3ZCLFVBQUksa0JBQWtCLEtBQUssd0JBQXdCO0FBQ25ELGFBQ0UsS0FBSyxXQUFZLEtBQUssb0JBQW9CLEtBQUssSUFBSSxFQUFFLE9BQU87QUFBQSxRQUMxRCxDQUFDLFVBQWtCLFVBQVU7QUFBQSxNQUMvQixLQUFLLElBQ0w7QUFDQSwwQkFBa0IsS0FBSyx3QkFBd0I7QUFBQSxNQUNqRDtBQUVBLFlBQU0sS0FBSyxVQUFVLG9CQUFvQixLQUFLLE1BQU0sZUFBZSxDQUFDO0FBQUEsSUFDdEU7QUFBQSxJQUVBLE1BQWMsT0FBTyxPQUFlLFlBQW9CO0FBQ3RELFlBQU0sS0FBSztBQUFBLFFBQ1QscUJBQXFCLEtBQUssTUFBTSxZQUFZLGFBQWEsQ0FBQztBQUFBLE1BQzVEO0FBQUEsSUFDRjtBQUFBLElBRUEsTUFBYyxTQUFTLE9BQWUsWUFBb0I7QUFDeEQsWUFBTSxLQUFLO0FBQUEsUUFDVCxxQkFBcUIsS0FBSyxNQUFNLFlBQVksYUFBYSxDQUFDO0FBQUEsTUFDNUQ7QUFBQSxJQUNGO0FBQUEsSUFFQSxNQUFjLFVBQVUsT0FBZSxZQUFvQjtBQUN6RCxZQUFNLEtBQUssVUFBVSxxQkFBcUIsS0FBSyxNQUFNLFlBQVksQ0FBQyxDQUFDO0FBQUEsSUFDckU7QUFBQSxJQUVBLE1BQWMsYUFBYSxPQUFlLFlBQW9CO0FBQzVELFlBQU0sS0FBSztBQUFBLFFBQ1Q7QUFBQSxVQUNFLEtBQUs7QUFBQSxVQUNMO0FBQUEsVUFDQSxLQUFLLFdBQVksS0FBSyxvQkFBb0IsS0FBSyxJQUFJLEVBQUcsT0FBTyxTQUFTO0FBQUEsUUFDeEU7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBO0FBQUEsSUFHQSxNQUFjLG9CQUFvQixPQUFlLGFBQXFCO0FBQ3BFLFlBQU0sS0FBSyxVQUFVLHVCQUF1QixLQUFLLE1BQU0sS0FBSyxDQUFDO0FBQUEsSUFDL0Q7QUFBQSxJQUVRLFdBQTJCO0FBQ2pDLGFBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEscUJBTVVDLEdBQUssS0FBSyxJQUFJLENBQUM7QUFBQSw0QkFDUixLQUFLLElBQUk7QUFBQSxzQkFDZixDQUFDRCxPQUFhO0FBQ3RCLGNBQU0sTUFBTUEsR0FBRTtBQUNkLGFBQUssbUJBQW1CQSxJQUFHLElBQUksT0FBTyxJQUFJLFFBQVEsV0FBVyxFQUFFO0FBQUEsTUFDakUsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBLFlBSUQsS0FBSyxtQkFBbUIsT0FBTztBQUFBLFFBQy9CLENBQUMsT0FBZSxlQUF1QjtBQUNyQyxpQkFBTztBQUFBO0FBQUE7QUFBQSxxQ0FHZ0IsS0FBSztBQUFBLDhCQUNaLENBQUNBLE9BQWE7QUFDdEIsa0JBQU0sTUFBTUEsR0FBRTtBQUNkLGlCQUFLO0FBQUEsY0FDSEE7QUFBQSxjQUNBLElBQUk7QUFBQSxjQUNKLElBQUksUUFBUSxZQUFZO0FBQUEsWUFDMUI7QUFBQSxVQUNGLENBQUM7QUFBQSw2QkFDUUMsR0FBSyxLQUFLLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsNkJBTVgsTUFBTSxLQUFLLE9BQU8sT0FBTyxVQUFVLENBQUM7QUFBQTtBQUFBLGdDQUVqQyxlQUFlLENBQUM7QUFBQTtBQUFBLHNCQUUxQixLQUFLLGtCQUFrQixDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxnQ0FLZCxlQUNaLEtBQUssbUJBQW1CLE9BQU8sU0FBUyxDQUFDO0FBQUE7QUFBQSw2QkFFaEMsTUFBTSxLQUFLLFNBQVMsT0FBTyxVQUFVLENBQUM7QUFBQTtBQUFBLHNCQUU3QyxLQUFLLG9CQUFvQixDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxnQ0FLaEIsZUFDWixLQUFLLG1CQUFtQixPQUFPLFNBQVMsQ0FBQztBQUFBO0FBQUEsNkJBRWhDLE1BQU0sS0FBSyxhQUFhLE9BQU8sVUFBVSxDQUFDO0FBQUE7QUFBQSxzQkFFakQsS0FBSywyQkFBMkIsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0NBS3ZCLGVBQWUsQ0FBQztBQUFBO0FBQUEsNkJBRW5CLE1BQU0sS0FBSyxVQUFVLE9BQU8sVUFBVSxDQUFDO0FBQUE7QUFBQSxzQkFFOUMsS0FBSyx5QkFBeUIsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0NBS3JCLEtBQUssbUJBQW1CLE9BQU8sV0FBVyxDQUFDO0FBQUE7QUFBQSw2QkFFOUMsTUFBTSxLQUFLLG9CQUFvQixPQUFPLFVBQVUsQ0FBQztBQUFBO0FBQUEsc0JBRXhELEtBQUssYUFBYSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFJN0I7QUFBQSxNQUNGLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEseUJBU2MsTUFBTTtBQUNiLGFBQUssaUJBQWlCO0FBQUEsTUFDeEIsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsMkJBUVUsTUFBTSxLQUFLLE9BQU8sQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSTVDO0FBQUEsRUFDRjtBQUVBLGlCQUFlLE9BQU8sNEJBQTRCLHNCQUFzQjs7O0FDaFFqRSxNQUFNLGVBQWUsQ0FBQ0MsT0FBc0I7QUFDakQsUUFBSUEsT0FBTSxPQUFPLFdBQVc7QUFDMUIsYUFBTztBQUFBLElBQ1QsV0FBV0EsT0FBTSxDQUFDLE9BQU8sV0FBVztBQUNsQyxhQUFPO0FBQUEsSUFDVCxPQUFPO0FBQ0wsYUFBT0EsR0FBRSxTQUFTO0FBQUEsSUFDcEI7QUFBQSxFQUNGO0FBRU8sTUFBTSxRQUFRLENBQUNBLElBQVcsS0FBYSxRQUF3QjtBQUNwRSxRQUFJQSxLQUFJLEtBQUs7QUFDWCxhQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUlBLEtBQUksS0FBSztBQUNYLGFBQU87QUFBQSxJQUNUO0FBQ0EsV0FBT0E7QUFBQSxFQUNUO0FBR08sTUFBTSxjQUFOLE1BQU0sYUFBWTtBQUFBLElBQ2YsT0FBZSxDQUFDLE9BQU87QUFBQSxJQUN2QixPQUFlLE9BQU87QUFBQSxJQUU5QixZQUFZLE1BQWMsQ0FBQyxPQUFPLFdBQVcsTUFBYyxPQUFPLFdBQVc7QUFDM0UsVUFBSSxNQUFNLEtBQUs7QUFDYixTQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHO0FBQUEsTUFDeEI7QUFDQSxXQUFLLE9BQU87QUFDWixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxNQUFNLE9BQXVCO0FBQzNCLGFBQU8sTUFBTSxPQUFPLEtBQUssTUFBTSxLQUFLLElBQUk7QUFBQSxJQUMxQztBQUFBLElBRUEsSUFBVyxNQUFjO0FBQ3ZCLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBLElBQVcsTUFBYztBQUN2QixhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUEsSUFFQSxTQUFnQztBQUM5QixhQUFPO0FBQUEsUUFDTCxLQUFLLEtBQUs7QUFBQSxRQUNWLEtBQUssS0FBSztBQUFBLE1BQ1o7QUFBQSxJQUNGO0FBQUEsSUFFQSxPQUFPLFNBQVNDLElBQW1EO0FBQ2pFLFVBQUlBLE9BQU0sUUFBVztBQUNuQixlQUFPLElBQUksYUFBWTtBQUFBLE1BQ3pCO0FBQ0EsYUFBTyxJQUFJLGFBQVlBLEdBQUUsS0FBS0EsR0FBRSxHQUFHO0FBQUEsSUFDckM7QUFBQSxFQUNGOzs7QUM1RE8sTUFBTSxZQUFOLE1BQU0sV0FBVTtBQUFBLElBQ2I7QUFBQSxJQUVSLFlBQVlDLGFBQW9CLEdBQUc7QUFDakMsVUFBSSxDQUFDLE9BQU8sU0FBU0EsVUFBUyxHQUFHO0FBQy9CLFFBQUFBLGFBQVk7QUFBQSxNQUNkO0FBQ0EsV0FBSyxhQUFhLEtBQUssSUFBSSxLQUFLLE1BQU1BLFVBQVMsQ0FBQztBQUFBLElBQ2xEO0FBQUEsSUFFQSxNQUFNQyxJQUFtQjtBQUN2QixhQUFPLENBQUNBLEdBQUUsUUFBUSxLQUFLLFVBQVU7QUFBQSxJQUNuQztBQUFBLElBRUEsVUFBbUI7QUFDakIsYUFBTyxDQUFDQSxPQUFzQixLQUFLLE1BQU1BLEVBQUM7QUFBQSxJQUM1QztBQUFBLElBRUEsSUFBVyxZQUFvQjtBQUM3QixhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUEsSUFFQSxTQUE4QjtBQUM1QixhQUFPO0FBQUEsUUFDTCxXQUFXLEtBQUs7QUFBQSxNQUNsQjtBQUFBLElBQ0Y7QUFBQSxJQUVBLE9BQU8sU0FBU0MsSUFBK0M7QUFDN0QsVUFBSUEsT0FBTSxRQUFXO0FBQ25CLGVBQU8sSUFBSSxXQUFVO0FBQUEsTUFDdkI7QUFDQSxhQUFPLElBQUksV0FBVUEsR0FBRSxTQUFTO0FBQUEsSUFDbEM7QUFBQSxFQUNGOzs7QUM1Qk8sTUFBTSxtQkFBTixNQUFNLGtCQUFpQjtBQUFBLElBQzVCO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUNFLGNBQ0EsUUFBcUIsSUFBSSxZQUFZLEdBQ3JDLFdBQW9CLE9BQ3BCQyxhQUF1QixJQUFJLFVBQVUsQ0FBQyxHQUN0QztBQUNBLFdBQUssWUFBWUE7QUFDakIsV0FBSyxRQUFRO0FBQ2IsV0FBSyxVQUFVO0FBQ2YsV0FBSyxXQUFXO0FBQ2hCLFdBQUssWUFBWTtBQUFBLElBQ25CO0FBQUEsSUFFQSxjQUFjO0FBR1osV0FBSyxRQUFRLElBQUk7QUFBQSxRQUNmLEtBQUssVUFBVSxNQUFNLEtBQUssTUFBTSxHQUFHO0FBQUEsUUFDbkMsS0FBSyxVQUFVLE1BQU0sS0FBSyxNQUFNLEdBQUc7QUFBQSxNQUNyQztBQUdBLFdBQUssVUFBVSxLQUFLLGNBQWMsS0FBSyxPQUFPO0FBQUEsSUFDaEQ7QUFBQSxJQUVBLGNBQWNDLElBQW1CO0FBQy9CLGFBQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxNQUFNLE1BQU1BLEVBQUMsQ0FBQztBQUFBLElBQ2pEO0FBQUEsSUFFQSxTQUFxQztBQUNuQyxhQUFPO0FBQUEsUUFDTCxPQUFPLEtBQUssTUFBTSxPQUFPO0FBQUEsUUFDekIsU0FBUyxLQUFLO0FBQUEsUUFDZCxXQUFXLEtBQUssVUFBVSxPQUFPO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBQUEsSUFFQSxPQUFPLFNBQVNDLElBQTZEO0FBQzNFLFVBQUlBLE9BQU0sUUFBVztBQUNuQixlQUFPLElBQUksa0JBQWlCLENBQUM7QUFBQSxNQUMvQjtBQUNBLGFBQU8sSUFBSTtBQUFBLFFBQ1RBLEdBQUUsV0FBVztBQUFBLFFBQ2IsWUFBWSxTQUFTQSxHQUFFLEtBQUs7QUFBQSxRQUM1QjtBQUFBLFFBQ0EsVUFBVSxTQUFTQSxHQUFFLFNBQVM7QUFBQSxNQUNoQztBQUFBLElBQ0Y7QUFBQSxFQUNGOzs7QUN0RE8sTUFBTSxtQkFBTixjQUErQixZQUFZO0FBQUEsSUFDaEQsYUFBZ0M7QUFBQSxJQUNoQztBQUFBLElBRUEsY0FBYztBQUNaLFlBQU07QUFDTixXQUFLLGdDQUFnQyxNQUFNO0FBQ3pDLFlBQUksS0FBSyxlQUFlLE1BQU07QUFDNUIsZUFBSyxPQUFPO0FBQUEsUUFDZDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFFQSxvQkFBMEI7QUFDeEIsZUFBUztBQUFBLFFBQ1A7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQUEsSUFDRjtBQUFBLElBRUEsdUJBQTZCO0FBQzNCLGVBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxJQUVRLFNBQVM7QUFDZixRQUFPLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUM5QjtBQUFBLElBRUEsVUFBVUMsYUFBd0I7QUFDaEMsV0FBSyxhQUFhQTtBQUNsQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFUSxXQUEyQjtBQUNqQyxZQUFNLEtBQUssS0FBSyxXQUFZLEtBQUs7QUFDakMsWUFBTSxnQkFBZ0IsT0FBTyxLQUFLLEVBQUUsRUFBRTtBQUFBLFFBQ3BDLENBQUMsTUFBYyxTQUF5QjtBQUN0QyxnQkFBTUMsS0FBSSxHQUFHLElBQUk7QUFDakIsZ0JBQU1DLEtBQUksR0FBRyxJQUFJO0FBQ2pCLGNBQUlELEdBQUUsYUFBYUMsR0FBRSxVQUFVO0FBQzdCLG1CQUFPLEtBQUssY0FBYyxJQUFJO0FBQUEsVUFDaEM7QUFDQSxjQUFJRCxHQUFFLFVBQVU7QUFDZCxtQkFBTztBQUFBLFVBQ1Q7QUFDQSxpQkFBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBQ0EsYUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFXRCxjQUFjLElBQUksQ0FBQyxlQUF1QjtBQUMxQyxjQUFNLGFBQ0osS0FBSyxXQUFZLEtBQUssa0JBQWtCLFVBQVU7QUFDcEQsZUFBTztBQUFBO0FBQUEsb0JBRUcsVUFBVTtBQUFBLG9CQUNWLGFBQWEsV0FBVyxNQUFNLEdBQUcsQ0FBQztBQUFBLG9CQUNsQyxhQUFhLFdBQVcsTUFBTSxHQUFHLENBQUM7QUFBQSxvQkFDbEMsV0FBVyxPQUFPO0FBQUE7QUFBQSxrQkFFcEIsS0FBSyxxQkFBcUIsWUFBWSxXQUFXLFFBQVEsQ0FBQztBQUFBO0FBQUE7QUFBQSxrQkFHMUQsS0FBSyxzQkFBc0IsWUFBWSxXQUFXLFFBQVEsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSXJFLENBQUMsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQVVhLE1BQU07QUFDYixhQUFLLFVBQVU7QUFBQSxNQUNqQixDQUFDO0FBQUE7QUFBQSxnQkFFQyxLQUFLLFVBQVUsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLOUI7QUFBQSxJQUVRLHFCQUNOLE1BQ0EsVUFDZ0I7QUFDaEIsVUFBSSxVQUFVO0FBQ1osZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUE7QUFBQTtBQUFBLGVBR0ksTUFBTSxLQUFLLGFBQWEsSUFBSSxDQUFDO0FBQUE7QUFBQSxRQUVwQyxLQUFLLGFBQWEsQ0FBQztBQUFBO0FBQUEsSUFFekI7QUFBQSxJQUVBLE1BQWMsYUFBYSxNQUFjO0FBQ3ZDLFlBQU0sTUFBTSxNQUFNO0FBQUEsUUFDaEIsZUFBZSxJQUFJO0FBQUEsUUFDbkI7QUFBQSxRQUNBO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUNBLG9CQUFjLEdBQUc7QUFDakIsV0FBSyxPQUFPO0FBQUEsSUFDZDtBQUFBLElBRVEsc0JBQ04sTUFDQSxVQUNnQjtBQUNoQixVQUFJLFVBQVU7QUFDWixlQUFPO0FBQUEsTUFDVDtBQUNBLGFBQU87QUFBQTtBQUFBO0FBQUEsZUFHSSxNQUFNLEtBQUssV0FBVyxJQUFJLENBQUM7QUFBQTtBQUFBLFFBRWxDLEtBQUssV0FBVyxDQUFDO0FBQUE7QUFBQSxJQUV2QjtBQUFBLElBRVEsV0FBVyxNQUFjO0FBQy9CLFdBQUssV0FBWTtBQUFBLFFBQ2Y7QUFBQSxNQUNGLEVBQUcsVUFBVSxLQUFLLFlBQWEsSUFBSTtBQUFBLElBQ3JDO0FBQUEsSUFFQSxNQUFjLFlBQVk7QUFDeEIsVUFBSSxPQUFPLE1BQU0sU0FDZCxjQUE0QixlQUFlLEVBQzNDLE9BQU8sYUFBYTtBQUN2QixVQUFJLFNBQVMsTUFBTTtBQUNqQjtBQUFBLE1BQ0Y7QUFDQSxhQUFPLEtBQUssS0FBSztBQUNqQixVQUFJLFNBQVMsSUFBSTtBQUNmO0FBQUEsVUFDRSxJQUFJO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQ0E7QUFBQSxNQUNGO0FBRUEsWUFBTSxNQUFNLE1BQU07QUFBQSxRQUNoQixZQUFZLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxDQUFDO0FBQUEsUUFDekM7QUFBQSxRQUNBO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUNBLG9CQUFjLEdBQUc7QUFDakIsV0FBSyxPQUFPO0FBQUEsSUFDZDtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLHNCQUFzQixnQkFBZ0I7OztBQ2hMckQsTUFBTSx1QkFBTixjQUFtQyxZQUFZO0FBQUEsSUFDcEQsYUFBZ0M7QUFBQSxJQUNoQyxhQUFxQjtBQUFBLElBQ3JCO0FBQUEsSUFFQSxjQUFjO0FBQ1osWUFBTTtBQUNOLFdBQUssZ0NBQWdDLE1BQU07QUFDekMsYUFBSyxPQUFPO0FBQUEsTUFDZDtBQUFBLElBQ0Y7QUFBQSxJQUVBLG9CQUEwQjtBQUN4QixlQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFFQSx1QkFBNkI7QUFDM0IsZUFBUztBQUFBLFFBQ1A7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQUEsSUFDRjtBQUFBLElBRVEsU0FBUztBQUNmLFFBQU8sS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzlCO0FBQUEsSUFFUSxXQUEyQjtBQUNqQyxZQUFNLE9BQU8sS0FBSyxZQUFZLEtBQUssa0JBQWtCLEtBQUssVUFBVTtBQUNwRSxVQUFJLENBQUMsTUFBTTtBQUNULGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFNWUUsR0FBSyxLQUFLLFVBQVUsQ0FBQztBQUFBLHdCQUNwQixDQUFDQyxPQUFhLEtBQUssV0FBV0EsRUFBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQVNqQ0QsR0FBSyxhQUFhLEtBQUssTUFBTSxHQUFHLENBQUMsQ0FBQztBQUFBLDBCQUMvQixLQUFLLE1BQU0sUUFBUSxDQUFDLE9BQU8sU0FBUztBQUFBLHdCQUN0QyxDQUFDQyxPQUFhLEtBQUssVUFBVUEsRUFBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsMkJBTzVCLEtBQUssTUFBTSxRQUFRLENBQUMsT0FBTyxTQUFTO0FBQUEsMEJBQ3JDLENBQUNBLE9BQWE7QUFDdEIsYUFBSyxlQUFlQSxFQUFDO0FBQUEsTUFDdkIsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQVVNRCxHQUFLLGFBQWEsS0FBSyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQUEsMEJBQy9CLEtBQUssTUFBTSxRQUFRLE9BQU8sU0FBUztBQUFBLHdCQUNyQyxDQUFDQyxPQUFhLEtBQUssVUFBVUEsRUFBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsMkJBTzVCLEtBQUssTUFBTSxRQUFRLE9BQU8sU0FBUztBQUFBLDBCQUNwQyxDQUFDQSxPQUFhO0FBQ3RCLGFBQUssZUFBZUEsRUFBQztBQUFBLE1BQ3ZCLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFVTUQsR0FBSyxLQUFLLFVBQVUsU0FBUyxDQUFDO0FBQUEsd0JBQzdCLENBQUNDLE9BQWE7QUFDdEIsYUFBSyxnQkFBZ0JBLEVBQUM7QUFBQSxNQUN4QixDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQVNRRCxHQUFLLEtBQUssT0FBTyxDQUFDO0FBQUEsd0JBQ2pCLENBQUNDLE9BQWE7QUFDdEIsYUFBSyxjQUFjQSxFQUFDO0FBQUEsTUFDdEIsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHlCQU9VLE1BQU0sS0FBSyxPQUFPLENBQUM7QUFBQTtBQUFBO0FBQUEsSUFHMUM7QUFBQSxJQUVBLE1BQWMsVUFBVSxJQUErQjtBQUNyRCxZQUFNLE1BQU0sTUFBTTtBQUFBLFFBQ2hCO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQ0EsVUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGVBQU8sTUFBTSxJQUFJLEtBQUs7QUFBQSxNQUN4QjtBQUNBLGFBQU87QUFBQSxJQUNUO0FBQUEsSUFFQSxNQUFjLGVBQWVBLElBQVU7QUFDckMsWUFBTSxNQUFNQSxHQUFFO0FBQ2QsWUFBTSxPQUFPLEtBQUssa0JBQWtCO0FBQ3BDLFVBQUksSUFBSSxTQUFTO0FBQ2YsY0FBTSxTQUFTLElBQUksS0FBSyxNQUFNLE1BQU0sSUFBSSxLQUFLLE1BQU0sTUFBTTtBQUN6RCxhQUFLLFFBQVEsSUFBSSxZQUFZLFFBQVEsS0FBSyxNQUFNLEdBQUc7QUFBQSxNQUNyRCxPQUFPO0FBQ0wsYUFBSyxRQUFRLElBQUksWUFBWSxDQUFDLE9BQU8sV0FBVyxLQUFLLE1BQU0sR0FBRztBQUFBLE1BQ2hFO0FBQ0EsV0FBSyx1QkFBdUIsSUFBSTtBQUFBLElBQ2xDO0FBQUEsSUFFQSxNQUFjLGVBQWVBLElBQVU7QUFDckMsWUFBTSxNQUFNQSxHQUFFO0FBQ2QsWUFBTSxPQUFPLEtBQUssa0JBQWtCO0FBQ3BDLFVBQUksSUFBSSxTQUFTO0FBQ2YsY0FBTSxTQUFTLE1BQU0sS0FBSyxNQUFNLE1BQU0sTUFBTSxLQUFLLE1BQU0sTUFBTTtBQUM3RCxhQUFLLFFBQVEsSUFBSSxZQUFZLEtBQUssTUFBTSxLQUFLLE1BQU07QUFBQSxNQUNyRCxPQUFPO0FBQ0wsYUFBSyxRQUFRLElBQUksWUFBWSxLQUFLLE1BQU0sS0FBSyxPQUFPLFNBQVM7QUFBQSxNQUMvRDtBQUNBLFdBQUssdUJBQXVCLElBQUk7QUFBQSxJQUNsQztBQUFBLElBRUEsTUFBYyxXQUFXQSxJQUFVO0FBQ2pDLFlBQU0sTUFBTUEsR0FBRTtBQUNkLFlBQU0sVUFBVSxLQUFLO0FBQ3JCLFlBQU0sVUFBVSxJQUFJO0FBQ3BCLFdBQUssYUFBYTtBQUNsQixZQUFNLE1BQU0sTUFBTSxLQUFLLFVBQVUsZUFBZSxTQUFTLE9BQU8sQ0FBQztBQUNqRSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsYUFBSyxhQUFhO0FBQUEsTUFDcEI7QUFDQSxXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFQSxNQUFjLGNBQWNBLElBQVU7QUFDcEMsWUFBTSxNQUFNQSxHQUFFO0FBQ2QsWUFBTSxPQUFPLEtBQUssa0JBQWtCO0FBQ3BDLFdBQUssVUFBVSxDQUFDLElBQUk7QUFDcEIsV0FBSyx1QkFBdUIsSUFBSTtBQUFBLElBQ2xDO0FBQUEsSUFFQSxNQUFjLGdCQUFnQkEsSUFBVTtBQUN0QyxZQUFNLE1BQU1BLEdBQUU7QUFDZCxZQUFNLE9BQU8sS0FBSyxrQkFBa0I7QUFDcEMsV0FBSyxZQUFZLElBQUksVUFBVSxDQUFDLElBQUksS0FBSztBQUN6QyxXQUFLLHVCQUF1QixJQUFJO0FBQUEsSUFDbEM7QUFBQSxJQUVBLE1BQWMsVUFBVUEsSUFBVTtBQUNoQyxZQUFNLE1BQU1BLEdBQUU7QUFDZCxZQUFNLFdBQVcsQ0FBQyxJQUFJO0FBQ3RCLFlBQU0saUJBQWlCLEtBQUssa0JBQWtCO0FBQzlDLHFCQUFlLFFBQVEsSUFBSSxZQUFZLFVBQVUsZUFBZ0IsTUFBTSxHQUFHO0FBQzFFLFdBQUssdUJBQXVCLGNBQWM7QUFBQSxJQUM1QztBQUFBLElBRUEsTUFBYyxVQUFVQSxJQUFVO0FBQ2hDLFlBQU0sTUFBTUEsR0FBRTtBQUNkLFlBQU0sV0FBVyxDQUFDLElBQUk7QUFDdEIsWUFBTSxpQkFBaUIsS0FBSyxrQkFBa0I7QUFDOUMscUJBQWUsUUFBUSxJQUFJLFlBQVksZUFBZ0IsTUFBTSxLQUFLLFFBQVE7QUFDMUUsV0FBSyx1QkFBdUIsY0FBYztBQUFBLElBQzVDO0FBQUEsSUFFQSxNQUFjLHVCQUF1QixRQUEwQjtBQUM3RCxhQUFPLFlBQVk7QUFDbkIsWUFBTSxNQUFNLE1BQU0sS0FBSyxVQUFVLGVBQWUsS0FBSyxZQUFZLE1BQU0sQ0FBQztBQUN4RSxVQUFJLENBQUMsSUFBSSxJQUFJO0FBQ1gsdUJBQWUsSUFBSSxLQUFLO0FBQUEsTUFDMUI7QUFDQSxXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFUSxvQkFBc0M7QUFDNUMsWUFBTSxPQUFPLEtBQUssWUFBWSxLQUFLLGtCQUFrQixLQUFLLFVBQVU7QUFDcEUsYUFBTyxpQkFBaUIsU0FBUyxNQUFNLE9BQU8sQ0FBQztBQUFBLElBQ2pEO0FBQUEsSUFFUSxTQUFTO0FBQ2YsV0FBSyxjQUFpQyxRQUFRLEVBQUcsTUFBTTtBQUFBLElBQ3pEO0FBQUEsSUFFTyxVQUFVQyxhQUF3QixZQUFvQjtBQUMzRCxXQUFLLGFBQWFBO0FBQ2xCLFdBQUssYUFBYTtBQUNsQixXQUFLLE9BQU87QUFDWixXQUFLLGNBQWlDLFFBQVEsRUFBRyxVQUFVO0FBQUEsSUFDN0Q7QUFBQSxFQUNGO0FBRUEsaUJBQWUsT0FBTywwQkFBMEIsb0JBQW9COzs7QUN6TzdELE1BQU0saUJBQTBDO0FBQUEsSUFDckQsTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFjQSxNQUFNLGVBQWUsQ0FDbkIscUJBQ0EsU0FDQSxZQUNtQjtBQUFBO0FBQUEsVUFFWCxlQUFlLE9BQU8sQ0FBQztBQUFBO0FBQUE7QUFBQSxJQUc3QixRQUFRLElBQUksQ0FBQyxjQUFzQjtBQUNuQyxVQUFNLE9BQU8sb0JBQW9CLE1BQU0sU0FBUztBQUNoRCxXQUFPO0FBQUEsWUFDQyxLQUFLLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQSw0Q0FJdUIsS0FBSyxJQUFJO0FBQUEsbUJBQ2xDLE1BQU0sb0JBQW9CLFVBQVUsV0FBVyxPQUFPLENBQUM7QUFBQTtBQUFBLFlBRTlELEtBQUssYUFBYSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJN0IsQ0FBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQU1hLE1BQU0sb0JBQW9CLE9BQU8sT0FBTyxDQUFDO0FBQUE7QUFBQTtBQUFBLFVBR2hELEtBQUssVUFBVSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNMUIsTUFBTSxXQUFXLENBQ2Ysd0JBQ21CO0FBQUE7QUFBQSxNQUVmO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLG9CQUFvQjtBQUFBLEVBQ3RCLENBQUM7QUFBQSxNQUNDO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLG9CQUFvQjtBQUFBLEVBQ3RCLENBQUM7QUFBQTtBQUFBO0FBSUUsTUFBTSxvQkFBTixjQUFnQyxZQUFZO0FBQUEsSUFDakQsUUFBZ0IsQ0FBQztBQUFBLElBQ2pCLGNBQXdCLENBQUM7QUFBQSxJQUN6QixjQUF3QixDQUFDO0FBQUEsSUFFekIsb0JBQTBCO0FBQ3hCLFFBQU8sU0FBUyxJQUFJLEdBQUcsSUFBSTtBQUFBLElBQzdCO0FBQUEsSUFFTyxtQkFDTCxPQUNBLGFBQ0EsYUFDQTtBQUNBLFdBQUssUUFBUTtBQUNiLFdBQUssY0FBYztBQUNuQixXQUFLLGNBQWM7QUFDbkIsUUFBTyxTQUFTLElBQUksR0FBRyxJQUFJO0FBQUEsSUFDN0I7QUFBQSxJQUVPLFVBQVUsV0FBbUIsU0FBa0I7QUFDcEQsV0FBSztBQUFBLFFBQ0gsSUFBSSxZQUFZLHFCQUFxQjtBQUFBLFVBQ25DLFNBQVM7QUFBQSxVQUNULFFBQVE7QUFBQSxZQUNOO0FBQUEsWUFDQTtBQUFBLFVBQ0Y7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUFBLElBRU8sT0FBTyxTQUFrQjtBQUM5QixXQUFLO0FBQUEsUUFDSCxJQUFJLFlBQVksa0JBQWtCO0FBQUEsVUFDaEMsU0FBUztBQUFBLFVBQ1QsUUFBUTtBQUFBLFlBQ04sV0FBVztBQUFBLFlBQ1g7QUFBQSxVQUNGO0FBQUEsUUFDRixDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsaUJBQWUsT0FBTyxzQkFBc0IsaUJBQWlCOzs7QUNwRnRELE1BQU0sNEJBQTRCLENBQ3ZDQyxJQUNBLGFBQ0FDLE9BQ0c7QUFDSCxVQUFNLGFBQWEsZ0JBQWdCRCxHQUFFLEtBQUs7QUFFMUMsVUFBTSxRQUFRLENBQUMsZ0JBQXdCO0FBQ3JDLFVBQUlDLEdBQUVELEdBQUUsU0FBUyxXQUFXLEdBQUcsV0FBVyxNQUFNLE9BQU87QUFDckQ7QUFBQSxNQUNGO0FBQ0EsWUFBTSxPQUFPLFdBQVcsSUFBSSxXQUFXO0FBQ3ZDLFVBQUksU0FBUyxRQUFXO0FBQ3RCO0FBQUEsTUFDRjtBQUNBLFdBQUssUUFBUSxDQUFDRSxPQUFvQjtBQUNoQyxjQUFNQSxHQUFFLENBQUM7QUFBQSxNQUNYLENBQUM7QUFBQSxJQUNIO0FBRUEsVUFBTSxXQUFXO0FBQUEsRUFDbkI7OztBQ2pETyxNQUFNLGdCQUFnQixDQUMzQixXQUNBLGtCQUNhO0FBQ2IsUUFBSSxhQUFhLGNBQWMsU0FBUyxTQUFTLEtBQUssYUFBYSxHQUFHO0FBQ3BFLGFBQU8sQ0FBQztBQUFBLElBQ1Y7QUFDQSxVQUFNLGNBQTJCLG9CQUFJLElBQUk7QUFDekM7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0EsQ0FBQ0MsSUFBWSxVQUFrQjtBQUM3QixvQkFBWSxJQUFJLEtBQUs7QUFDckIsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQ0EsZ0JBQVksT0FBTyxjQUFjLFNBQVMsU0FBUyxDQUFDO0FBQ3BELFdBQU8sQ0FBQyxHQUFHLFlBQVksT0FBTyxDQUFDO0FBQUEsRUFDakM7QUFFTyxNQUFNLGtCQUFrQixDQUM3QixXQUNBLGtCQUNhO0FBQ2IsUUFBSSxhQUFhLGNBQWMsU0FBUyxTQUFTLEtBQUssYUFBYSxHQUFHO0FBQ3BFLGFBQU8sQ0FBQztBQUFBLElBQ1Y7QUFDQSxVQUFNLHNCQUFzQixDQUFDLFNBQVM7QUFDdEMsVUFBTSxNQUFtQixvQkFBSSxJQUFJO0FBQ2pDLFVBQU0sU0FBUyxnQkFBZ0IsY0FBYyxLQUFLO0FBQ2xELFdBQU8sb0JBQW9CLFdBQVcsR0FBRztBQUN2QyxZQUFNLE9BQU8sb0JBQW9CLElBQUk7QUFDckMsVUFBSSxJQUFJLElBQUk7QUFDWixZQUFNLGVBQWUsT0FBTyxJQUFJLElBQUk7QUFDcEMsVUFBSSxjQUFjO0FBQ2hCLDRCQUFvQixLQUFLLEdBQUcsYUFBYSxJQUFJLENBQUNDLE9BQW9CQSxHQUFFLENBQUMsQ0FBQztBQUFBLE1BQ3hFO0FBQUEsSUFDRjtBQUNBLFFBQUksT0FBTyxDQUFDO0FBQ1osV0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUM7QUFBQSxFQUN6QjtBQUlPLE1BQU0sV0FBVyxDQUFDLGtCQUEyQztBQUNsRSxVQUFNLE1BQU0sQ0FBQztBQUNiLGFBQVMsUUFBUSxHQUFHLFFBQVEsY0FBYyxTQUFTLFNBQVMsR0FBRyxTQUFTO0FBQ3RFLFVBQUksS0FBSyxLQUFLO0FBQUEsSUFDaEI7QUFDQSxXQUFPO0FBQUEsRUFDVDtBQUVPLE1BQU0sYUFBYSxDQUFDQyxJQUFhQyxPQUEwQjtBQUNoRSxVQUFNLE9BQU8sSUFBSSxJQUFJQSxFQUFDO0FBQ3RCLFdBQU9ELEdBQUUsT0FBTyxDQUFDRSxPQUFjLEtBQUssSUFBSUEsRUFBQyxNQUFNLEtBQUs7QUFBQSxFQUN0RDtBQUVPLE1BQU0seUJBQXlCLENBQ3BDLFdBQ0Esa0JBQ2E7QUFFYixVQUFNLFFBQVEsZ0JBQWdCLGNBQWMsS0FBSztBQUNqRCxVQUFNLGFBQWEsTUFBTSxJQUFJLFNBQVMsS0FBSyxDQUFDO0FBQzVDLFVBQU0sa0JBQWtCLFdBQVcsSUFBSSxDQUFDSCxPQUFvQkEsR0FBRSxDQUFDO0FBRS9ELFdBQU8sV0FBVyxTQUFTLGFBQWEsR0FBRztBQUFBLE1BQ3pDLEdBQUcsZ0JBQWdCLFdBQVcsYUFBYTtBQUFBLE1BQzNDLEdBQUc7QUFBQSxJQUNMLENBQUM7QUFBQSxFQUNIO0FBRU8sTUFBTSwyQkFBMkIsQ0FDdEMsV0FDQSxrQkFDYTtBQUViLFVBQU0sU0FBUyxnQkFBZ0IsY0FBYyxLQUFLO0FBQ2xELFVBQU0sYUFBYSxPQUFPLElBQUksU0FBUyxLQUFLLENBQUM7QUFDN0MsVUFBTSxrQkFBa0IsV0FBVyxJQUFJLENBQUNBLE9BQW9CQSxHQUFFLENBQUM7QUFDL0QsVUFBTSxVQUFVLGNBQWMsV0FBVyxhQUFhO0FBQ3RELFVBQU0sTUFBTSxTQUFTLGFBQWE7QUFDbEMsVUFBTSxpQkFBaUIsQ0FBQyxHQUFHLFNBQVMsR0FBRyxlQUFlO0FBQ3RELFdBQU8sV0FBVyxLQUFLLGNBQWM7QUFBQSxFQUN2Qzs7O0FDdkZPLE1BQU0sc0JBQU4sY0FBa0MsWUFBWTtBQUFBLElBQzNDLGVBQW1DO0FBQUEsSUFDbkMsb0JBQThDO0FBQUEsSUFDOUMsU0FBbUM7QUFBQSxJQUNuQyxVQUErQyxNQUFNO0FBQUEsSUFBQztBQUFBLElBRTlELG9CQUEwQjtBQUN4QixXQUFLLGVBQWUsS0FBSyxjQUFjLElBQUk7QUFDM0MsV0FBSyxvQkFBb0IsS0FBSyxjQUFjLHFCQUFxQjtBQUNqRSxXQUFLLFNBQVMsS0FBSyxjQUFjLFFBQVE7QUFDekMsV0FBSyxPQUFPLGlCQUFpQixVQUFVLE1BQU0sS0FBSyxRQUFRLE1BQVMsQ0FBQztBQUNwRSxXQUFLLGtCQUFrQixpQkFBaUIsZUFBZSxDQUFDSSxPQUFNO0FBQzVELGFBQUssT0FBUSxNQUFNO0FBQ25CLGFBQUssUUFBUUEsR0FBRSxPQUFPLFNBQVM7QUFBQSxNQUNqQyxDQUFDO0FBQUEsSUFDSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNTyxpQkFDTCxPQUNBLFdBQ0EsU0FDNkI7QUFDN0IsV0FBSyxhQUFjLGNBQWMsZUFBZSxPQUFPO0FBRXZELFVBQUksa0JBQWtCLENBQUM7QUFDdkIsVUFBSSxZQUFZLFFBQVE7QUFDdEIsMEJBQWtCLHlCQUF5QixXQUFXLEtBQUs7QUFBQSxNQUM3RCxPQUFPO0FBQ0wsMEJBQWtCLHVCQUF1QixXQUFXLEtBQUs7QUFBQSxNQUMzRDtBQUNBLFdBQUssa0JBQW1CLFFBQVEsTUFBTTtBQUN0QyxXQUFLLGtCQUFtQixrQkFBa0I7QUFHMUMsV0FBSyxrQkFBbUIsd0JBQXdCLFdBQVc7QUFFM0QsWUFBTSxNQUFNLElBQUksUUFBNEIsQ0FBQyxTQUFTLFlBQVk7QUFDaEUsYUFBSyxVQUFVO0FBQ2YsYUFBSyxPQUFRLFVBQVU7QUFBQSxNQUN6QixDQUFDO0FBQ0QsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBRUEsaUJBQWUsT0FBTyx5QkFBeUIsbUJBQW1COzs7QUM5Q2xFLE1BQU0sbUJBQW1CO0FBRWxCLE1BQU0scUJBQU4sY0FBaUMsWUFBWTtBQUFBLElBQ2xELGFBQWdDO0FBQUEsSUFDaEM7QUFBQSxJQUVBLGNBQWM7QUFDWixZQUFNO0FBQ04sV0FBSyxnQ0FBZ0MsTUFBTTtBQUN6QyxZQUFJLEtBQUssZUFBZSxNQUFNO0FBQzVCLGVBQUssT0FBTztBQUFBLFFBQ2Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBRUEsb0JBQTBCO0FBQ3hCLGVBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxJQUVBLHVCQUE2QjtBQUMzQixlQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0EsS0FBSztBQUFBLE1BQ1A7QUFBQSxJQUNGO0FBQUEsSUFFQSxVQUFVQyxhQUF3QjtBQUNoQyxXQUFLLGFBQWFBO0FBQ2xCLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVRLFNBQVM7QUFDZixRQUFPLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUM5QjtBQUFBLElBRVEsb0JBQW9CLFFBQTBCO0FBQ3BELFVBQUksTUFBTSxPQUFPLEtBQUssSUFBSTtBQUMxQixVQUFJLElBQUksU0FBUyxrQkFBa0I7QUFDakMsY0FBTSxJQUFJLE1BQU0sR0FBRyxnQkFBZ0IsSUFBSTtBQUFBLE1BQ3pDO0FBQ0EsYUFBTztBQUFBLElBQ1Q7QUFBQSxJQUVRLHFCQUNOLE1BQ0EsVUFDZ0I7QUFDaEIsVUFBSSxVQUFVO0FBQ1osZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUE7QUFBQTtBQUFBLGVBR0ksTUFBTSxLQUFLLGVBQWUsSUFBSSxDQUFDO0FBQUE7QUFBQSxRQUV0QyxLQUFLLGFBQWEsQ0FBQztBQUFBO0FBQUEsSUFFekI7QUFBQSxJQUVRLHNCQUNOLE1BQ0EsVUFDZ0I7QUFDaEIsVUFBSSxVQUFVO0FBQ1osZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUE7QUFBQTtBQUFBLGVBR0ksTUFBTSxLQUFLLGFBQWEsSUFBSSxDQUFDO0FBQUE7QUFBQSxRQUVwQyxLQUFLLFdBQVcsQ0FBQztBQUFBO0FBQUEsSUFFdkI7QUFBQSxJQUVBLE1BQWMsZUFBZSxNQUFjO0FBQ3pDLFlBQU0sTUFBTSxNQUFNO0FBQUEsUUFDaEIsaUJBQWlCLElBQUk7QUFBQSxRQUNyQjtBQUFBLFFBQ0E7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQ0Esb0JBQWMsR0FBRztBQUNqQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFUSxhQUFhLE1BQWM7QUFDakMsV0FBSyxXQUFZO0FBQUEsUUFDZjtBQUFBLE1BQ0YsRUFBRztBQUFBLFFBQ0QsS0FBSztBQUFBLFFBQ0w7QUFBQSxRQUNBLEtBQUssV0FBWSxLQUFLLG9CQUFvQixJQUFJO0FBQUEsTUFDaEQ7QUFBQSxJQUNGO0FBQUEsSUFFQSxNQUFjLGNBQWM7QUFDMUIsVUFBSSxPQUFPLE1BQU0sU0FDZCxjQUE0QixlQUFlLEVBQzNDLE9BQU8sYUFBYTtBQUN2QixVQUFJLFNBQVMsTUFBTTtBQUNqQjtBQUFBLE1BQ0Y7QUFDQSxhQUFPLEtBQUssS0FBSztBQUNqQixVQUFJLFNBQVMsSUFBSTtBQUNmO0FBQUEsVUFDRSxJQUFJO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQ0E7QUFBQSxNQUNGO0FBQ0EsWUFBTSxNQUFNLE1BQU07QUFBQSxRQUNoQixjQUFjLElBQUk7QUFBQSxRQUNsQjtBQUFBLFFBQ0E7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQ0Esb0JBQWMsR0FBRztBQUNqQixXQUFLLE9BQU87QUFBQSxJQUNkO0FBQUEsSUFFUSxXQUEyQjtBQUNqQyxZQUFNLEtBQUssS0FBSyxXQUFZLEtBQUs7QUFDakMsWUFBTSxnQkFBZ0IsT0FBTyxLQUFLLEVBQUUsRUFBRTtBQUFBLFFBQ3BDLENBQUMsTUFBYyxTQUF5QjtBQUN0QyxnQkFBTUMsS0FBSSxHQUFHLElBQUk7QUFDakIsZ0JBQU1DLEtBQUksR0FBRyxJQUFJO0FBQ2pCLGNBQUlELEdBQUUsYUFBYUMsR0FBRSxVQUFVO0FBQzdCLG1CQUFPLEtBQUssY0FBYyxJQUFJO0FBQUEsVUFDaEM7QUFDQSxjQUFJRCxHQUFFLFVBQVU7QUFDZCxtQkFBTztBQUFBLFVBQ1Q7QUFDQSxpQkFBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBRUEsYUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQVNELGNBQWMsSUFBSSxDQUFDLFNBQVM7QUFDNUIsY0FBTSxPQUFPLEdBQUcsSUFBSTtBQUNwQixlQUFPO0FBQUEsa0JBQ0MsSUFBSTtBQUFBLGtCQUNKLEtBQUssb0JBQW9CLEtBQUssTUFBTSxDQUFDO0FBQUEsa0JBQ3JDLEtBQUsscUJBQXFCLE1BQU0sS0FBSyxRQUFRLENBQUM7QUFBQSxrQkFDOUMsS0FBSyxzQkFBc0IsTUFBTSxLQUFLLFFBQVEsQ0FBQztBQUFBO0FBQUEsTUFFekQsQ0FBQyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQVNhLE1BQU07QUFDYixhQUFLLFlBQVk7QUFBQSxNQUNuQixDQUFDO0FBQUE7QUFBQSxnQkFFQyxLQUFLLFVBQVUsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU05QjtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLHdCQUF3QixrQkFBa0I7OztBQ2hMekQsTUFBTSxhQUFOLE1BQWlCO0FBQUEsSUFDZDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBQUE7QUFBQSxJQUlSLFlBQVlFLElBQVdDLElBQVdDLElBQVc7QUFDM0MsV0FBSyxJQUFJRjtBQUNULFdBQUssSUFBSUM7QUFDVCxXQUFLLElBQUlDO0FBSVQsV0FBSyxPQUFPQSxLQUFJRixPQUFNQyxLQUFJRDtBQUFBLElBQzVCO0FBQUE7QUFBQTtBQUFBLElBSUEsT0FBT0csSUFBbUI7QUFDeEIsVUFBSUEsS0FBSSxHQUFHO0FBQ1QsZUFBTztBQUFBLE1BQ1QsV0FBV0EsS0FBSSxHQUFLO0FBQ2xCLGVBQU87QUFBQSxNQUNULFdBQVdBLEtBQUksS0FBSyxLQUFLO0FBQ3ZCLGVBQU8sS0FBSyxJQUFJLEtBQUssS0FBS0EsTUFBSyxLQUFLLElBQUksS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLEVBQUU7QUFBQSxNQUNyRSxPQUFPO0FBQ0wsZUFDRSxLQUFLLElBQUksS0FBSyxNQUFNLElBQUlBLE9BQU0sS0FBSyxJQUFJLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxFQUFFO0FBQUEsTUFFdEU7QUFBQSxJQUNGO0FBQUEsRUFDRjs7O0FDM0NPLE1BQU0sbUJBQWdEO0FBQUEsSUFDM0QsS0FBSztBQUFBLElBQ0wsVUFBVTtBQUFBLElBQ1YsTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLEVBQ1g7QUFFTyxNQUFNLFdBQU4sTUFBZTtBQUFBLElBQ1o7QUFBQSxJQUNSLFlBQVksVUFBa0IsYUFBMEI7QUFDdEQsWUFBTSxNQUFNLGlCQUFpQixXQUFXO0FBQ3hDLFdBQUssYUFBYSxJQUFJLFdBQVcsV0FBVyxLQUFLLFdBQVcsS0FBSyxRQUFRO0FBQUEsSUFDM0U7QUFBQSxJQUVBLE9BQU9DLElBQW1CO0FBQ3hCLGFBQU8sS0FBSyxXQUFXLE9BQU9BLEVBQUM7QUFBQSxJQUNqQztBQUFBLEVBQ0Y7OztBQ21CTyxNQUFNLDBCQUdUO0FBQUE7QUFBQSxJQUVGLFVBQVUsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLFlBQVksQ0FBQyxHQUFHLE1BQU0sSUFBSSxVQUFVLENBQUMsQ0FBQztBQUFBLEVBQzlFO0FBSU8sTUFBTSw0QkFHVDtBQUFBLElBQ0YsYUFBYSxJQUFJLG1CQUFtQixPQUFPLEtBQUssZ0JBQWdCLEdBQUcsSUFBSTtBQUFBLEVBQ3pFO0FBV08sTUFBTSxPQUFOLE1BQU0sTUFBSztBQUFBLElBQ2hCO0FBQUE7QUFBQSxJQUdBO0FBQUEsSUFFQSxVQUFzQixFQUFFLE9BQU8sYUFBYSxPQUFPLEVBQUU7QUFBQSxJQUVyRCxpQkFBa0MsQ0FBQztBQUFBLElBRW5DO0FBQUEsSUFFQTtBQUFBLElBRUEsSUFBVyxTQUFxQjtBQUM5QixhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUEsSUFFQSxJQUFXLGdCQUEwQjtBQUNuQyxhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUEsSUFFQSxJQUFXLE9BQU8sT0FBbUI7QUFDbkMsV0FBSyxVQUFVO0FBQ2YsV0FBSyxpQkFBaUIsSUFBSTtBQUFBLFFBQ3hCLElBQUksS0FBSyxhQUFhLEtBQUssTUFBTSxDQUFDO0FBQUEsUUFDbEMsS0FBSywwQkFBMEIsVUFBVTtBQUFBLE1BQzNDO0FBQUEsSUFDRjtBQUFBLElBRUEsa0JBQWtCLE9BQWUsT0FBcUM7QUFDcEUsWUFBTSxPQUFPLEtBQUssTUFBTSxTQUFTLEtBQUs7QUFDdEMsVUFBSSxTQUFTLFFBQVc7QUFDdEIsZUFBTyxNQUFNLElBQUksTUFBTSxHQUFHLEtBQUssNkJBQTZCLENBQUM7QUFBQSxNQUMvRDtBQUNBLFdBQUssZUFBZSxLQUFLLEVBQUUsSUFBSTtBQUMvQixhQUFPLEdBQUcsSUFBSTtBQUFBLElBQ2hCO0FBQUEsSUFFQSxrQkFBa0IsT0FBdUM7QUFDdkQsWUFBTSxPQUFPLEtBQUssTUFBTSxTQUFTLEtBQUs7QUFDdEMsVUFBSSxTQUFTLFFBQVc7QUFDdEIsZUFBTyxNQUFNLElBQUksTUFBTSxHQUFHLEtBQUssNkJBQTZCLENBQUM7QUFBQSxNQUMvRDtBQUNBLGFBQU8sR0FBRyxLQUFLLGVBQWUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLFlBQVksQ0FBQztBQUFBLElBQ2xFO0FBQUEsSUFFQSxjQUFjO0FBQ1osV0FBSyxRQUFRLElBQUksTUFBTTtBQUN2QixXQUFLLHNCQUFzQixPQUFPLE9BQU8sQ0FBQyxHQUFHLHlCQUF5QjtBQUN0RSxXQUFLLG9CQUFvQixPQUFPLE9BQU8sQ0FBQyxHQUFHLHVCQUF1QjtBQUNsRSxXQUFLLGlCQUFpQixJQUFJO0FBQUEsUUFDeEIsSUFBSSxLQUFLLGFBQWEsS0FBSyxNQUFNLENBQUM7QUFBQSxRQUNsQyxLQUFLLDBCQUEwQixVQUFVO0FBQUEsTUFDM0M7QUFFQSxXQUFLLG1DQUFtQztBQUFBLElBQzFDO0FBQUEsSUFFQSxpQkFBaUIsVUFBcUI7QUFDcEMsV0FBSyxpQkFBaUIsYUFBYSxRQUFRO0FBQUEsUUFDekMsSUFBSSxLQUFLLGFBQWEsS0FBSyxNQUFNLENBQUM7QUFBQSxRQUNsQyxLQUFLLDBCQUEwQixVQUFVO0FBQUEsTUFDM0M7QUFBQSxJQUNGO0FBQUEsSUFFQSwwQkFBMEIsTUFBMEM7QUFDbEUsYUFBTyxLQUFLLGtCQUFrQixJQUFJO0FBQUEsSUFDcEM7QUFBQSxJQUVBLDRCQUE0QixNQUE4QztBQUN4RSxhQUFPLEtBQUssb0JBQW9CLElBQUk7QUFBQSxJQUN0QztBQUFBLElBRUEscUNBQXFDO0FBQ25DLGFBQU8sS0FBSyxLQUFLLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxlQUF1QjtBQUNsRSxjQUFNLEtBQUssS0FBSyxrQkFBa0IsVUFBVTtBQUM1QyxhQUFLLE1BQU0sU0FBUyxRQUFRLENBQUMsU0FBZTtBQUMxQyxlQUFLLFVBQVUsWUFBWSxHQUFHLE9BQU87QUFBQSxRQUN2QyxDQUFDO0FBQUEsTUFDSCxDQUFDO0FBQ0QsYUFBTyxRQUFRLEtBQUssbUJBQW1CLEVBQUU7QUFBQSxRQUN2QyxDQUFDLENBQUMsS0FBSyxrQkFBa0IsTUFBTTtBQUM3QixlQUFLLE1BQU0sU0FBUyxRQUFRLENBQUMsU0FBZTtBQUMxQyxpQkFBSyxZQUFZLEtBQUssbUJBQW1CLE9BQU8sQ0FBQyxDQUFDO0FBQUEsVUFDcEQsQ0FBQztBQUFBLFFBQ0g7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBRUEsb0JBQW9CLEtBQTJDO0FBQzdELGFBQU8sS0FBSyxrQkFBa0IsR0FBRztBQUFBLElBQ25DO0FBQUEsSUFFQSxvQkFBb0IsS0FBYSxrQkFBb0M7QUFDbkUsV0FBSyxrQkFBa0IsR0FBRyxJQUFJO0FBQUEsSUFDaEM7QUFBQSxJQUVBLHVCQUF1QixLQUFhO0FBQ2xDLGFBQU8sS0FBSyxrQkFBa0IsR0FBRztBQUFBLElBQ25DO0FBQUEsSUFFQSxzQkFBc0IsS0FBNkM7QUFDakUsYUFBTyxLQUFLLG9CQUFvQixHQUFHO0FBQUEsSUFDckM7QUFBQSxJQUVBLHNCQUFzQixLQUFhLE9BQTJCO0FBQzVELFdBQUssb0JBQW9CLEdBQUcsSUFBSTtBQUFBLElBQ2xDO0FBQUEsSUFFQSx5QkFBeUIsS0FBYTtBQUNwQyxhQUFPLEtBQUssb0JBQW9CLEdBQUc7QUFBQSxJQUNyQztBQUFBO0FBQUEsSUFHQSxVQUFnQjtBQUNkLFlBQU0sTUFBTSxJQUFJLEtBQUs7QUFDckIsYUFBTyxLQUFLLEtBQUssaUJBQWlCLEVBQUUsUUFBUSxDQUFDLGVBQXVCO0FBQ2xFLGNBQU0sS0FBSyxLQUFLLG9CQUFvQixVQUFVO0FBQzlDLFlBQUksVUFBVSxZQUFZLEdBQUcsT0FBTztBQUFBLE1BQ3RDLENBQUM7QUFDRCxhQUFPLFFBQVEsS0FBSyxtQkFBbUIsRUFBRTtBQUFBLFFBQ3ZDLENBQUMsQ0FBQyxLQUFLLGtCQUFrQixNQUFNO0FBQzdCLGNBQUksWUFBWSxLQUFLLG1CQUFtQixPQUFPLENBQUMsQ0FBQztBQUFBLFFBQ25EO0FBQUEsTUFDRjtBQUNBLGFBQU87QUFBQSxJQUNUO0FBQUEsSUFFQSxTQUF5QjtBQUN2QixhQUFPO0FBQUEsUUFDTCxRQUFRLE9BQWEsS0FBSyxNQUFNO0FBQUEsUUFDaEMsZ0JBQWdCLHNCQUFzQixLQUFLLGNBQWM7QUFBQSxRQUN6RCxnQkFBZ0IsS0FBSyxlQUFlLE9BQU87QUFBQSxRQUMzQyxPQUFPLEtBQUssTUFBTSxPQUFPO0FBQUEsUUFDekIscUJBQXFCLE9BQU87QUFBQSxVQUMxQixPQUFPLFFBQVEsS0FBSyxtQkFBbUIsRUFFcEMsT0FBTyxDQUFDLENBQUNDLElBQUcsa0JBQWtCLE1BQU0sQ0FBQyxtQkFBbUIsUUFBUSxFQUNoRSxJQUFJLENBQUMsQ0FBQyxLQUFLLGtCQUFrQixNQUFNO0FBQUEsWUFDbEM7QUFBQSxZQUNBLG1CQUFtQixPQUFPO0FBQUEsVUFDNUIsQ0FBQztBQUFBLFFBQ0w7QUFBQSxRQUNBLG1CQUFtQixPQUFPO0FBQUEsVUFDeEIsT0FBTyxRQUFRLEtBQUssaUJBQWlCLEVBRWxDLE9BQU8sQ0FBQyxDQUFDQSxJQUFHLGdCQUFnQixNQUFNLENBQUMsaUJBQWlCLFFBQVEsRUFDNUQsSUFBSSxDQUFDLENBQUMsS0FBSyxnQkFBZ0IsTUFBTSxDQUFDLEtBQUssaUJBQWlCLE9BQU8sQ0FBQyxDQUFDO0FBQUEsUUFDdEU7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBRUEsT0FBTyxTQUFTLGdCQUFzQztBQUNwRCxZQUFNLE1BQU0sSUFBSSxNQUFLO0FBQ3JCLFVBQUksUUFBUSxNQUFNLFNBQVMsZUFBZSxLQUFLO0FBQy9DLFVBQUksU0FBUyxTQUFlLGVBQWUsTUFBTTtBQUNqRCxVQUFJLGlCQUFpQix3QkFBd0IsZUFBZSxjQUFjO0FBQzFFLFlBQU0sZ0NBQWdDLE9BQU87QUFBQSxRQUMzQyxPQUFPLFFBQVEsZUFBZSxpQkFBaUIsRUFBRTtBQUFBLFVBQy9DLENBQUMsQ0FBQyxLQUFLLDBCQUEwQixNQUFNO0FBQUEsWUFDckM7QUFBQSxZQUNBLGlCQUFpQixTQUFTLDBCQUEwQjtBQUFBLFVBQ3REO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxVQUFJLG9CQUFvQixPQUFPO0FBQUEsUUFDN0IsQ0FBQztBQUFBLFFBQ0Q7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUVBLFlBQU0sa0NBQWtDLE9BQU87QUFBQSxRQUM3QyxPQUFPLFFBQVEsZUFBZSxtQkFBbUIsRUFBRTtBQUFBLFVBQ2pELENBQUMsQ0FBQyxLQUFLLDRCQUE0QixNQUFNO0FBQUEsWUFDdkM7QUFBQSxZQUNBLG1CQUFtQixTQUFTLDRCQUE0QjtBQUFBLFVBQzFEO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxVQUFJLHNCQUFzQixPQUFPO0FBQUEsUUFDL0IsQ0FBQztBQUFBLFFBQ0Q7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUVBLFVBQUksaUJBQWlCLFNBQVM7QUFBQSxRQUM1QixlQUFlO0FBQUEsUUFDZixJQUFJLEtBQUssYUFBYSxJQUFJLE1BQU0sQ0FBQztBQUFBLFFBQ2pDLElBQUksMEJBQTBCLFVBQVU7QUFBQSxNQUMxQztBQUVBLGFBQU87QUFBQSxJQUNUO0FBQUEsSUFFQSxPQUFPLGVBQWUsQ0FBQyxTQUErQjtBQUNwRCxVQUFJO0FBQ0YsY0FBTSxpQkFBaUMsS0FBSyxNQUFNLElBQUk7QUFDdEQsY0FBTSxPQUFPLE1BQUssU0FBUyxjQUFjO0FBRXpDLGNBQU0sTUFBTSxtQkFBbUIsRUFBRSxRQUFRLElBQUk7QUFDN0MsWUFBSSxDQUFDLElBQUksSUFBSTtBQUNYLGlCQUFPO0FBQUEsUUFDVDtBQUVBLGNBQU0sU0FBUyxjQUFjLEtBQUssS0FBSztBQUN2QyxZQUFJLENBQUMsT0FBTyxJQUFJO0FBQ2QsaUJBQU87QUFBQSxRQUNUO0FBQ0EsZUFBTyxHQUFHLElBQUk7QUFBQSxNQUNoQixTQUFTQyxJQUFHO0FBQ1YsZUFBTyxNQUFNQSxFQUFxQjtBQUFBLE1BQ3BDO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7OztBQ3hQTyxNQUFNLG9CQUFOLGNBQWdDLFlBQVk7QUFBQSxJQUNqRCxhQUFnQztBQUFBLElBQ2hDLE9BQWEsSUFBSSxLQUFLO0FBQUEsSUFDdEIsWUFBb0I7QUFBQSxJQUNwQjtBQUFBLElBRUEsY0FBYztBQUNaLFlBQU07QUFDTixXQUFLLGdDQUFnQyxNQUFNO0FBQ3pDLGFBQUssT0FBTztBQUFBLE1BQ2Q7QUFBQSxJQUNGO0FBQUEsSUFFQSxvQkFBMEI7QUFDeEIsV0FBSyxPQUFPO0FBQ1osZUFBUztBQUFBLFFBQ1A7QUFBQSxRQUNBLEtBQUs7QUFBQSxNQUNQO0FBQUEsSUFDRjtBQUFBLElBRUEsdUJBQTZCO0FBQzNCLGVBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxJQUVBLHdCQUF3QixhQUF5QixXQUFtQjtBQUNsRSxXQUFLLGFBQWE7QUFDbEIsV0FBSyxPQUFPLFlBQVk7QUFDeEIsV0FBSyxZQUFZO0FBQ2pCLFdBQUssT0FBTztBQUFBLElBVWQ7QUFBQSxJQUVBLFNBQVM7QUFDUCxRQUFPLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUM5QjtBQUFBLElBRUEsV0FBMkI7QUFDekIsWUFBTSxZQUFZLEtBQUs7QUFDdkIsVUFBSSxjQUFjLElBQUk7QUFDcEIsZUFBTztBQUFBO0FBQUE7QUFBQSxtQkFHTSxZQUNQLE1BQU0sY0FBYyxpQkFBaUIsS0FBSyxVQUFXLENBQUM7QUFBQTtBQUFBO0FBQUEsWUFHdEQsS0FBSyxVQUFVLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUl4QjtBQUNBLFVBQUksS0FBSyxlQUFlLE1BQU07QUFDNUIsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxTQUFTO0FBQy9DLGFBQU87QUFBQTtBQUFBO0FBQUEsaUJBR00sWUFDUCxNQUFNLGNBQWMsaUJBQWlCLEtBQUssVUFBVyxDQUFDO0FBQUE7QUFBQTtBQUFBLFVBR3RELEtBQUssVUFBVSxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBSVQsWUFDUCxNQUFNLGNBQWMsaUJBQWlCLEtBQUssVUFBVyxDQUFDO0FBQUE7QUFBQTtBQUFBLFVBR3RELEtBQUssS0FBSyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBSUosWUFDUCxNQUFNLGNBQWMsbUJBQW1CLEtBQUssVUFBVyxDQUFDO0FBQUE7QUFBQTtBQUFBLFVBR3hELEtBQUssT0FBTyxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBSU4sWUFDUCxjQUFjLG9CQUFvQixLQUFLLFVBQVcsQ0FBQztBQUFBO0FBQUE7QUFBQSxVQUduRCxLQUFLLGFBQWEsQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdCQVVMQyxHQUFLLEtBQUssSUFBSSxDQUFDO0FBQUEsd0JBQ2YsQ0FBQ0MsT0FDVCxLQUFLO0FBQUEsUUFDSCxJQUFJLFlBQW1DLG9CQUFvQjtBQUFBLFVBQ3pELFNBQVM7QUFBQSxVQUNULFFBQVE7QUFBQSxZQUNOO0FBQUEsWUFDQSxNQUFPQSxHQUFFLE9BQTRCO0FBQUEsVUFDdkM7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNILENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQUlQLE9BQU8sUUFBUSxLQUFLLEtBQUssbUJBQW1CLEVBQUU7QUFBQSxRQUM5QyxDQUFDLENBQUMsYUFBYSxJQUFJLE1BQ2pCO0FBQUE7QUFBQSw4QkFFa0IsV0FBVyxLQUFLLFdBQVc7QUFBQTtBQUFBO0FBQUE7QUFBQSx3QkFJakMsV0FBVztBQUFBLDRCQUNQLE9BQU9BLE9BQ2YsS0FBSztBQUFBLFVBQ0gsSUFBSSxZQUFZLDhCQUE4QjtBQUFBLFlBQzVDLFNBQVM7QUFBQSxZQUNULFFBQVE7QUFBQSxjQUNOO0FBQUEsY0FDQSxPQUFRQSxHQUFFLE9BQTRCO0FBQUEsY0FDdEMsTUFBTTtBQUFBLFlBQ1I7QUFBQSxVQUNGLENBQUM7QUFBQSxRQUNILENBQUM7QUFBQTtBQUFBLG9CQUVELEtBQUssT0FBTztBQUFBLFVBQ1osQ0FBQyxrQkFDQztBQUFBLCtCQUNTLGFBQWE7QUFBQSxvQ0FDUixLQUFLLFVBQVUsV0FBVyxNQUN0QyxhQUFhO0FBQUE7QUFBQSwwQkFFWCxhQUFhO0FBQUE7QUFBQSxRQUVyQixDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJWCxDQUFDO0FBQUEsVUFDQyxPQUFPLEtBQUssS0FBSyxLQUFLLGlCQUFpQixFQUFFO0FBQUEsUUFDekMsQ0FBQyxRQUNDO0FBQUEsZ0NBQ29CLEdBQUcsS0FBSyxHQUFHO0FBQUE7QUFBQTtBQUFBLHdCQUduQixHQUFHO0FBQUEsMkJBQ0FELEdBQUssS0FBSyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQUE7QUFBQSw0QkFFdEIsT0FBT0MsT0FDZixLQUFLO0FBQUEsVUFDSCxJQUFJLFlBQVksNEJBQTRCO0FBQUEsWUFDMUMsU0FBUztBQUFBLFlBQ1QsUUFBUTtBQUFBLGNBQ047QUFBQSxjQUNBLE9BQU8sQ0FBRUEsR0FBRSxPQUE0QjtBQUFBLGNBQ3ZDLE1BQU07QUFBQSxZQUNSO0FBQUEsVUFDRixDQUFDO0FBQUEsUUFDSCxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJYixDQUFDO0FBQUE7QUFBQTtBQUFBLElBR1A7QUFBQSxFQUNGO0FBRUEsaUJBQWUsT0FBTyx1QkFBdUIsaUJBQWlCOzs7QUNyTjlELE1BQU0sYUFBYTtBQUVuQixNQUFNLFlBQVksSUFBSSxVQUFVLENBQUM7QUFFakMsTUFBTSxTQUFTLENBQUNDLE9BQXNCO0FBQ3BDLFdBQU8sS0FBSyxNQUFNLEtBQUssT0FBTyxJQUFJQSxFQUFDO0FBQUEsRUFDckM7QUE4Qk8sTUFBTSxhQUFhLENBQ3hCLE9BQ0Esb0JBQ0Esc0JBQ0Esa0JBQ3NCO0FBQ3RCLFVBQU0sbUJBQW1CLG9CQUFJLElBQStCO0FBQzVELHFCQUFpQixJQUFJLEdBQUcsb0JBQW9CLElBQUk7QUFBQSxNQUM5QyxPQUFPO0FBQUEsTUFDUCxjQUFjLHFCQUFxQixNQUFNO0FBQUEsTUFDekMsV0FBVyxNQUFNLFNBQVMsSUFBSSxDQUFDLFNBQWUsS0FBSyxRQUFRO0FBQUEsSUFDN0QsQ0FBQztBQUVELGFBQVNDLEtBQUksR0FBR0EsS0FBSSxvQkFBb0JBLE1BQUs7QUFFM0MsWUFBTSxZQUFZLE1BQU0sU0FBUyxJQUFJLENBQUNDLElBQVMsVUFBa0I7QUFDL0QsWUFBSSxjQUFjLElBQUksS0FBSyxHQUFHO0FBQzVCLGlCQUFPQSxHQUFFO0FBQUEsUUFDWDtBQUVBLGNBQU0sY0FBYyxJQUFJO0FBQUEsVUFDdEJBLEdBQUU7QUFBQTtBQUFBLFVBQ0ZBLEdBQUUsWUFBWSxhQUFhO0FBQUEsUUFDN0IsRUFBRSxPQUFPLE9BQU8sVUFBVSxJQUFJLFVBQVU7QUFDeEMsZUFBTyxVQUFVLE1BQU0sV0FBVztBQUFBLE1BQ3BDLENBQUM7QUFHRCxZQUFNLFlBQVk7QUFBQSxRQUNoQjtBQUFBLFFBQ0EsQ0FBQyxjQUFzQixVQUFVLFNBQVM7QUFBQSxRQUMxQyxVQUFVLFFBQVE7QUFBQSxNQUNwQjtBQUNBLFVBQUksQ0FBQyxVQUFVLElBQUk7QUFDakIsY0FBTSxVQUFVO0FBQUEsTUFDbEI7QUFFQSxZQUFNLGVBQWUsYUFBYSxVQUFVLE9BQU8sVUFBVSxRQUFRLENBQUM7QUFDdEUsWUFBTSx1QkFBdUIsR0FBRyxZQUFZO0FBQzVDLFVBQUksWUFBWSxpQkFBaUIsSUFBSSxvQkFBb0I7QUFDekQsVUFBSSxjQUFjLFFBQVc7QUFDM0Isb0JBQVk7QUFBQSxVQUNWLE9BQU87QUFBQSxVQUNQO0FBQUEsVUFDQTtBQUFBLFFBQ0Y7QUFDQSx5QkFBaUIsSUFBSSxzQkFBc0IsU0FBUztBQUFBLE1BQ3REO0FBQ0EsZ0JBQVU7QUFBQSxJQUNaO0FBRUEsV0FBTztBQUFBLE1BQ0wsT0FBTztBQUFBLE1BQ1AsT0FBTyx3QkFBd0Isa0JBQWtCLEtBQUs7QUFBQSxJQUN4RDtBQUFBLEVBQ0Y7QUFFTyxNQUFNLDBCQUEwQixDQUNyQyxrQkFDQSxVQUM0QjtBQUM1QixVQUFNLGVBQW1ELG9CQUFJLElBQUk7QUFFakUscUJBQWlCLFFBQVEsQ0FBQyxVQUE2QjtBQUNyRCxZQUFNLGFBQWEsUUFBUSxDQUFDLGNBQXNCO0FBQ2hELFlBQUksWUFBWSxhQUFhLElBQUksU0FBUztBQUMxQyxZQUFJLGNBQWMsUUFBVztBQUMzQixzQkFBWTtBQUFBLFlBQ1Y7QUFBQSxZQUNBLFVBQVUsTUFBTSxTQUFTLFNBQVMsRUFBRTtBQUFBLFlBQ3BDLGtCQUFrQjtBQUFBLFVBQ3BCO0FBQ0EsdUJBQWEsSUFBSSxXQUFXLFNBQVM7QUFBQSxRQUN2QztBQUNBLGtCQUFVLG9CQUFvQixNQUFNO0FBQUEsTUFDdEMsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUVELFdBQU8sQ0FBQyxHQUFHLGFBQWEsT0FBTyxDQUFDLEVBQUU7QUFBQSxNQUNoQyxDQUFDQyxJQUEwQkMsT0FBcUM7QUFDOUQsZUFBT0EsR0FBRSxXQUFXRCxHQUFFO0FBQUEsTUFDeEI7QUFBQSxJQUNGO0FBQUEsRUFDRjs7O0FDeEdPLE1BQU0sa0JBQU4sY0FBOEIsWUFBWTtBQUFBLElBQy9DLFVBQTZCO0FBQUEsTUFDM0IsT0FBTyxvQkFBSSxJQUFJO0FBQUEsTUFDZixPQUFPLENBQUM7QUFBQSxJQUNWO0FBQUEsSUFDQSxRQUFzQjtBQUFBLElBQ3RCLHFCQUE2QjtBQUFBLElBQzdCLHVCQUFpQyxDQUFDO0FBQUEsSUFFbEMsb0JBQTBCO0FBQ3hCLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVBLFNBQ0UsT0FDQSxvQkFDQSxzQkFDQSxlQUNVO0FBQ1YsV0FBSyxVQUFVO0FBQUEsUUFDYjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFDQSxXQUFLLFFBQVE7QUFDYixXQUFLLHFCQUFxQjtBQUMxQixXQUFLLHVCQUF1QjtBQUU1QixXQUFLLE9BQU87QUFDWixhQUFPLEtBQUssUUFBUSxNQUFNO0FBQUEsUUFDeEIsQ0FBQyxjQUFxQyxVQUFVO0FBQUEsTUFDbEQ7QUFBQSxJQUNGO0FBQUEsSUFFQSxRQUFRO0FBQ04sV0FBSyxVQUFVO0FBQUEsUUFDYixPQUFPLG9CQUFJLElBQUk7QUFBQSxRQUNmLE9BQU8sQ0FBQztBQUFBLE1BQ1Y7QUFDQSxXQUFLO0FBQUEsUUFDSCxJQUFJLFlBQXFDLHFCQUFxQjtBQUFBLFVBQzVELFNBQVM7QUFBQSxVQUNULFFBQVE7QUFBQSxZQUNOLFdBQVc7QUFBQSxZQUNYLGNBQWMsQ0FBQztBQUFBLFVBQ2pCO0FBQUEsUUFDRixDQUFDO0FBQUEsTUFDSDtBQUNBLFdBQUssT0FBTztBQUFBLElBQ2Q7QUFBQSxJQUVBLFlBQVksS0FBYTtBQUN2QixXQUFLO0FBQUEsUUFDSCxJQUFJLFlBQXFDLHFCQUFxQjtBQUFBLFVBQzVELFNBQVM7QUFBQSxVQUNULFFBQVE7QUFBQSxZQUNOLFdBQVcsS0FBSyxRQUFRLE1BQU0sSUFBSSxHQUFHLEVBQUc7QUFBQSxZQUN4QyxjQUFjLEtBQUssUUFBUSxNQUFNLElBQUksR0FBRyxFQUFHO0FBQUEsVUFDN0M7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUFBLElBRUEsU0FBUztBQUNQLFFBQU8sS0FBSyxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzlCO0FBQUEsSUFFQSwrQkFBK0IsY0FBd0M7QUFDckUsWUFBTSxVQUFVLFdBQVcsS0FBSyxzQkFBc0IsWUFBWTtBQUNsRSxZQUFNLFFBQVEsV0FBVyxjQUFjLEtBQUssb0JBQW9CO0FBQ2hFLFVBQUksUUFBUSxXQUFXLEtBQUssTUFBTSxXQUFXLEdBQUc7QUFDOUMsZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUEsUUFDSCxNQUFNO0FBQUEsUUFDTixDQUFDLGNBQXNCO0FBQUEsaUNBQ0UsS0FBSyxNQUFPLFNBQVMsU0FBUyxFQUFFLElBQUk7QUFBQTtBQUFBLE1BRS9ELENBQUM7QUFBQSxRQUNDLFFBQVE7QUFBQSxRQUNSLENBQUMsY0FBc0I7QUFBQSxtQ0FDSSxLQUFLLE1BQU8sU0FBUyxTQUFTLEVBQUUsSUFBSTtBQUFBO0FBQUEsTUFFakUsQ0FBQztBQUFBO0FBQUEsSUFFTDtBQUFBLElBRUEsV0FBMkI7QUFDekIsVUFBSSxLQUFLLFFBQVEsTUFBTSxTQUFTLEdBQUc7QUFDakMsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLFdBQVcsQ0FBQyxHQUFHLEtBQUssUUFBUSxNQUFNLEtBQUssQ0FBQztBQUM5QyxZQUFNLGlCQUFpQixTQUFTLEtBQUssQ0FBQ0UsSUFBV0MsT0FBYztBQUM3RCxlQUNFLEtBQUssUUFBUSxNQUFNLElBQUlBLEVBQUMsRUFBRyxRQUFRLEtBQUssUUFBUSxNQUFNLElBQUlELEVBQUMsRUFBRztBQUFBLE1BRWxFLENBQUM7QUFDRCxhQUFPO0FBQUE7QUFBQSxpQkFFTSxNQUFNO0FBQ2IsYUFBSyxNQUFNO0FBQUEsTUFDYixDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFVQyxlQUFlO0FBQUEsUUFDZixDQUFDLFFBQ0MsZUFBa0IsTUFBTSxLQUFLLFlBQVksR0FBRyxDQUFDO0FBQUEsb0JBQ3JDLEtBQUssUUFBUSxNQUFNLElBQUksR0FBRyxFQUFHLEtBQUs7QUFBQTtBQUFBLGtCQUVwQyxLQUFLO0FBQUEsVUFDTCxLQUFLLFFBQVEsTUFBTSxJQUFJLEdBQUcsRUFBRztBQUFBLFFBQy9CLENBQUM7QUFBQTtBQUFBO0FBQUEsTUFHVCxDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQVFDLEtBQUssUUFBUSxNQUFNO0FBQUEsUUFDbkIsQ0FBQyxjQUNDO0FBQUEsb0JBQ1EsS0FBSyxNQUFPLFNBQVMsVUFBVSxTQUFTLEVBQUUsSUFBSTtBQUFBLG9CQUM5QyxVQUFVLFFBQVE7QUFBQTtBQUFBLGtCQUVwQixLQUFLO0FBQUEsVUFDSixNQUFNLFVBQVUsbUJBQW9CLEtBQUs7QUFBQSxRQUM1QyxDQUFDO0FBQUE7QUFBQTtBQUFBLE1BR1QsQ0FBQztBQUFBO0FBQUE7QUFBQSxJQUdQO0FBQUEsRUFDRjtBQUVBLGlCQUFlLE9BQU8sb0JBQW9CLGVBQWU7OztBQ25LbEQsTUFBTSxrQkFBTixjQUE4QixZQUFZO0FBQUEsSUFDL0MsYUFBZ0M7QUFBQSxJQUNoQyxvQkFBOEM7QUFBQSxJQUU5QyxvQkFBMEI7QUFDeEIsV0FBSyxhQUFhLFNBQVMsY0FBYyxhQUFhO0FBQ3RELFVBQUksQ0FBQyxLQUFLLFlBQVk7QUFDcEI7QUFBQSxNQUNGO0FBQ0EsV0FBSyxvQkFBb0IsS0FBSyxjQUFjLHFCQUFxQjtBQUNqRSxXQUFLLGlCQUFpQixlQUFlLENBQUNFLE9BQU07QUFDMUMsYUFBSyxXQUFZLGFBQWFBLEdBQUUsT0FBTyxXQUFXQSxHQUFFLE9BQU8sT0FBTyxJQUFJO0FBQ3RFLGFBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxNQUM3QixDQUFDO0FBQ0QsV0FBSztBQUFBLFFBQWlCO0FBQUEsUUFBYyxNQUNsQyxLQUFLLHdCQUF3QixXQUFXO0FBQUEsTUFDMUM7QUFBQSxJQUNGO0FBQUEsSUFFQSx3QkFBd0IsWUFBd0I7QUFDOUMsV0FBSyxVQUFVLE9BQU8sUUFBUTtBQUM5QixXQUFLLGtCQUFtQixRQUFRLEtBQUssV0FBWSxLQUFLLE1BQU07QUFDNUQsV0FBSyxrQkFBbUIsa0JBQ3RCLEtBQUssV0FBWSxLQUFLLE1BQU0sU0FBUztBQUFBLFFBQ25DLENBQUNDLElBQUcsVUFBa0I7QUFBQSxNQUN4QixFQUFFLE1BQU0sR0FBRyxFQUFFO0FBQ2YsV0FBSyxrQkFBbUIsd0JBQXdCLFVBQVU7QUFBQSxJQUM1RDtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLHFCQUFxQixlQUFlOzs7QUNqQzFELHlCQUFzQjtBQTRDdEIsTUFBTSxrQkFBa0IsQ0FDdEIsU0FDQSxRQUNhO0FBR2IsVUFBTSxTQUFTLFFBQVEsSUFBSSxDQUFDQyxPQUFjLENBQUNBLElBQUdBLEtBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSztBQU0zRCxXQUFPLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRztBQUFBLEVBQzNCO0FBT0EsTUFBTSxZQUFZLENBQUMsUUFBa0IsV0FBcUM7QUFDeEUsVUFBTSxNQUF3QixDQUFDO0FBQy9CLFFBQUksY0FBYztBQUlsQixhQUFTQyxLQUFJLEdBQUdBLEtBQUksT0FBTyxTQUFTLEdBQUdBLE1BQUs7QUFDMUMsWUFBTSxNQUFNLE9BQU8sTUFBTSxPQUFPQSxFQUFDLEdBQUcsT0FBT0EsS0FBSSxDQUFDLENBQUM7QUFDakQsVUFBSSxhQUFhO0FBQ2YsWUFBSSxLQUFLLE9BQVUsR0FBRyxNQUFNO0FBQUEsTUFDOUIsT0FBTztBQUNMLFlBQUksS0FBSyxJQUFPLEdBQUcsRUFBRTtBQUFBLE1BQ3ZCO0FBQ0Esb0JBQWMsQ0FBQztBQUFBLElBQ2pCO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFNQSxNQUFNLG9CQUFvQixDQUN4QixTQUNBLFdBQ3FCO0FBQ3JCLFdBQU8sVUFBVSxnQkFBZ0IsU0FBUyxPQUFPLE1BQU0sR0FBRyxNQUFNO0FBQUEsRUFDbEU7QUFFQSxNQUFNLGdCQUFnQixDQUFDLG9CQUNyQixnQkFBZ0IsY0FBYztBQUFBLElBQzVCLENBQUMsTUFBb0IsVUFDbkI7QUFBQTtBQUFBLGtCQUVZLE1BQU0sZ0JBQWdCLG1CQUFtQixPQUFPLEtBQUssQ0FBQztBQUFBLHNCQUNsRCxVQUFVLGdCQUFnQixVQUFVO0FBQUEscUJBQ3JDLEtBQUs7QUFBQTtBQUFBLFVBRWhCLGtCQUFrQixLQUFLLFNBQVMsS0FBSyxNQUFNLENBQUM7QUFBQTtBQUFBLEVBRXBEO0FBRUYsTUFBTUMsWUFBVyxDQUFDLG9CQUF1RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGNBTzNELENBQUNDLE9BQ1QsZ0JBQWdCLFFBQVNBLEdBQUUsT0FBNEIsS0FBSyxDQUFDO0FBQUEsZ0JBQ25ELENBQUNBLE9BQXFCLGdCQUFnQixVQUFVQSxFQUFDLENBQUM7QUFBQSxjQUNwRCxNQUFNLGdCQUFnQix5QkFBeUIsQ0FBQztBQUFBO0FBQUE7QUFBQSxNQUd4RCxjQUFjLGVBQWUsQ0FBQztBQUFBO0FBQUE7QUFNcEMsTUFBTSw4QkFBOEIsQ0FDbEMsY0FDQSxZQUNBLGlCQUNBLGtCQUM2QjtBQUM3QixRQUFJLGVBQWUsYUFBYTtBQUM5QixhQUFPLENBQUMsU0FBdUI7QUFDN0IsWUFBSSxnQkFBZ0IsU0FBUyxHQUFHO0FBQzlCLGdCQUFNLFlBQVksYUFBYSxRQUFRLElBQUk7QUFDM0MsY0FBSSxDQUFDLGdCQUFnQixJQUFJLFNBQVMsR0FBRztBQUNuQyxtQkFBTztBQUFBLFVBQ1Q7QUFBQSxRQUNGO0FBQ0EsY0FBTSxlQUFlLE9BQU8sS0FBSyxLQUFLLFNBQVM7QUFDL0MscUJBQWEsS0FBSztBQUNsQixlQUFPLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxPQUFPLGdCQUFnQixLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsSUFBSSxhQUN4RSxJQUFJLENBQUMsUUFBZ0IsS0FBSyxVQUFVLEdBQUcsQ0FBQyxFQUN4QyxLQUFLLEdBQUcsQ0FBQztBQUFBLE1BQ2Q7QUFBQSxJQUNGLE9BQU87QUFDTCxhQUFPLENBQUMsU0FBdUI7QUFDN0IsWUFBSSxnQkFBZ0IsU0FBUyxHQUFHO0FBQzlCLGdCQUFNLFlBQVksYUFBYSxRQUFRLElBQUk7QUFDM0MsY0FBSSxDQUFDLGdCQUFnQixJQUFJLFNBQVMsR0FBRztBQUNuQyxtQkFBTztBQUFBLFVBQ1Q7QUFBQSxRQUNGO0FBQ0EsZUFBTyxLQUFLO0FBQUEsTUFDZDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBUUEsTUFBTSwwQkFBMEIsQ0FDOUIsT0FDQSxvQkFDQSxvQkFDbUI7QUFDbkIsV0FBTyxNQUNKLE9BQU8sQ0FBQyxPQUFhLFVBQWtCLGdCQUFnQixJQUFJLEtBQUssQ0FBQyxFQUNqRSxJQUFJLENBQUNDLE9BQVk7QUFDaEIsYUFBTztBQUFBLFFBQ0wsS0FBS0E7QUFBQSxRQUNMLFNBQVMsQ0FBQztBQUFBLFFBQ1YsUUFBUSxtQkFBbUJBLEVBQUM7QUFBQSxNQUM5QjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0w7QUFNTyxNQUFNLG9CQUFOLGNBQWdDLFlBQVk7QUFBQSxJQUNqRCxTQUFpQixDQUFDO0FBQUEsSUFDbEIsbUJBQWdDLG9CQUFJLElBQUk7QUFBQSxJQUN4QyxhQUFxQjtBQUFBLElBQ3JCLGdCQUE2QyxDQUFDO0FBQUEsSUFDOUMsYUFBeUI7QUFBQSxJQUN6QixxQkFBNkMsTUFBTTtBQUFBLElBRW5ELG9CQUEwQjtBQUN4QixRQUFPRixVQUFTLElBQUksR0FBRyxJQUFJO0FBQUEsSUFDN0I7QUFBQSxJQUVBLFFBQVEsYUFBcUI7QUFDM0IsVUFBSSxnQkFBZ0IsSUFBSTtBQUN0QixhQUFLLGdCQUFnQjtBQUFBLFVBQ25CLEtBQUs7QUFBQSxVQUNMLEtBQUs7QUFBQSxVQUNMLEtBQUs7QUFBQSxRQUNQO0FBQUEsTUFDRixPQUFPO0FBQ0wsYUFBSyxnQkFBZ0IsaUJBQUFHLFFBQVU7QUFBQSxVQUM3QjtBQUFBLFVBQ0EsS0FBSyxPQUFPLE1BQU0sR0FBRyxFQUFFO0FBQUE7QUFBQSxVQUN2QjtBQUFBLFlBQ0UsS0FBSyxLQUFLO0FBQUEsWUFDVixPQUFPLEtBQUssT0FBTztBQUFBLFlBQ25CLFdBQVc7QUFBQSxVQUNiO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxXQUFLLGFBQWE7QUFDbEIsUUFBT0gsVUFBUyxJQUFJLEdBQUcsSUFBSTtBQUFBLElBQzdCO0FBQUEsSUFFQSxVQUFVQyxJQUFrQjtBQUMxQixVQUFJLEtBQUssY0FBYyxXQUFXLEdBQUc7QUFDbkM7QUFBQSxNQUNGO0FBRUEsWUFBTSxVQUFVLEdBQUdBLEdBQUUsV0FBVyxXQUFXLEVBQUUsR0FBR0EsR0FBRSxVQUFVLFVBQVUsRUFBRSxHQUFHQSxHQUFFLFVBQVUsVUFBVSxFQUFFLEdBQUdBLEdBQUUsU0FBUyxTQUFTLEVBQUUsR0FBR0EsR0FBRSxHQUFHO0FBQ3BJLGNBQVEsU0FBUztBQUFBLFFBQ2YsS0FBSztBQUNILGVBQUssY0FBYyxLQUFLLGFBQWEsS0FBSyxLQUFLLGNBQWM7QUFDN0QsVUFBQUEsR0FBRSxnQkFBZ0I7QUFDbEIsVUFBQUEsR0FBRSxlQUFlO0FBQ2pCO0FBQUEsUUFDRixLQUFLO0FBQ0gsZUFBSyxjQUNGLEtBQUssYUFBYSxJQUFJLEtBQUssY0FBYyxVQUMxQyxLQUFLLGNBQWM7QUFDckIsVUFBQUEsR0FBRSxnQkFBZ0I7QUFDbEIsVUFBQUEsR0FBRSxlQUFlO0FBQ2pCO0FBQUEsUUFDRixLQUFLO0FBQ0gsY0FBSSxLQUFLLGNBQWMsV0FBVyxHQUFHO0FBQ25DO0FBQUEsVUFDRjtBQUNBLGVBQUssbUJBQW1CLEtBQUssWUFBWSxLQUFLO0FBQzlDLFVBQUFBLEdBQUUsZ0JBQWdCO0FBQ2xCLFVBQUFBLEdBQUUsZUFBZTtBQUNqQjtBQUFBLFFBQ0YsS0FBSztBQUNILGNBQUksS0FBSyxjQUFjLFdBQVcsR0FBRztBQUNuQztBQUFBLFVBQ0Y7QUFDQSxlQUFLLG1CQUFtQixLQUFLLFlBQVksSUFBSTtBQUM3QyxVQUFBQSxHQUFFLGdCQUFnQjtBQUNsQixVQUFBQSxHQUFFLGVBQWU7QUFDakI7QUFBQSxRQUVGO0FBQ0U7QUFBQSxNQUNKO0FBQ0EsUUFBT0QsVUFBUyxJQUFJLEdBQUcsSUFBSTtBQUFBLElBQzdCO0FBQUEsSUFFQSxtQkFBbUIsT0FBZSxPQUFnQjtBQUNoRCxZQUFNLFlBQVksS0FBSyxPQUFPLFFBQVEsS0FBSyxjQUFjLEtBQUssRUFBRSxHQUFHO0FBQ25FLFdBQUs7QUFBQSxRQUNILElBQUksWUFBOEIsZUFBZTtBQUFBLFVBQy9DLFNBQVM7QUFBQSxVQUNULFFBQVE7QUFBQSxZQUNOO0FBQUEsWUFDQTtBQUFBLFVBQ0Y7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQ0EsV0FBSyxnQkFBZ0IsQ0FBQztBQUN0QixRQUFPQSxVQUFTLElBQUksR0FBRyxJQUFJO0FBQUEsSUFDN0I7QUFBQSxJQUVBLDJCQUEyQjtBQUN6QixXQUFLO0FBQUEsUUFDSCxJQUFJLFlBQW9CLGNBQWM7QUFBQSxVQUNwQyxTQUFTO0FBQUEsUUFDWCxDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFBQSxJQUVBLHdCQUF3QixZQUF3QjtBQUM5QyxXQUFLLGFBQWE7QUFDbEIsWUFBTSxlQUFlLEtBQUssY0FBZ0MsT0FBTztBQUNqRSxtQkFBYSxNQUFNO0FBQ25CLG1CQUFhLE9BQU87QUFDcEIsV0FBSyxRQUFRLGFBQWEsS0FBSztBQUMvQixRQUFPQSxVQUFTLElBQUksR0FBRyxJQUFJO0FBQUEsSUFDN0I7QUFBQSxJQUVBLElBQVcsTUFBTSxPQUFlO0FBQzlCLFdBQUssU0FBUztBQUNkLFdBQUssd0JBQXdCO0FBQUEsSUFDL0I7QUFBQSxJQUVBLElBQVcsZ0JBQWdCSSxJQUFhO0FBQ3RDLFdBQUssbUJBQW1CLElBQUksSUFBSUEsRUFBQztBQUNqQyxXQUFLLHdCQUF3QjtBQUFBLElBQy9CO0FBQUEsSUFFUSwwQkFBMEI7QUFDaEMsWUFBTSxnQkFBZ0IsS0FBSyxPQUFPO0FBQUEsUUFDaEMsQ0FBQyxNQUFjLFNBQ2IsS0FBSyxLQUFLLFNBQVMsT0FBTyxLQUFLLEtBQUssU0FBUztBQUFBLFFBQy9DO0FBQUEsTUFDRjtBQUNBLFdBQUsscUJBQXFCO0FBQUEsUUFDeEIsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0w7QUFBQSxNQUNGO0FBQ0EsV0FBSyxRQUFRLEVBQUU7QUFBQSxJQUNqQjtBQUFBLEVBQ0Y7QUFFQSxpQkFBZSxPQUFPLHVCQUF1QixpQkFBaUI7OztBQ3hUdkQsTUFBTSxLQUFLLENBQUNDLElBQVdDLE9BQXFCO0FBQ2pELFdBQU8sRUFBRSxHQUFHRCxJQUFHLEdBQUdDLEdBQUU7QUFBQSxFQUN0QjtBQWNPLE1BQU0sTUFBTSxDQUFDLElBQVcsT0FBZ0M7QUFDN0QsVUFBTSxDQUFDLElBQUksRUFBRSxJQUFJO0FBQ2pCLFdBQU87QUFBQSxNQUNMLEdBQUcsS0FBSyxNQUFNLEdBQUcsSUFBSSxFQUFFO0FBQUEsTUFDdkIsR0FBRyxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUU7QUFBQSxJQUN6QjtBQUFBLEVBQ0Y7QUFFTyxNQUFNLFFBQVEsQ0FBQyxJQUFXLE9BQy9CLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUc7QUFFeEIsTUFBTSxNQUFNLENBQUNDLE9BQW9CO0FBQ3RDLFdBQU8sRUFBRSxHQUFHQSxHQUFFLEdBQUcsR0FBR0EsR0FBRSxFQUFFO0FBQUEsRUFDMUI7QUFFTyxNQUFNQyxjQUFhLENBQUMsSUFBVyxPQUFnQztBQUNwRSxXQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQUEsRUFDbEM7OztBQ3ZCTyxNQUFNLHFCQUFxQjtBQUUzQixNQUFNLGlCQUFpQjtBQVl2QixNQUFNLGNBQWMsQ0FBQyxRQUEyQjtBQUNyRCxVQUFNLGVBQWUsSUFBSSxzQkFBc0I7QUFDL0MsV0FBTztBQUFBLE1BQ0wsS0FBSyxhQUFhLE1BQU0sT0FBTztBQUFBLE1BQy9CLE1BQU0sYUFBYSxPQUFPLE9BQU87QUFBQSxNQUNqQyxPQUFPLGFBQWE7QUFBQSxNQUNwQixRQUFRLGFBQWE7QUFBQSxJQUN2QjtBQUFBLEVBQ0Y7QUFpQ08sTUFBTSxjQUFOLE1BQWtCO0FBQUE7QUFBQSxJQUV2QixRQUFzQjtBQUFBO0FBQUE7QUFBQSxJQUl0QixhQUEwQjtBQUFBO0FBQUEsSUFHMUIsc0JBQTZCLEdBQUcsR0FBRyxDQUFDO0FBQUE7QUFBQSxJQUdwQyxlQUFzQixHQUFHLEdBQUcsQ0FBQztBQUFBO0FBQUEsSUFHN0I7QUFBQTtBQUFBLElBR0E7QUFBQTtBQUFBLElBR0Esa0JBQTBCO0FBQUE7QUFBQSxJQUcxQjtBQUFBLElBRUEsWUFDRSxRQUNBLFNBQ0EsY0FBMkIsVUFDM0I7QUFDQSxXQUFLLFNBQVM7QUFDZCxXQUFLLFVBQVU7QUFDZixXQUFLLGNBQWM7QUFDbkIsV0FBSyxRQUFRLGlCQUFpQixhQUFhLEtBQUssVUFBVSxLQUFLLElBQUksQ0FBQztBQUFBLElBQ3RFO0FBQUEsSUFFQSxTQUFTO0FBQ1AsV0FBSyxPQUFPLG9CQUFvQixhQUFhLEtBQUssVUFBVSxLQUFLLElBQUksQ0FBQztBQUN0RSxXQUFLLFFBQVEsb0JBQW9CLGFBQWEsS0FBSyxVQUFVLEtBQUssSUFBSSxDQUFDO0FBQ3ZFLFdBQUssT0FBTyxvQkFBb0IsV0FBVyxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUM7QUFDbEUsV0FBSyxPQUFPLG9CQUFvQixjQUFjLEtBQUssV0FBVyxLQUFLLElBQUksQ0FBQztBQUN4RSxhQUFPLGNBQWMsS0FBSyxlQUFlO0FBQUEsSUFDM0M7QUFBQSxJQUVBLFlBQVk7QUFDVixVQUFJLENBQUMsTUFBTSxLQUFLLHFCQUFxQixLQUFLLFlBQVksR0FBRztBQUN2RCxZQUFJLGNBQXNCO0FBQzFCLFlBQUksS0FBSyxnQkFBZ0IsVUFBVTtBQUNqQyx3QkFDRyxPQUFPLEtBQUssb0JBQW9CLElBQUksS0FBSyxXQUFZLFFBQ3RELEtBQUssV0FBWTtBQUFBLFFBQ3JCLE9BQU87QUFDTCx3QkFDRyxPQUFPLEtBQUssb0JBQW9CLElBQUksS0FBSyxXQUFZLE9BQ3RELEtBQUssV0FBWTtBQUFBLFFBQ3JCO0FBRUEsc0JBQWMsTUFBTSxhQUFhLEdBQUcsRUFBRTtBQUV0QyxhQUFLLE9BQU87QUFBQSxVQUNWLElBQUksWUFBK0Isb0JBQW9CO0FBQUEsWUFDckQsUUFBUTtBQUFBLGNBQ04sUUFBUTtBQUFBLGNBQ1IsT0FBTyxNQUFNO0FBQUEsWUFDZjtBQUFBLFVBQ0YsQ0FBQztBQUFBLFFBQ0g7QUFDQSxhQUFLLGVBQWUsSUFBSSxLQUFLLG1CQUFtQjtBQUFBLE1BQ2xEO0FBQUEsSUFDRjtBQUFBLElBRUEsVUFBVUMsSUFBZTtBQUN2QixVQUFJLEtBQUssVUFBVSxNQUFNO0FBQ3ZCO0FBQUEsTUFDRjtBQUNBLFdBQUssb0JBQW9CLElBQUlBLEdBQUU7QUFDL0IsV0FBSyxvQkFBb0IsSUFBSUEsR0FBRTtBQUFBLElBQ2pDO0FBQUEsSUFFQSxVQUFVQSxJQUFlO0FBQ3ZCLFdBQUssa0JBQWtCLE9BQU8sWUFBWSxLQUFLLFVBQVUsS0FBSyxJQUFJLEdBQUcsRUFBRTtBQUN2RSxXQUFLLGFBQWEsWUFBWSxLQUFLLE1BQU07QUFFekMsV0FBSyxPQUFPLFVBQVUsSUFBSSxjQUFjO0FBRXhDLFdBQUssT0FBTyxpQkFBaUIsYUFBYSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDbkUsV0FBSyxPQUFPLGlCQUFpQixXQUFXLEtBQUssUUFBUSxLQUFLLElBQUksQ0FBQztBQUMvRCxXQUFLLE9BQU8saUJBQWlCLGNBQWMsS0FBSyxXQUFXLEtBQUssSUFBSSxDQUFDO0FBRXJFLFdBQUssUUFBUSxHQUFHQSxHQUFFLE9BQU9BLEdBQUUsS0FBSztBQUFBLElBQ2xDO0FBQUEsSUFFQSxRQUFRQSxJQUFlO0FBQ3JCLFVBQUksS0FBSyxVQUFVLE1BQU07QUFDdkI7QUFBQSxNQUNGO0FBQ0EsV0FBSyxTQUFTLEdBQUdBLEdBQUUsT0FBT0EsR0FBRSxLQUFLLENBQUM7QUFBQSxJQUNwQztBQUFBLElBRUEsV0FBV0EsSUFBZTtBQUN4QixVQUFJLEtBQUssVUFBVSxNQUFNO0FBQ3ZCO0FBQUEsTUFDRjtBQUNBLFdBQUssU0FBUyxHQUFHQSxHQUFFLE9BQU9BLEdBQUUsS0FBSyxDQUFDO0FBQUEsSUFDcEM7QUFBQSxJQUVBLFNBQVMsS0FBWTtBQUNuQixhQUFPLGNBQWMsS0FBSyxlQUFlO0FBRXpDLFdBQUssT0FBTyxVQUFVLE9BQU8sY0FBYztBQUUzQyxXQUFLLE9BQU8sb0JBQW9CLGFBQWEsS0FBSyxVQUFVLEtBQUssSUFBSSxDQUFDO0FBQ3RFLFdBQUssT0FBTyxvQkFBb0IsV0FBVyxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUM7QUFDbEUsV0FBSyxPQUFPLG9CQUFvQixjQUFjLEtBQUssV0FBVyxLQUFLLElBQUksQ0FBQztBQUV4RSxXQUFLLHNCQUFzQjtBQUMzQixXQUFLLFVBQVU7QUFDZixXQUFLLFFBQVE7QUFDYixXQUFLLHNCQUFzQixHQUFHLEdBQUcsQ0FBQztBQUNsQyxXQUFLLGVBQWUsR0FBRyxHQUFHLENBQUM7QUFBQSxJQUM3QjtBQUFBLEVBQ0Y7OztBQzNMTyxNQUFNLG1CQUFtQjtBQWF6QixNQUFNLFlBQU4sTUFBZ0I7QUFBQSxJQUNyQixRQUFzQjtBQUFBLElBQ3RCLHNCQUE2QixHQUFHLEdBQUcsQ0FBQztBQUFBLElBQ3BDLGVBQXNCLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDN0I7QUFBQSxJQUNBLGtCQUEwQjtBQUFBLElBRTFCLFlBQVksS0FBa0I7QUFDNUIsV0FBSyxNQUFNO0FBQ1gsVUFBSSxpQkFBaUIsYUFBYSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDM0QsVUFBSSxpQkFBaUIsYUFBYSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDM0QsVUFBSSxpQkFBaUIsV0FBVyxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUM7QUFDdkQsVUFBSSxpQkFBaUIsY0FBYyxLQUFLLFdBQVcsS0FBSyxJQUFJLENBQUM7QUFBQSxJQUMvRDtBQUFBLElBRUEsU0FBUztBQUNQLFdBQUssSUFBSSxvQkFBb0IsYUFBYSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDbkUsV0FBSyxJQUFJLG9CQUFvQixhQUFhLEtBQUssVUFBVSxLQUFLLElBQUksQ0FBQztBQUNuRSxXQUFLLElBQUksb0JBQW9CLFdBQVcsS0FBSyxRQUFRLEtBQUssSUFBSSxDQUFDO0FBQy9ELFdBQUssSUFBSSxvQkFBb0IsY0FBYyxLQUFLLFdBQVcsS0FBSyxJQUFJLENBQUM7QUFDckUsYUFBTyxjQUFjLEtBQUssZUFBZTtBQUFBLElBQzNDO0FBQUEsSUFFQSxZQUFZO0FBQ1YsVUFBSSxDQUFDLE1BQU0sS0FBSyxxQkFBcUIsS0FBSyxZQUFZLEdBQUc7QUFDdkQsYUFBSyxJQUFJO0FBQUEsVUFDUCxJQUFJLFlBQXVCLGtCQUFrQjtBQUFBLFlBQzNDLFFBQVE7QUFBQSxjQUNOLE9BQU8sSUFBSSxLQUFLLEtBQU07QUFBQSxjQUN0QixLQUFLLElBQUksS0FBSyxtQkFBbUI7QUFBQSxZQUNuQztBQUFBLFVBQ0YsQ0FBQztBQUFBLFFBQ0g7QUFDQSxhQUFLLGVBQWUsSUFBSSxLQUFLLG1CQUFtQjtBQUFBLE1BQ2xEO0FBQUEsSUFDRjtBQUFBLElBRUEsVUFBVUMsSUFBZTtBQUN2QixVQUFJLEtBQUssVUFBVSxNQUFNO0FBQ3ZCO0FBQUEsTUFDRjtBQUNBLFdBQUssb0JBQW9CLElBQUlBLEdBQUU7QUFDL0IsV0FBSyxvQkFBb0IsSUFBSUEsR0FBRTtBQUFBLElBQ2pDO0FBQUEsSUFFQSxVQUFVQSxJQUFlO0FBQ3ZCLFdBQUssa0JBQWtCLE9BQU8sWUFBWSxLQUFLLFVBQVUsS0FBSyxJQUFJLEdBQUcsRUFBRTtBQUN2RSxXQUFLLFFBQVEsR0FBR0EsR0FBRSxTQUFTQSxHQUFFLE9BQU87QUFBQSxJQUN0QztBQUFBLElBRUEsUUFBUUEsSUFBZTtBQUNyQixXQUFLLFNBQVMsR0FBR0EsR0FBRSxTQUFTQSxHQUFFLE9BQU8sQ0FBQztBQUFBLElBQ3hDO0FBQUEsSUFFQSxXQUFXQSxJQUFlO0FBQ3hCLFVBQUksS0FBSyxVQUFVLE1BQU07QUFDdkI7QUFBQSxNQUNGO0FBQ0EsV0FBSyxTQUFTLEdBQUdBLEdBQUUsU0FBU0EsR0FBRSxPQUFPLENBQUM7QUFBQSxJQUN4QztBQUFBLElBRUEsU0FBUyxLQUFZO0FBQ25CLGFBQU8sY0FBYyxLQUFLLGVBQWU7QUFDekMsV0FBSyxzQkFBc0I7QUFDM0IsV0FBSyxVQUFVO0FBQ2YsV0FBSyxRQUFRO0FBQ2IsV0FBSyxzQkFBc0IsR0FBRyxHQUFHLENBQUM7QUFDbEMsV0FBSyxlQUFlLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDN0I7QUFBQSxFQUNGOzs7QUNwRk8sTUFBTSxZQUFOLE1BQWdCO0FBQUEsSUFDckIsc0JBQTZCLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDcEMsbUJBQTBCLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDakM7QUFBQSxJQUVBLFlBQVksS0FBa0I7QUFDNUIsV0FBSyxNQUFNO0FBQ1gsVUFBSSxpQkFBaUIsYUFBYSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFBQSxJQUM3RDtBQUFBLElBRUEsU0FBUztBQUNQLFdBQUssSUFBSSxvQkFBb0IsYUFBYSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFBQSxJQUNyRTtBQUFBLElBRUEsVUFBVUMsSUFBZTtBQUN2QixXQUFLLG9CQUFvQixJQUFJQSxHQUFFO0FBQy9CLFdBQUssb0JBQW9CLElBQUlBLEdBQUU7QUFBQSxJQUNqQztBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsZUFBNkI7QUFDM0IsVUFBSSxNQUFNLEtBQUsscUJBQXFCLEtBQUssZ0JBQWdCLEdBQUc7QUFDMUQsZUFBTztBQUFBLE1BQ1Q7QUFDQSxXQUFLLG1CQUFtQixJQUFJLEtBQUssbUJBQW1CO0FBQ3BELGFBQU8sSUFBSSxLQUFLLGdCQUFnQjtBQUFBLElBQ2xDO0FBQUEsRUFDRjs7O0FDbENPLE1BQU0sb0JBQW9CO0FBSzFCLE1BQU0sZUFBTixNQUFtQjtBQUFBLElBQ2hCO0FBQUEsSUFDQTtBQUFBLElBRVIsWUFBWSxPQUFlLEtBQWE7QUFDdEMsV0FBSyxTQUFTO0FBQ2QsV0FBSyxPQUFPO0FBQ1osVUFBSSxLQUFLLFNBQVMsS0FBSyxNQUFNO0FBQzNCLFNBQUMsS0FBSyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsS0FBSyxRQUFRLEtBQUssSUFBSTtBQUFBLE1BQ3BEO0FBQ0EsVUFBSSxLQUFLLE9BQU8sS0FBSyxTQUFTLG1CQUFtQjtBQUMvQyxhQUFLLE9BQU8sS0FBSyxTQUFTO0FBQUEsTUFDNUI7QUFBQSxJQUNGO0FBQUEsSUFFTyxHQUFHQyxJQUFvQjtBQUM1QixhQUFPQSxNQUFLLEtBQUssVUFBVUEsTUFBSyxLQUFLO0FBQUEsSUFDdkM7QUFBQSxJQUVBLElBQVcsUUFBZ0I7QUFDekIsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUFBLElBRUEsSUFBVyxNQUFjO0FBQ3ZCLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBLElBQVcsY0FBc0I7QUFDL0IsYUFBTyxLQUFLLE9BQU8sS0FBSztBQUFBLElBQzFCO0FBQUEsRUFDRjs7O0FDTE8sTUFBTSxTQUFTLENBQ3BCLE9BQ0EsWUFDQSxpQkFDQSxPQUNBLFFBQ0Esc0JBQ3lCO0FBQ3pCLFVBQU0sT0FBTyxjQUFjLEtBQUs7QUFDaEMsUUFBSSxDQUFDLEtBQUssSUFBSTtBQUNaLGFBQU87QUFBQSxJQUNUO0FBQ0EsVUFBTSxtQkFBbUIsS0FBSztBQUM5QixRQUFJLGVBQWUsTUFBTTtBQUN2QixZQUFNQyxvQ0FBd0Qsb0JBQUksSUFBSTtBQUN0RSxlQUFTLFFBQVEsR0FBRyxRQUFRLE1BQU0sU0FBUyxRQUFRLFNBQVM7QUFDMUQsUUFBQUEsa0NBQWlDLElBQUksT0FBTyxLQUFLO0FBQUEsTUFDbkQ7QUFDQSxhQUFPLEdBQUc7QUFBQSxRQUNSLFdBQVc7QUFBQSxRQUNYLGNBQWMsS0FBSztBQUFBLFFBQ25CO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLGtDQUFrQ0E7QUFBQSxRQUNsQyxrQ0FBa0NBO0FBQUEsUUFDbEM7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQ0EsVUFBTSxRQUFlLENBQUM7QUFDdEIsVUFBTSxRQUFlLENBQUM7QUFDdEIsVUFBTSxlQUF5QixDQUFDO0FBQ2hDLFVBQU0sZ0JBQXdCLENBQUM7QUFDL0IsVUFBTSxpQkFBMkIsQ0FBQztBQUNsQyxVQUFNLG1DQUF3RCxvQkFBSSxJQUFJO0FBQ3RFLFVBQU0sOEJBQW1ELG9CQUFJLElBQUk7QUFHakUsVUFBTSxTQUFTLFFBQVEsQ0FBQyxNQUFZLGtCQUEwQjtBQUM1RCxVQUFJLFdBQVcsTUFBTSxhQUFhLEdBQUc7QUFDbkMsY0FBTSxLQUFLLElBQUk7QUFDZixzQkFBYyxLQUFLLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLHVCQUFlLEtBQUssT0FBTyxhQUFhLENBQUM7QUFDekMsY0FBTSxXQUFXLE1BQU0sU0FBUztBQUNoQyxvQ0FBNEIsSUFBSSxlQUFlLFFBQVE7QUFDdkQseUNBQWlDLElBQUksVUFBVSxhQUFhO0FBQUEsTUFDOUQ7QUFBQSxJQUNGLENBQUM7QUFHRCxVQUFNLE1BQU0sUUFBUSxDQUFDLGlCQUErQjtBQUNsRCxVQUNFLENBQUMsNEJBQTRCLElBQUksYUFBYSxDQUFDLEtBQy9DLENBQUMsNEJBQTRCLElBQUksYUFBYSxDQUFDLEdBQy9DO0FBQ0E7QUFBQSxNQUNGO0FBQ0EsWUFBTTtBQUFBLFFBQ0osSUFBSTtBQUFBLFVBQ0YsNEJBQTRCLElBQUksYUFBYSxDQUFDO0FBQUEsVUFDOUMsNEJBQTRCLElBQUksYUFBYSxDQUFDO0FBQUEsUUFDaEQ7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDO0FBR0QscUJBQWlCLFFBQVEsQ0FBQyxzQkFBOEI7QUFDdEQsWUFBTSxPQUFhLE1BQU0sU0FBUyxpQkFBaUI7QUFDbkQsVUFBSSxDQUFDLFdBQVcsTUFBTSxpQkFBaUIsR0FBRztBQUN4QztBQUFBLE1BQ0Y7QUFDQSxtQkFBYSxLQUFLLDRCQUE0QixJQUFJLGlCQUFpQixDQUFFO0FBQUEsSUFDdkUsQ0FBQztBQUdELFVBQU0seUJBQXlCLGdCQUFnQjtBQUFBLE1BQzdDLENBQUMsc0JBQ0MsNEJBQTRCLElBQUksaUJBQWlCO0FBQUEsSUFDckQ7QUFFQSxXQUFPLEdBQUc7QUFBQSxNQUNSLFdBQVc7QUFBQSxRQUNULE9BQU87QUFBQSxRQUNQLFVBQVU7QUFBQSxNQUNaO0FBQUEsTUFDQTtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsTUFDakIsT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBLGtDQUFrQztBQUFBLE1BQ2xDLG1CQUFtQiw0QkFBNEIsSUFBSSxpQkFBaUIsS0FBSztBQUFBLElBQzNFLENBQUM7QUFBQSxFQUNIOzs7QUMvR08sTUFBTSxVQUFVO0FBQUEsSUFDckIsZUFBZTtBQUFBLElBQ2YsV0FBVztBQUFBLElBQ1gsZ0JBQWdCO0FBQUEsSUFDaEIsY0FBYztBQUFBLElBQ2Qsc0JBQXNCO0FBQUEsSUFDdEIseUJBQXlCO0FBQUEsSUFDekIscUJBQXFCO0FBQUEsSUFDckIsb0JBQW9CO0FBQUEsSUFDcEIsc0JBQXNCO0FBQUEsSUFDdEIsaUNBQWlDO0FBQUEsSUFDakMsb0NBQW9DO0FBQUEsSUFDcEMsZ0NBQWdDO0FBQUEsSUFDaEMsb0NBQW9DO0FBQUEsSUFDcEMsdUNBQ0U7QUFBQSxJQUNGLG1DQUFtQztBQUFBLElBQ25DLG9CQUFvQjtBQUFBLElBQ3BCLGlCQUFpQjtBQUFBLElBQ2pCLGlCQUFpQjtBQUFBLElBQ2pCLGVBQWU7QUFBQSxJQUNmLGVBQWU7QUFBQSxJQUNmLGFBQWE7QUFBQSxJQUNiLGVBQWU7QUFBQSxJQUNmLHFCQUFxQjtBQUFBLElBQ3JCLHFCQUFxQjtBQUFBLElBQ3JCLGVBQWU7QUFBQSxFQUNqQjtBQUdPLE1BQU0sU0FBUztBQUFBLElBQ3BCLGdCQUFnQjtBQUFBLElBQ2hCLGVBQWU7QUFBQSxJQUNmLGlCQUFpQjtBQUFBLElBQ2pCLGdCQUFnQjtBQUFBLElBQ2hCLG1CQUFtQjtBQUFBLElBQ25CLGNBQWM7QUFBQSxJQUNkLGFBQWE7QUFBQSxJQUNiLGFBQWE7QUFBQSxJQUNiLGdCQUFnQjtBQUFBLElBQ2hCLFdBQVc7QUFBQSxFQUNiO0FBR0EsTUFBTSxVQUFVLENBQUNDLE9BQXNCO0FBQ3JDLFFBQUlBLEtBQUksTUFBTSxHQUFHO0FBQ2YsYUFBT0EsS0FBSTtBQUFBLElBQ2I7QUFDQSxXQUFPQTtBQUFBLEVBQ1Q7QUFHTyxNQUFNLFFBQU4sTUFBWTtBQUFBLElBQ1Q7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUVBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFFUixZQUNFLE1BQ0EsZUFDQSxtQkFDQSxxQkFBNkIsR0FDN0I7QUFDQSxXQUFLLG9CQUFvQjtBQUN6QixXQUFLLHVCQUF1QixxQkFBcUIsS0FBSztBQUV0RCxXQUFLLGNBQWMsS0FBSyxNQUFNLEtBQUssYUFBYSxDQUFDO0FBQ2pELFdBQUssZUFBZSxLQUFLO0FBQ3pCLFdBQUssY0FBYyxRQUFRLEtBQUssTUFBTSxLQUFLLGVBQWUsQ0FBQyxDQUFDO0FBQzVELFlBQU0sa0JBQWtCLEtBQUssS0FBSyxLQUFLLGVBQWUsQ0FBQyxJQUFJLEtBQUs7QUFDaEUsV0FBSyxlQUFlO0FBQ3BCLFdBQUssbUJBQW1CLEtBQUssY0FDekIsS0FBSyxLQUFNLEtBQUssYUFBYSxJQUFLLENBQUMsSUFDbkM7QUFFSixXQUFLLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBQzNDLFdBQUssZ0JBQWdCLEdBQUcsR0FBRyxrQkFBa0IsS0FBSyxnQkFBZ0I7QUFFbEUsVUFBSSxjQUFjO0FBQ2xCLFVBQUksS0FBSyxpQkFBaUIsUUFBUSxLQUFLLHNCQUFzQixhQUFhO0FBR3hFLGFBQUssY0FDRixnQkFBZ0IsS0FBSyx1QkFBdUIsSUFBSSxLQUFLLGdCQUN0RDtBQUNGLGFBQUssU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQ3ZCLE9BQU87QUFJTCxhQUFLLGNBQ0YsZ0JBQWdCLEtBQUssdUJBQXVCLElBQUksS0FBSyxnQkFDdEQsS0FBSyxhQUFhO0FBQ3BCLHNCQUFjLEtBQUs7QUFBQSxVQUNqQixLQUFLLGFBQWEsS0FBSyxhQUFhLFFBQVEsS0FBSztBQUFBLFFBQ25EO0FBQ0EsYUFBSyxTQUFTLEdBQUcsQ0FBQyxjQUFjLEtBQUssY0FBYyxDQUFDO0FBQUEsTUFDdEQ7QUFFQSxXQUFLLGNBQWM7QUFBQSxRQUNqQixLQUFLLHVCQUF1QixjQUFjO0FBQUEsUUFDMUMsS0FBSyxtQkFBbUI7QUFBQSxNQUMxQjtBQUVBLFdBQUssc0JBQXNCO0FBQUEsUUFDekIsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLE1BQ1A7QUFFQSxVQUFJLEtBQUssU0FBUztBQUNoQixhQUFLLGNBQWMsSUFBSSxLQUFLO0FBQUEsTUFDOUIsT0FBTztBQUNMLGFBQUssY0FBYyxNQUFNLEtBQUs7QUFBQSxNQUNoQztBQUFBLElBQ0Y7QUFBQTtBQUFBLElBR08sT0FBTyxTQUF5QjtBQUNyQyxhQUNFLFVBQVUsS0FBSyxjQUFjLEtBQUssbUJBQW1CLElBQUksS0FBSztBQUFBLElBRWxFO0FBQUEsSUFFTyxnQkFBZ0IsT0FBc0I7QUFFM0MsYUFBTztBQUFBLFFBQ0wsS0FBSztBQUFBLFVBQ0gsS0FBSztBQUFBLGFBQ0YsT0FBTyxtQkFBbUIsTUFBTSxJQUMvQixLQUFLLE9BQU8sSUFDWixLQUFLLGVBQ0wsS0FBSyx3QkFDTCxLQUFLO0FBQUEsVUFDVDtBQUFBLFVBQ0E7QUFBQSxVQUNBLEtBQUs7QUFBQSxRQUNQO0FBQUEsUUFDQSxLQUFLLEtBQUs7QUFBQSxXQUNQLE9BQU8sbUJBQW1CLE1BQU0sSUFDL0IsS0FBSyxPQUFPLElBQ1osS0FBSyxlQUNMLEtBQUssb0JBQ0wsS0FBSztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBO0FBQUEsSUFHUSxxQkFBcUIsS0FBYSxLQUFvQjtBQUM1RCxhQUFPLElBQUksS0FBSyxRQUFRO0FBQUEsUUFDdEIsS0FBSztBQUFBLFVBQ0gsTUFBTSxLQUFLLGFBQWEsS0FBSyxlQUFlLEtBQUs7QUFBQSxRQUNuRDtBQUFBLFFBQ0EsS0FBSztBQUFBLFVBQ0gsTUFBTSxLQUFLLGNBQWMsS0FBSyxlQUFlLEtBQUs7QUFBQSxRQUNwRDtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFBQTtBQUFBLElBR1Esc0JBQXNCLEtBQWEsS0FBb0I7QUFDN0QsYUFBTyxJQUFJLEtBQUssZUFBZTtBQUFBLFFBQzdCO0FBQUEsUUFDQSxNQUFNLEtBQUssY0FBYyxLQUFLLGVBQWUsS0FBSztBQUFBLE1BQ3BELENBQUM7QUFBQSxJQUNIO0FBQUEsSUFFUSxtQkFBMEI7QUFDaEMsYUFBTyxJQUFJLEtBQUssUUFBUSxDQUFDLEtBQUssY0FBYyxLQUFLLFlBQVksQ0FBQztBQUFBLElBQ2hFO0FBQUEsSUFFUSxrQkFBa0IsS0FBb0I7QUFDNUMsYUFBTyxJQUFJLEtBQUssUUFBUTtBQUFBLFFBQ3RCLE1BQU0sS0FBSyxhQUFhLEtBQUssZUFBZSxLQUFLO0FBQUEsUUFDakQ7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQUE7QUFBQSxJQUdBLFFBQVEsS0FBYSxLQUFhLE9BQW9DO0FBQ3BFLGNBQVEsT0FBTztBQUFBLFFBQ2IsS0FBSyxRQUFRO0FBQUEsUUFDYixLQUFLLFFBQVE7QUFBQSxRQUNiLEtBQUssUUFBUTtBQUNYLGlCQUFPLElBQUksS0FBSyxxQkFBcUIsS0FBSyxHQUFHLEdBQUc7QUFBQSxZQUM5QztBQUFBLFlBQ0EsS0FBSyxjQUFjLEtBQUs7QUFBQSxVQUMxQixDQUFDO0FBQUEsUUFFSCxLQUFLLFFBQVE7QUFDWCxpQkFBTyxJQUFJLEtBQUsscUJBQXFCLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLFdBQVcsQ0FBQztBQUFBLFFBQ3ZFLEtBQUssUUFBUTtBQUNYLGlCQUFPLElBQUksS0FBSyxxQkFBcUIsS0FBSyxHQUFHLEdBQUc7QUFBQSxZQUM5QyxLQUFLO0FBQUEsWUFDTCxLQUFLO0FBQUEsVUFDUCxDQUFDO0FBQUEsUUFDSCxLQUFLLFFBQVE7QUFDWCxpQkFBTyxJQUFJLEtBQUssc0JBQXNCLEtBQUssR0FBRyxHQUFHO0FBQUEsWUFDL0MsS0FBSztBQUFBLFlBQ0wsS0FBSztBQUFBLFVBQ1AsQ0FBQztBQUFBLFFBQ0gsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sSUFBSSxLQUFLLHFCQUFxQixLQUFLLEdBQUcsR0FBRztBQUFBLFlBQzlDO0FBQUEsWUFDQSxLQUFLLGNBQWMsS0FBSztBQUFBLFVBQzFCLENBQUM7QUFBQSxRQUNILEtBQUssUUFBUTtBQUFBLFFBQ2IsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sSUFBSSxLQUFLLHFCQUFxQixLQUFLLEdBQUcsR0FBRztBQUFBLFlBQzlDO0FBQUEsWUFDQSxLQUFLLE1BQU0sS0FBSyxjQUFjLE1BQU0sS0FBSyxXQUFXLElBQUk7QUFBQSxVQUMxRCxDQUFDO0FBQUEsUUFDSCxLQUFLLFFBQVE7QUFDWCxpQkFBTyxJQUFJLEtBQUssUUFBUSxLQUFLLEtBQUssUUFBUSxvQkFBb0IsR0FBRztBQUFBLFlBQy9EO0FBQUEsWUFDQSxLQUFLLEtBQUssT0FBTyxPQUFPLGlCQUFpQjtBQUFBLFVBQzNDLENBQUM7QUFBQSxRQUNILEtBQUssUUFBUTtBQUNYLGlCQUFPLElBQUksS0FBSyxRQUFRLEtBQUssS0FBSyxRQUFRLG9CQUFvQixHQUFHO0FBQUEsWUFDL0Q7QUFBQSxZQUNBLEtBQUssT0FBTyxPQUFPLGlCQUFpQjtBQUFBLFVBQ3RDLENBQUM7QUFBQSxRQUNILEtBQUssUUFBUTtBQUNYLGlCQUFPLElBQUksS0FBSyxRQUFRLEtBQUssS0FBSyxRQUFRLG1CQUFtQixHQUFHO0FBQUEsWUFDOUQsS0FBSyxLQUFLLE9BQU8sT0FBTyxpQkFBaUI7QUFBQSxZQUN6QyxLQUFLLEtBQUssT0FBTyxPQUFPLGlCQUFpQjtBQUFBLFVBQzNDLENBQUM7QUFBQSxRQUNILEtBQUssUUFBUTtBQUNYLGlCQUFPLElBQUksS0FBSyxRQUFRLEtBQUssS0FBSyxRQUFRLGtCQUFrQixHQUFHO0FBQUEsWUFDN0Q7QUFBQSxZQUNBLEtBQUssS0FBSyxPQUFPLE9BQU8saUJBQWlCO0FBQUEsVUFDM0MsQ0FBQztBQUFBLFFBRUgsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sSUFBSSxLQUFLLFFBQVEsS0FBSyxLQUFLLFFBQVEsa0JBQWtCLEdBQUc7QUFBQSxZQUM3RDtBQUFBLFlBQ0EsS0FBSyxPQUFPLE9BQU8saUJBQWlCO0FBQUEsVUFDdEMsQ0FBQztBQUFBLFFBQ0gsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sSUFBSSxLQUFLLFFBQVEsS0FBSyxLQUFLLFFBQVEsb0JBQW9CLEdBQUc7QUFBQSxZQUMvRCxLQUFLLE9BQU8sT0FBTyxpQkFBaUI7QUFBQSxZQUNwQztBQUFBLFVBQ0YsQ0FBQztBQUFBLFFBQ0gsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sS0FBSyxxQkFBcUIsS0FBSyxHQUFHO0FBQUEsUUFDM0MsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sS0FBSyxzQkFBc0IsS0FBSyxHQUFHO0FBQUEsUUFDNUMsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sS0FBSyxrQkFBa0IsR0FBRztBQUFBLFFBQ25DLEtBQUssUUFBUTtBQUNYLGlCQUFPLElBQUksS0FBSyxrQkFBa0IsR0FBRyxHQUFHO0FBQUEsWUFDdEM7QUFBQSxZQUNBLEtBQUssZUFBZSxNQUFNO0FBQUEsVUFDNUIsQ0FBQztBQUFBLFFBQ0gsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sSUFBSSxLQUFLLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxLQUFLLGFBQWEsQ0FBQyxDQUFDO0FBQUEsUUFDL0QsS0FBSyxRQUFRO0FBQ1gsaUJBQU8sSUFBSSxLQUFLLGlCQUFpQixHQUFHLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQztBQUFBLFFBQzNELEtBQUssUUFBUTtBQUNYLGlCQUFPLEtBQUssa0JBQWtCLEdBQUc7QUFBQSxRQUNuQyxLQUFLLFFBQVE7QUFDWCxpQkFBTyxLQUFLLHFCQUFxQixNQUFNLEdBQUcsR0FBRztBQUFBLFFBQy9DLEtBQUssUUFBUTtBQUNYLGlCQUFPLEtBQUs7QUFBQSxRQUNkLEtBQUssUUFBUTtBQUNYLGlCQUFPLEtBQUs7QUFBQSxRQUNkO0FBRUU7QUFDQSxpQkFBTyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQ2xCO0FBQUEsSUFDRjtBQUFBLElBRUEsT0FBTyxTQUFzQztBQUMzQyxjQUFRLFNBQVM7QUFBQSxRQUNmLEtBQUssT0FBTztBQUNWLGlCQUFPLEtBQUs7QUFBQSxRQUNkLEtBQUssT0FBTztBQUNWLGlCQUFPLEtBQUs7QUFBQSxRQUNkLEtBQUssT0FBTztBQUNWLGlCQUFPLEtBQUssZUFBZTtBQUFBLFFBQzdCLEtBQUssT0FBTztBQUNWLGlCQUFPLEtBQUssS0FBSyxLQUFLLFlBQVk7QUFBQSxRQUNwQyxLQUFLLE9BQU87QUFDVixpQkFBTyxLQUFLLEtBQUssS0FBSyxZQUFZO0FBQUEsUUFDcEMsS0FBSyxPQUFPO0FBQ1YsaUJBQU8sS0FBSztBQUFBLFFBQ2QsS0FBSyxPQUFPO0FBQ1YsaUJBQU8sS0FBSztBQUFBLFFBQ2QsS0FBSyxPQUFPO0FBQ1YsaUJBQU8sS0FBSztBQUFBLFFBQ2QsS0FBSyxPQUFPO0FBQ1YsaUJBQU8sS0FBSyxjQUFjO0FBQUEsUUFDNUIsS0FBSyxPQUFPO0FBQ1YsaUJBQU8sS0FBSztBQUFBLFFBQ2Q7QUFFRTtBQUNBLGlCQUFPO0FBQUEsTUFDWDtBQUFBLElBQ0Y7QUFBQSxFQUNGOzs7QUNsVUEsTUFBTSxVQUFVLENBQUNDLElBQVcsU0FBd0I7QUFDbEQsV0FBTyxLQUFLLFFBQVEsS0FBS0EsTUFBSyxLQUFLLFlBQVksS0FBS0E7QUFBQSxFQUN0RDtBQUVBLE1BQU0sVUFBVSxDQUFDQyxJQUFXLFNBQXdCO0FBQ2xELFdBQU8sS0FBSyxRQUFRLEtBQUtBLE1BQUssS0FBSyxZQUFZLEtBQUtBO0FBQUEsRUFDdEQ7QUFFTyxNQUFNLFVBQU4sTUFBOEI7QUFBQSxJQUNuQztBQUFBLElBQ0EsWUFBWSxPQUFZO0FBQ3RCLFdBQUssUUFBUSxNQUFNLEtBQUssQ0FBQ0MsSUFBTUMsT0FBaUJELEdBQUUsUUFBUSxJQUFJQyxHQUFFLFFBQVEsQ0FBQztBQUFBLElBQzNFO0FBQUE7QUFBQSxJQUdBLElBQUlDLElBQW9CO0FBQ3RCLFVBQUksUUFBUTtBQUNaLFVBQUksTUFBTSxLQUFLLE1BQU0sU0FBUztBQUU5QixhQUFPLFNBQVMsS0FBSztBQUVuQixjQUFNLE1BQU0sS0FBSyxPQUFPLFFBQVEsT0FBTyxDQUFDO0FBSXhDLFlBQUksUUFBUUEsR0FBRSxHQUFHLEtBQUssTUFBTSxHQUFHLENBQUMsR0FBRztBQUNqQyxjQUFJLFFBQVFBLEdBQUUsR0FBRyxLQUFLLE1BQU0sR0FBRyxDQUFDLEdBQUc7QUFDakMsbUJBQU8sS0FBSyxNQUFNLEdBQUc7QUFBQSxVQUN2QjtBQUNBLGlCQUFPO0FBQUEsUUFDVCxXQUdTLEtBQUssTUFBTSxHQUFHLEVBQUUsUUFBUSxJQUFJQSxHQUFFLEdBQUc7QUFDeEMsa0JBQVEsTUFBTTtBQUFBLFFBQ2hCLE9BQU87QUFDTCxnQkFBTSxNQUFNO0FBQUEsUUFDZDtBQUFBLE1BQ0Y7QUFFQSxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7OztBQ3VEQSxNQUFNLDRDQUE0QyxDQUNoRCxNQUNBLGNBQ3lCO0FBQ3pCLFFBQUksS0FBSyxhQUFhLEdBQUc7QUFDdkIsVUFBSSxjQUFjLFFBQVE7QUFDeEIsZUFBTyxRQUFRO0FBQUEsTUFDakI7QUFDQSxhQUFPLFFBQVE7QUFBQSxJQUNqQixPQUFPO0FBQ0wsYUFBTyxRQUFRO0FBQUEsSUFDakI7QUFBQSxFQUNGO0FBRUEsTUFBTSwyQ0FBMkMsQ0FDL0MsTUFDQSxjQUN5QjtBQUN6QixRQUFJLEtBQUssYUFBYSxHQUFHO0FBQ3ZCLFVBQUksY0FBYyxRQUFRO0FBQ3hCLGVBQU8sUUFBUTtBQUFBLE1BQ2pCO0FBQ0EsYUFBTyxRQUFRO0FBQUEsSUFDakIsT0FBTztBQUNMLFVBQUksY0FBYyxRQUFRO0FBQ3hCLGVBQU8sUUFBUTtBQUFBLE1BQ2pCO0FBQ0EsYUFBTyxRQUFRO0FBQUEsSUFDakI7QUFBQSxFQUNGO0FBYUEsTUFBTSw2Q0FBNkMsQ0FDakQsU0FDeUI7QUFDekIsUUFBSSxLQUFLLGFBQWEsR0FBRztBQUN2QixhQUFPLFFBQVE7QUFBQSxJQUNqQixPQUFPO0FBQ0wsYUFBTyxRQUFRO0FBQUEsSUFDakI7QUFBQSxFQUNGO0FBT08sV0FBUyxzQkFDZCxRQUNBLE9BQ0EsTUFDQSxTQUNRO0FBQ1IsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNsQixnQkFBVTtBQUFBLElBQ1o7QUFDQSxXQUFPLElBQUk7QUFBQSxNQUNUO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxNQUFNLE1BQU0sU0FBUyxDQUFDLEVBQUUsU0FBUztBQUFBLElBQ25DLEVBQUUsT0FBTyxPQUFPO0FBQUEsRUFDbEI7QUFrQ08sV0FBUyxvQkFDZCxRQUNBLFFBQ0EsS0FDQSxNQUNBLE9BQ0EsTUFDQSxVQUFvQyxNQUNkO0FBQ3RCLFVBQU0sT0FBTyxjQUFjLEtBQUssS0FBSztBQUNyQyxRQUFJLENBQUMsS0FBSyxJQUFJO0FBQ1osYUFBTztBQUFBLElBQ1Q7QUFFQSxVQUFNLGlCQUFpQixLQUFLLE1BQU0sU0FBUztBQUFBLE1BQ3pDLENBQUMsTUFBWSxjQUFzQixLQUFLLFVBQVUsU0FBUztBQUFBLElBQzdEO0FBSUEsVUFBTSxPQUFPO0FBQUEsTUFDWCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTDtBQUFBLE1BQ0E7QUFBQSxNQUNBLEtBQUs7QUFBQSxJQUNQO0FBQ0EsUUFBSSxDQUFDLEtBQUssSUFBSTtBQUNaLGFBQU87QUFBQSxJQUNUO0FBQ0EsVUFBTSxZQUFZLEtBQUssTUFBTTtBQUM3QixVQUFNLFNBQVMsS0FBSyxNQUFNO0FBQzFCLFVBQU0scUJBQXFCLEtBQUssc0JBQXNCLEtBQUssZUFBZTtBQUMxRSxVQUFNLG1DQUNKLEtBQUssTUFBTTtBQUNiLFVBQU0sbUNBQ0osS0FBSyxNQUFNO0FBRWIsVUFBTSxxQ0FBcUMsQ0FDekMsa0JBQ1c7QUFDWCxZQUFNLFlBQVksaUNBQWlDLElBQUksYUFBYTtBQUNwRSxVQUFJLGNBQWMsUUFBVztBQUMzQixlQUFPO0FBQUEsTUFDVDtBQUNBLFlBQU0sTUFBTSxLQUFLLGtCQUFrQixTQUFTO0FBQzVDLFVBQUksQ0FBQyxJQUFJLElBQUk7QUFDWCxlQUFPO0FBQUEsTUFDVDtBQUNBLFlBQU0sS0FBSyxJQUFJO0FBQ2YsY0FBUSxHQUFHLE9BQU87QUFBQSxRQUNoQixLQUFLO0FBQ0gsaUJBQU87QUFBQSxRQUNULEtBQUs7QUFDSCxpQkFBTyxHQUFHO0FBQUEsUUFDWixLQUFLO0FBQ0gsaUJBQU87QUFBQSxRQUNUO0FBQ0U7QUFDQSxpQkFBTztBQUFBLE1BQ1g7QUFBQSxJQUNGO0FBR0EsUUFBSSx3QkFBd0IsS0FBSztBQUdqQyxVQUFNLGtCQUErQixJQUFJLElBQUksS0FBSyxNQUFNLGVBQWU7QUFDdkUsWUFBUSxLQUFLLE1BQU07QUFHbkIsUUFBSSxxQkFBcUI7QUFDekIsUUFBSSxLQUFLLG9CQUFvQixNQUFNLEtBQUssU0FBUztBQUMvQywyQkFBcUIsS0FBSyxnQkFBZ0I7QUFDMUMsVUFBSSx1QkFBdUIsUUFBVztBQUNwQywyQkFBbUIsT0FBTyxRQUFRLENBQUMsVUFBa0I7QUFDbkQsK0JBQXFCLEtBQUssSUFBSSxvQkFBb0IsTUFBTSxNQUFNO0FBQUEsUUFDaEUsQ0FBQztBQUFBLE1BQ0g7QUFBQSxJQUNGO0FBRUEsVUFBTSxvQkFBb0IsTUFBTTtBQUNoQyxVQUFNLG9CQUFvQixNQUFNLE1BQU0sU0FBUyxDQUFDLEVBQUU7QUFDbEQsVUFBTSxRQUFRLElBQUk7QUFBQSxNQUNoQjtBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1Asb0JBQW9CO0FBQUEsTUFDcEI7QUFBQSxJQUNGO0FBRUEsVUFBTSxpQkFBaUIsTUFBTSxPQUFPLE9BQU8sY0FBYztBQUN6RCxVQUFNLGtCQUFrQixNQUFNLE9BQU8sT0FBTyxpQkFBaUI7QUFDN0QsVUFBTSxnQkFBZ0IsTUFBTSxPQUFPLE9BQU8sYUFBYTtBQUN2RCxVQUFNLGtCQUFrQixNQUFNLE9BQU8sT0FBTyxlQUFlO0FBQzNELFVBQU0saUJBQWlCLE1BQU0sT0FBTyxPQUFPLGNBQWM7QUFDekQsVUFBTSxpQkFBaUIsTUFBTSxPQUFPLE9BQU8sY0FBYztBQUV6RCxVQUFNLHNCQUFtQyxvQkFBSSxJQUFJO0FBQ2pELFVBQU0sUUFBUTtBQUFBLE1BQ1o7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsS0FBSyxNQUFNO0FBQUEsSUFDYjtBQUNBLFFBQUksQ0FBQyxNQUFNLElBQUk7QUFDYixhQUFPO0FBQUEsSUFDVDtBQUNBLFVBQU0saUJBQWlCLE1BQU0sTUFBTTtBQUNuQyxVQUFNLFlBQVksTUFBTSxNQUFNO0FBRzlCLGdCQUFZLEtBQUssTUFBTSxNQUFNO0FBQzdCLGdCQUFZLEtBQUssSUFBSTtBQUVyQixVQUFNLGFBQWEsSUFBSSxPQUFPO0FBQzlCLFVBQU0sYUFBYSxNQUFNLFFBQVEsR0FBRyxHQUFHLFFBQVEsbUJBQW1CO0FBQ2xFLFVBQU0sWUFBWSxPQUFPLFFBQVEsV0FBVztBQUM1QyxlQUFXLEtBQUssV0FBVyxHQUFHLEdBQUcsV0FBVyxPQUFPLE1BQU07QUFHekQsUUFBSSxHQUFHO0FBQ0wsVUFBSSxjQUFjO0FBQ2xCLFVBQUksWUFBWTtBQUNoQixVQUFJLFVBQVU7QUFDZCxVQUFJLE9BQU8sVUFBVTtBQUFBLElBQ3ZCO0FBRUEsUUFBSSxZQUFZLEtBQUssT0FBTyxJQUFJLFlBQVk7QUFDNUMsUUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLFlBQVk7QUFFOUMsUUFBSSxjQUFjLE1BQU07QUFDdEIsVUFBSSxLQUFLLFVBQVU7QUFDakI7QUFBQSxVQUNFO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQSxVQUNBO0FBQUEsVUFDQSxLQUFLLE9BQU8sSUFBSSxhQUFhO0FBQUEsUUFDL0I7QUFBQSxNQUNGO0FBRUEsVUFBSSx1QkFBdUIsVUFBYSxLQUFLLFNBQVM7QUFDcEQsMkJBQW1CLEtBQUssTUFBTSxvQkFBb0IsT0FBTyxTQUFTO0FBQUEsTUFDcEU7QUFBQSxJQUNGO0FBRUEsUUFBSSxZQUFZLEtBQUssT0FBTyxJQUFJLFlBQVk7QUFDNUMsUUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLFlBQVk7QUFFOUMsUUFBSSxLQUFLO0FBQ1QsUUFBSSxLQUFLLFVBQVU7QUFLbkIsVUFBTSxrQ0FHRixvQkFBSSxJQUFJO0FBR1osUUFBSSxLQUFLLFVBQVUsSUFBSTtBQUNyQixzQkFBZ0IsS0FBSyxLQUFLLE9BQU8sS0FBSyxRQUFRLEtBQUs7QUFBQSxJQUNyRDtBQUdBLFVBQU0sbUJBQTZCLENBQUM7QUFHcEMsY0FBVSxTQUFTLFFBQVEsQ0FBQyxNQUFZLGNBQXNCO0FBQzVELFlBQU0sTUFBTSxlQUFlLElBQUksU0FBUztBQUN4QyxZQUFNLE9BQU8sTUFBTSxTQUFTO0FBQzVCLFlBQU0sWUFBWSxNQUFNLFFBQVEsS0FBSyxLQUFLLE9BQU8sUUFBUSxhQUFhO0FBQ3RFLFlBQU0sVUFBVSxNQUFNLFFBQVEsS0FBSyxLQUFLLFFBQVEsUUFBUSxhQUFhO0FBQ3JFLFlBQU0sa0JBQWtCLG1DQUFtQyxTQUFTO0FBRXBFLFVBQUksWUFBWSxLQUFLLE9BQU8sSUFBSSxrQkFBa0I7QUFDbEQsVUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLGtCQUFrQjtBQUlwRCxVQUFJLEtBQUssd0JBQXdCO0FBQy9CO0FBQUEsVUFDRTtBQUFBLFVBQ0E7QUFBQSxVQUNBLEtBQUs7QUFBQSxVQUNMO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBRUEsVUFBSSxZQUFZO0FBQ2hCLFVBQUksZ0JBQWdCLElBQUksU0FBUyxHQUFHO0FBQ2xDLFlBQUksS0FBSyxRQUFRLFVBQVUsYUFBYSxrQkFBa0IsR0FBRztBQUMzRCxjQUFJLFlBQVk7QUFBQSxZQUNkO0FBQUEsWUFDQSxLQUFLLE9BQU8sSUFBSSxXQUFXO0FBQUEsWUFDM0IsS0FBSyxPQUFPLElBQUksU0FBUztBQUFBLFVBQzNCO0FBQ0EsY0FBSSxjQUFjLEtBQUssT0FBTyxJQUFJLFdBQVc7QUFBQSxRQUMvQyxPQUFPO0FBQ0wsY0FBSSxZQUFZO0FBQUEsWUFDZDtBQUFBLFlBQ0EsS0FBSyxPQUFPLElBQUksU0FBUztBQUFBLFlBQ3pCLEtBQUssT0FBTyxJQUFJLFNBQVM7QUFBQSxVQUMzQjtBQUNBLGNBQUksY0FBYyxLQUFLLE9BQU8sSUFBSSxTQUFTO0FBQUEsUUFDN0M7QUFBQSxNQUNGLE9BQU87QUFDTCxZQUFJLFlBQVk7QUFBQSxVQUNkO0FBQUEsVUFDQSxLQUFLLE9BQU8sSUFBSSxZQUFZO0FBQUEsVUFDNUIsS0FBSyxPQUFPLElBQUksU0FBUztBQUFBLFFBQzNCO0FBQ0EsWUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLFlBQVk7QUFBQSxNQUNoRDtBQUVBLFlBQU0sbUJBQW1CLE1BQU07QUFBQSxRQUM3QjtBQUFBLFFBQ0EsS0FBSztBQUFBLFFBQ0wsUUFBUTtBQUFBLE1BQ1Y7QUFDQSxZQUFNLHVCQUF1QixNQUFNO0FBQUEsUUFDakMsTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsUUFBUTtBQUFBLE1BQ1Y7QUFJQSxZQUFNLENBQUMsT0FBT0MsRUFBQyxJQUFJQyxZQUFXLGtCQUFrQixvQkFBb0I7QUFDcEUsVUFBSSxRQUFRLGdCQUFnQjtBQUMxQiw2QkFBcUIsSUFBSSxpQkFBaUIsSUFBSTtBQUFBLE1BQ2hEO0FBRUEsc0NBQWdDLElBQUksV0FBVztBQUFBLFFBQzdDLFNBQVM7QUFBQSxRQUNULGFBQWE7QUFBQSxRQUNiLG1CQUFtQjtBQUFBLE1BQ3JCLENBQUM7QUFDRCxVQUFJLEtBQUssVUFBVTtBQUNqQixZQUFJLFVBQVUsTUFBTSxRQUFRLEdBQUc7QUFDN0Isd0JBQWMsS0FBSyxXQUFXLGlCQUFpQixhQUFhO0FBQUEsUUFDOUQsT0FBTztBQUNMO0FBQUEsWUFDRTtBQUFBLFlBQ0E7QUFBQSxZQUNBO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxZQUNBO0FBQUEsWUFDQSxLQUFLLFFBQVEsVUFBVTtBQUFBLFVBQ3pCO0FBQUEsUUFDRjtBQUdBLFlBQUksY0FBYyxLQUFLLGNBQWMsb0JBQW9CLEdBQUc7QUFDMUQ7QUFBQSxZQUNFO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxZQUNBO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxZQUNBO0FBQUEsWUFDQSxpQ0FBaUMsSUFBSSxTQUFTO0FBQUEsWUFDOUM7QUFBQSxZQUNBO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDO0FBRUQsUUFBSSxZQUFZO0FBQ2hCLFFBQUksY0FBYyxLQUFLLE9BQU8sSUFBSSxrQkFBa0I7QUFHcEQsUUFBSSxLQUFLLFlBQVksS0FBSyxVQUFVO0FBQ2xDLFlBQU0sbUJBQW1DLENBQUM7QUFDMUMsWUFBTSxjQUE4QixDQUFDO0FBQ3JDLGdCQUFVLE1BQU0sUUFBUSxDQUFDQyxPQUFvQjtBQUUzQyxjQUFNLGdCQUFnQixpQ0FBaUMsSUFBSUEsR0FBRSxDQUFDO0FBQzlELFlBQUksa0JBQWtCLFVBQWEsS0FBSyxjQUFjLGFBQWEsR0FBRztBQUNwRTtBQUFBLFFBQ0Y7QUFFQSxZQUFJLGdCQUFnQixJQUFJQSxHQUFFLENBQUMsS0FBSyxnQkFBZ0IsSUFBSUEsR0FBRSxDQUFDLEdBQUc7QUFDeEQsMkJBQWlCLEtBQUtBLEVBQUM7QUFBQSxRQUN6QixPQUFPO0FBQ0wsc0JBQVksS0FBS0EsRUFBQztBQUFBLFFBQ3BCO0FBQUEsTUFDRixDQUFDO0FBRUQsVUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLGtCQUFrQjtBQUNwRDtBQUFBLFFBQ0U7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLFVBQVU7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFDQSxVQUFJLGNBQWMsS0FBSyxPQUFPLElBQUksU0FBUztBQUMzQztBQUFBLFFBQ0U7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLFVBQVU7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0EsUUFBSSxRQUFRO0FBR1osUUFBSSxLQUFLLGlCQUFpQixRQUFRLEtBQUssc0JBQXNCLGFBQWE7QUFFeEUsVUFBSSxLQUFLLGFBQWEsUUFBUSxHQUFHO0FBQy9CO0FBQUEsVUFDRTtBQUFBLFVBQ0E7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFVBQ0EsS0FBSyxhQUFhO0FBQUEsVUFDbEI7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUNBLFVBQUksS0FBSyxhQUFhLE1BQU0sbUJBQW1CO0FBQzdDO0FBQUEsVUFDRTtBQUFBLFVBQ0E7QUFBQSxVQUNBO0FBQUEsVUFDQSxLQUFLLGFBQWE7QUFBQSxVQUNsQixvQkFBb0I7QUFBQSxVQUNwQjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLFFBQUksOEJBQWtFO0FBQ3RFLFFBQUksdUJBQXFDO0FBRXpDLFFBQUksWUFBWSxNQUFNO0FBQ3BCLFlBQU0sYUFBYSxRQUFRLFdBQVcsSUFBSTtBQUUxQyxZQUFNLHFCQUFxQixJQUFJLFFBQW1DO0FBQUEsUUFDaEUsR0FBRyxnQ0FBZ0MsT0FBTztBQUFBLE1BQzVDLENBQUM7QUFHRCxVQUFJLDJCQUEyQjtBQUUvQixvQ0FBOEIsQ0FDNUIsT0FDQSxlQUNrQjtBQUVsQixjQUFNLElBQUksTUFBTSxJQUFJLE9BQU87QUFDM0IsY0FBTSxJQUFJLE1BQU0sSUFBSSxPQUFPO0FBQzNCLGNBQU0sZUFBZSxtQkFBbUIsSUFBSSxLQUFLO0FBQ2pELGNBQU0sb0JBQ0osaUJBQWlCLE9BQ2IsS0FDQSxpQ0FBaUM7QUFBQSxVQUMvQixhQUFjO0FBQUEsUUFDaEI7QUFHTixZQUNFLHNCQUFzQixLQUN0QixzQkFBc0IsS0FBSyxNQUFNLFNBQVMsU0FBUyxHQUNuRDtBQUNBLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksZUFBZSxhQUFhO0FBQzlCLGNBQUksc0JBQXNCLDBCQUEwQjtBQUNsRCxtQkFBTztBQUFBLFVBQ1Q7QUFBQSxRQUNGLE9BQU87QUFDTCxjQUFJLHNCQUFzQix1QkFBdUI7QUFDL0MsbUJBQU87QUFBQSxVQUNUO0FBQUEsUUFDRjtBQUVBLFlBQUksZUFBZSxhQUFhO0FBQzlCLHFDQUEyQjtBQUFBLFFBQzdCLE9BQU87QUFDTCxrQ0FBd0I7QUFBQSxRQUMxQjtBQUVBLG1CQUFXLFVBQVUsR0FBRyxHQUFHLFFBQVEsT0FBTyxRQUFRLE1BQU07QUFLeEQsWUFBSUMsV0FBVSxnQ0FBZ0M7QUFBQSxVQUM1QyxpQ0FBaUMsSUFBSSx3QkFBd0I7QUFBQSxRQUMvRDtBQUNBLFlBQUlBLGFBQVksUUFBVztBQUN6QjtBQUFBLFlBQ0U7QUFBQSxZQUNBQSxTQUFRO0FBQUEsWUFDUkEsU0FBUTtBQUFBLFlBQ1IsS0FBSyxPQUFPLElBQUksaUJBQWlCO0FBQUEsWUFDakM7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUdBLFFBQUFBLFdBQVUsZ0NBQWdDO0FBQUEsVUFDeEMsaUNBQWlDLElBQUkscUJBQXFCO0FBQUEsUUFDNUQ7QUFDQSxZQUFJQSxhQUFZLFFBQVc7QUFDekI7QUFBQSxZQUNFO0FBQUEsWUFDQUEsU0FBUTtBQUFBLFlBQ1JBLFNBQVE7QUFBQSxZQUNSLEtBQUssT0FBTyxJQUFJLGlCQUFpQjtBQUFBLFVBQ25DO0FBQUEsUUFDRjtBQUVBLGVBQU87QUFBQSxNQUNUO0FBR0EsWUFBTSxVQUFVLGdDQUFnQztBQUFBLFFBQzlDLGlDQUFpQyxJQUFJLHFCQUFxQjtBQUFBLE1BQzVEO0FBQ0EsVUFBSSxZQUFZLFFBQVc7QUFDekI7QUFBQSxVQUNFO0FBQUEsVUFDQSxRQUFRO0FBQUEsVUFDUixRQUFRO0FBQUEsVUFDUixLQUFLLE9BQU8sSUFBSSxpQkFBaUI7QUFBQSxRQUNuQztBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0Esb0NBQWdDLFFBQVEsQ0FBQyxPQUFhO0FBQ3BELFVBQUkseUJBQXlCLE1BQU07QUFDakMsK0JBQXVCLEdBQUc7QUFDMUI7QUFBQSxNQUNGO0FBQ0EsVUFBSSxHQUFHLFFBQVEsSUFBSSxxQkFBcUIsR0FBRztBQUN6QywrQkFBdUIsR0FBRztBQUFBLE1BQzVCO0FBQUEsSUFDRixDQUFDO0FBRUQsUUFDRSxLQUFLLHNCQUFzQixNQUMzQixpQ0FBaUMsSUFBSSxLQUFLLGlCQUFpQixHQUMzRDtBQUNBLDZCQUF1QixnQ0FBZ0M7QUFBQSxRQUNyRCxpQ0FBaUMsSUFBSSxLQUFLLGlCQUFpQjtBQUFBO0FBQUEsTUFDN0QsRUFBRztBQUFBLElBQ0w7QUFJQSxRQUFJLG1CQUFpQztBQUNyQyxRQUFJLHlCQUF5QixNQUFNO0FBQ2pDLHlCQUFtQjtBQUFBLFFBQ2pCLHFCQUFxQixJQUFJLE9BQU87QUFBQSxRQUNoQyxxQkFBcUIsSUFBSSxPQUFPO0FBQUEsTUFDbEM7QUFBQSxJQUNGO0FBRUEsV0FBTyxHQUFHO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxNQUNBLHNCQUFzQjtBQUFBLElBQ3hCLENBQUM7QUFBQSxFQUNIO0FBRUEsV0FBUyxVQUNQLEtBQ0EsTUFDQSxPQUNBLE9BQ0EsT0FDQSxPQUNBLGdCQUNBLGdCQUNBLGlCQUNBLGdCQUNBO0FBQ0EsVUFBTSxRQUFRLENBQUNELE9BQW9CO0FBQ2pDLFlBQU0sV0FBaUIsTUFBTUEsR0FBRSxDQUFDO0FBQ2hDLFlBQU0sV0FBaUIsTUFBTUEsR0FBRSxDQUFDO0FBQ2hDLFlBQU0sVUFBZ0IsTUFBTUEsR0FBRSxDQUFDO0FBQy9CLFlBQU0sVUFBZ0IsTUFBTUEsR0FBRSxDQUFDO0FBQy9CLFlBQU0sU0FBUyxlQUFlLElBQUlBLEdBQUUsQ0FBQztBQUNyQyxZQUFNLFNBQVMsZUFBZSxJQUFJQSxHQUFFLENBQUM7QUFDckMsWUFBTSxTQUFTLFNBQVM7QUFDeEIsWUFBTSxTQUFTLFNBQVM7QUFFeEIsVUFBSSxlQUFlLElBQUlBLEdBQUUsQ0FBQyxLQUFLLGVBQWUsSUFBSUEsR0FBRSxDQUFDLEdBQUc7QUFDdEQsWUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLFNBQVM7QUFDM0MsWUFBSSxZQUFZLEtBQUssT0FBTyxJQUFJLFNBQVM7QUFBQSxNQUMzQyxPQUFPO0FBQ0wsWUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLGtCQUFrQjtBQUNwRCxZQUFJLFlBQVksS0FBSyxPQUFPLElBQUksa0JBQWtCO0FBQUEsTUFDcEQ7QUFFQTtBQUFBLFFBQ0U7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUVBLFdBQVMsaUJBQ1AsS0FDQSxNQUNBLE9BQ0EsVUFDQSxRQUNBLG1CQUNBO0FBQ0EsVUFBTSxVQUFVLE1BQU0sUUFBUSxHQUFHLFVBQVUsUUFBUSxlQUFlO0FBQ2xFLFVBQU0sY0FBYyxNQUFNO0FBQUEsTUFDeEI7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsSUFDVjtBQUNBLFFBQUksWUFBWSxLQUFLLE9BQU8sSUFBSSxxQkFBcUI7QUFDckQsUUFBSTtBQUFBLE1BQ0YsUUFBUTtBQUFBLE1BQ1IsUUFBUTtBQUFBLE1BQ1IsWUFBWSxJQUFJLFFBQVE7QUFBQSxNQUN4QixZQUFZLElBQUksUUFBUTtBQUFBLElBQzFCO0FBQUEsRUFDRjtBQUVBLFdBQVMsc0JBQ1AsS0FDQSxRQUNBLFFBQ0EsT0FDQSxRQUNBLFNBQ0EsUUFDQSxTQUNBLGdCQUNBLGlCQUNBO0FBQ0EsUUFBSSxXQUFXLFFBQVE7QUFDckI7QUFBQSxRQUNFO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUFBLElBQ0YsT0FBTztBQUNMO0FBQUEsUUFDRTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLFdBQVMsWUFDUCxLQUNBLE1BQ0EsUUFDQTtBQUNBLFFBQUksWUFBWSxLQUFLLE9BQU8sSUFBSSxZQUFZO0FBQzVDLFFBQUksY0FBYyxLQUFLLE9BQU8sSUFBSSxlQUFlO0FBQ2pELFFBQUksU0FBUyxHQUFHLEdBQUcsT0FBTyxPQUFPLE9BQU8sTUFBTTtBQUFBLEVBQ2hEO0FBRUEsV0FBUyxZQUFZLEtBQStCLE1BQXFCO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLEtBQUssVUFBVTtBQUFBLEVBQy9CO0FBR0EsV0FBUyx1QkFDUCxLQUNBLE9BQ0EsUUFDQSxRQUNBLFNBQ0EsUUFDQSxTQUNBLFFBQ0EsaUJBQ0EsZ0JBQ0E7QUFFQSxRQUFJLFVBQVU7QUFDZCxVQUFNLFlBQXVCLFNBQVMsU0FBUyxTQUFTO0FBQ3hELFVBQU0sZ0JBQWdCLE1BQU07QUFBQSxNQUMxQjtBQUFBLE1BQ0E7QUFBQSxNQUNBLDBDQUEwQyxTQUFTLFNBQVM7QUFBQSxJQUM5RDtBQUNBLFVBQU0sY0FBYyxNQUFNO0FBQUEsTUFDeEI7QUFBQSxNQUNBO0FBQUEsTUFDQSwyQ0FBMkMsT0FBTztBQUFBLElBQ3BEO0FBQ0EsUUFBSSxPQUFPLGNBQWMsSUFBSSxLQUFLLGNBQWMsQ0FBQztBQUNqRCxRQUFJLE9BQU8sY0FBYyxJQUFJLEtBQUssWUFBWSxDQUFDO0FBRy9DLFVBQU0sZ0JBQWdCO0FBQ3RCLFVBQU0sY0FBYyxNQUFNO0FBQUEsTUFDeEI7QUFBQSxNQUNBO0FBQUEsTUFDQSwyQ0FBMkMsT0FBTztBQUFBLElBQ3BEO0FBQ0EsUUFBSSxPQUFPLGNBQWMsSUFBSSxLQUFLLGNBQWMsQ0FBQztBQUNqRCxRQUFJLE9BQU8sWUFBWSxJQUFJLEtBQUssWUFBWSxDQUFDO0FBRTdDLFFBQUksT0FBTztBQUlYLFFBQUksVUFBVTtBQUNkLFFBQUksT0FBTyxZQUFZLElBQUksS0FBSyxZQUFZLENBQUM7QUFDN0MsUUFBSTtBQUFBLE1BQ0YsWUFBWSxJQUFJLGtCQUFrQjtBQUFBLE1BQ2xDLFlBQVksSUFBSTtBQUFBLElBQ2xCO0FBQ0EsUUFBSTtBQUFBLE1BQ0YsWUFBWSxJQUFJLGtCQUFrQjtBQUFBLE1BQ2xDLFlBQVksSUFBSTtBQUFBLElBQ2xCO0FBQ0EsUUFBSSxLQUFLO0FBQUEsRUFDWDtBQUVBLFdBQVMsd0JBQ1AsS0FDQSxPQUNBLFFBQ0EsUUFDQSxTQUNBLFFBQ0EsUUFDQSxTQUNBLGdCQUNBLGlCQUNBO0FBQ0EsVUFBTSxZQUF1QixTQUFTLFNBQVMsU0FBUztBQUN4RCxVQUFNLGFBQWEsTUFBTTtBQUFBLE1BQ3ZCO0FBQUEsTUFDQTtBQUFBLE1BQ0EsMENBQTBDLFNBQVMsU0FBUztBQUFBLElBQzlEO0FBQ0EsVUFBTSxXQUFXLE1BQU07QUFBQSxNQUNyQjtBQUFBLE1BQ0E7QUFBQSxNQUNBLHlDQUF5QyxTQUFTLFNBQVM7QUFBQSxJQUM3RDtBQUVBLFFBQUksVUFBVTtBQUNkLFFBQUksT0FBTyxXQUFXLElBQUksS0FBSyxXQUFXLENBQUM7QUFDM0MsUUFBSSxPQUFPLFNBQVMsSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUV2QyxRQUFJLE9BQU87QUFHWCxRQUFJLFVBQVU7QUFDZCxVQUFNLFNBQVMsY0FBYyxTQUFTLENBQUMsa0JBQWtCO0FBQ3pELFFBQUksT0FBTyxTQUFTLElBQUksS0FBSyxTQUFTLENBQUM7QUFDdkMsUUFBSSxPQUFPLFNBQVMsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLElBQUksTUFBTTtBQUNqRSxRQUFJLE9BQU8sU0FBUyxJQUFJLGlCQUFpQixLQUFLLFNBQVMsSUFBSSxNQUFNO0FBQ2pFLFFBQUksS0FBSztBQUFBLEVBQ1g7QUFFQSxXQUFTLGFBQ1AsS0FDQSxNQUNBLE9BQ0EsS0FDQSxNQUNBLE1BQ0EsV0FDQSxtQkFDQSxXQUNBLFFBQ0E7QUFDQSxRQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2pCO0FBQUEsSUFDRjtBQUNBLFVBQU0sUUFBUSxPQUFPLFNBQVM7QUFFOUIsUUFBSSxlQUFlLEtBQUs7QUFDeEIsUUFBSSxjQUFjO0FBRWxCLFFBQUksS0FBSyxpQkFBaUIsUUFBUSxLQUFLLHNCQUFzQixZQUFZO0FBQ3ZFLFVBQUksS0FBSyxhQUFhLEdBQUcsS0FBSyxLQUFLLEdBQUc7QUFDcEMsdUJBQWUsS0FBSztBQUNwQixzQkFBYztBQUFBLE1BQ2hCLFdBQVcsS0FBSyxhQUFhLEdBQUcsS0FBSyxNQUFNLEdBQUc7QUFDNUMsdUJBQWUsS0FBSztBQUNwQixjQUFNLE9BQU8sSUFBSSxZQUFZLEtBQUs7QUFDbEMsc0JBQWMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxNQUFNLE9BQU8sT0FBTyxXQUFXO0FBQUEsTUFDakUsV0FDRSxLQUFLLFFBQVEsS0FBSyxhQUFhLFNBQy9CLEtBQUssU0FBUyxLQUFLLGFBQWEsS0FDaEM7QUFDQSx1QkFBZSxLQUFLLGFBQWE7QUFDakMsc0JBQWMsWUFBWTtBQUFBLE1BQzVCO0FBQUEsSUFDRjtBQUNBLFFBQUksWUFBWTtBQUNoQixRQUFJLFlBQVksS0FBSyxPQUFPLElBQUksWUFBWTtBQUM1QyxRQUFJLGVBQWU7QUFDbkIsVUFBTSxZQUFZLE1BQU0sUUFBUSxLQUFLLGNBQWMsUUFBUSxTQUFTO0FBQ3BFLFFBQUksU0FBUyxPQUFPLFVBQVUsSUFBSSxhQUFhLFVBQVUsQ0FBQztBQUFBLEVBQzVEO0FBRUEsV0FBUyxZQUNQLEtBQ0EsTUFDQSxXQUNBLFNBQ0EsZ0JBQ0EsaUJBQ0EsYUFDQTtBQUNBLFFBQUk7QUFBQSxNQUNGLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxNQUNWLFFBQVEsSUFBSSxVQUFVO0FBQUEsTUFDdEI7QUFBQSxJQUNGO0FBQ0EsWUFBUSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDaEMsWUFBUSxJQUFJLElBQUksU0FBUztBQUN6QixRQUFJO0FBQUEsTUFDRixVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsTUFDVixRQUFRLElBQUksVUFBVTtBQUFBLE1BQ3RCO0FBQUEsSUFDRjtBQUVBLFFBQUksYUFBYTtBQUNmLFVBQUksb0JBQW9CLEdBQUc7QUFDekIsWUFBSSxvQkFBb0IsS0FBSztBQUMzQixjQUFJLFlBQVksS0FBSyxPQUFPLElBQUksWUFBWTtBQUM1QyxjQUFJLGNBQWMsS0FBSyxPQUFPLElBQUksWUFBWTtBQUFBLFFBQ2hELE9BQU87QUFDTCxjQUFJLFlBQVksS0FBSyxPQUFPLElBQUksV0FBVztBQUMzQyxjQUFJLGNBQWMsS0FBSyxPQUFPLElBQUksV0FBVztBQUFBLFFBQy9DO0FBRUEsWUFBSTtBQUFBLFVBQ0YsVUFBVTtBQUFBLFVBQ1YsVUFBVTtBQUFBLFdBQ1IsUUFBUSxJQUFJLFVBQVUsS0FBSyxrQkFBbUI7QUFBQSxVQUNoRDtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxXQUFTLGtCQUNQLEtBQ0EsZ0JBQ0EsY0FDQSxPQUNBLGFBQ0E7QUFDQSxRQUFJLGNBQWM7QUFDbEIsUUFBSSxZQUFZO0FBQ2hCLFFBQUk7QUFBQSxNQUNGLGVBQWU7QUFBQSxNQUNmLGVBQWU7QUFBQSxNQUNmLGFBQWEsSUFBSSxlQUFlO0FBQUEsTUFDaEMsYUFBYSxJQUFJLGVBQWU7QUFBQSxJQUNsQztBQUFBLEVBQ0Y7QUFFQSxXQUFTLHVCQUNQLEtBQ0EsZ0JBQ0EsY0FDQSxPQUNBO0FBQ0EsUUFBSSxZQUFZO0FBQ2hCLFFBQUk7QUFBQSxNQUNGLGVBQWU7QUFBQSxNQUNmLGVBQWU7QUFBQSxNQUNmLGFBQWEsSUFBSSxlQUFlO0FBQUEsTUFDaEMsYUFBYSxJQUFJLGVBQWU7QUFBQSxJQUNsQztBQUFBLEVBQ0Y7QUFFQSxXQUFTLGNBQ1AsS0FDQSxXQUNBLGlCQUNBLGVBQ0E7QUFDQSxRQUFJLFVBQVU7QUFDZCxRQUFJLFlBQVksZ0JBQWdCO0FBQ2hDLFFBQUksT0FBTyxVQUFVLEdBQUcsVUFBVSxJQUFJLGVBQWU7QUFDckQsUUFBSSxPQUFPLFVBQVUsSUFBSSxpQkFBaUIsVUFBVSxDQUFDO0FBQ3JELFFBQUksT0FBTyxVQUFVLEdBQUcsVUFBVSxJQUFJLGVBQWU7QUFDckQsUUFBSSxPQUFPLFVBQVUsSUFBSSxpQkFBaUIsVUFBVSxDQUFDO0FBQ3JELFFBQUksVUFBVTtBQUNkLFFBQUksT0FBTztBQUFBLEVBQ2I7QUFFQSxNQUFNLGtCQUFrQixDQUN0QixLQUNBLE9BQ0EsUUFDQSxVQUNHO0FBQ0gsVUFBTSxnQkFBZ0IsTUFBTSxRQUFRLEdBQUcsT0FBTyxRQUFRLGFBQWE7QUFDbkUsVUFBTSxZQUFZLE1BQU0sT0FBTyxPQUFPLFNBQVM7QUFFL0MsUUFBSSxVQUFVO0FBQ2QsUUFBSSxZQUFZLE1BQU0sT0FBTyxlQUFlLElBQUk7QUFDaEQsUUFBSSxjQUFjLE9BQU8sSUFBSSxPQUFPO0FBQ3BDLFFBQUksT0FBTyxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQzNDLFFBQUksT0FBTyxjQUFjLEdBQUcsY0FBYyxJQUFJLFNBQVM7QUFDdkQsUUFBSSxPQUFPO0FBQUEsRUFDYjtBQUVBLE1BQU0sNEJBQTRCLENBQ2hDLEtBQ0EsS0FDQSxLQUNBLE1BQ0EsTUFDQSxPQUNBLHFCQUNBLHFCQUNHO0FBQ0gsUUFBSSxvQkFBb0IsSUFBSSxHQUFHLEdBQUc7QUFDaEM7QUFBQSxJQUNGO0FBQ0Esd0JBQW9CLElBQUksR0FBRztBQUMzQixVQUFNLGdCQUFnQixNQUFNLFFBQVEsS0FBSyxLQUFLLFFBQVEsYUFBYTtBQUduRSxRQUNFLGlCQUFpQjtBQUFBLE1BQ2YsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNLGNBQWMsS0FBSyxTQUFTLGNBQWMsS0FBSztBQUFBLElBQ25FLE1BQU0sSUFDTjtBQUNBO0FBQUEsSUFDRjtBQUVBLFVBQU0sY0FBYyxNQUFNO0FBQUEsTUFDeEI7QUFBQSxNQUNBO0FBQUEsTUFDQSx5Q0FBeUMsTUFBTSxNQUFNO0FBQUEsSUFDdkQ7QUFDQSxRQUFJLFlBQVk7QUFDaEIsUUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLHFCQUFxQjtBQUV2RCxRQUFJLE9BQU8sY0FBYyxJQUFJLEtBQUssY0FBYyxDQUFDO0FBQ2pELFFBQUksT0FBTyxjQUFjLElBQUksS0FBSyxZQUFZLENBQUM7QUFDL0MsUUFBSSxPQUFPO0FBRVgsUUFBSSxZQUFZLENBQUMsQ0FBQztBQUVsQixRQUFJLFlBQVksS0FBSyxPQUFPLElBQUksWUFBWTtBQUM1QyxRQUFJLGVBQWU7QUFDbkIsVUFBTSxZQUFZLE1BQU0sUUFBUSxLQUFLLEtBQUssUUFBUSxhQUFhO0FBQy9ELFVBQU0sUUFBUSxLQUFLLGdCQUFnQixHQUFHO0FBQ3RDLFVBQU0sT0FBTyxJQUFJLFlBQVksS0FBSztBQUNsQyxVQUFNLFlBQVksY0FBYztBQUNoQyxVQUFNLFVBQVUsVUFBVSxJQUFJLEtBQUs7QUFDbkMsUUFDRSxLQUFLLFdBQ0wsS0FBSztBQUFBLElBRUwsaUJBQWlCLFVBQVUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNO0FBQzNDLGFBQ0csYUFBYSxTQUFTLFdBQVcsU0FDakMsYUFBYSxPQUFPLFdBQVc7QUFBQSxJQUVwQyxDQUFDLE1BQU0sSUFDUDtBQUNBLFVBQUksU0FBUyxHQUFHLEtBQUssSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQ2pELHVCQUFpQixLQUFLLENBQUMsV0FBVyxPQUFPLENBQUM7QUFBQSxJQUM1QztBQUFBLEVBQ0Y7QUFpQkEsTUFBTSw0QkFBNEIsQ0FDaEMsTUFDQSxvQkFDQSxXQUNBLGlCQUNpQztBQUVqQyxVQUFNLGlCQUFpQixJQUFJO0FBQUE7QUFBQTtBQUFBLE1BR3pCLGFBQWEsSUFBSSxDQUFDLFdBQW1CRSxTQUFnQixDQUFDLFdBQVdBLElBQUcsQ0FBQztBQUFBLElBQ3ZFO0FBRUEsUUFBSSx1QkFBdUIsUUFBVztBQUNwQyxhQUFPLEdBQUc7QUFBQSxRQUNSO0FBQUEsUUFDQSxXQUFXO0FBQUEsUUFDWCxvQkFBb0I7QUFBQSxNQUN0QixDQUFDO0FBQUEsSUFDSDtBQUVBLFVBQU0saUJBQWlCO0FBQ3ZCLFVBQU0sa0JBQWtCLFVBQVUsU0FBUyxTQUFTO0FBQ3BELFVBQU0sWUFBWSxDQUFDLGdCQUFnQixlQUFlO0FBSWxELFVBQU0sU0FBUyxvQkFBSSxJQUFzQjtBQUN6QyxpQkFBYSxRQUFRLENBQUMsY0FBc0I7QUFDMUMsWUFBTSxnQkFDSixVQUFVLFNBQVMsU0FBUyxFQUFFLFlBQVksS0FBSyxlQUFlLEtBQUs7QUFDckUsWUFBTSxlQUFlLE9BQU8sSUFBSSxhQUFhLEtBQUssQ0FBQztBQUNuRCxtQkFBYSxLQUFLLFNBQVM7QUFDM0IsYUFBTyxJQUFJLGVBQWUsWUFBWTtBQUFBLElBQ3hDLENBQUM7QUFFRCxVQUFNLE1BQU0sb0JBQUksSUFBb0I7QUFJcEMsUUFBSSxJQUFJLEdBQUcsQ0FBQztBQUdaLFFBQUksTUFBTTtBQUVWLFVBQU0sWUFBbUMsb0JBQUksSUFBSTtBQUNqRCx1QkFBbUIsT0FBTztBQUFBLE1BQ3hCLENBQUMsZUFBdUIsa0JBQTBCO0FBQ2hELGNBQU0sYUFBYTtBQUNuQixTQUFDLE9BQU8sSUFBSSxhQUFhLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxjQUFzQjtBQUMvRCxjQUFJLFVBQVUsU0FBUyxTQUFTLEdBQUc7QUFDakM7QUFBQSxVQUNGO0FBQ0EsY0FBSSxJQUFJLFdBQVcsR0FBRztBQUN0QjtBQUFBLFFBQ0YsQ0FBQztBQUNELGtCQUFVLElBQUksZUFBZSxFQUFFLE9BQU8sWUFBWSxRQUFRLElBQUksQ0FBQztBQUFBLE1BQ2pFO0FBQUEsSUFDRjtBQUNBLFFBQUksSUFBSSxpQkFBaUIsR0FBRztBQUU1QixXQUFPLEdBQUc7QUFBQSxNQUNSLGdCQUFnQjtBQUFBLE1BQ2hCO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFFQSxNQUFNLHlCQUF5QixDQUM3QixLQUNBLE9BQ0EsV0FDQSxtQkFDQSxlQUNHO0FBQ0gsUUFBSSxZQUFZO0FBRWhCLFFBQUksUUFBUTtBQUNaLGNBQVUsUUFBUSxDQUFDLGFBQXVCO0FBQ3hDLFlBQU0sVUFBVSxNQUFNO0FBQUEsUUFDcEIsU0FBUztBQUFBLFFBQ1Q7QUFBQSxRQUNBLFFBQVE7QUFBQSxNQUNWO0FBQ0EsWUFBTSxjQUFjLE1BQU07QUFBQSxRQUN4QixTQUFTO0FBQUEsUUFDVCxvQkFBb0I7QUFBQSxRQUNwQixRQUFRO0FBQUEsTUFDVjtBQUNBO0FBRUEsVUFBSSxRQUFRLEtBQUssR0FBRztBQUNsQjtBQUFBLE1BQ0Y7QUFDQSxVQUFJO0FBQUEsUUFDRixRQUFRO0FBQUEsUUFDUixRQUFRO0FBQUEsUUFDUixZQUFZLElBQUksUUFBUTtBQUFBLFFBQ3hCLFlBQVksSUFBSSxRQUFRO0FBQUEsTUFDMUI7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBRUEsTUFBTSxxQkFBcUIsQ0FDekIsS0FDQSxNQUNBLG9CQUNBLE9BQ0EsY0FDRztBQUNILFFBQUksVUFBVyxLQUFJLFlBQVk7QUFDL0IsUUFBSSxZQUFZLEtBQUssT0FBTyxJQUFJLFlBQVk7QUFDNUMsVUFBTSxnQkFBZ0IsTUFBTSxRQUFRLEdBQUcsR0FBRyxRQUFRLGFBQWE7QUFFL0QsUUFBSSxLQUFLLGFBQWE7QUFDcEIsVUFBSSxlQUFlO0FBQ25CLFVBQUksU0FBUyxLQUFLLGlCQUFpQixjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQUEsSUFDckU7QUFFQSxRQUFJLEtBQUssVUFBVTtBQUNqQixVQUFJLGVBQWU7QUFDbkIsZ0JBQVUsUUFBUSxDQUFDLFVBQW9CLGtCQUEwQjtBQUMvRCxZQUFJLFNBQVMsVUFBVSxTQUFTLFFBQVE7QUFDdEM7QUFBQSxRQUNGO0FBQ0EsY0FBTSxZQUFZLE1BQU07QUFBQSxVQUN0QixTQUFTO0FBQUEsVUFDVDtBQUFBLFVBQ0EsUUFBUTtBQUFBLFFBQ1Y7QUFDQSxZQUFJO0FBQUEsVUFDRixtQkFBbUIsT0FBTyxhQUFhO0FBQUEsVUFDdkMsVUFBVTtBQUFBLFVBQ1YsVUFBVTtBQUFBLFFBQ1o7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjtBQUdBLE1BQU0sV0FBdUMsb0JBQUksSUFBSTtBQUVyRCxNQUFNLGFBQWEsQ0FDakIsS0FDQSxPQUNBLGVBQ3lCO0FBQ3pCLFVBQU0sTUFBTSxHQUFHLEtBQUssSUFBSSxVQUFVO0FBQ2xDLFFBQUksTUFBTSxTQUFTLElBQUksR0FBRztBQUMxQixRQUFJLFFBQVEsUUFBVztBQUNyQixhQUFPO0FBQUEsSUFDVDtBQUVBLFVBQU0sU0FBUyxTQUFTLGNBQWMsUUFBUTtBQUM5QyxXQUFPLFFBQVE7QUFDZixXQUFPLFNBQVM7QUFFaEIsVUFBTSxPQUFPLE9BQU8sV0FBVyxJQUFJO0FBRW5DLFNBQUssWUFBWTtBQUNqQixTQUFLLFNBQVMsR0FBRyxHQUFHLE9BQU8sT0FBTyxPQUFPLE1BQU07QUFDL0MsU0FBSyxjQUFjO0FBQ25CLFNBQUssWUFBWTtBQUNqQixTQUFLLE9BQU8sR0FBRyxDQUFDO0FBQ2hCLFNBQUssT0FBTyxHQUFHLENBQUM7QUFDaEIsU0FBSyxPQUFPO0FBRVosVUFBTSxJQUFJLGNBQWMsUUFBUSxRQUFRO0FBQ3hDLGFBQVMsSUFBSSxLQUFLLEdBQUc7QUFDckIsV0FBTztBQUFBLEVBQ1Q7OztBQzF4Q0EsTUFBTSxtQkFBbUI7QUFBQSxJQUN2QjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0Y7QUFJTyxNQUFNLFNBQU4sTUFBYTtBQUFBLElBQ2xCLFNBQXVDLG9CQUFJLElBQUk7QUFBQSxJQUMvQyxZQUFvQjtBQUFBLElBRXBCLGdCQUFnQixLQUFrQjtBQUNoQyxZQUFNLFFBQVEsaUJBQWlCLEdBQUc7QUFDbEMsdUJBQWlCLFFBQVEsQ0FBQyxRQUFRO0FBQ2hDLGFBQUssT0FBTyxJQUFJLEtBQUssTUFBTSxpQkFBaUIsS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUFBLE1BQ3pELENBQUM7QUFDRCxXQUFLLFlBQ0gsQ0FBQyxNQUFNLGlCQUFpQixXQUFXLEVBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQyxJQUNsRCxPQUFPLG1CQUNQO0FBQ0YsVUFBSSxLQUFLLGNBQWMsR0FBRztBQUN4QixhQUFLLFlBQVk7QUFBQSxNQUNuQjtBQUFBLElBQ0Y7QUFBQSxJQUVBLFdBQW1CO0FBQ2pCLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBLElBQUksS0FBOEI7QUFDaEMsYUFBTyxLQUFLLE9BQU8sSUFBSSxHQUFHLEtBQUs7QUFBQSxJQUNqQztBQUFBLEVBQ0Y7OztBQ25DQSxNQUFNLFNBQW1CLENBQUMsUUFBUSxVQUFVLFNBQVMsT0FBTztBQUM1RCxNQUFNLGdCQUErQixDQUFDLE9BQU8sWUFBWSxNQUFNO0FBRS9ELE1BQU0sV0FBVztBQUVqQixNQUFNQyxVQUFTLENBQUNDLE9BQXNCO0FBQ3BDLFdBQU8sS0FBSyxNQUFNLEtBQUssT0FBTyxJQUFJQSxFQUFDO0FBQUEsRUFDckM7QUFFQSxNQUFNLGNBQWMsTUFBYztBQUNoQyxXQUFPRCxRQUFPLFFBQVE7QUFBQSxFQUN4QjtBQUVBLE1BQU0saUJBQWlCLE1BQ3JCLGNBQWNBLFFBQU8sY0FBYyxNQUFNLENBQUM7QUFFckMsTUFBTSxzQkFBc0IsTUFBWTtBQUM3QyxVQUFNLE9BQU8sSUFBSSxLQUFLO0FBQ3RCLFVBQU0sTUFBTTtBQUFBLE1BQ1Y7QUFBQSxRQUNFLCtCQUErQixDQUFDO0FBQUEsUUFDaEMsaUJBQWlCLFlBQVksSUFBSSxDQUFDO0FBQUEsUUFDbEMsbUJBQW1CLGVBQWUsT0FBTyxDQUFDO0FBQUEsTUFDNUM7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUVBLGtCQUFjLEdBQUc7QUFDakIsV0FBTztBQUFBLEVBQ1Q7QUFFTyxNQUFNLHFCQUFxQixNQUFZO0FBQzVDLFVBQU0sT0FBTyxJQUFJLEtBQUs7QUFFdEIsVUFBTSxNQUFZLENBQUMsY0FBYyxRQUFRLENBQUM7QUFFMUMsV0FBTyxRQUFRLENBQUMsV0FBbUI7QUFDakMsVUFBSSxLQUFLLG9CQUFvQixVQUFVLE1BQU0sQ0FBQztBQUFBLElBQ2hELENBQUM7QUFDRCxRQUFJLEtBQUssdUJBQXVCLFVBQVUsRUFBRSxDQUFDO0FBRTdDLFFBQUk7QUFBQSxNQUNGLFlBQVksZUFBZSxJQUFJLGlCQUFpQixJQUFJLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQztBQUFBLE1BQ3ZFLCtCQUErQixDQUFDO0FBQUEsTUFDaEMsaUJBQWlCLFlBQVksWUFBWSxHQUFHLENBQUM7QUFBQSxNQUM3QyxjQUFjLEdBQUcsZUFBZSxDQUFDO0FBQUEsTUFDakMsbUJBQW1CLFVBQVUsT0FBT0EsUUFBTyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFBQSxNQUM3RCxtQkFBbUIsZUFBZSxlQUFlLEdBQUcsQ0FBQztBQUFBLElBQ3ZEO0FBRUEsUUFBSSxXQUFXO0FBQ2YsYUFBU0UsS0FBSSxHQUFHQSxLQUFJLElBQUlBLE1BQUs7QUFDM0IsVUFBSSxRQUFRRixRQUFPLFFBQVEsSUFBSTtBQUMvQixVQUFJO0FBQUEsUUFDRixZQUFZLEtBQUs7QUFBQSxRQUNqQixpQkFBaUIsWUFBWSxZQUFZLEdBQUcsUUFBUSxDQUFDO0FBQUEsUUFDckQsY0FBYyxRQUFRLEdBQUcsZUFBZSxDQUFDO0FBQUEsUUFDekMsbUJBQW1CLFVBQVUsT0FBT0EsUUFBTyxPQUFPLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUFBLFFBQ3JFLG1CQUFtQixlQUFlLGVBQWUsR0FBRyxRQUFRLENBQUM7QUFBQSxNQUMvRDtBQUNBO0FBQ0EsY0FBUUEsUUFBTyxRQUFRLElBQUk7QUFDM0IsVUFBSTtBQUFBLFFBQ0YsVUFBVSxLQUFLO0FBQUEsUUFDZixpQkFBaUIsWUFBWSxZQUFZLEdBQUcsUUFBUSxDQUFDO0FBQUEsUUFDckQsY0FBYyxRQUFRLEdBQUcsZUFBZSxDQUFDO0FBQUEsUUFDekMsbUJBQW1CLFVBQVUsT0FBT0EsUUFBTyxPQUFPLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUFBLFFBQ3JFLG1CQUFtQixlQUFlLGVBQWUsR0FBRyxRQUFRLENBQUM7QUFBQSxNQUMvRDtBQUNBO0FBQUEsSUFDRjtBQUVBLFVBQU0sTUFBTSxrQkFBa0IsS0FBSyxJQUFJO0FBRXZDLGtCQUFjLEdBQUc7QUFDakIsV0FBTztBQUFBLEVBQ1Q7QUFFQSxNQUFNLFFBQVE7QUFBQSxJQUNaO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNGO0FBRUEsTUFBTSxjQUFjLE1BQU07QUFFMUIsTUFBTSxpQkFBaUIsTUFDckIsR0FBRyxNQUFNQSxRQUFPLFdBQVcsQ0FBQyxDQUFDLElBQUksTUFBTUEsUUFBTyxXQUFXLENBQUMsQ0FBQzs7O0FDN0t0RCxNQUFNLFVBQVUsSUFBSSxXQUFXO0FBQUEsSUFDcEM7QUFBQSxJQUFNO0FBQUEsSUFBTTtBQUFBLElBQU07QUFBQSxJQUFNO0FBQUEsSUFBTTtBQUFBLElBQU07QUFBQSxJQUFNO0FBQUEsRUFDNUMsQ0FBQztBQVNNLE1BQU0sY0FBTixN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LG9CQUFvQjsiLAogICJuYW1lcyI6IFsiXyIsICJyZXN1bHQiLCAiaSIsICJoaWdobGlnaHQiLCAicGFydHMiLCAiUmVzdWx0IiwgImEiLCAiYiIsICJzIiwgInNjb3JlIiwgImoiLCAieCIsICJyIiwgImUiLCAibyIsICJ2IiwgImMiLCAiZiIsICJnbG9iYWwiLCAiZ2xvYmFsVGhpcyIsICJ0cnVzdGVkVHlwZXMiLCAicG9saWN5IiwgImNyZWF0ZVBvbGljeSIsICJjcmVhdGVIVE1MIiwgInMiLCAiYm91bmRBdHRyaWJ1dGVTdWZmaXgiLCAibWFya2VyIiwgIk1hdGgiLCAicmFuZG9tIiwgInRvRml4ZWQiLCAic2xpY2UiLCAibWFya2VyTWF0Y2giLCAibm9kZU1hcmtlciIsICJkIiwgImRvY3VtZW50IiwgImNyZWF0ZU1hcmtlciIsICJjcmVhdGVDb21tZW50IiwgImlzUHJpbWl0aXZlIiwgInZhbHVlIiwgImlzQXJyYXkiLCAiQXJyYXkiLCAiaXNJdGVyYWJsZSIsICJTeW1ib2wiLCAiaXRlcmF0b3IiLCAiU1BBQ0VfQ0hBUiIsICJ0ZXh0RW5kUmVnZXgiLCAiY29tbWVudEVuZFJlZ2V4IiwgImNvbW1lbnQyRW5kUmVnZXgiLCAidGFnRW5kUmVnZXgiLCAiUmVnRXhwIiwgInNpbmdsZVF1b3RlQXR0ckVuZFJlZ2V4IiwgImRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4IiwgInJhd1RleHRFbGVtZW50IiwgInRhZyIsICJ0eXBlIiwgInN0cmluZ3MiLCAidmFsdWVzIiwgIl8kbGl0VHlwZSQiLCAiaHRtbCIsICJzdmciLCAibWF0aG1sIiwgIm5vQ2hhbmdlIiwgImZvciIsICJub3RoaW5nIiwgInRlbXBsYXRlQ2FjaGUiLCAiV2Vha01hcCIsICJ3YWxrZXIiLCAiY3JlYXRlVHJlZVdhbGtlciIsICJ0cnVzdEZyb21UZW1wbGF0ZVN0cmluZyIsICJ0c2EiLCAic3RyaW5nRnJvbVRTQSIsICJoYXNPd25Qcm9wZXJ0eSIsICJFcnJvciIsICJnZXRUZW1wbGF0ZUh0bWwiLCAibCIsICJsZW5ndGgiLCAiYXR0ck5hbWVzIiwgInJhd1RleHRFbmRSZWdleCIsICJyZWdleCIsICJpIiwgImF0dHJOYW1lIiwgIm1hdGNoIiwgImF0dHJOYW1lRW5kSW5kZXgiLCAibGFzdEluZGV4IiwgImV4ZWMiLCAidGVzdCIsICJlbmQiLCAic3RhcnRzV2l0aCIsICJwdXNoIiwgIlRlbXBsYXRlIiwgImNvbnN0cnVjdG9yIiwgIm9wdGlvbnMiLCAibm9kZSIsICJ0aGlzIiwgInBhcnRzIiwgIm5vZGVJbmRleCIsICJhdHRyTmFtZUluZGV4IiwgInBhcnRDb3VudCIsICJlbCIsICJjcmVhdGVFbGVtZW50IiwgImN1cnJlbnROb2RlIiwgImNvbnRlbnQiLCAid3JhcHBlciIsICJmaXJzdENoaWxkIiwgInJlcGxhY2VXaXRoIiwgImNoaWxkTm9kZXMiLCAibmV4dE5vZGUiLCAibm9kZVR5cGUiLCAiaGFzQXR0cmlidXRlcyIsICJuYW1lIiwgImdldEF0dHJpYnV0ZU5hbWVzIiwgImVuZHNXaXRoIiwgInJlYWxOYW1lIiwgInN0YXRpY3MiLCAiZ2V0QXR0cmlidXRlIiwgInNwbGl0IiwgIm0iLCAiaW5kZXgiLCAiY3RvciIsICJQcm9wZXJ0eVBhcnQiLCAiQm9vbGVhbkF0dHJpYnV0ZVBhcnQiLCAiRXZlbnRQYXJ0IiwgIkF0dHJpYnV0ZVBhcnQiLCAicmVtb3ZlQXR0cmlidXRlIiwgInRhZ05hbWUiLCAidGV4dENvbnRlbnQiLCAiZW1wdHlTY3JpcHQiLCAiYXBwZW5kIiwgImRhdGEiLCAiaW5kZXhPZiIsICJfb3B0aW9ucyIsICJpbm5lckhUTUwiLCAicmVzb2x2ZURpcmVjdGl2ZSIsICJwYXJ0IiwgInBhcmVudCIsICJhdHRyaWJ1dGVJbmRleCIsICJjdXJyZW50RGlyZWN0aXZlIiwgIl9fZGlyZWN0aXZlcyIsICJfX2RpcmVjdGl2ZSIsICJuZXh0RGlyZWN0aXZlQ29uc3RydWN0b3IiLCAiXyRpbml0aWFsaXplIiwgIl8kcmVzb2x2ZSIsICJUZW1wbGF0ZUluc3RhbmNlIiwgInRlbXBsYXRlIiwgIl8kcGFydHMiLCAiXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuIiwgIl8kdGVtcGxhdGUiLCAiXyRwYXJlbnQiLCAicGFyZW50Tm9kZSIsICJfJGlzQ29ubmVjdGVkIiwgImZyYWdtZW50IiwgImNyZWF0aW9uU2NvcGUiLCAiaW1wb3J0Tm9kZSIsICJwYXJ0SW5kZXgiLCAidGVtcGxhdGVQYXJ0IiwgIkNoaWxkUGFydCIsICJuZXh0U2libGluZyIsICJFbGVtZW50UGFydCIsICJfJHNldFZhbHVlIiwgIl9faXNDb25uZWN0ZWQiLCAic3RhcnROb2RlIiwgImVuZE5vZGUiLCAiXyRjb21taXR0ZWRWYWx1ZSIsICJfJHN0YXJ0Tm9kZSIsICJfJGVuZE5vZGUiLCAiaXNDb25uZWN0ZWQiLCAiZGlyZWN0aXZlUGFyZW50IiwgIl8kY2xlYXIiLCAiX2NvbW1pdFRleHQiLCAiX2NvbW1pdFRlbXBsYXRlUmVzdWx0IiwgIl9jb21taXROb2RlIiwgIl9jb21taXRJdGVyYWJsZSIsICJpbnNlcnRCZWZvcmUiLCAiX2luc2VydCIsICJjcmVhdGVUZXh0Tm9kZSIsICJyZXN1bHQiLCAiXyRnZXRUZW1wbGF0ZSIsICJoIiwgIl91cGRhdGUiLCAiaW5zdGFuY2UiLCAiX2Nsb25lIiwgImdldCIsICJzZXQiLCAiaXRlbVBhcnRzIiwgIml0ZW1QYXJ0IiwgIml0ZW0iLCAic3RhcnQiLCAiZnJvbSIsICJfJG5vdGlmeUNvbm5lY3Rpb25DaGFuZ2VkIiwgIm4iLCAicmVtb3ZlIiwgImVsZW1lbnQiLCAiZmlsbCIsICJTdHJpbmciLCAidmFsdWVJbmRleCIsICJub0NvbW1pdCIsICJjaGFuZ2UiLCAidiIsICJfY29tbWl0VmFsdWUiLCAic2V0QXR0cmlidXRlIiwgInRvZ2dsZUF0dHJpYnV0ZSIsICJzdXBlciIsICJuZXdMaXN0ZW5lciIsICJvbGRMaXN0ZW5lciIsICJzaG91bGRSZW1vdmVMaXN0ZW5lciIsICJjYXB0dXJlIiwgIm9uY2UiLCAicGFzc2l2ZSIsICJzaG91bGRBZGRMaXN0ZW5lciIsICJyZW1vdmVFdmVudExpc3RlbmVyIiwgImFkZEV2ZW50TGlzdGVuZXIiLCAiZXZlbnQiLCAiY2FsbCIsICJob3N0IiwgImhhbmRsZUV2ZW50IiwgIl8kTEgiLCAiX2JvdW5kQXR0cmlidXRlU3VmZml4IiwgIl9tYXJrZXIiLCAiX21hcmtlck1hdGNoIiwgIl9IVE1MX1JFU1VMVCIsICJfZ2V0VGVtcGxhdGVIdG1sIiwgIl9UZW1wbGF0ZUluc3RhbmNlIiwgIl9pc0l0ZXJhYmxlIiwgIl9yZXNvbHZlRGlyZWN0aXZlIiwgIl9DaGlsZFBhcnQiLCAiX0F0dHJpYnV0ZVBhcnQiLCAiX0Jvb2xlYW5BdHRyaWJ1dGVQYXJ0IiwgIl9FdmVudFBhcnQiLCAiX1Byb3BlcnR5UGFydCIsICJfRWxlbWVudFBhcnQiLCAicG9seWZpbGxTdXBwb3J0IiwgImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCAibGl0SHRtbFZlcnNpb25zIiwgInJlbmRlciIsICJjb250YWluZXIiLCAicGFydE93bmVyTm9kZSIsICJyZW5kZXJCZWZvcmUiLCAidCIsICJlcnJvciIsICJleHBsYW5NYWluIiwgImUiLCAiXyIsICJ1bmRvIiwgImV4cGxhbk1haW4iLCAiaSIsICJqIiwgImUiLCAiaSIsICJlIiwgImkiLCAiaiIsICJlIiwgInYiLCAiZXhwbGFuTWFpbiIsICJleHBsYW5NYWluIiwgImV4cGxhbk1haW4iLCAiZXhwbGFuTWFpbiIsICJleHBsYW5NYWluIiwgImV4cGxhbk1haW4iLCAiZXhwbGFuTWFpbiIsICJleHBsYW5NYWluIiwgImV4cGxhbk1haW4iLCAiZXhwbGFuTWFpbiIsICJ1bmRvIiwgImUiLCAiZXhwbGFuTWFpbiIsICJlIiwgImIiLCAicCIsICJleHBsYW5NYWluIiwgImUiLCAiZCIsICJzIiwgInAiLCAiZyIsICJfIiwgImkiLCAiZSIsICJvayIsICJ0IiwgImUiLCAiZyIsICJpIiwgImMiLCAiYyIsICJpIiwgInIiLCAiZSIsICJ0b0pTT04iLCAiZnJvbUpTT04iLCAidCIsICJmcm9tSlNPTiIsICJ0b0pTT04iLCAicyIsICJzIiwgInMiLCAidCIsICJkIiwgImV4cGxhbk1haW4iLCAiZSIsICJQYXJ0VHlwZSIsICJBVFRSSUJVVEUiLCAiQ0hJTEQiLCAiUFJPUEVSVFkiLCAiQk9PTEVBTl9BVFRSSUJVVEUiLCAiRVZFTlQiLCAiRUxFTUVOVCIsICJkaXJlY3RpdmUiLCAiYyIsICJ2YWx1ZXMiLCAiXyRsaXREaXJlY3RpdmUkIiwgIkRpcmVjdGl2ZSIsICJfcGFydEluZm8iLCAiXyRpc0Nvbm5lY3RlZCIsICJ0aGlzIiwgIl8kcGFyZW50IiwgInBhcnQiLCAicGFyZW50IiwgImF0dHJpYnV0ZUluZGV4IiwgIl9fcGFydCIsICJfX2F0dHJpYnV0ZUluZGV4IiwgInByb3BzIiwgInVwZGF0ZSIsICJfcGFydCIsICJyZW5kZXIiLCAiX0NoaWxkUGFydCIsICJDaGlsZFBhcnQiLCAiXyRMSCIsICJpc1NpbmdsZUV4cHJlc3Npb24iLCAicGFydCIsICJzdHJpbmdzIiwgIlJFU0VUX1ZBTFVFIiwgInNldENvbW1pdHRlZFZhbHVlIiwgInBhcnQiLCAidmFsdWUiLCAiXyRjb21taXR0ZWRWYWx1ZSIsICJsaXZlIiwgImRpcmVjdGl2ZSIsICJEaXJlY3RpdmUiLCAicGFydEluZm8iLCAic3VwZXIiLCAidHlwZSIsICJQYXJ0VHlwZSIsICJQUk9QRVJUWSIsICJBVFRSSUJVVEUiLCAiQk9PTEVBTl9BVFRSSUJVVEUiLCAiRXJyb3IiLCAiaXNTaW5nbGVFeHByZXNzaW9uIiwgInZhbHVlIiwgInBhcnQiLCAibm9DaGFuZ2UiLCAibm90aGluZyIsICJlbGVtZW50IiwgIm5hbWUiLCAiaGFzQXR0cmlidXRlIiwgImdldEF0dHJpYnV0ZSIsICJTdHJpbmciLCAic2V0Q29tbWl0dGVkVmFsdWUiLCAidiIsICJsIiwgImUiLCAiZXhwbGFuTWFpbiIsICJlIiwgImwiLCAidCIsICJkdXAiLCAiZnJvbUpTT04iLCAidG9KU09OIiwgInMiLCAidiIsICJleHBsYW5NYWluIiwgImUiLCAibCIsICJ4IiwgInMiLCAicHJlY2lzaW9uIiwgIngiLCAicyIsICJwcmVjaXNpb24iLCAieCIsICJzIiwgImV4cGxhbk1haW4iLCAiYSIsICJiIiwgImwiLCAiZSIsICJleHBsYW5NYWluIiwgImciLCAiZiIsICJlIiwgIl8iLCAiZSIsICJhIiwgImIiLCAiaSIsICJlIiwgImV4cGxhbk1haW4iLCAiYSIsICJiIiwgImEiLCAiYiIsICJjIiwgInAiLCAicCIsICJfIiwgImUiLCAibCIsICJlIiwgIm4iLCAiaSIsICJ0IiwgImEiLCAiYiIsICJhIiwgImIiLCAiZSIsICJfIiwgIngiLCAiaSIsICJ0ZW1wbGF0ZSIsICJlIiwgInQiLCAiZnV6enlzb3J0IiwgInYiLCAieCIsICJ5IiwgInAiLCAiZGlmZmVyZW5jZSIsICJlIiwgImUiLCAiZSIsICJ4IiwgImZyb21GaWx0ZXJlZEluZGV4VG9PcmlnaW5hbEluZGV4IiwgIm4iLCAieSIsICJ4IiwgImEiLCAiYiIsICJwIiwgIl8iLCAiZGlmZmVyZW5jZSIsICJlIiwgImNvcm5lcnMiLCAicm93IiwgInJuZEludCIsICJuIiwgImkiLCAiaSIsICJjIiwgImoiLCAieCIsICJjIiwgImUiLCAiaSIsICJqIiwgInAiLCAidiIsICJyZXQiLCAidCIsICJleHBsYW5NYWluIl0KfQo=
